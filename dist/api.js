"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 * This is a REST API through which clients can interact with System - an **open**, **collaborative**, and **ever-growing knowledge base** of all the world\'s systems.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariablesApi = exports.VariablesApiFactory = exports.VariablesApiFp = exports.VariablesApiAxiosParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.TimelineApi = exports.TimelineApiFactory = exports.TimelineApiFp = exports.TimelineApiAxiosParamCreator = exports.SystemApi = exports.SystemApiFactory = exports.SystemApiFp = exports.SystemApiAxiosParamCreator = exports.StudiesApi = exports.StudiesApiFactory = exports.StudiesApiFp = exports.StudiesApiAxiosParamCreator = exports.PopulationAttributesApi = exports.PopulationAttributesApiFactory = exports.PopulationAttributesApiFp = exports.PopulationAttributesApiAxiosParamCreator = exports.PopulationAttributeValuesApi = exports.PopulationAttributeValuesApiFactory = exports.PopulationAttributeValuesApiFp = exports.PopulationAttributeValuesApiAxiosParamCreator = exports.ModelsApi = exports.ModelsApiFactory = exports.ModelsApiFp = exports.ModelsApiAxiosParamCreator = exports.FeaturesApi = exports.FeaturesApiFactory = exports.FeaturesApiFp = exports.FeaturesApiAxiosParamCreator = exports.EnterpriseApi = exports.EnterpriseApiFactory = exports.EnterpriseApiFp = exports.EnterpriseApiAxiosParamCreator = exports.DatasetsApi = exports.DatasetsApiFactory = exports.DatasetsApiFp = exports.DatasetsApiAxiosParamCreator = exports.ConceptsApi = exports.ConceptsApiFactory = exports.ConceptsApiFp = exports.ConceptsApiAxiosParamCreator = exports.AuthorsApi = exports.AuthorsApiFactory = exports.AuthorsApiFp = exports.AuthorsApiAxiosParamCreator = exports.AssociationsApi = exports.AssociationsApiFactory = exports.AssociationsApiFp = exports.AssociationsApiAxiosParamCreator = exports.VariableTypeTypeEnum = exports.VariableOutPermissionsEnum = exports.TestDatasetTransformationTypeEnum = exports.TableStatusEnum = exports.StudyOutStudyTypeEnum = exports.StudyOutPermissionsEnum = exports.SignificanceValueInGeneratedByEnum = exports.ResourceCollectionElementTypeEnum = exports.PopulationAttributeOutAttributeTypeEnum = exports.PopulationAttributeOutPermissionsEnum = exports.PopulationAttributeInAttributeTypeEnum = exports.PatchVariableOpOpEnum = exports.PatchStudyOpOpEnum = exports.PatchModelOpOpEnum = exports.PatchFeatureOpOpEnum = exports.PatchDatasetOpOpEnum = exports.PartialDependencePlotInGeneratedByEnum = exports.NumberRangeOutAttributeTypeEnum = exports.NumberRangeOutPermissionsEnum = exports.NullHypothesisInLevelEnum = exports.NullHypothesisInTestTypeEnum = exports.ModelPerformanceOutScoreTypeEnum = exports.ModelPerformanceOutGeneratedByEnum = exports.ModelPerformanceInScoreTypeEnum = exports.ModelPerformanceInGeneratedByEnum = exports.ModelPerformanceBaseInScoreTypeEnum = exports.ModelPerformanceBaseInGeneratedByEnum = exports.ModelOutPermissionsEnum = exports.LocationOutAttributeTypeEnum = exports.LocationOutPermissionsEnum = exports.IntegrationCreateServiceTypeEnum = exports.IntegrationPermissionsEnum = exports.IntegrationServiceTypeEnum = exports.FreeTextOutAttributeTypeEnum = exports.FreeTextOutPermissionsEnum = exports.FeatureStatisticsGeneratedByEnum = exports.FeatureStatisticsFeatureTypeEnum = exports.FeatureOutPermissionsEnum = exports.EnterprisePermissionsEnum = exports.DeploymentStageEnum = exports.DateRangeOutAttributeTypeEnum = exports.DateRangeOutPermissionsEnum = exports.DatasetOutLicenseEnum = exports.DatasetOutPermissionsEnum = exports.DatasetInLicenseEnum = exports.ConfidenceIntervalInLevelEnum = exports.ConceptOutPermissionsEnum = exports.CategoryOutAttributeTypeEnum = exports.CategoryOutPermissionsEnum = exports.BulkPatchFeatureOpOpEnum = exports.BulkPatchAssociationOpOpEnum = exports.AuthorOutPermissionsEnum = exports.AssociationValueOutFeatureContributionMethodEnum = exports.AssociationValueOutGeneratedByEnum = exports.AssociationValueOutPermutationScoreTypeEnum = exports.AssociationValueInBaseFeatureContributionMethodEnum = exports.AssociationValueInBaseGeneratedByEnum = exports.AssociationValueInBasePermutationScoreTypeEnum = exports.AssociationValueInFeatureContributionMethodEnum = exports.AssociationValueInGeneratedByEnum = exports.AssociationValueInPermutationScoreTypeEnum = exports.AssociationOutPermissionsEnum = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var AssociationOutPermissionsEnum;
(function (AssociationOutPermissionsEnum) {
    AssociationOutPermissionsEnum["Create"] = "create";
    AssociationOutPermissionsEnum["View"] = "view";
    AssociationOutPermissionsEnum["Edit"] = "edit";
    AssociationOutPermissionsEnum["Delete"] = "delete";
})(AssociationOutPermissionsEnum = exports.AssociationOutPermissionsEnum || (exports.AssociationOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AssociationValueInPermutationScoreTypeEnum;
(function (AssociationValueInPermutationScoreTypeEnum) {
    AssociationValueInPermutationScoreTypeEnum["AccuracyScore"] = "accuracy_score";
    AssociationValueInPermutationScoreTypeEnum["AveragePrecisionScore"] = "average_precision_score";
    AssociationValueInPermutationScoreTypeEnum["BalancedAccuracyScore"] = "balanced_accuracy_score";
    AssociationValueInPermutationScoreTypeEnum["BrierScoreLoss"] = "brier_score_loss";
    AssociationValueInPermutationScoreTypeEnum["CohenKappaScore"] = "cohen_kappa_score";
    AssociationValueInPermutationScoreTypeEnum["F1Score"] = "f1_score";
    AssociationValueInPermutationScoreTypeEnum["HammingLoss"] = "hamming_loss";
    AssociationValueInPermutationScoreTypeEnum["HingeLoss"] = "hinge_loss";
    AssociationValueInPermutationScoreTypeEnum["JaccardScore"] = "jaccard_score";
    AssociationValueInPermutationScoreTypeEnum["LogLoss"] = "log_loss";
    AssociationValueInPermutationScoreTypeEnum["MatthewsCorrCoef"] = "matthews_corr_coef";
    AssociationValueInPermutationScoreTypeEnum["PrecisionScore"] = "precision_score";
    AssociationValueInPermutationScoreTypeEnum["RecallScore"] = "recall_score";
    AssociationValueInPermutationScoreTypeEnum["RocAucScore"] = "roc_auc_score";
    AssociationValueInPermutationScoreTypeEnum["ZeroOneLoss"] = "zero_one_loss";
    AssociationValueInPermutationScoreTypeEnum["ExplainedVarianceScore"] = "explained_variance_score";
    AssociationValueInPermutationScoreTypeEnum["MaxError"] = "max_error";
    AssociationValueInPermutationScoreTypeEnum["MeanAbsoluteError"] = "mean_absolute_error";
    AssociationValueInPermutationScoreTypeEnum["MeanAbsolutePercentageError"] = "mean_absolute_percentage_error";
    AssociationValueInPermutationScoreTypeEnum["MeanSquaredError"] = "mean_squared_error";
    AssociationValueInPermutationScoreTypeEnum["MeanSquaredLogError"] = "mean_squared_log_error";
    AssociationValueInPermutationScoreTypeEnum["MedianAbsoluteError"] = "median_absolute_error";
    AssociationValueInPermutationScoreTypeEnum["R2Score"] = "r2_score";
    AssociationValueInPermutationScoreTypeEnum["CoverageError"] = "coverage_error";
    AssociationValueInPermutationScoreTypeEnum["LabelRankingAveragePrecisionScore"] = "label_ranking_average_precision_score";
    AssociationValueInPermutationScoreTypeEnum["LabelRankingLoss"] = "label_ranking_loss";
    AssociationValueInPermutationScoreTypeEnum["AdjustedR2Score"] = "adjusted_r2_score";
    AssociationValueInPermutationScoreTypeEnum["MutualInformationScore"] = "mutual_information_score";
    AssociationValueInPermutationScoreTypeEnum["AdjMutualInformationScore"] = "adj_mutual_information_score";
    AssociationValueInPermutationScoreTypeEnum["NormalizedMutualInformationScore"] = "normalized_mutual_information_score";
    AssociationValueInPermutationScoreTypeEnum["AdjRandScore"] = "adj_rand_score";
    AssociationValueInPermutationScoreTypeEnum["CompletenessScore"] = "completeness_score";
    AssociationValueInPermutationScoreTypeEnum["FowlkesMallowsScore"] = "fowlkes_mallows_score";
    AssociationValueInPermutationScoreTypeEnum["HomogeneityScore"] = "homogeneity_score";
    AssociationValueInPermutationScoreTypeEnum["VMeasureScore"] = "v_measure_score";
    AssociationValueInPermutationScoreTypeEnum["NegMeanAbsoluteError"] = "neg_mean_absolute_error";
    AssociationValueInPermutationScoreTypeEnum["NegMeanSquaredError"] = "neg_mean_squared_error";
    AssociationValueInPermutationScoreTypeEnum["RootMeanSquaredError"] = "root_mean_squared_error";
    AssociationValueInPermutationScoreTypeEnum["NegRootMeanSquaredError"] = "neg_root_mean_squared_error";
    AssociationValueInPermutationScoreTypeEnum["RootMeanSquaredLogError"] = "root_mean_squared_log_error";
    AssociationValueInPermutationScoreTypeEnum["NegMedianAbsoluteError"] = "neg_median_absolute_error";
    AssociationValueInPermutationScoreTypeEnum["CosineProximity"] = "cosine_proximity";
    AssociationValueInPermutationScoreTypeEnum["KullbackLeiblerDivergence"] = "kullback_leibler_divergence";
    AssociationValueInPermutationScoreTypeEnum["PoissonMetric"] = "poisson_metric";
    AssociationValueInPermutationScoreTypeEnum["MulticlassLogLoss"] = "multiclass_log_loss";
    AssociationValueInPermutationScoreTypeEnum["NormalizedDiscountedCumulativeGain"] = "normalized_discounted_cumulative_gain";
    AssociationValueInPermutationScoreTypeEnum["GammaDeviance"] = "gamma_deviance";
    AssociationValueInPermutationScoreTypeEnum["HuberMetric"] = "huber_metric";
    AssociationValueInPermutationScoreTypeEnum["FBetaScore"] = "f_beta_score";
    AssociationValueInPermutationScoreTypeEnum["EuclideanDistance"] = "euclidean_distance";
    AssociationValueInPermutationScoreTypeEnum["HaversineDistance"] = "haversine_distance";
    AssociationValueInPermutationScoreTypeEnum["MeanSquaredPredictioneRror"] = "mean_squared_predictione_rror";
    AssociationValueInPermutationScoreTypeEnum["PseudoR2Mcfadden"] = "pseudo_r2_mcfadden";
    AssociationValueInPermutationScoreTypeEnum["AdjustedPseudoR2Mcfadden"] = "adjusted_pseudo_r2_mcfadden";
    AssociationValueInPermutationScoreTypeEnum["PseudoR2Nagelkerke"] = "pseudo_r2_nagelkerke";
    AssociationValueInPermutationScoreTypeEnum["PseudoR2CoxSnell"] = "pseudo_r2_cox_snell";
    AssociationValueInPermutationScoreTypeEnum["PseudoR2Effron"] = "pseudo_r2_effron";
    AssociationValueInPermutationScoreTypeEnum["Bic"] = "bic";
    AssociationValueInPermutationScoreTypeEnum["Aic"] = "aic";
    AssociationValueInPermutationScoreTypeEnum["CorrelationActualForecast"] = "correlation_actual_forecast";
    AssociationValueInPermutationScoreTypeEnum["ForecastVsActual"] = "forecast_vs_actual";
    AssociationValueInPermutationScoreTypeEnum["ConfusionMatrix"] = "confusion_matrix";
    AssociationValueInPermutationScoreTypeEnum["MulticlassConfusionMatrix"] = "multiclass_confusion_matrix";
    AssociationValueInPermutationScoreTypeEnum["RocCurve"] = "roc_curve";
})(AssociationValueInPermutationScoreTypeEnum = exports.AssociationValueInPermutationScoreTypeEnum || (exports.AssociationValueInPermutationScoreTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AssociationValueInGeneratedByEnum;
(function (AssociationValueInGeneratedByEnum) {
    AssociationValueInGeneratedByEnum["LocalEvaluator"] = "local_evaluator";
    AssociationValueInGeneratedByEnum["RemoteEvaluator"] = "remote_evaluator";
    AssociationValueInGeneratedByEnum["User"] = "user";
})(AssociationValueInGeneratedByEnum = exports.AssociationValueInGeneratedByEnum || (exports.AssociationValueInGeneratedByEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AssociationValueInFeatureContributionMethodEnum;
(function (AssociationValueInFeatureContributionMethodEnum) {
    AssociationValueInFeatureContributionMethodEnum["Gini"] = "gini";
    AssociationValueInFeatureContributionMethodEnum["Gain"] = "gain";
    AssociationValueInFeatureContributionMethodEnum["Shap"] = "shap";
    AssociationValueInFeatureContributionMethodEnum["Coefficient"] = "coefficient";
    AssociationValueInFeatureContributionMethodEnum["Lime"] = "lime";
    AssociationValueInFeatureContributionMethodEnum["Permutation"] = "permutation";
    AssociationValueInFeatureContributionMethodEnum["PearsonR"] = "pearson_r";
    AssociationValueInFeatureContributionMethodEnum["KendallTau"] = "kendall_tau";
    AssociationValueInFeatureContributionMethodEnum["CramerV"] = "cramer_v";
    AssociationValueInFeatureContributionMethodEnum["KruskalWallisHTest"] = "kruskal_wallis_h_test";
    AssociationValueInFeatureContributionMethodEnum["ControlVariable"] = "control_variable";
    AssociationValueInFeatureContributionMethodEnum["ProductMomentR"] = "product_moment_r";
    AssociationValueInFeatureContributionMethodEnum["FrequencyScore"] = "frequency_score";
    AssociationValueInFeatureContributionMethodEnum["OddsRatio"] = "odds_ratio";
    AssociationValueInFeatureContributionMethodEnum["RelativeRiskRatio"] = "relative_risk_ratio";
    AssociationValueInFeatureContributionMethodEnum["HazardRatio"] = "hazard_ratio";
    AssociationValueInFeatureContributionMethodEnum["MeanGainUnstandardized"] = "mean_gain_unstandardized";
    AssociationValueInFeatureContributionMethodEnum["MeanGainStandardized"] = "mean_gain_standardized";
    AssociationValueInFeatureContributionMethodEnum["MeanDifferenceUnstandardized"] = "mean_difference_unstandardized";
    AssociationValueInFeatureContributionMethodEnum["MeanDifferenceStandardized"] = "mean_difference_standardized";
    AssociationValueInFeatureContributionMethodEnum["ProportionDifference"] = "proportion_difference";
    AssociationValueInFeatureContributionMethodEnum["LogOddsRatio"] = "log_odds_ratio";
    AssociationValueInFeatureContributionMethodEnum["PearsonChiSquaredTest"] = "pearson_chi_squared_test";
    AssociationValueInFeatureContributionMethodEnum["Forecast"] = "forecast";
})(AssociationValueInFeatureContributionMethodEnum = exports.AssociationValueInFeatureContributionMethodEnum || (exports.AssociationValueInFeatureContributionMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AssociationValueInBasePermutationScoreTypeEnum;
(function (AssociationValueInBasePermutationScoreTypeEnum) {
    AssociationValueInBasePermutationScoreTypeEnum["AccuracyScore"] = "accuracy_score";
    AssociationValueInBasePermutationScoreTypeEnum["AveragePrecisionScore"] = "average_precision_score";
    AssociationValueInBasePermutationScoreTypeEnum["BalancedAccuracyScore"] = "balanced_accuracy_score";
    AssociationValueInBasePermutationScoreTypeEnum["BrierScoreLoss"] = "brier_score_loss";
    AssociationValueInBasePermutationScoreTypeEnum["CohenKappaScore"] = "cohen_kappa_score";
    AssociationValueInBasePermutationScoreTypeEnum["F1Score"] = "f1_score";
    AssociationValueInBasePermutationScoreTypeEnum["HammingLoss"] = "hamming_loss";
    AssociationValueInBasePermutationScoreTypeEnum["HingeLoss"] = "hinge_loss";
    AssociationValueInBasePermutationScoreTypeEnum["JaccardScore"] = "jaccard_score";
    AssociationValueInBasePermutationScoreTypeEnum["LogLoss"] = "log_loss";
    AssociationValueInBasePermutationScoreTypeEnum["MatthewsCorrCoef"] = "matthews_corr_coef";
    AssociationValueInBasePermutationScoreTypeEnum["PrecisionScore"] = "precision_score";
    AssociationValueInBasePermutationScoreTypeEnum["RecallScore"] = "recall_score";
    AssociationValueInBasePermutationScoreTypeEnum["RocAucScore"] = "roc_auc_score";
    AssociationValueInBasePermutationScoreTypeEnum["ZeroOneLoss"] = "zero_one_loss";
    AssociationValueInBasePermutationScoreTypeEnum["ExplainedVarianceScore"] = "explained_variance_score";
    AssociationValueInBasePermutationScoreTypeEnum["MaxError"] = "max_error";
    AssociationValueInBasePermutationScoreTypeEnum["MeanAbsoluteError"] = "mean_absolute_error";
    AssociationValueInBasePermutationScoreTypeEnum["MeanAbsolutePercentageError"] = "mean_absolute_percentage_error";
    AssociationValueInBasePermutationScoreTypeEnum["MeanSquaredError"] = "mean_squared_error";
    AssociationValueInBasePermutationScoreTypeEnum["MeanSquaredLogError"] = "mean_squared_log_error";
    AssociationValueInBasePermutationScoreTypeEnum["MedianAbsoluteError"] = "median_absolute_error";
    AssociationValueInBasePermutationScoreTypeEnum["R2Score"] = "r2_score";
    AssociationValueInBasePermutationScoreTypeEnum["CoverageError"] = "coverage_error";
    AssociationValueInBasePermutationScoreTypeEnum["LabelRankingAveragePrecisionScore"] = "label_ranking_average_precision_score";
    AssociationValueInBasePermutationScoreTypeEnum["LabelRankingLoss"] = "label_ranking_loss";
    AssociationValueInBasePermutationScoreTypeEnum["AdjustedR2Score"] = "adjusted_r2_score";
    AssociationValueInBasePermutationScoreTypeEnum["MutualInformationScore"] = "mutual_information_score";
    AssociationValueInBasePermutationScoreTypeEnum["AdjMutualInformationScore"] = "adj_mutual_information_score";
    AssociationValueInBasePermutationScoreTypeEnum["NormalizedMutualInformationScore"] = "normalized_mutual_information_score";
    AssociationValueInBasePermutationScoreTypeEnum["AdjRandScore"] = "adj_rand_score";
    AssociationValueInBasePermutationScoreTypeEnum["CompletenessScore"] = "completeness_score";
    AssociationValueInBasePermutationScoreTypeEnum["FowlkesMallowsScore"] = "fowlkes_mallows_score";
    AssociationValueInBasePermutationScoreTypeEnum["HomogeneityScore"] = "homogeneity_score";
    AssociationValueInBasePermutationScoreTypeEnum["VMeasureScore"] = "v_measure_score";
    AssociationValueInBasePermutationScoreTypeEnum["NegMeanAbsoluteError"] = "neg_mean_absolute_error";
    AssociationValueInBasePermutationScoreTypeEnum["NegMeanSquaredError"] = "neg_mean_squared_error";
    AssociationValueInBasePermutationScoreTypeEnum["RootMeanSquaredError"] = "root_mean_squared_error";
    AssociationValueInBasePermutationScoreTypeEnum["NegRootMeanSquaredError"] = "neg_root_mean_squared_error";
    AssociationValueInBasePermutationScoreTypeEnum["RootMeanSquaredLogError"] = "root_mean_squared_log_error";
    AssociationValueInBasePermutationScoreTypeEnum["NegMedianAbsoluteError"] = "neg_median_absolute_error";
    AssociationValueInBasePermutationScoreTypeEnum["CosineProximity"] = "cosine_proximity";
    AssociationValueInBasePermutationScoreTypeEnum["KullbackLeiblerDivergence"] = "kullback_leibler_divergence";
    AssociationValueInBasePermutationScoreTypeEnum["PoissonMetric"] = "poisson_metric";
    AssociationValueInBasePermutationScoreTypeEnum["MulticlassLogLoss"] = "multiclass_log_loss";
    AssociationValueInBasePermutationScoreTypeEnum["NormalizedDiscountedCumulativeGain"] = "normalized_discounted_cumulative_gain";
    AssociationValueInBasePermutationScoreTypeEnum["GammaDeviance"] = "gamma_deviance";
    AssociationValueInBasePermutationScoreTypeEnum["HuberMetric"] = "huber_metric";
    AssociationValueInBasePermutationScoreTypeEnum["FBetaScore"] = "f_beta_score";
    AssociationValueInBasePermutationScoreTypeEnum["EuclideanDistance"] = "euclidean_distance";
    AssociationValueInBasePermutationScoreTypeEnum["HaversineDistance"] = "haversine_distance";
    AssociationValueInBasePermutationScoreTypeEnum["MeanSquaredPredictioneRror"] = "mean_squared_predictione_rror";
    AssociationValueInBasePermutationScoreTypeEnum["PseudoR2Mcfadden"] = "pseudo_r2_mcfadden";
    AssociationValueInBasePermutationScoreTypeEnum["AdjustedPseudoR2Mcfadden"] = "adjusted_pseudo_r2_mcfadden";
    AssociationValueInBasePermutationScoreTypeEnum["PseudoR2Nagelkerke"] = "pseudo_r2_nagelkerke";
    AssociationValueInBasePermutationScoreTypeEnum["PseudoR2CoxSnell"] = "pseudo_r2_cox_snell";
    AssociationValueInBasePermutationScoreTypeEnum["PseudoR2Effron"] = "pseudo_r2_effron";
    AssociationValueInBasePermutationScoreTypeEnum["Bic"] = "bic";
    AssociationValueInBasePermutationScoreTypeEnum["Aic"] = "aic";
    AssociationValueInBasePermutationScoreTypeEnum["CorrelationActualForecast"] = "correlation_actual_forecast";
    AssociationValueInBasePermutationScoreTypeEnum["ForecastVsActual"] = "forecast_vs_actual";
    AssociationValueInBasePermutationScoreTypeEnum["ConfusionMatrix"] = "confusion_matrix";
    AssociationValueInBasePermutationScoreTypeEnum["MulticlassConfusionMatrix"] = "multiclass_confusion_matrix";
    AssociationValueInBasePermutationScoreTypeEnum["RocCurve"] = "roc_curve";
})(AssociationValueInBasePermutationScoreTypeEnum = exports.AssociationValueInBasePermutationScoreTypeEnum || (exports.AssociationValueInBasePermutationScoreTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AssociationValueInBaseGeneratedByEnum;
(function (AssociationValueInBaseGeneratedByEnum) {
    AssociationValueInBaseGeneratedByEnum["LocalEvaluator"] = "local_evaluator";
    AssociationValueInBaseGeneratedByEnum["RemoteEvaluator"] = "remote_evaluator";
    AssociationValueInBaseGeneratedByEnum["User"] = "user";
})(AssociationValueInBaseGeneratedByEnum = exports.AssociationValueInBaseGeneratedByEnum || (exports.AssociationValueInBaseGeneratedByEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AssociationValueInBaseFeatureContributionMethodEnum;
(function (AssociationValueInBaseFeatureContributionMethodEnum) {
    AssociationValueInBaseFeatureContributionMethodEnum["Gini"] = "gini";
    AssociationValueInBaseFeatureContributionMethodEnum["Gain"] = "gain";
    AssociationValueInBaseFeatureContributionMethodEnum["Shap"] = "shap";
    AssociationValueInBaseFeatureContributionMethodEnum["Coefficient"] = "coefficient";
    AssociationValueInBaseFeatureContributionMethodEnum["Lime"] = "lime";
    AssociationValueInBaseFeatureContributionMethodEnum["Permutation"] = "permutation";
    AssociationValueInBaseFeatureContributionMethodEnum["PearsonR"] = "pearson_r";
    AssociationValueInBaseFeatureContributionMethodEnum["KendallTau"] = "kendall_tau";
    AssociationValueInBaseFeatureContributionMethodEnum["CramerV"] = "cramer_v";
    AssociationValueInBaseFeatureContributionMethodEnum["KruskalWallisHTest"] = "kruskal_wallis_h_test";
    AssociationValueInBaseFeatureContributionMethodEnum["ControlVariable"] = "control_variable";
    AssociationValueInBaseFeatureContributionMethodEnum["ProductMomentR"] = "product_moment_r";
    AssociationValueInBaseFeatureContributionMethodEnum["FrequencyScore"] = "frequency_score";
    AssociationValueInBaseFeatureContributionMethodEnum["OddsRatio"] = "odds_ratio";
    AssociationValueInBaseFeatureContributionMethodEnum["RelativeRiskRatio"] = "relative_risk_ratio";
    AssociationValueInBaseFeatureContributionMethodEnum["HazardRatio"] = "hazard_ratio";
    AssociationValueInBaseFeatureContributionMethodEnum["MeanGainUnstandardized"] = "mean_gain_unstandardized";
    AssociationValueInBaseFeatureContributionMethodEnum["MeanGainStandardized"] = "mean_gain_standardized";
    AssociationValueInBaseFeatureContributionMethodEnum["MeanDifferenceUnstandardized"] = "mean_difference_unstandardized";
    AssociationValueInBaseFeatureContributionMethodEnum["MeanDifferenceStandardized"] = "mean_difference_standardized";
    AssociationValueInBaseFeatureContributionMethodEnum["ProportionDifference"] = "proportion_difference";
    AssociationValueInBaseFeatureContributionMethodEnum["LogOddsRatio"] = "log_odds_ratio";
    AssociationValueInBaseFeatureContributionMethodEnum["PearsonChiSquaredTest"] = "pearson_chi_squared_test";
    AssociationValueInBaseFeatureContributionMethodEnum["Forecast"] = "forecast";
})(AssociationValueInBaseFeatureContributionMethodEnum = exports.AssociationValueInBaseFeatureContributionMethodEnum || (exports.AssociationValueInBaseFeatureContributionMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AssociationValueOutPermutationScoreTypeEnum;
(function (AssociationValueOutPermutationScoreTypeEnum) {
    AssociationValueOutPermutationScoreTypeEnum["AccuracyScore"] = "accuracy_score";
    AssociationValueOutPermutationScoreTypeEnum["AveragePrecisionScore"] = "average_precision_score";
    AssociationValueOutPermutationScoreTypeEnum["BalancedAccuracyScore"] = "balanced_accuracy_score";
    AssociationValueOutPermutationScoreTypeEnum["BrierScoreLoss"] = "brier_score_loss";
    AssociationValueOutPermutationScoreTypeEnum["CohenKappaScore"] = "cohen_kappa_score";
    AssociationValueOutPermutationScoreTypeEnum["F1Score"] = "f1_score";
    AssociationValueOutPermutationScoreTypeEnum["HammingLoss"] = "hamming_loss";
    AssociationValueOutPermutationScoreTypeEnum["HingeLoss"] = "hinge_loss";
    AssociationValueOutPermutationScoreTypeEnum["JaccardScore"] = "jaccard_score";
    AssociationValueOutPermutationScoreTypeEnum["LogLoss"] = "log_loss";
    AssociationValueOutPermutationScoreTypeEnum["MatthewsCorrCoef"] = "matthews_corr_coef";
    AssociationValueOutPermutationScoreTypeEnum["PrecisionScore"] = "precision_score";
    AssociationValueOutPermutationScoreTypeEnum["RecallScore"] = "recall_score";
    AssociationValueOutPermutationScoreTypeEnum["RocAucScore"] = "roc_auc_score";
    AssociationValueOutPermutationScoreTypeEnum["ZeroOneLoss"] = "zero_one_loss";
    AssociationValueOutPermutationScoreTypeEnum["ExplainedVarianceScore"] = "explained_variance_score";
    AssociationValueOutPermutationScoreTypeEnum["MaxError"] = "max_error";
    AssociationValueOutPermutationScoreTypeEnum["MeanAbsoluteError"] = "mean_absolute_error";
    AssociationValueOutPermutationScoreTypeEnum["MeanAbsolutePercentageError"] = "mean_absolute_percentage_error";
    AssociationValueOutPermutationScoreTypeEnum["MeanSquaredError"] = "mean_squared_error";
    AssociationValueOutPermutationScoreTypeEnum["MeanSquaredLogError"] = "mean_squared_log_error";
    AssociationValueOutPermutationScoreTypeEnum["MedianAbsoluteError"] = "median_absolute_error";
    AssociationValueOutPermutationScoreTypeEnum["R2Score"] = "r2_score";
    AssociationValueOutPermutationScoreTypeEnum["CoverageError"] = "coverage_error";
    AssociationValueOutPermutationScoreTypeEnum["LabelRankingAveragePrecisionScore"] = "label_ranking_average_precision_score";
    AssociationValueOutPermutationScoreTypeEnum["LabelRankingLoss"] = "label_ranking_loss";
    AssociationValueOutPermutationScoreTypeEnum["AdjustedR2Score"] = "adjusted_r2_score";
    AssociationValueOutPermutationScoreTypeEnum["MutualInformationScore"] = "mutual_information_score";
    AssociationValueOutPermutationScoreTypeEnum["AdjMutualInformationScore"] = "adj_mutual_information_score";
    AssociationValueOutPermutationScoreTypeEnum["NormalizedMutualInformationScore"] = "normalized_mutual_information_score";
    AssociationValueOutPermutationScoreTypeEnum["AdjRandScore"] = "adj_rand_score";
    AssociationValueOutPermutationScoreTypeEnum["CompletenessScore"] = "completeness_score";
    AssociationValueOutPermutationScoreTypeEnum["FowlkesMallowsScore"] = "fowlkes_mallows_score";
    AssociationValueOutPermutationScoreTypeEnum["HomogeneityScore"] = "homogeneity_score";
    AssociationValueOutPermutationScoreTypeEnum["VMeasureScore"] = "v_measure_score";
    AssociationValueOutPermutationScoreTypeEnum["NegMeanAbsoluteError"] = "neg_mean_absolute_error";
    AssociationValueOutPermutationScoreTypeEnum["NegMeanSquaredError"] = "neg_mean_squared_error";
    AssociationValueOutPermutationScoreTypeEnum["RootMeanSquaredError"] = "root_mean_squared_error";
    AssociationValueOutPermutationScoreTypeEnum["NegRootMeanSquaredError"] = "neg_root_mean_squared_error";
    AssociationValueOutPermutationScoreTypeEnum["RootMeanSquaredLogError"] = "root_mean_squared_log_error";
    AssociationValueOutPermutationScoreTypeEnum["NegMedianAbsoluteError"] = "neg_median_absolute_error";
    AssociationValueOutPermutationScoreTypeEnum["CosineProximity"] = "cosine_proximity";
    AssociationValueOutPermutationScoreTypeEnum["KullbackLeiblerDivergence"] = "kullback_leibler_divergence";
    AssociationValueOutPermutationScoreTypeEnum["PoissonMetric"] = "poisson_metric";
    AssociationValueOutPermutationScoreTypeEnum["MulticlassLogLoss"] = "multiclass_log_loss";
    AssociationValueOutPermutationScoreTypeEnum["NormalizedDiscountedCumulativeGain"] = "normalized_discounted_cumulative_gain";
    AssociationValueOutPermutationScoreTypeEnum["GammaDeviance"] = "gamma_deviance";
    AssociationValueOutPermutationScoreTypeEnum["HuberMetric"] = "huber_metric";
    AssociationValueOutPermutationScoreTypeEnum["FBetaScore"] = "f_beta_score";
    AssociationValueOutPermutationScoreTypeEnum["EuclideanDistance"] = "euclidean_distance";
    AssociationValueOutPermutationScoreTypeEnum["HaversineDistance"] = "haversine_distance";
    AssociationValueOutPermutationScoreTypeEnum["MeanSquaredPredictioneRror"] = "mean_squared_predictione_rror";
    AssociationValueOutPermutationScoreTypeEnum["PseudoR2Mcfadden"] = "pseudo_r2_mcfadden";
    AssociationValueOutPermutationScoreTypeEnum["AdjustedPseudoR2Mcfadden"] = "adjusted_pseudo_r2_mcfadden";
    AssociationValueOutPermutationScoreTypeEnum["PseudoR2Nagelkerke"] = "pseudo_r2_nagelkerke";
    AssociationValueOutPermutationScoreTypeEnum["PseudoR2CoxSnell"] = "pseudo_r2_cox_snell";
    AssociationValueOutPermutationScoreTypeEnum["PseudoR2Effron"] = "pseudo_r2_effron";
    AssociationValueOutPermutationScoreTypeEnum["Bic"] = "bic";
    AssociationValueOutPermutationScoreTypeEnum["Aic"] = "aic";
    AssociationValueOutPermutationScoreTypeEnum["CorrelationActualForecast"] = "correlation_actual_forecast";
    AssociationValueOutPermutationScoreTypeEnum["ForecastVsActual"] = "forecast_vs_actual";
    AssociationValueOutPermutationScoreTypeEnum["ConfusionMatrix"] = "confusion_matrix";
    AssociationValueOutPermutationScoreTypeEnum["MulticlassConfusionMatrix"] = "multiclass_confusion_matrix";
    AssociationValueOutPermutationScoreTypeEnum["RocCurve"] = "roc_curve";
})(AssociationValueOutPermutationScoreTypeEnum = exports.AssociationValueOutPermutationScoreTypeEnum || (exports.AssociationValueOutPermutationScoreTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AssociationValueOutGeneratedByEnum;
(function (AssociationValueOutGeneratedByEnum) {
    AssociationValueOutGeneratedByEnum["LocalEvaluator"] = "local_evaluator";
    AssociationValueOutGeneratedByEnum["RemoteEvaluator"] = "remote_evaluator";
    AssociationValueOutGeneratedByEnum["User"] = "user";
})(AssociationValueOutGeneratedByEnum = exports.AssociationValueOutGeneratedByEnum || (exports.AssociationValueOutGeneratedByEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AssociationValueOutFeatureContributionMethodEnum;
(function (AssociationValueOutFeatureContributionMethodEnum) {
    AssociationValueOutFeatureContributionMethodEnum["Gini"] = "gini";
    AssociationValueOutFeatureContributionMethodEnum["Gain"] = "gain";
    AssociationValueOutFeatureContributionMethodEnum["Shap"] = "shap";
    AssociationValueOutFeatureContributionMethodEnum["Coefficient"] = "coefficient";
    AssociationValueOutFeatureContributionMethodEnum["Lime"] = "lime";
    AssociationValueOutFeatureContributionMethodEnum["Permutation"] = "permutation";
    AssociationValueOutFeatureContributionMethodEnum["PearsonR"] = "pearson_r";
    AssociationValueOutFeatureContributionMethodEnum["KendallTau"] = "kendall_tau";
    AssociationValueOutFeatureContributionMethodEnum["CramerV"] = "cramer_v";
    AssociationValueOutFeatureContributionMethodEnum["KruskalWallisHTest"] = "kruskal_wallis_h_test";
    AssociationValueOutFeatureContributionMethodEnum["ControlVariable"] = "control_variable";
    AssociationValueOutFeatureContributionMethodEnum["ProductMomentR"] = "product_moment_r";
    AssociationValueOutFeatureContributionMethodEnum["FrequencyScore"] = "frequency_score";
    AssociationValueOutFeatureContributionMethodEnum["OddsRatio"] = "odds_ratio";
    AssociationValueOutFeatureContributionMethodEnum["RelativeRiskRatio"] = "relative_risk_ratio";
    AssociationValueOutFeatureContributionMethodEnum["HazardRatio"] = "hazard_ratio";
    AssociationValueOutFeatureContributionMethodEnum["MeanGainUnstandardized"] = "mean_gain_unstandardized";
    AssociationValueOutFeatureContributionMethodEnum["MeanGainStandardized"] = "mean_gain_standardized";
    AssociationValueOutFeatureContributionMethodEnum["MeanDifferenceUnstandardized"] = "mean_difference_unstandardized";
    AssociationValueOutFeatureContributionMethodEnum["MeanDifferenceStandardized"] = "mean_difference_standardized";
    AssociationValueOutFeatureContributionMethodEnum["ProportionDifference"] = "proportion_difference";
    AssociationValueOutFeatureContributionMethodEnum["LogOddsRatio"] = "log_odds_ratio";
    AssociationValueOutFeatureContributionMethodEnum["PearsonChiSquaredTest"] = "pearson_chi_squared_test";
    AssociationValueOutFeatureContributionMethodEnum["Forecast"] = "forecast";
    AssociationValueOutFeatureContributionMethodEnum["Invalid"] = "invalid";
})(AssociationValueOutFeatureContributionMethodEnum = exports.AssociationValueOutFeatureContributionMethodEnum || (exports.AssociationValueOutFeatureContributionMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AuthorOutPermissionsEnum;
(function (AuthorOutPermissionsEnum) {
    AuthorOutPermissionsEnum["Create"] = "create";
    AuthorOutPermissionsEnum["View"] = "view";
    AuthorOutPermissionsEnum["Edit"] = "edit";
    AuthorOutPermissionsEnum["Delete"] = "delete";
})(AuthorOutPermissionsEnum = exports.AuthorOutPermissionsEnum || (exports.AuthorOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BulkPatchAssociationOpOpEnum;
(function (BulkPatchAssociationOpOpEnum) {
    BulkPatchAssociationOpOpEnum["Update"] = "update";
    BulkPatchAssociationOpOpEnum["Delete"] = "delete";
})(BulkPatchAssociationOpOpEnum = exports.BulkPatchAssociationOpOpEnum || (exports.BulkPatchAssociationOpOpEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BulkPatchFeatureOpOpEnum;
(function (BulkPatchFeatureOpOpEnum) {
    BulkPatchFeatureOpOpEnum["Update"] = "update";
    BulkPatchFeatureOpOpEnum["Delete"] = "delete";
})(BulkPatchFeatureOpOpEnum = exports.BulkPatchFeatureOpOpEnum || (exports.BulkPatchFeatureOpOpEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CategoryOutPermissionsEnum;
(function (CategoryOutPermissionsEnum) {
    CategoryOutPermissionsEnum["Create"] = "create";
    CategoryOutPermissionsEnum["View"] = "view";
    CategoryOutPermissionsEnum["Edit"] = "edit";
    CategoryOutPermissionsEnum["Delete"] = "delete";
})(CategoryOutPermissionsEnum = exports.CategoryOutPermissionsEnum || (exports.CategoryOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CategoryOutAttributeTypeEnum;
(function (CategoryOutAttributeTypeEnum) {
    CategoryOutAttributeTypeEnum["Invalid"] = "invalid";
    CategoryOutAttributeTypeEnum["Categorical"] = "categorical";
    CategoryOutAttributeTypeEnum["DateRange"] = "date_range";
    CategoryOutAttributeTypeEnum["NumberRange"] = "number_range";
    CategoryOutAttributeTypeEnum["FreeText"] = "free_text";
    CategoryOutAttributeTypeEnum["Location"] = "location";
})(CategoryOutAttributeTypeEnum = exports.CategoryOutAttributeTypeEnum || (exports.CategoryOutAttributeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ConceptOutPermissionsEnum;
(function (ConceptOutPermissionsEnum) {
    ConceptOutPermissionsEnum["Create"] = "create";
    ConceptOutPermissionsEnum["View"] = "view";
    ConceptOutPermissionsEnum["Edit"] = "edit";
    ConceptOutPermissionsEnum["Delete"] = "delete";
})(ConceptOutPermissionsEnum = exports.ConceptOutPermissionsEnum || (exports.ConceptOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ConfidenceIntervalInLevelEnum;
(function (ConfidenceIntervalInLevelEnum) {
    ConfidenceIntervalInLevelEnum["Five"] = "ninety_five";
    ConfidenceIntervalInLevelEnum["Nine"] = "ninety_nine";
    ConfidenceIntervalInLevelEnum["NinePointNine"] = "ninety_nine_point_nine";
})(ConfidenceIntervalInLevelEnum = exports.ConfidenceIntervalInLevelEnum || (exports.ConfidenceIntervalInLevelEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DatasetInLicenseEnum;
(function (DatasetInLicenseEnum) {
    DatasetInLicenseEnum["PublicDomain"] = "public_domain";
    DatasetInLicenseEnum["CreativeCommonsPublicDomainDedication"] = "creative_commons_public_domain_dedication";
    DatasetInLicenseEnum["OpendataCommonsPublicDomainDedicationAndLicense"] = "opendata_commons_public_domain_dedication_and_license";
    DatasetInLicenseEnum["CreativeCommonsAttributionInternational"] = "creative_commons_attribution_international";
    DatasetInLicenseEnum["CommunityDataLicenseAgreementVersion1Permissive"] = "community_data_license_agreement_version_1_permissive";
    DatasetInLicenseEnum["OpenDataCommonsAttributionLicense"] = "open_data_commons_attribution_license";
    DatasetInLicenseEnum["CreativeCommonsAttributionShareAlike4International"] = "creative_commons_attribution_share_alike_4_international";
    DatasetInLicenseEnum["CommunityDataLicenseAgreementVersion1Sharing"] = "community_data_license_agreement_version_1_sharing";
    DatasetInLicenseEnum["OpenDataCommonsOpenDatabaseLicense"] = "open_data_commons_open_database_license";
    DatasetInLicenseEnum["CreativeCommonsAttributionNoncommercial4International"] = "creative_commons_attribution_noncommercial_4_international";
    DatasetInLicenseEnum["CreativeCommonsAttributionNoderivatives4International"] = "creative_commons_attribution_noderivatives_4_international";
    DatasetInLicenseEnum["CreativeCommonsAttributionNoncommercialShareAlike4International"] = "creative_commons_attribution_noncommercial_share_alike_4_international";
    DatasetInLicenseEnum["CreativeCommonsAttributionNoncommercialNoderivatives4International"] = "creative_commons_attribution_noncommercial_noderivatives_4_international";
    DatasetInLicenseEnum["Other"] = "other";
})(DatasetInLicenseEnum = exports.DatasetInLicenseEnum || (exports.DatasetInLicenseEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DatasetOutPermissionsEnum;
(function (DatasetOutPermissionsEnum) {
    DatasetOutPermissionsEnum["Create"] = "create";
    DatasetOutPermissionsEnum["View"] = "view";
    DatasetOutPermissionsEnum["Edit"] = "edit";
    DatasetOutPermissionsEnum["Delete"] = "delete";
})(DatasetOutPermissionsEnum = exports.DatasetOutPermissionsEnum || (exports.DatasetOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DatasetOutLicenseEnum;
(function (DatasetOutLicenseEnum) {
    DatasetOutLicenseEnum["PublicDomain"] = "public_domain";
    DatasetOutLicenseEnum["CreativeCommonsPublicDomainDedication"] = "creative_commons_public_domain_dedication";
    DatasetOutLicenseEnum["OpendataCommonsPublicDomainDedicationAndLicense"] = "opendata_commons_public_domain_dedication_and_license";
    DatasetOutLicenseEnum["CreativeCommonsAttributionInternational"] = "creative_commons_attribution_international";
    DatasetOutLicenseEnum["CommunityDataLicenseAgreementVersion1Permissive"] = "community_data_license_agreement_version_1_permissive";
    DatasetOutLicenseEnum["OpenDataCommonsAttributionLicense"] = "open_data_commons_attribution_license";
    DatasetOutLicenseEnum["CreativeCommonsAttributionShareAlike4International"] = "creative_commons_attribution_share_alike_4_international";
    DatasetOutLicenseEnum["CommunityDataLicenseAgreementVersion1Sharing"] = "community_data_license_agreement_version_1_sharing";
    DatasetOutLicenseEnum["OpenDataCommonsOpenDatabaseLicense"] = "open_data_commons_open_database_license";
    DatasetOutLicenseEnum["CreativeCommonsAttributionNoncommercial4International"] = "creative_commons_attribution_noncommercial_4_international";
    DatasetOutLicenseEnum["CreativeCommonsAttributionNoderivatives4International"] = "creative_commons_attribution_noderivatives_4_international";
    DatasetOutLicenseEnum["CreativeCommonsAttributionNoncommercialShareAlike4International"] = "creative_commons_attribution_noncommercial_share_alike_4_international";
    DatasetOutLicenseEnum["CreativeCommonsAttributionNoncommercialNoderivatives4International"] = "creative_commons_attribution_noncommercial_noderivatives_4_international";
    DatasetOutLicenseEnum["Other"] = "other";
    DatasetOutLicenseEnum["Invalid"] = "invalid";
})(DatasetOutLicenseEnum = exports.DatasetOutLicenseEnum || (exports.DatasetOutLicenseEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DateRangeOutPermissionsEnum;
(function (DateRangeOutPermissionsEnum) {
    DateRangeOutPermissionsEnum["Create"] = "create";
    DateRangeOutPermissionsEnum["View"] = "view";
    DateRangeOutPermissionsEnum["Edit"] = "edit";
    DateRangeOutPermissionsEnum["Delete"] = "delete";
})(DateRangeOutPermissionsEnum = exports.DateRangeOutPermissionsEnum || (exports.DateRangeOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DateRangeOutAttributeTypeEnum;
(function (DateRangeOutAttributeTypeEnum) {
    DateRangeOutAttributeTypeEnum["Invalid"] = "invalid";
    DateRangeOutAttributeTypeEnum["Categorical"] = "categorical";
    DateRangeOutAttributeTypeEnum["DateRange"] = "date_range";
    DateRangeOutAttributeTypeEnum["NumberRange"] = "number_range";
    DateRangeOutAttributeTypeEnum["FreeText"] = "free_text";
    DateRangeOutAttributeTypeEnum["Location"] = "location";
})(DateRangeOutAttributeTypeEnum = exports.DateRangeOutAttributeTypeEnum || (exports.DateRangeOutAttributeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DeploymentStageEnum;
(function (DeploymentStageEnum) {
    DeploymentStageEnum["Development"] = "development";
    DeploymentStageEnum["Testing"] = "testing";
    DeploymentStageEnum["Staging"] = "staging";
    DeploymentStageEnum["Production"] = "production";
    DeploymentStageEnum["Invalid"] = "invalid";
})(DeploymentStageEnum = exports.DeploymentStageEnum || (exports.DeploymentStageEnum = {}));
/**
    * @export
    * @enum {string}
    */
var EnterprisePermissionsEnum;
(function (EnterprisePermissionsEnum) {
    EnterprisePermissionsEnum["Create"] = "create";
    EnterprisePermissionsEnum["View"] = "view";
    EnterprisePermissionsEnum["Edit"] = "edit";
    EnterprisePermissionsEnum["Delete"] = "delete";
})(EnterprisePermissionsEnum = exports.EnterprisePermissionsEnum || (exports.EnterprisePermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FeatureOutPermissionsEnum;
(function (FeatureOutPermissionsEnum) {
    FeatureOutPermissionsEnum["Create"] = "create";
    FeatureOutPermissionsEnum["View"] = "view";
    FeatureOutPermissionsEnum["Edit"] = "edit";
    FeatureOutPermissionsEnum["Delete"] = "delete";
})(FeatureOutPermissionsEnum = exports.FeatureOutPermissionsEnum || (exports.FeatureOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FeatureStatisticsFeatureTypeEnum;
(function (FeatureStatisticsFeatureTypeEnum) {
    FeatureStatisticsFeatureTypeEnum["Invalid"] = "invalid";
    FeatureStatisticsFeatureTypeEnum["Numerical"] = "numerical";
    FeatureStatisticsFeatureTypeEnum["Categorical"] = "categorical";
    FeatureStatisticsFeatureTypeEnum["Datetime"] = "datetime";
    FeatureStatisticsFeatureTypeEnum["Text"] = "text";
    FeatureStatisticsFeatureTypeEnum["Image"] = "image";
    FeatureStatisticsFeatureTypeEnum["Audio"] = "audio";
    FeatureStatisticsFeatureTypeEnum["Video"] = "video";
    FeatureStatisticsFeatureTypeEnum["File"] = "file";
    FeatureStatisticsFeatureTypeEnum["TimeSeries"] = "time_series";
    FeatureStatisticsFeatureTypeEnum["Dynamic"] = "dynamic";
})(FeatureStatisticsFeatureTypeEnum = exports.FeatureStatisticsFeatureTypeEnum || (exports.FeatureStatisticsFeatureTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FeatureStatisticsGeneratedByEnum;
(function (FeatureStatisticsGeneratedByEnum) {
    FeatureStatisticsGeneratedByEnum["Invalid"] = "invalid";
    FeatureStatisticsGeneratedByEnum["LocalEvaluator"] = "local_evaluator";
    FeatureStatisticsGeneratedByEnum["RemoteEvaluator"] = "remote_evaluator";
    FeatureStatisticsGeneratedByEnum["User"] = "user";
})(FeatureStatisticsGeneratedByEnum = exports.FeatureStatisticsGeneratedByEnum || (exports.FeatureStatisticsGeneratedByEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FreeTextOutPermissionsEnum;
(function (FreeTextOutPermissionsEnum) {
    FreeTextOutPermissionsEnum["Create"] = "create";
    FreeTextOutPermissionsEnum["View"] = "view";
    FreeTextOutPermissionsEnum["Edit"] = "edit";
    FreeTextOutPermissionsEnum["Delete"] = "delete";
})(FreeTextOutPermissionsEnum = exports.FreeTextOutPermissionsEnum || (exports.FreeTextOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FreeTextOutAttributeTypeEnum;
(function (FreeTextOutAttributeTypeEnum) {
    FreeTextOutAttributeTypeEnum["Invalid"] = "invalid";
    FreeTextOutAttributeTypeEnum["Categorical"] = "categorical";
    FreeTextOutAttributeTypeEnum["DateRange"] = "date_range";
    FreeTextOutAttributeTypeEnum["NumberRange"] = "number_range";
    FreeTextOutAttributeTypeEnum["FreeText"] = "free_text";
    FreeTextOutAttributeTypeEnum["Location"] = "location";
})(FreeTextOutAttributeTypeEnum = exports.FreeTextOutAttributeTypeEnum || (exports.FreeTextOutAttributeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var IntegrationServiceTypeEnum;
(function (IntegrationServiceTypeEnum) {
    IntegrationServiceTypeEnum["REDSHIFT"] = "REDSHIFT";
    IntegrationServiceTypeEnum["SNOWFLAKE"] = "SNOWFLAKE";
})(IntegrationServiceTypeEnum = exports.IntegrationServiceTypeEnum || (exports.IntegrationServiceTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var IntegrationPermissionsEnum;
(function (IntegrationPermissionsEnum) {
    IntegrationPermissionsEnum["Create"] = "create";
    IntegrationPermissionsEnum["View"] = "view";
    IntegrationPermissionsEnum["Edit"] = "edit";
    IntegrationPermissionsEnum["Delete"] = "delete";
})(IntegrationPermissionsEnum = exports.IntegrationPermissionsEnum || (exports.IntegrationPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var IntegrationCreateServiceTypeEnum;
(function (IntegrationCreateServiceTypeEnum) {
    IntegrationCreateServiceTypeEnum["REDSHIFT"] = "REDSHIFT";
    IntegrationCreateServiceTypeEnum["SNOWFLAKE"] = "SNOWFLAKE";
})(IntegrationCreateServiceTypeEnum = exports.IntegrationCreateServiceTypeEnum || (exports.IntegrationCreateServiceTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LocationOutPermissionsEnum;
(function (LocationOutPermissionsEnum) {
    LocationOutPermissionsEnum["Create"] = "create";
    LocationOutPermissionsEnum["View"] = "view";
    LocationOutPermissionsEnum["Edit"] = "edit";
    LocationOutPermissionsEnum["Delete"] = "delete";
})(LocationOutPermissionsEnum = exports.LocationOutPermissionsEnum || (exports.LocationOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LocationOutAttributeTypeEnum;
(function (LocationOutAttributeTypeEnum) {
    LocationOutAttributeTypeEnum["Invalid"] = "invalid";
    LocationOutAttributeTypeEnum["Categorical"] = "categorical";
    LocationOutAttributeTypeEnum["DateRange"] = "date_range";
    LocationOutAttributeTypeEnum["NumberRange"] = "number_range";
    LocationOutAttributeTypeEnum["FreeText"] = "free_text";
    LocationOutAttributeTypeEnum["Location"] = "location";
})(LocationOutAttributeTypeEnum = exports.LocationOutAttributeTypeEnum || (exports.LocationOutAttributeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ModelOutPermissionsEnum;
(function (ModelOutPermissionsEnum) {
    ModelOutPermissionsEnum["Create"] = "create";
    ModelOutPermissionsEnum["View"] = "view";
    ModelOutPermissionsEnum["Edit"] = "edit";
    ModelOutPermissionsEnum["Delete"] = "delete";
})(ModelOutPermissionsEnum = exports.ModelOutPermissionsEnum || (exports.ModelOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ModelPerformanceBaseInGeneratedByEnum;
(function (ModelPerformanceBaseInGeneratedByEnum) {
    ModelPerformanceBaseInGeneratedByEnum["LocalEvaluator"] = "local_evaluator";
    ModelPerformanceBaseInGeneratedByEnum["RemoteEvaluator"] = "remote_evaluator";
    ModelPerformanceBaseInGeneratedByEnum["User"] = "user";
})(ModelPerformanceBaseInGeneratedByEnum = exports.ModelPerformanceBaseInGeneratedByEnum || (exports.ModelPerformanceBaseInGeneratedByEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ModelPerformanceBaseInScoreTypeEnum;
(function (ModelPerformanceBaseInScoreTypeEnum) {
    ModelPerformanceBaseInScoreTypeEnum["AccuracyScore"] = "accuracy_score";
    ModelPerformanceBaseInScoreTypeEnum["AveragePrecisionScore"] = "average_precision_score";
    ModelPerformanceBaseInScoreTypeEnum["BalancedAccuracyScore"] = "balanced_accuracy_score";
    ModelPerformanceBaseInScoreTypeEnum["BrierScoreLoss"] = "brier_score_loss";
    ModelPerformanceBaseInScoreTypeEnum["CohenKappaScore"] = "cohen_kappa_score";
    ModelPerformanceBaseInScoreTypeEnum["F1Score"] = "f1_score";
    ModelPerformanceBaseInScoreTypeEnum["HammingLoss"] = "hamming_loss";
    ModelPerformanceBaseInScoreTypeEnum["HingeLoss"] = "hinge_loss";
    ModelPerformanceBaseInScoreTypeEnum["JaccardScore"] = "jaccard_score";
    ModelPerformanceBaseInScoreTypeEnum["LogLoss"] = "log_loss";
    ModelPerformanceBaseInScoreTypeEnum["MatthewsCorrCoef"] = "matthews_corr_coef";
    ModelPerformanceBaseInScoreTypeEnum["PrecisionScore"] = "precision_score";
    ModelPerformanceBaseInScoreTypeEnum["RecallScore"] = "recall_score";
    ModelPerformanceBaseInScoreTypeEnum["RocAucScore"] = "roc_auc_score";
    ModelPerformanceBaseInScoreTypeEnum["ZeroOneLoss"] = "zero_one_loss";
    ModelPerformanceBaseInScoreTypeEnum["ExplainedVarianceScore"] = "explained_variance_score";
    ModelPerformanceBaseInScoreTypeEnum["MaxError"] = "max_error";
    ModelPerformanceBaseInScoreTypeEnum["MeanAbsoluteError"] = "mean_absolute_error";
    ModelPerformanceBaseInScoreTypeEnum["MeanAbsolutePercentageError"] = "mean_absolute_percentage_error";
    ModelPerformanceBaseInScoreTypeEnum["MeanSquaredError"] = "mean_squared_error";
    ModelPerformanceBaseInScoreTypeEnum["MeanSquaredLogError"] = "mean_squared_log_error";
    ModelPerformanceBaseInScoreTypeEnum["MedianAbsoluteError"] = "median_absolute_error";
    ModelPerformanceBaseInScoreTypeEnum["R2Score"] = "r2_score";
    ModelPerformanceBaseInScoreTypeEnum["CoverageError"] = "coverage_error";
    ModelPerformanceBaseInScoreTypeEnum["LabelRankingAveragePrecisionScore"] = "label_ranking_average_precision_score";
    ModelPerformanceBaseInScoreTypeEnum["LabelRankingLoss"] = "label_ranking_loss";
    ModelPerformanceBaseInScoreTypeEnum["AdjustedR2Score"] = "adjusted_r2_score";
    ModelPerformanceBaseInScoreTypeEnum["MutualInformationScore"] = "mutual_information_score";
    ModelPerformanceBaseInScoreTypeEnum["AdjMutualInformationScore"] = "adj_mutual_information_score";
    ModelPerformanceBaseInScoreTypeEnum["NormalizedMutualInformationScore"] = "normalized_mutual_information_score";
    ModelPerformanceBaseInScoreTypeEnum["AdjRandScore"] = "adj_rand_score";
    ModelPerformanceBaseInScoreTypeEnum["CompletenessScore"] = "completeness_score";
    ModelPerformanceBaseInScoreTypeEnum["FowlkesMallowsScore"] = "fowlkes_mallows_score";
    ModelPerformanceBaseInScoreTypeEnum["HomogeneityScore"] = "homogeneity_score";
    ModelPerformanceBaseInScoreTypeEnum["VMeasureScore"] = "v_measure_score";
    ModelPerformanceBaseInScoreTypeEnum["NegMeanAbsoluteError"] = "neg_mean_absolute_error";
    ModelPerformanceBaseInScoreTypeEnum["NegMeanSquaredError"] = "neg_mean_squared_error";
    ModelPerformanceBaseInScoreTypeEnum["RootMeanSquaredError"] = "root_mean_squared_error";
    ModelPerformanceBaseInScoreTypeEnum["NegRootMeanSquaredError"] = "neg_root_mean_squared_error";
    ModelPerformanceBaseInScoreTypeEnum["RootMeanSquaredLogError"] = "root_mean_squared_log_error";
    ModelPerformanceBaseInScoreTypeEnum["NegMedianAbsoluteError"] = "neg_median_absolute_error";
    ModelPerformanceBaseInScoreTypeEnum["CosineProximity"] = "cosine_proximity";
    ModelPerformanceBaseInScoreTypeEnum["KullbackLeiblerDivergence"] = "kullback_leibler_divergence";
    ModelPerformanceBaseInScoreTypeEnum["PoissonMetric"] = "poisson_metric";
    ModelPerformanceBaseInScoreTypeEnum["MulticlassLogLoss"] = "multiclass_log_loss";
    ModelPerformanceBaseInScoreTypeEnum["NormalizedDiscountedCumulativeGain"] = "normalized_discounted_cumulative_gain";
    ModelPerformanceBaseInScoreTypeEnum["GammaDeviance"] = "gamma_deviance";
    ModelPerformanceBaseInScoreTypeEnum["HuberMetric"] = "huber_metric";
    ModelPerformanceBaseInScoreTypeEnum["FBetaScore"] = "f_beta_score";
    ModelPerformanceBaseInScoreTypeEnum["EuclideanDistance"] = "euclidean_distance";
    ModelPerformanceBaseInScoreTypeEnum["HaversineDistance"] = "haversine_distance";
    ModelPerformanceBaseInScoreTypeEnum["MeanSquaredPredictioneRror"] = "mean_squared_predictione_rror";
    ModelPerformanceBaseInScoreTypeEnum["PseudoR2Mcfadden"] = "pseudo_r2_mcfadden";
    ModelPerformanceBaseInScoreTypeEnum["AdjustedPseudoR2Mcfadden"] = "adjusted_pseudo_r2_mcfadden";
    ModelPerformanceBaseInScoreTypeEnum["PseudoR2Nagelkerke"] = "pseudo_r2_nagelkerke";
    ModelPerformanceBaseInScoreTypeEnum["PseudoR2CoxSnell"] = "pseudo_r2_cox_snell";
    ModelPerformanceBaseInScoreTypeEnum["PseudoR2Effron"] = "pseudo_r2_effron";
    ModelPerformanceBaseInScoreTypeEnum["Bic"] = "bic";
    ModelPerformanceBaseInScoreTypeEnum["Aic"] = "aic";
    ModelPerformanceBaseInScoreTypeEnum["CorrelationActualForecast"] = "correlation_actual_forecast";
    ModelPerformanceBaseInScoreTypeEnum["ForecastVsActual"] = "forecast_vs_actual";
    ModelPerformanceBaseInScoreTypeEnum["ConfusionMatrix"] = "confusion_matrix";
    ModelPerformanceBaseInScoreTypeEnum["MulticlassConfusionMatrix"] = "multiclass_confusion_matrix";
    ModelPerformanceBaseInScoreTypeEnum["RocCurve"] = "roc_curve";
    ModelPerformanceBaseInScoreTypeEnum["Invalid"] = "invalid";
})(ModelPerformanceBaseInScoreTypeEnum = exports.ModelPerformanceBaseInScoreTypeEnum || (exports.ModelPerformanceBaseInScoreTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ModelPerformanceInGeneratedByEnum;
(function (ModelPerformanceInGeneratedByEnum) {
    ModelPerformanceInGeneratedByEnum["LocalEvaluator"] = "local_evaluator";
    ModelPerformanceInGeneratedByEnum["RemoteEvaluator"] = "remote_evaluator";
    ModelPerformanceInGeneratedByEnum["User"] = "user";
})(ModelPerformanceInGeneratedByEnum = exports.ModelPerformanceInGeneratedByEnum || (exports.ModelPerformanceInGeneratedByEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ModelPerformanceInScoreTypeEnum;
(function (ModelPerformanceInScoreTypeEnum) {
    ModelPerformanceInScoreTypeEnum["AccuracyScore"] = "accuracy_score";
    ModelPerformanceInScoreTypeEnum["AveragePrecisionScore"] = "average_precision_score";
    ModelPerformanceInScoreTypeEnum["BalancedAccuracyScore"] = "balanced_accuracy_score";
    ModelPerformanceInScoreTypeEnum["BrierScoreLoss"] = "brier_score_loss";
    ModelPerformanceInScoreTypeEnum["CohenKappaScore"] = "cohen_kappa_score";
    ModelPerformanceInScoreTypeEnum["F1Score"] = "f1_score";
    ModelPerformanceInScoreTypeEnum["HammingLoss"] = "hamming_loss";
    ModelPerformanceInScoreTypeEnum["HingeLoss"] = "hinge_loss";
    ModelPerformanceInScoreTypeEnum["JaccardScore"] = "jaccard_score";
    ModelPerformanceInScoreTypeEnum["LogLoss"] = "log_loss";
    ModelPerformanceInScoreTypeEnum["MatthewsCorrCoef"] = "matthews_corr_coef";
    ModelPerformanceInScoreTypeEnum["PrecisionScore"] = "precision_score";
    ModelPerformanceInScoreTypeEnum["RecallScore"] = "recall_score";
    ModelPerformanceInScoreTypeEnum["RocAucScore"] = "roc_auc_score";
    ModelPerformanceInScoreTypeEnum["ZeroOneLoss"] = "zero_one_loss";
    ModelPerformanceInScoreTypeEnum["ExplainedVarianceScore"] = "explained_variance_score";
    ModelPerformanceInScoreTypeEnum["MaxError"] = "max_error";
    ModelPerformanceInScoreTypeEnum["MeanAbsoluteError"] = "mean_absolute_error";
    ModelPerformanceInScoreTypeEnum["MeanAbsolutePercentageError"] = "mean_absolute_percentage_error";
    ModelPerformanceInScoreTypeEnum["MeanSquaredError"] = "mean_squared_error";
    ModelPerformanceInScoreTypeEnum["MeanSquaredLogError"] = "mean_squared_log_error";
    ModelPerformanceInScoreTypeEnum["MedianAbsoluteError"] = "median_absolute_error";
    ModelPerformanceInScoreTypeEnum["R2Score"] = "r2_score";
    ModelPerformanceInScoreTypeEnum["CoverageError"] = "coverage_error";
    ModelPerformanceInScoreTypeEnum["LabelRankingAveragePrecisionScore"] = "label_ranking_average_precision_score";
    ModelPerformanceInScoreTypeEnum["LabelRankingLoss"] = "label_ranking_loss";
    ModelPerformanceInScoreTypeEnum["AdjustedR2Score"] = "adjusted_r2_score";
    ModelPerformanceInScoreTypeEnum["MutualInformationScore"] = "mutual_information_score";
    ModelPerformanceInScoreTypeEnum["AdjMutualInformationScore"] = "adj_mutual_information_score";
    ModelPerformanceInScoreTypeEnum["NormalizedMutualInformationScore"] = "normalized_mutual_information_score";
    ModelPerformanceInScoreTypeEnum["AdjRandScore"] = "adj_rand_score";
    ModelPerformanceInScoreTypeEnum["CompletenessScore"] = "completeness_score";
    ModelPerformanceInScoreTypeEnum["FowlkesMallowsScore"] = "fowlkes_mallows_score";
    ModelPerformanceInScoreTypeEnum["HomogeneityScore"] = "homogeneity_score";
    ModelPerformanceInScoreTypeEnum["VMeasureScore"] = "v_measure_score";
    ModelPerformanceInScoreTypeEnum["NegMeanAbsoluteError"] = "neg_mean_absolute_error";
    ModelPerformanceInScoreTypeEnum["NegMeanSquaredError"] = "neg_mean_squared_error";
    ModelPerformanceInScoreTypeEnum["RootMeanSquaredError"] = "root_mean_squared_error";
    ModelPerformanceInScoreTypeEnum["NegRootMeanSquaredError"] = "neg_root_mean_squared_error";
    ModelPerformanceInScoreTypeEnum["RootMeanSquaredLogError"] = "root_mean_squared_log_error";
    ModelPerformanceInScoreTypeEnum["NegMedianAbsoluteError"] = "neg_median_absolute_error";
    ModelPerformanceInScoreTypeEnum["CosineProximity"] = "cosine_proximity";
    ModelPerformanceInScoreTypeEnum["KullbackLeiblerDivergence"] = "kullback_leibler_divergence";
    ModelPerformanceInScoreTypeEnum["PoissonMetric"] = "poisson_metric";
    ModelPerformanceInScoreTypeEnum["MulticlassLogLoss"] = "multiclass_log_loss";
    ModelPerformanceInScoreTypeEnum["NormalizedDiscountedCumulativeGain"] = "normalized_discounted_cumulative_gain";
    ModelPerformanceInScoreTypeEnum["GammaDeviance"] = "gamma_deviance";
    ModelPerformanceInScoreTypeEnum["HuberMetric"] = "huber_metric";
    ModelPerformanceInScoreTypeEnum["FBetaScore"] = "f_beta_score";
    ModelPerformanceInScoreTypeEnum["EuclideanDistance"] = "euclidean_distance";
    ModelPerformanceInScoreTypeEnum["HaversineDistance"] = "haversine_distance";
    ModelPerformanceInScoreTypeEnum["MeanSquaredPredictioneRror"] = "mean_squared_predictione_rror";
    ModelPerformanceInScoreTypeEnum["PseudoR2Mcfadden"] = "pseudo_r2_mcfadden";
    ModelPerformanceInScoreTypeEnum["AdjustedPseudoR2Mcfadden"] = "adjusted_pseudo_r2_mcfadden";
    ModelPerformanceInScoreTypeEnum["PseudoR2Nagelkerke"] = "pseudo_r2_nagelkerke";
    ModelPerformanceInScoreTypeEnum["PseudoR2CoxSnell"] = "pseudo_r2_cox_snell";
    ModelPerformanceInScoreTypeEnum["PseudoR2Effron"] = "pseudo_r2_effron";
    ModelPerformanceInScoreTypeEnum["Bic"] = "bic";
    ModelPerformanceInScoreTypeEnum["Aic"] = "aic";
    ModelPerformanceInScoreTypeEnum["CorrelationActualForecast"] = "correlation_actual_forecast";
    ModelPerformanceInScoreTypeEnum["ForecastVsActual"] = "forecast_vs_actual";
    ModelPerformanceInScoreTypeEnum["ConfusionMatrix"] = "confusion_matrix";
    ModelPerformanceInScoreTypeEnum["MulticlassConfusionMatrix"] = "multiclass_confusion_matrix";
    ModelPerformanceInScoreTypeEnum["RocCurve"] = "roc_curve";
})(ModelPerformanceInScoreTypeEnum = exports.ModelPerformanceInScoreTypeEnum || (exports.ModelPerformanceInScoreTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ModelPerformanceOutGeneratedByEnum;
(function (ModelPerformanceOutGeneratedByEnum) {
    ModelPerformanceOutGeneratedByEnum["LocalEvaluator"] = "local_evaluator";
    ModelPerformanceOutGeneratedByEnum["RemoteEvaluator"] = "remote_evaluator";
    ModelPerformanceOutGeneratedByEnum["User"] = "user";
})(ModelPerformanceOutGeneratedByEnum = exports.ModelPerformanceOutGeneratedByEnum || (exports.ModelPerformanceOutGeneratedByEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ModelPerformanceOutScoreTypeEnum;
(function (ModelPerformanceOutScoreTypeEnum) {
    ModelPerformanceOutScoreTypeEnum["AccuracyScore"] = "accuracy_score";
    ModelPerformanceOutScoreTypeEnum["AveragePrecisionScore"] = "average_precision_score";
    ModelPerformanceOutScoreTypeEnum["BalancedAccuracyScore"] = "balanced_accuracy_score";
    ModelPerformanceOutScoreTypeEnum["BrierScoreLoss"] = "brier_score_loss";
    ModelPerformanceOutScoreTypeEnum["CohenKappaScore"] = "cohen_kappa_score";
    ModelPerformanceOutScoreTypeEnum["F1Score"] = "f1_score";
    ModelPerformanceOutScoreTypeEnum["HammingLoss"] = "hamming_loss";
    ModelPerformanceOutScoreTypeEnum["HingeLoss"] = "hinge_loss";
    ModelPerformanceOutScoreTypeEnum["JaccardScore"] = "jaccard_score";
    ModelPerformanceOutScoreTypeEnum["LogLoss"] = "log_loss";
    ModelPerformanceOutScoreTypeEnum["MatthewsCorrCoef"] = "matthews_corr_coef";
    ModelPerformanceOutScoreTypeEnum["PrecisionScore"] = "precision_score";
    ModelPerformanceOutScoreTypeEnum["RecallScore"] = "recall_score";
    ModelPerformanceOutScoreTypeEnum["RocAucScore"] = "roc_auc_score";
    ModelPerformanceOutScoreTypeEnum["ZeroOneLoss"] = "zero_one_loss";
    ModelPerformanceOutScoreTypeEnum["ExplainedVarianceScore"] = "explained_variance_score";
    ModelPerformanceOutScoreTypeEnum["MaxError"] = "max_error";
    ModelPerformanceOutScoreTypeEnum["MeanAbsoluteError"] = "mean_absolute_error";
    ModelPerformanceOutScoreTypeEnum["MeanAbsolutePercentageError"] = "mean_absolute_percentage_error";
    ModelPerformanceOutScoreTypeEnum["MeanSquaredError"] = "mean_squared_error";
    ModelPerformanceOutScoreTypeEnum["MeanSquaredLogError"] = "mean_squared_log_error";
    ModelPerformanceOutScoreTypeEnum["MedianAbsoluteError"] = "median_absolute_error";
    ModelPerformanceOutScoreTypeEnum["R2Score"] = "r2_score";
    ModelPerformanceOutScoreTypeEnum["CoverageError"] = "coverage_error";
    ModelPerformanceOutScoreTypeEnum["LabelRankingAveragePrecisionScore"] = "label_ranking_average_precision_score";
    ModelPerformanceOutScoreTypeEnum["LabelRankingLoss"] = "label_ranking_loss";
    ModelPerformanceOutScoreTypeEnum["AdjustedR2Score"] = "adjusted_r2_score";
    ModelPerformanceOutScoreTypeEnum["MutualInformationScore"] = "mutual_information_score";
    ModelPerformanceOutScoreTypeEnum["AdjMutualInformationScore"] = "adj_mutual_information_score";
    ModelPerformanceOutScoreTypeEnum["NormalizedMutualInformationScore"] = "normalized_mutual_information_score";
    ModelPerformanceOutScoreTypeEnum["AdjRandScore"] = "adj_rand_score";
    ModelPerformanceOutScoreTypeEnum["CompletenessScore"] = "completeness_score";
    ModelPerformanceOutScoreTypeEnum["FowlkesMallowsScore"] = "fowlkes_mallows_score";
    ModelPerformanceOutScoreTypeEnum["HomogeneityScore"] = "homogeneity_score";
    ModelPerformanceOutScoreTypeEnum["VMeasureScore"] = "v_measure_score";
    ModelPerformanceOutScoreTypeEnum["NegMeanAbsoluteError"] = "neg_mean_absolute_error";
    ModelPerformanceOutScoreTypeEnum["NegMeanSquaredError"] = "neg_mean_squared_error";
    ModelPerformanceOutScoreTypeEnum["RootMeanSquaredError"] = "root_mean_squared_error";
    ModelPerformanceOutScoreTypeEnum["NegRootMeanSquaredError"] = "neg_root_mean_squared_error";
    ModelPerformanceOutScoreTypeEnum["RootMeanSquaredLogError"] = "root_mean_squared_log_error";
    ModelPerformanceOutScoreTypeEnum["NegMedianAbsoluteError"] = "neg_median_absolute_error";
    ModelPerformanceOutScoreTypeEnum["CosineProximity"] = "cosine_proximity";
    ModelPerformanceOutScoreTypeEnum["KullbackLeiblerDivergence"] = "kullback_leibler_divergence";
    ModelPerformanceOutScoreTypeEnum["PoissonMetric"] = "poisson_metric";
    ModelPerformanceOutScoreTypeEnum["MulticlassLogLoss"] = "multiclass_log_loss";
    ModelPerformanceOutScoreTypeEnum["NormalizedDiscountedCumulativeGain"] = "normalized_discounted_cumulative_gain";
    ModelPerformanceOutScoreTypeEnum["GammaDeviance"] = "gamma_deviance";
    ModelPerformanceOutScoreTypeEnum["HuberMetric"] = "huber_metric";
    ModelPerformanceOutScoreTypeEnum["FBetaScore"] = "f_beta_score";
    ModelPerformanceOutScoreTypeEnum["EuclideanDistance"] = "euclidean_distance";
    ModelPerformanceOutScoreTypeEnum["HaversineDistance"] = "haversine_distance";
    ModelPerformanceOutScoreTypeEnum["MeanSquaredPredictioneRror"] = "mean_squared_predictione_rror";
    ModelPerformanceOutScoreTypeEnum["PseudoR2Mcfadden"] = "pseudo_r2_mcfadden";
    ModelPerformanceOutScoreTypeEnum["AdjustedPseudoR2Mcfadden"] = "adjusted_pseudo_r2_mcfadden";
    ModelPerformanceOutScoreTypeEnum["PseudoR2Nagelkerke"] = "pseudo_r2_nagelkerke";
    ModelPerformanceOutScoreTypeEnum["PseudoR2CoxSnell"] = "pseudo_r2_cox_snell";
    ModelPerformanceOutScoreTypeEnum["PseudoR2Effron"] = "pseudo_r2_effron";
    ModelPerformanceOutScoreTypeEnum["Bic"] = "bic";
    ModelPerformanceOutScoreTypeEnum["Aic"] = "aic";
    ModelPerformanceOutScoreTypeEnum["CorrelationActualForecast"] = "correlation_actual_forecast";
    ModelPerformanceOutScoreTypeEnum["ForecastVsActual"] = "forecast_vs_actual";
    ModelPerformanceOutScoreTypeEnum["ConfusionMatrix"] = "confusion_matrix";
    ModelPerformanceOutScoreTypeEnum["MulticlassConfusionMatrix"] = "multiclass_confusion_matrix";
    ModelPerformanceOutScoreTypeEnum["RocCurve"] = "roc_curve";
})(ModelPerformanceOutScoreTypeEnum = exports.ModelPerformanceOutScoreTypeEnum || (exports.ModelPerformanceOutScoreTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var NullHypothesisInTestTypeEnum;
(function (NullHypothesisInTestTypeEnum) {
    NullHypothesisInTestTypeEnum["Ttest"] = "ttest";
    NullHypothesisInTestTypeEnum["Ztest"] = "ztest";
    NullHypothesisInTestTypeEnum["Anova"] = "anova";
    NullHypothesisInTestTypeEnum["Chisquared"] = "chisquared";
    NullHypothesisInTestTypeEnum["Htest"] = "htest";
})(NullHypothesisInTestTypeEnum = exports.NullHypothesisInTestTypeEnum || (exports.NullHypothesisInTestTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var NullHypothesisInLevelEnum;
(function (NullHypothesisInLevelEnum) {
    NullHypothesisInLevelEnum["Five"] = "ninety_five";
    NullHypothesisInLevelEnum["Nine"] = "ninety_nine";
    NullHypothesisInLevelEnum["NinePointNine"] = "ninety_nine_point_nine";
})(NullHypothesisInLevelEnum = exports.NullHypothesisInLevelEnum || (exports.NullHypothesisInLevelEnum = {}));
/**
    * @export
    * @enum {string}
    */
var NumberRangeOutPermissionsEnum;
(function (NumberRangeOutPermissionsEnum) {
    NumberRangeOutPermissionsEnum["Create"] = "create";
    NumberRangeOutPermissionsEnum["View"] = "view";
    NumberRangeOutPermissionsEnum["Edit"] = "edit";
    NumberRangeOutPermissionsEnum["Delete"] = "delete";
})(NumberRangeOutPermissionsEnum = exports.NumberRangeOutPermissionsEnum || (exports.NumberRangeOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var NumberRangeOutAttributeTypeEnum;
(function (NumberRangeOutAttributeTypeEnum) {
    NumberRangeOutAttributeTypeEnum["Invalid"] = "invalid";
    NumberRangeOutAttributeTypeEnum["Categorical"] = "categorical";
    NumberRangeOutAttributeTypeEnum["DateRange"] = "date_range";
    NumberRangeOutAttributeTypeEnum["NumberRange"] = "number_range";
    NumberRangeOutAttributeTypeEnum["FreeText"] = "free_text";
    NumberRangeOutAttributeTypeEnum["Location"] = "location";
})(NumberRangeOutAttributeTypeEnum = exports.NumberRangeOutAttributeTypeEnum || (exports.NumberRangeOutAttributeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PartialDependencePlotInGeneratedByEnum;
(function (PartialDependencePlotInGeneratedByEnum) {
    PartialDependencePlotInGeneratedByEnum["LocalEvaluator"] = "local_evaluator";
    PartialDependencePlotInGeneratedByEnum["RemoteEvaluator"] = "remote_evaluator";
    PartialDependencePlotInGeneratedByEnum["User"] = "user";
})(PartialDependencePlotInGeneratedByEnum = exports.PartialDependencePlotInGeneratedByEnum || (exports.PartialDependencePlotInGeneratedByEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PatchDatasetOpOpEnum;
(function (PatchDatasetOpOpEnum) {
    PatchDatasetOpOpEnum["Update"] = "update";
    PatchDatasetOpOpEnum["Delete"] = "delete";
})(PatchDatasetOpOpEnum = exports.PatchDatasetOpOpEnum || (exports.PatchDatasetOpOpEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PatchFeatureOpOpEnum;
(function (PatchFeatureOpOpEnum) {
    PatchFeatureOpOpEnum["Update"] = "update";
    PatchFeatureOpOpEnum["Delete"] = "delete";
})(PatchFeatureOpOpEnum = exports.PatchFeatureOpOpEnum || (exports.PatchFeatureOpOpEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PatchModelOpOpEnum;
(function (PatchModelOpOpEnum) {
    PatchModelOpOpEnum["Update"] = "update";
    PatchModelOpOpEnum["Delete"] = "delete";
})(PatchModelOpOpEnum = exports.PatchModelOpOpEnum || (exports.PatchModelOpOpEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PatchStudyOpOpEnum;
(function (PatchStudyOpOpEnum) {
    PatchStudyOpOpEnum["Update"] = "update";
    PatchStudyOpOpEnum["Delete"] = "delete";
})(PatchStudyOpOpEnum = exports.PatchStudyOpOpEnum || (exports.PatchStudyOpOpEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PatchVariableOpOpEnum;
(function (PatchVariableOpOpEnum) {
    PatchVariableOpOpEnum["Update"] = "update";
    PatchVariableOpOpEnum["Delete"] = "delete";
})(PatchVariableOpOpEnum = exports.PatchVariableOpOpEnum || (exports.PatchVariableOpOpEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PopulationAttributeInAttributeTypeEnum;
(function (PopulationAttributeInAttributeTypeEnum) {
    PopulationAttributeInAttributeTypeEnum["Invalid"] = "invalid";
    PopulationAttributeInAttributeTypeEnum["Categorical"] = "categorical";
    PopulationAttributeInAttributeTypeEnum["DateRange"] = "date_range";
    PopulationAttributeInAttributeTypeEnum["NumberRange"] = "number_range";
    PopulationAttributeInAttributeTypeEnum["FreeText"] = "free_text";
    PopulationAttributeInAttributeTypeEnum["Location"] = "location";
})(PopulationAttributeInAttributeTypeEnum = exports.PopulationAttributeInAttributeTypeEnum || (exports.PopulationAttributeInAttributeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PopulationAttributeOutPermissionsEnum;
(function (PopulationAttributeOutPermissionsEnum) {
    PopulationAttributeOutPermissionsEnum["Create"] = "create";
    PopulationAttributeOutPermissionsEnum["View"] = "view";
    PopulationAttributeOutPermissionsEnum["Edit"] = "edit";
    PopulationAttributeOutPermissionsEnum["Delete"] = "delete";
})(PopulationAttributeOutPermissionsEnum = exports.PopulationAttributeOutPermissionsEnum || (exports.PopulationAttributeOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PopulationAttributeOutAttributeTypeEnum;
(function (PopulationAttributeOutAttributeTypeEnum) {
    PopulationAttributeOutAttributeTypeEnum["Invalid"] = "invalid";
    PopulationAttributeOutAttributeTypeEnum["Categorical"] = "categorical";
    PopulationAttributeOutAttributeTypeEnum["DateRange"] = "date_range";
    PopulationAttributeOutAttributeTypeEnum["NumberRange"] = "number_range";
    PopulationAttributeOutAttributeTypeEnum["FreeText"] = "free_text";
    PopulationAttributeOutAttributeTypeEnum["Location"] = "location";
})(PopulationAttributeOutAttributeTypeEnum = exports.PopulationAttributeOutAttributeTypeEnum || (exports.PopulationAttributeOutAttributeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ResourceCollectionElementTypeEnum;
(function (ResourceCollectionElementTypeEnum) {
    ResourceCollectionElementTypeEnum["Variable"] = "variable";
    ResourceCollectionElementTypeEnum["Dataset"] = "dataset";
    ResourceCollectionElementTypeEnum["Feature"] = "feature";
    ResourceCollectionElementTypeEnum["Study"] = "study";
    ResourceCollectionElementTypeEnum["Model"] = "model";
    ResourceCollectionElementTypeEnum["Author"] = "author";
    ResourceCollectionElementTypeEnum["Concept"] = "concept";
    ResourceCollectionElementTypeEnum["PopulationAttribute"] = "population_attribute";
    ResourceCollectionElementTypeEnum["PopulationAttributeValue"] = "population_attribute_value";
    ResourceCollectionElementTypeEnum["Association"] = "association";
})(ResourceCollectionElementTypeEnum = exports.ResourceCollectionElementTypeEnum || (exports.ResourceCollectionElementTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SignificanceValueInGeneratedByEnum;
(function (SignificanceValueInGeneratedByEnum) {
    SignificanceValueInGeneratedByEnum["LocalEvaluator"] = "local_evaluator";
    SignificanceValueInGeneratedByEnum["RemoteEvaluator"] = "remote_evaluator";
    SignificanceValueInGeneratedByEnum["User"] = "user";
})(SignificanceValueInGeneratedByEnum = exports.SignificanceValueInGeneratedByEnum || (exports.SignificanceValueInGeneratedByEnum = {}));
/**
    * @export
    * @enum {string}
    */
var StudyOutPermissionsEnum;
(function (StudyOutPermissionsEnum) {
    StudyOutPermissionsEnum["Create"] = "create";
    StudyOutPermissionsEnum["View"] = "view";
    StudyOutPermissionsEnum["Edit"] = "edit";
    StudyOutPermissionsEnum["Delete"] = "delete";
})(StudyOutPermissionsEnum = exports.StudyOutPermissionsEnum || (exports.StudyOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var StudyOutStudyTypeEnum;
(function (StudyOutStudyTypeEnum) {
    StudyOutStudyTypeEnum["Invalid"] = "invalid";
    StudyOutStudyTypeEnum["SupervisedMl"] = "supervised_ml";
    StudyOutStudyTypeEnum["UnsupervisedMl"] = "unsupervised_ml";
    StudyOutStudyTypeEnum["StatisticalInference"] = "statistical_inference";
    StudyOutStudyTypeEnum["RandomizedControlTrial"] = "randomized_control_trial";
})(StudyOutStudyTypeEnum = exports.StudyOutStudyTypeEnum || (exports.StudyOutStudyTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TableStatusEnum;
(function (TableStatusEnum) {
    TableStatusEnum["Pending"] = "pending";
    TableStatusEnum["Success"] = "success";
    TableStatusEnum["Failure"] = "failure";
})(TableStatusEnum = exports.TableStatusEnum || (exports.TableStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TestDatasetTransformationTypeEnum;
(function (TestDatasetTransformationTypeEnum) {
    TestDatasetTransformationTypeEnum["NoTransformation"] = "no_transformation";
    TestDatasetTransformationTypeEnum["Kfold"] = "kfold";
    TestDatasetTransformationTypeEnum["LeavePOut"] = "leave_p_out";
    TestDatasetTransformationTypeEnum["Holdout"] = "holdout";
    TestDatasetTransformationTypeEnum["Independent"] = "independent";
})(TestDatasetTransformationTypeEnum = exports.TestDatasetTransformationTypeEnum || (exports.TestDatasetTransformationTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var VariableOutPermissionsEnum;
(function (VariableOutPermissionsEnum) {
    VariableOutPermissionsEnum["Create"] = "create";
    VariableOutPermissionsEnum["View"] = "view";
    VariableOutPermissionsEnum["Edit"] = "edit";
    VariableOutPermissionsEnum["Delete"] = "delete";
})(VariableOutPermissionsEnum = exports.VariableOutPermissionsEnum || (exports.VariableOutPermissionsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var VariableTypeTypeEnum;
(function (VariableTypeTypeEnum) {
    VariableTypeTypeEnum["Unknown"] = "unknown";
    VariableTypeTypeEnum["CategoricalNominal"] = "categorical_nominal";
    VariableTypeTypeEnum["CategoricalOrdinal"] = "categorical_ordinal";
    VariableTypeTypeEnum["CategoricalBinary"] = "categorical_binary";
    VariableTypeTypeEnum["NumericalDiscrete"] = "numerical_discrete";
    VariableTypeTypeEnum["NumericalContinuous"] = "numerical_continuous";
})(VariableTypeTypeEnum = exports.VariableTypeTypeEnum || (exports.VariableTypeTypeEnum = {}));
/**
 * AssociationsApi - axios parameter creator
 * @export
 */
exports.AssociationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost: (modelId, associationInArrayAssociationIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling createAssociationsV1ModelsModelIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new base_1.RequiredError('associationInArrayAssociationIn', 'Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1ModelsModelIdAssociationsPost.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete: (modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete.');
            }
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete: (modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationsV1ModelsModelIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete' is not null or undefined
            if (bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete === null || bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete === undefined) {
                throw new base_1.RequiredError('bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete', 'Required parameter bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete was null or undefined when calling deleteAssociationsV1ModelsModelIdAssociationsDelete.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete !== undefined ? bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete : {}) : (bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: (associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getAssociationV1ModelsModelIdAssociationsAssociationIdGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling getAssociationV1ModelsModelIdAssociationsAssociationIdGet.');
            }
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: (modelId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling listAssociationsV1ModelsModelIdAssociationsGet.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: (variableId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listAssociationsV1VariablesVariableIdAssociationsGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch: (modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling patchAssociationsV1ModelsModelIdAssociationsPatch.');
            }
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            if (bulkPatchAssociationOp === null || bulkPatchAssociationOp === undefined) {
                throw new base_1.RequiredError('bulkPatchAssociationOp', 'Required parameter bulkPatchAssociationOp was null or undefined when calling patchAssociationsV1ModelsModelIdAssociationsPatch.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bulkPatchAssociationOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bulkPatchAssociationOp !== undefined ? bulkPatchAssociationOp : {}) : (bulkPatchAssociationOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AssociationsApi - functional programming interface
 * @export
 */
exports.AssociationsApiFp = function (configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * AssociationsApi - factory interface
 * @export
 */
exports.AssociationsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, options) {
            return exports.AssociationsApiFp(configuration).createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options) {
            return exports.AssociationsApiFp(configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options) {
            return exports.AssociationsApiFp(configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options) {
            return exports.AssociationsApiFp(configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options) {
            return exports.AssociationsApiFp(configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AssociationsApi - object-oriented interface
 * @export
 * @class AssociationsApi
 * @extends {BaseAPI}
 */
class AssociationsApi extends base_1.BaseAPI {
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    createAssociationsV1ModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).createAssociationsV1ModelsModelIdAssociationsPost(requestParameters.modelId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1ModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AssociationsApi = AssociationsApi;
/**
 * AuthorsApi - axios parameter creator
 * @export
 */
exports.AuthorsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet: (authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling getAuthorV1AuthorsAuthorIdGet.');
            }
            const localVarPath = `/v1/authors/{author_id}`
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/authors`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AuthorsApi - functional programming interface
 * @export
 */
exports.AuthorsApiFp = function (configuration) {
    return {
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet(authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).getAuthorV1AuthorsAuthorIdGet(authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).listAuthorsV1AuthorsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * AuthorsApi - factory interface
 * @export
 */
exports.AuthorsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet(authorId, options) {
            return exports.AuthorsApiFp(configuration).getAuthorV1AuthorsAuthorIdGet(authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.AuthorsApiFp(configuration).listAuthorsV1AuthorsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuthorsApi - object-oriented interface
 * @export
 * @class AuthorsApi
 * @extends {BaseAPI}
 */
class AuthorsApi extends base_1.BaseAPI {
    /**
     * Get Author.
     * @summary Get Author
     * @param {AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    getAuthorV1AuthorsAuthorIdGet(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).getAuthorV1AuthorsAuthorIdGet(requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {AuthorsApiListAuthorsV1AuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    listAuthorsV1AuthorsGet(requestParameters = {}, options) {
        return exports.AuthorsApiFp(this.configuration).listAuthorsV1AuthorsGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthorsApi = AuthorsApi;
/**
 * ConceptsApi - axios parameter creator
 * @export
 */
exports.ConceptsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost: (conceptIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptIn' is not null or undefined
            if (conceptIn === null || conceptIn === undefined) {
                throw new base_1.RequiredError('conceptIn', 'Required parameter conceptIn was null or undefined when calling createConceptV1ConceptsPost.');
            }
            const localVarPath = `/v1/concepts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof conceptIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(conceptIn !== undefined ? conceptIn : {}) : (conceptIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete: (conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling deleteConceptV1ConceptsConceptIdDelete.');
            }
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet: (conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling getConceptV1ConceptsConceptIdGet.');
            }
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/concepts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/concepts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {'path_count' | 'created_at'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet: (conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet.');
            }
            const localVarPath = `/v1/concepts/{concept_id}/system/concepts`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: (userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserConceptsV1UsersUserIdConceptsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ConceptsApi - functional programming interface
 * @export
 */
exports.ConceptsApiFp = function (configuration) {
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost(conceptIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).createConceptV1ConceptsPost(conceptIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete(conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).deleteConceptV1ConceptsConceptIdDelete(conceptId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet(conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).getConceptV1ConceptsConceptIdGet(conceptId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).listAuthenticatedUserConceptsV1UserConceptsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).listConceptsV1ConceptsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {'path_count' | 'created_at'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).listUserConceptsV1UsersUserIdConceptsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * ConceptsApi - factory interface
 * @export
 */
exports.ConceptsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost(conceptIn, options) {
            return exports.ConceptsApiFp(configuration).createConceptV1ConceptsPost(conceptIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete(conceptId, options) {
            return exports.ConceptsApiFp(configuration).deleteConceptV1ConceptsConceptIdDelete(conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet(conceptId, options) {
            return exports.ConceptsApiFp(configuration).getConceptV1ConceptsConceptIdGet(conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.ConceptsApiFp(configuration).listAuthenticatedUserConceptsV1UserConceptsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.ConceptsApiFp(configuration).listConceptsV1ConceptsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {'path_count' | 'created_at'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options) {
            return exports.ConceptsApiFp(configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.ConceptsApiFp(configuration).listUserConceptsV1UsersUserIdConceptsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ConceptsApi - object-oriented interface
 * @export
 * @class ConceptsApi
 * @extends {BaseAPI}
 */
class ConceptsApi extends base_1.BaseAPI {
    /**
     * Create a Concept.
     * @summary Create Concept
     * @param {ConceptsApiCreateConceptV1ConceptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    createConceptV1ConceptsPost(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).createConceptV1ConceptsPost(requestParameters.conceptIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
     * @summary Delete Concept
     * @param {ConceptsApiDeleteConceptV1ConceptsConceptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    deleteConceptV1ConceptsConceptIdDelete(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).deleteConceptV1ConceptsConceptIdDelete(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Concept.
     * @summary Get Concept
     * @param {ConceptsApiGetConceptV1ConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    getConceptV1ConceptsConceptIdGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).getConceptV1ConceptsConceptIdGet(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters = {}, options) {
        return exports.ConceptsApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Concepts.
     * @summary List Concepts
     * @param {ConceptsApiListConceptsV1ConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listConceptsV1ConceptsGet(requestParameters = {}, options) {
        return exports.ConceptsApiFp(this.configuration).listConceptsV1ConceptsGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the concepts in the requested concept\'s system.
     * @summary List System Of Concepts
     * @param {ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters.conceptId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listUserConceptsV1UsersUserIdConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ConceptsApi = ConceptsApi;
/**
 * DatasetsApi - axios parameter creator
 * @export
 */
exports.DatasetsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut: (datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost: (datasetId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost: (datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetIn' is not null or undefined
            if (datasetIn === null || datasetIn === undefined) {
                throw new base_1.RequiredError('datasetIn', 'Required parameter datasetIn was null or undefined when calling createDatasetV1DatasetsPost.');
            }
            const localVarPath = `/v1/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof datasetIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(datasetIn !== undefined ? datasetIn : {}) : (datasetIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete: (datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling deleteDatasetV1DatasetsDatasetIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet: (datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet: (datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling getDatasetV1DatasetsDatasetIdGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: (datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet: (datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listModelsUsingDatasetV1DatasetsDatasetIdModelsGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/models`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: (userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserDatasetsV1UsersUserIdDatasetsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch: (datasetId, patchDatasetOpArrayPatchDatasetOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling patchDatasetV1DatasetsDatasetIdPatch.');
            }
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            if (patchDatasetOpArrayPatchDatasetOp === null || patchDatasetOpArrayPatchDatasetOp === undefined) {
                throw new base_1.RequiredError('patchDatasetOpArrayPatchDatasetOp', 'Required parameter patchDatasetOpArrayPatchDatasetOp was null or undefined when calling patchDatasetV1DatasetsDatasetIdPatch.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchDatasetOpArrayPatchDatasetOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchDatasetOpArrayPatchDatasetOp !== undefined ? patchDatasetOpArrayPatchDatasetOp : {}) : (patchDatasetOpArrayPatchDatasetOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete: (datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut: (datasetId, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling replaceDatasetV1DatasetsDatasetIdPut.');
            }
            // verify required parameter 'datasetIn' is not null or undefined
            if (datasetIn === null || datasetIn === undefined) {
                throw new base_1.RequiredError('datasetIn', 'Required parameter datasetIn was null or undefined when calling replaceDatasetV1DatasetsDatasetIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof datasetIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(datasetIn !== undefined ? datasetIn : {}) : (datasetIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DatasetsApi - functional programming interface
 * @export
 */
exports.DatasetsApiFp = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost(datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).createDatasetV1DatasetsPost(datasetIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet(datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).getDatasetV1DatasetsDatasetIdGet(datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listDatasetsV1DatasetsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * DatasetsApi - factory interface
 * @export
 */
exports.DatasetsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options) {
            return exports.DatasetsApiFp(configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options) {
            return exports.DatasetsApiFp(configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, options) {
            return exports.DatasetsApiFp(configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost(datasetIn, options) {
            return exports.DatasetsApiFp(configuration).createDatasetV1DatasetsPost(datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options) {
            return exports.DatasetsApiFp(configuration).deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options) {
            return exports.DatasetsApiFp(configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet(datasetId, options) {
            return exports.DatasetsApiFp(configuration).getDatasetV1DatasetsDatasetIdGet(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.DatasetsApiFp(configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.DatasetsApiFp(configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.DatasetsApiFp(configuration).listDatasetsV1DatasetsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.DatasetsApiFp(configuration).listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.DatasetsApiFp(configuration).listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return exports.DatasetsApiFp(configuration).patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options) {
            return exports.DatasetsApiFp(configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options) {
            return exports.DatasetsApiFp(configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options) {
            return exports.DatasetsApiFp(configuration).replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DatasetsApi - object-oriented interface
 * @export
 * @class DatasetsApi
 * @extends {BaseAPI}
 */
class DatasetsApi extends base_1.BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {DatasetsApiCreateDatasetV1DatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createDatasetV1DatasetsPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createDatasetV1DatasetsPost(requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {DatasetsApiDeleteDatasetV1DatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteDatasetV1DatasetsDatasetIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).deleteDatasetV1DatasetsDatasetIdDelete(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    getDatasetV1DatasetsDatasetIdGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).getDatasetV1DatasetsDatasetIdGet(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters = {}, options) {
        return exports.DatasetsApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {DatasetsApiListDatasetsV1DatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetsV1DatasetsGet(requestParameters = {}, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetsV1DatasetsGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters.datasetId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {DatasetsApiPatchDatasetV1DatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    patchDatasetV1DatasetsDatasetIdPatch(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).patchDatasetV1DatasetsDatasetIdPatch(requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {DatasetsApiReplaceDatasetV1DatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    replaceDatasetV1DatasetsDatasetIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).replaceDatasetV1DatasetsDatasetIdPut(requestParameters.datasetId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DatasetsApi = DatasetsApi;
/**
 * EnterpriseApi - axios parameter creator
 * @export
 */
exports.EnterpriseApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationCreate} integrationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost: (integrationCreate, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'integrationCreate' is not null or undefined
            if (integrationCreate === null || integrationCreate === undefined) {
                throw new base_1.RequiredError('integrationCreate', 'Required parameter integrationCreate was null or undefined when calling createIntegrationV1EnterpriseIntegrationsPost.');
            }
            const localVarPath = `/v1/enterprise/integrations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof integrationCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(integrationCreate !== undefined ? integrationCreate : {}) : (integrationCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/enterprise`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet: (integrationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'integrationId' is not null or undefined
            if (integrationId === null || integrationId === undefined) {
                throw new base_1.RequiredError('integrationId', 'Required parameter integrationId was null or undefined when calling getIntegrationV1EnterpriseIntegrationsIntegrationIdGet.');
            }
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update an Integration.
         * @summary Update Integration
         * @param {string} integrationId
         * @param {IntegrationUpdateIn} integrationUpdateIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch: (integrationId, integrationUpdateIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'integrationId' is not null or undefined
            if (integrationId === null || integrationId === undefined) {
                throw new base_1.RequiredError('integrationId', 'Required parameter integrationId was null or undefined when calling updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch.');
            }
            // verify required parameter 'integrationUpdateIn' is not null or undefined
            if (integrationUpdateIn === null || integrationUpdateIn === undefined) {
                throw new base_1.RequiredError('integrationUpdateIn', 'Required parameter integrationUpdateIn was null or undefined when calling updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch.');
            }
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof integrationUpdateIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(integrationUpdateIn !== undefined ? integrationUpdateIn : {}) : (integrationUpdateIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EnterpriseApi - functional programming interface
 * @export
 */
exports.EnterpriseApiFp = function (configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationCreate} integrationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnterpriseApiAxiosParamCreator(configuration).createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnterpriseApiAxiosParamCreator(configuration).getEnterpriseV1EnterpriseGet(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnterpriseApiAxiosParamCreator(configuration).getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update an Integration.
         * @summary Update Integration
         * @param {string} integrationId
         * @param {IntegrationUpdateIn} integrationUpdateIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnterpriseApiAxiosParamCreator(configuration).updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * EnterpriseApi - factory interface
 * @export
 */
exports.EnterpriseApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationCreate} integrationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, options) {
            return exports.EnterpriseApiFp(configuration).createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet(options) {
            return exports.EnterpriseApiFp(configuration).getEnterpriseV1EnterpriseGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, options) {
            return exports.EnterpriseApiFp(configuration).getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an Integration.
         * @summary Update Integration
         * @param {string} integrationId
         * @param {IntegrationUpdateIn} integrationUpdateIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, options) {
            return exports.EnterpriseApiFp(configuration).updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * EnterpriseApi - object-oriented interface
 * @export
 * @class EnterpriseApi
 * @extends {BaseAPI}
 */
class EnterpriseApi extends base_1.BaseAPI {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    createIntegrationV1EnterpriseIntegrationsPost(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).createIntegrationV1EnterpriseIntegrationsPost(requestParameters.integrationCreate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the Enterprise.
     * @summary Get Enterprise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getEnterpriseV1EnterpriseGet(options) {
        return exports.EnterpriseApiFp(this.configuration).getEnterpriseV1EnterpriseGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters.integrationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an Integration.
     * @summary Update Integration
     * @param {EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters.integrationId, requestParameters.integrationUpdateIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.EnterpriseApi = EnterpriseApi;
/**
 * FeaturesApi - axios parameter creator
 * @export
 */
exports.FeaturesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut: (datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost: (datasetId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost: (featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling createFeatureV1FeaturesPost.');
            }
            const localVarPath = `/v1/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete: (featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling deleteFeatureV1FeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet: (featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling getFeatureV1FeaturesFeatureIdGet.');
            }
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: (datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet: (featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/features/{feature_id}/system/features`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: (userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserFeaturesV1UsersUserIdFeaturesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch: (featureId, patchFeatureOpArrayPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling patchFeatureV1FeaturesFeatureIdPatch.');
            }
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            if (patchFeatureOpArrayPatchFeatureOp === null || patchFeatureOpArrayPatchFeatureOp === undefined) {
                throw new base_1.RequiredError('patchFeatureOpArrayPatchFeatureOp', 'Required parameter patchFeatureOpArrayPatchFeatureOp was null or undefined when calling patchFeatureV1FeaturesFeatureIdPatch.');
            }
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchFeatureOpArrayPatchFeatureOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchFeatureOpArrayPatchFeatureOp !== undefined ? patchFeatureOpArrayPatchFeatureOp : {}) : (patchFeatureOpArrayPatchFeatureOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch: (bulkPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            if (bulkPatchFeatureOp === null || bulkPatchFeatureOp === undefined) {
                throw new base_1.RequiredError('bulkPatchFeatureOp', 'Required parameter bulkPatchFeatureOp was null or undefined when calling patchMultipleFeaturesV1FeaturesPatch.');
            }
            const localVarPath = `/v1/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bulkPatchFeatureOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bulkPatchFeatureOp !== undefined ? bulkPatchFeatureOp : {}) : (bulkPatchFeatureOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete: (datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut: (featureId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling replaceFeatureV1FeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling replaceFeatureV1FeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FeaturesApi - functional programming interface
 * @export
 */
exports.FeaturesApiFp = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost(featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).createFeatureV1FeaturesPost(featureIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete(featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).deleteFeatureV1FeaturesFeatureIdDelete(featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet(featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).getFeatureV1FeaturesFeatureIdGet(featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listFeaturesV1FeaturesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * FeaturesApi - factory interface
 * @export
 */
exports.FeaturesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options) {
            return exports.FeaturesApiFp(configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, options) {
            return exports.FeaturesApiFp(configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost(featureIn, options) {
            return exports.FeaturesApiFp(configuration).createFeatureV1FeaturesPost(featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete(featureId, options) {
            return exports.FeaturesApiFp(configuration).deleteFeatureV1FeaturesFeatureIdDelete(featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet(featureId, options) {
            return exports.FeaturesApiFp(configuration).getFeatureV1FeaturesFeatureIdGet(featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.FeaturesApiFp(configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.FeaturesApiFp(configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.FeaturesApiFp(configuration).listFeaturesV1FeaturesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options) {
            return exports.FeaturesApiFp(configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.FeaturesApiFp(configuration).listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return exports.FeaturesApiFp(configuration).patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options) {
            return exports.FeaturesApiFp(configuration).patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options) {
            return exports.FeaturesApiFp(configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options) {
            return exports.FeaturesApiFp(configuration).replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FeaturesApi - object-oriented interface
 * @export
 * @class FeaturesApi
 * @extends {BaseAPI}
 */
class FeaturesApi extends base_1.BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {FeaturesApiCreateFeatureV1FeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createFeatureV1FeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createFeatureV1FeaturesPost(requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {FeaturesApiDeleteFeatureV1FeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    deleteFeatureV1FeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).deleteFeatureV1FeaturesFeatureIdDelete(requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get feature.
     * @summary Get Feature
     * @param {FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    getFeatureV1FeaturesFeatureIdGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).getFeatureV1FeaturesFeatureIdGet(requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters = {}, options) {
        return exports.FeaturesApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Features.
     * @summary List Features
     * @param {FeaturesApiListFeaturesV1FeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listFeaturesV1FeaturesGet(requestParameters = {}, options) {
        return exports.FeaturesApiFp(this.configuration).listFeaturesV1FeaturesGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
     * @summary Patch Feature
     * @param {FeaturesApiPatchFeatureV1FeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchFeatureV1FeaturesFeatureIdPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchFeatureV1FeaturesFeatureIdPatch(requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {FeaturesApiPatchMultipleFeaturesV1FeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchMultipleFeaturesV1FeaturesPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchMultipleFeaturesV1FeaturesPatch(requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {FeaturesApiReplaceFeatureV1FeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    replaceFeatureV1FeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).replaceFeatureV1FeaturesFeatureIdPut(requestParameters.featureId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FeaturesApi = FeaturesApi;
/**
 * ModelsApi - axios parameter creator
 * @export
 */
exports.ModelsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost: (modelId, associationInArrayAssociationIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling createAssociationsV1ModelsModelIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new base_1.RequiredError('associationInArrayAssociationIn', 'Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1ModelsModelIdAssociationsPost.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn> | ModelIn} arrayModelInModelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost: (studyId, arrayModelInModelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling createModelsV1StudiesStudyIdModelsPost.');
            }
            // verify required parameter 'arrayModelInModelIn' is not null or undefined
            if (arrayModelInModelIn === null || arrayModelInModelIn === undefined) {
                throw new base_1.RequiredError('arrayModelInModelIn', 'Required parameter arrayModelInModelIn was null or undefined when calling createModelsV1StudiesStudyIdModelsPost.');
            }
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof arrayModelInModelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(arrayModelInModelIn !== undefined ? arrayModelInModelIn : {}) : (arrayModelInModelIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete: (modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete.');
            }
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete: (modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationsV1ModelsModelIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete' is not null or undefined
            if (bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete === null || bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete === undefined) {
                throw new base_1.RequiredError('bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete', 'Required parameter bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete was null or undefined when calling deleteAssociationsV1ModelsModelIdAssociationsDelete.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete !== undefined ? bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete : {}) : (bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete: (modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteModelV1ModelsModelIdDelete.');
            }
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: (associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getAssociationV1ModelsModelIdAssociationsAssociationIdGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling getAssociationV1ModelsModelIdAssociationsAssociationIdGet.');
            }
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet: (modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling getModelV1ModelsModelIdGet.');
            }
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: (modelId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling listAssociationsV1ModelsModelIdAssociationsGet.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/models`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/models`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: (userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserModelsV1UsersUserIdModelsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch: (modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling patchAssociationsV1ModelsModelIdAssociationsPatch.');
            }
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            if (bulkPatchAssociationOp === null || bulkPatchAssociationOp === undefined) {
                throw new base_1.RequiredError('bulkPatchAssociationOp', 'Required parameter bulkPatchAssociationOp was null or undefined when calling patchAssociationsV1ModelsModelIdAssociationsPatch.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bulkPatchAssociationOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bulkPatchAssociationOp !== undefined ? bulkPatchAssociationOp : {}) : (bulkPatchAssociationOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch: (modelId, patchModelOpArrayPatchModelOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling patchModelV1ModelsModelIdPatch.');
            }
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            if (patchModelOpArrayPatchModelOp === null || patchModelOpArrayPatchModelOp === undefined) {
                throw new base_1.RequiredError('patchModelOpArrayPatchModelOp', 'Required parameter patchModelOpArrayPatchModelOp was null or undefined when calling patchModelV1ModelsModelIdPatch.');
            }
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchModelOpArrayPatchModelOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchModelOpArrayPatchModelOp !== undefined ? patchModelOpArrayPatchModelOp : {}) : (patchModelOpArrayPatchModelOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut: (modelId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling replaceModelV1ModelsModelIdPut.');
            }
            // verify required parameter 'modelIn' is not null or undefined
            if (modelIn === null || modelIn === undefined) {
                throw new base_1.RequiredError('modelIn', 'Required parameter modelIn was null or undefined when calling replaceModelV1ModelsModelIdPut.');
            }
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof modelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(modelIn !== undefined ? modelIn : {}) : (modelIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ModelsApi - functional programming interface
 * @export
 */
exports.ModelsApiFp = function (configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn> | ModelIn} arrayModelInModelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, arrayModelInModelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).createModelsV1StudiesStudyIdModelsPost(studyId, arrayModelInModelIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete(modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).deleteModelV1ModelsModelIdDelete(modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet(modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).getModelV1ModelsModelIdGet(modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listAuthenticatedUserModelsV1UserModelsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listModelsV1ModelsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listUserModelsV1UsersUserIdModelsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut(modelId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).replaceModelV1ModelsModelIdPut(modelId, modelIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * ModelsApi - factory interface
 * @export
 */
exports.ModelsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, options) {
            return exports.ModelsApiFp(configuration).createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn> | ModelIn} arrayModelInModelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, arrayModelInModelIn, options) {
            return exports.ModelsApiFp(configuration).createModelsV1StudiesStudyIdModelsPost(studyId, arrayModelInModelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options) {
            return exports.ModelsApiFp(configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options) {
            return exports.ModelsApiFp(configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete(modelId, options) {
            return exports.ModelsApiFp(configuration).deleteModelV1ModelsModelIdDelete(modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options) {
            return exports.ModelsApiFp(configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet(modelId, options) {
            return exports.ModelsApiFp(configuration).getModelV1ModelsModelIdGet(modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.ModelsApiFp(configuration).listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.ModelsApiFp(configuration).listAuthenticatedUserModelsV1UserModelsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.ModelsApiFp(configuration).listModelsV1ModelsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.ModelsApiFp(configuration).listUserModelsV1UsersUserIdModelsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options) {
            return exports.ModelsApiFp(configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options) {
            return exports.ModelsApiFp(configuration).patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut(modelId, modelIn, options) {
            return exports.ModelsApiFp(configuration).replaceModelV1ModelsModelIdPut(modelId, modelIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ModelsApi - object-oriented interface
 * @export
 * @class ModelsApi
 * @extends {BaseAPI}
 */
class ModelsApi extends base_1.BaseAPI {
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createAssociationsV1ModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createAssociationsV1ModelsModelIdAssociationsPost(requestParameters.modelId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {ModelsApiCreateModelsV1StudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createModelsV1StudiesStudyIdModelsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createModelsV1StudiesStudyIdModelsPost(requestParameters.studyId, requestParameters.arrayModelInModelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {ModelsApiDeleteModelV1ModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteModelV1ModelsModelIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteModelV1ModelsModelIdDelete(requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Model.
     * @summary Get Model
     * @param {ModelsApiGetModelV1ModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getModelV1ModelsModelIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getModelV1ModelsModelIdGet(requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listAssociationsV1ModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listAuthenticatedUserModelsV1UserModelsGet(requestParameters = {}, options) {
        return exports.ModelsApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Models.
     * @summary List Models
     * @param {ModelsApiListModelsV1ModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelsV1ModelsGet(requestParameters = {}, options) {
        return exports.ModelsApiFp(this.configuration).listModelsV1ModelsGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {ModelsApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listUserModelsV1UsersUserIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {ModelsApiPatchModelV1ModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchModelV1ModelsModelIdPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchModelV1ModelsModelIdPatch(requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {ModelsApiReplaceModelV1ModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    replaceModelV1ModelsModelIdPut(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).replaceModelV1ModelsModelIdPut(requestParameters.modelId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ModelsApi = ModelsApi;
/**
 * PopulationAttributeValuesApi - axios parameter creator
 * @export
 */
exports.PopulationAttributeValuesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete: (populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            const localVarPath = `/v1/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet: (datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet: (populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet.');
            }
            const localVarPath = `/v1/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/population_attribute_values`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PopulationAttributeValuesApi - functional programming interface
 * @export
 */
exports.PopulationAttributeValuesApiFp = function (configuration) {
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).listPopulationAttributeValuesV1PopulationAttributeValuesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * PopulationAttributeValuesApi - factory interface
 * @export
 */
exports.PopulationAttributeValuesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).listPopulationAttributeValuesV1PopulationAttributeValuesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PopulationAttributeValuesApi - object-oriented interface
 * @export
 * @class PopulationAttributeValuesApi
 * @extends {BaseAPI}
 */
class PopulationAttributeValuesApi extends base_1.BaseAPI {
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete population attribute value.
     * @summary Delete Population Attribute Value
     * @param {PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get population attribute value.
     * @summary Get Population Attribute Value
     * @param {PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List population attribute values.
     * @summary List Population Attribute Values
     * @param {PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    listPopulationAttributeValuesV1PopulationAttributeValuesGet(requestParameters = {}, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).listPopulationAttributeValuesV1PopulationAttributeValuesGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PopulationAttributeValuesApi = PopulationAttributeValuesApi;
/**
 * PopulationAttributesApi - axios parameter creator
 * @export
 */
exports.PopulationAttributesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost: (populationAttributeIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeIn' is not null or undefined
            if (populationAttributeIn === null || populationAttributeIn === undefined) {
                throw new base_1.RequiredError('populationAttributeIn', 'Required parameter populationAttributeIn was null or undefined when calling createPopulationAttributeV1PopulationAttributesPost.');
            }
            const localVarPath = `/v1/population_attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof populationAttributeIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(populationAttributeIn !== undefined ? populationAttributeIn : {}) : (populationAttributeIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost: (populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            if (populationAttributeId === null || populationAttributeId === undefined) {
                throw new base_1.RequiredError('populationAttributeId', 'Required parameter populationAttributeId was null or undefined when calling createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost.');
            }
            // verify required parameter 'dateRangeInLocationInNumberRangeInCategoryInFreeTextIn' is not null or undefined
            if (dateRangeInLocationInNumberRangeInCategoryInFreeTextIn === null || dateRangeInLocationInNumberRangeInCategoryInFreeTextIn === undefined) {
                throw new base_1.RequiredError('dateRangeInLocationInNumberRangeInCategoryInFreeTextIn', 'Required parameter dateRangeInLocationInNumberRangeInCategoryInFreeTextIn was null or undefined when calling createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost.');
            }
            const localVarPath = `/v1/population_attributes/{population_attribute_id}/values`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof dateRangeInLocationInNumberRangeInCategoryInFreeTextIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(dateRangeInLocationInNumberRangeInCategoryInFreeTextIn !== undefined ? dateRangeInLocationInNumberRangeInCategoryInFreeTextIn : {}) : (dateRangeInLocationInNumberRangeInCategoryInFreeTextIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete: (populationAttributeId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            if (populationAttributeId === null || populationAttributeId === undefined) {
                throw new base_1.RequiredError('populationAttributeId', 'Required parameter populationAttributeId was null or undefined when calling deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete.');
            }
            const localVarPath = `/v1/population_attributes/{population_attribute_id}`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet: (populationAttributeId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            if (populationAttributeId === null || populationAttributeId === undefined) {
                throw new base_1.RequiredError('populationAttributeId', 'Required parameter populationAttributeId was null or undefined when calling getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet.');
            }
            const localVarPath = `/v1/population_attributes/{population_attribute_id}`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet: (populationAttributeId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            if (populationAttributeId === null || populationAttributeId === undefined) {
                throw new base_1.RequiredError('populationAttributeId', 'Required parameter populationAttributeId was null or undefined when calling listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet.');
            }
            const localVarPath = `/v1/population_attributes/{population_attribute_id}/values`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/population_attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PopulationAttributesApi - functional programming interface
 * @export
 */
exports.PopulationAttributesApiFp = function (configuration) {
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributesApiAxiosParamCreator(configuration).createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributesApiAxiosParamCreator(configuration).createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributesApiAxiosParamCreator(configuration).deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributesApiAxiosParamCreator(configuration).getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributesApiAxiosParamCreator(configuration).listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributesApiAxiosParamCreator(configuration).listPopulationAttributesV1PopulationAttributesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * PopulationAttributesApi - factory interface
 * @export
 */
exports.PopulationAttributesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options) {
            return exports.PopulationAttributesApiFp(configuration).createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options) {
            return exports.PopulationAttributesApiFp(configuration).createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options) {
            return exports.PopulationAttributesApiFp(configuration).deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options) {
            return exports.PopulationAttributesApiFp(configuration).getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.PopulationAttributesApiFp(configuration).listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.PopulationAttributesApiFp(configuration).listPopulationAttributesV1PopulationAttributesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PopulationAttributesApi - object-oriented interface
 * @export
 * @class PopulationAttributesApi
 * @extends {BaseAPI}
 */
class PopulationAttributesApi extends base_1.BaseAPI {
    /**
     * Create a population attribute.
     * @summary Create Population Attribute
     * @param {PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    createPopulationAttributeV1PopulationAttributesPost(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).createPopulationAttributeV1PopulationAttributesPost(requestParameters.populationAttributeIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a population attribute value.
     * @summary Create Population Attribute Value
     * @param {PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(requestParameters.populationAttributeId, requestParameters.dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete population attribute.
     * @summary Delete Population Attribute
     * @param {PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(requestParameters.populationAttributeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get population attribute.
     * @summary Get Population Attribute
     * @param {PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(requestParameters.populationAttributeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a population attribute\'s values.
     * @summary List A Population Attributes Values
     * @param {PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(requestParameters.populationAttributeId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List population attributes.
     * @summary List Population Attributes
     * @param {PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    listPopulationAttributesV1PopulationAttributesGet(requestParameters = {}, options) {
        return exports.PopulationAttributesApiFp(this.configuration).listPopulationAttributesV1PopulationAttributesGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PopulationAttributesApi = PopulationAttributesApi;
/**
 * StudiesApi - axios parameter creator
 * @export
 */
exports.StudiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn> | ModelIn} arrayModelInModelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost: (studyId, arrayModelInModelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling createModelsV1StudiesStudyIdModelsPost.');
            }
            // verify required parameter 'arrayModelInModelIn' is not null or undefined
            if (arrayModelInModelIn === null || arrayModelInModelIn === undefined) {
                throw new base_1.RequiredError('arrayModelInModelIn', 'Required parameter arrayModelInModelIn was null or undefined when calling createModelsV1StudiesStudyIdModelsPost.');
            }
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof arrayModelInModelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(arrayModelInModelIn !== undefined ? arrayModelInModelIn : {}) : (arrayModelInModelIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete: (studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling deleteStudyV1StudiesStudyIdDelete.');
            }
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet: (studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling getStudyV1StudiesStudyIdGet.');
            }
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/studies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/studies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: (userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserStudiesV1UsersUserIdStudiesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyV1StudiesStudyIdPatch: (studyId, patchStudyOpArrayPatchStudyOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling patchStudyV1StudiesStudyIdPatch.');
            }
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            if (patchStudyOpArrayPatchStudyOp === null || patchStudyOpArrayPatchStudyOp === undefined) {
                throw new base_1.RequiredError('patchStudyOpArrayPatchStudyOp', 'Required parameter patchStudyOpArrayPatchStudyOp was null or undefined when calling patchStudyV1StudiesStudyIdPatch.');
            }
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchStudyOpArrayPatchStudyOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchStudyOpArrayPatchStudyOp !== undefined ? patchStudyOpArrayPatchStudyOp : {}) : (patchStudyOpArrayPatchStudyOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * StudiesApi - functional programming interface
 * @export
 */
exports.StudiesApiFp = function (configuration) {
    return {
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn> | ModelIn} arrayModelInModelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, arrayModelInModelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).createModelsV1StudiesStudyIdModelsPost(studyId, arrayModelInModelIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete(studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).deleteStudyV1StudiesStudyIdDelete(studyId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet(studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).getStudyV1StudiesStudyIdGet(studyId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listAuthenticatedUserStudiesV1UserStudiesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listStudiesV1StudiesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listUserStudiesV1UsersUserIdStudiesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).patchStudyV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * StudiesApi - factory interface
 * @export
 */
exports.StudiesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn> | ModelIn} arrayModelInModelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, arrayModelInModelIn, options) {
            return exports.StudiesApiFp(configuration).createModelsV1StudiesStudyIdModelsPost(studyId, arrayModelInModelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete(studyId, options) {
            return exports.StudiesApiFp(configuration).deleteStudyV1StudiesStudyIdDelete(studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet(studyId, options) {
            return exports.StudiesApiFp(configuration).getStudyV1StudiesStudyIdGet(studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.StudiesApiFp(configuration).listAuthenticatedUserStudiesV1UserStudiesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.StudiesApiFp(configuration).listStudiesV1StudiesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.StudiesApiFp(configuration).listUserStudiesV1UsersUserIdStudiesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options) {
            return exports.StudiesApiFp(configuration).patchStudyV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StudiesApi - object-oriented interface
 * @export
 * @class StudiesApi
 * @extends {BaseAPI}
 */
class StudiesApi extends base_1.BaseAPI {
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {StudiesApiCreateModelsV1StudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    createModelsV1StudiesStudyIdModelsPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).createModelsV1StudiesStudyIdModelsPost(requestParameters.studyId, requestParameters.arrayModelInModelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {StudiesApiDeleteStudyV1StudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    deleteStudyV1StudiesStudyIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).deleteStudyV1StudiesStudyIdDelete(requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Study.
     * @summary Get Study
     * @param {StudiesApiGetStudyV1StudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    getStudyV1StudiesStudyIdGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).getStudyV1StudiesStudyIdGet(requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters = {}, options) {
        return exports.StudiesApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Studies.
     * @summary List Studies
     * @param {StudiesApiListStudiesV1StudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listStudiesV1StudiesGet(requestParameters = {}, options) {
        return exports.StudiesApiFp(this.configuration).listStudiesV1StudiesGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listUserStudiesV1UsersUserIdStudiesGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Study resource with partial update.
     * @summary Patch Study
     * @param {StudiesApiPatchStudyV1StudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    patchStudyV1StudiesStudyIdPatch(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).patchStudyV1StudiesStudyIdPatch(requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StudiesApi = StudiesApi;
/**
 * SystemApi - axios parameter creator
 * @export
 */
exports.SystemApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {'path_count' | 'created_at'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet: (conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet.');
            }
            const localVarPath = `/v1/concepts/{concept_id}/system/concepts`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet: (featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/features/{feature_id}/system/features`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet: (variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/system/features`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet: (variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/system/variables`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SystemApi - functional programming interface
 * @export
 */
exports.SystemApiFp = function (configuration) {
    return {
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {'path_count' | 'created_at'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SystemApiAxiosParamCreator(configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SystemApiAxiosParamCreator(configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SystemApiAxiosParamCreator(configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SystemApiAxiosParamCreator(configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * SystemApi - factory interface
 * @export
 */
exports.SystemApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {'path_count' | 'created_at'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options) {
            return exports.SystemApiFp(configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options) {
            return exports.SystemApiFp(configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options) {
            return exports.SystemApiFp(configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options) {
            return exports.SystemApiFp(configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
class SystemApi extends base_1.BaseAPI {
    /**
     * Get the concepts in the requested concept\'s system.
     * @summary List System Of Concepts
     * @param {SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters.conceptId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SystemApi = SystemApi;
/**
 * TimelineApi - axios parameter creator
 * @export
 */
exports.TimelineApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<'variable' | 'dataset' | 'feature' | 'study' | 'model' | 'author' | 'concept' | 'population_attribute' | 'population_attribute_value' | 'association'>} [types]
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet: (types, cursor, limit, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/timeline`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (types) {
                localVarQueryParameter['types'] = types;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TimelineApi - functional programming interface
 * @export
 */
exports.TimelineApiFp = function (configuration) {
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<'variable' | 'dataset' | 'feature' | 'study' | 'model' | 'author' | 'concept' | 'population_attribute' | 'population_attribute_value' | 'association'>} [types]
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TimelineApiAxiosParamCreator(configuration).fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * TimelineApi - factory interface
 * @export
 */
exports.TimelineApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<'variable' | 'dataset' | 'feature' | 'study' | 'model' | 'author' | 'concept' | 'population_attribute' | 'population_attribute_value' | 'association'>} [types]
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options) {
            return exports.TimelineApiFp(configuration).fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * TimelineApi - object-oriented interface
 * @export
 * @class TimelineApi
 * @extends {BaseAPI}
 */
class TimelineApi extends base_1.BaseAPI {
    /**
     * Fetch resource creation timeline in reverse chronological order.
     * @summary Fetch Global Timeline
     * @param {TimelineApiFetchGlobalTimelineV1TimelineGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimelineApi
     */
    fetchGlobalTimelineV1TimelineGet(requestParameters = {}, options) {
        return exports.TimelineApiFp(this.configuration).fetchGlobalTimelineV1TimelineGet(requestParameters.types, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TimelineApi = TimelineApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
exports.UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1UserPost: (userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userProfileIn' is not null or undefined
            if (userProfileIn === null || userProfileIn === undefined) {
                throw new base_1.RequiredError('userProfileIn', 'Required parameter userProfileIn was null or undefined when calling createAUserV1UserPost.');
            }
            const localVarPath = `/v1/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof userProfileIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(userProfileIn !== undefined ? userProfileIn : {}) : (userProfileIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet: (includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet: (userId, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling getUserV1UsersUserIdGet.');
            }
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/concepts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/models`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/studies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: (userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserConceptsV1UsersUserIdConceptsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: (userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserDatasetsV1UsersUserIdDatasetsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: (userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserFeaturesV1UsersUserIdFeaturesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: (userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserModelsV1UsersUserIdModelsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: (userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserStudiesV1UsersUserIdStudiesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: (userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserVariablesV1UsersUserIdVariablesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
exports.UsersApiFp = function (configuration) {
    return {
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1UserPost(userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).createAUserV1UserPost(userProfileIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet(includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).getAuthenticatedUserV1UserGet(includeAvatar, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet(userId, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).getUserV1UsersUserIdGet(userId, includeAvatar, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserConceptsV1UserConceptsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserModelsV1UserModelsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserStudiesV1UserStudiesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserVariablesV1UserVariablesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserConceptsV1UsersUserIdConceptsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserModelsV1UsersUserIdModelsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserStudiesV1UsersUserIdStudiesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserVariablesV1UsersUserIdVariablesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
exports.UsersApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1UserPost(userProfileIn, options) {
            return exports.UsersApiFp(configuration).createAUserV1UserPost(userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet(includeAvatar, options) {
            return exports.UsersApiFp(configuration).getAuthenticatedUserV1UserGet(includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet(userId, includeAvatar, options) {
            return exports.UsersApiFp(configuration).getUserV1UsersUserIdGet(userId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserConceptsV1UserConceptsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserModelsV1UserModelsGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserStudiesV1UserStudiesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserVariablesV1UserVariablesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.UsersApiFp(configuration).listUserConceptsV1UsersUserIdConceptsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.UsersApiFp(configuration).listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.UsersApiFp(configuration).listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.UsersApiFp(configuration).listUserModelsV1UsersUserIdModelsGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.UsersApiFp(configuration).listUserStudiesV1UsersUserIdStudiesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.UsersApiFp(configuration).listUserVariablesV1UsersUserIdVariablesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
class UsersApi extends base_1.BaseAPI {
    /**
     * Create a new user.
     * @summary Create A User.
     * @param {UsersApiCreateAUserV1UserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserV1UserPost(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).createAUserV1UserPost(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserV1UserGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).getAuthenticatedUserV1UserGet(requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1UsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserV1UsersUserIdGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).getUserV1UsersUserIdGet(requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserModelsV1UserModelsGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserConceptsV1UsersUserIdConceptsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {UsersApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserModelsV1UsersUserIdModelsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserStudiesV1UsersUserIdStudiesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserVariablesV1UsersUserIdVariablesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UsersApi = UsersApi;
/**
 * VariablesApi - axios parameter creator
 * @export
 */
exports.VariablesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost: (variableIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableIn' is not null or undefined
            if (variableIn === null || variableIn === undefined) {
                throw new base_1.RequiredError('variableIn', 'Required parameter variableIn was null or undefined when calling createAVariableV1VariablesPost.');
            }
            const localVarPath = `/v1/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof variableIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(variableIn !== undefined ? variableIn : {}) : (variableIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete: (variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling deleteVariableV1VariablesVariableIdDelete.');
            }
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet: (variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling getVariableV1VariablesVariableIdGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: (variableId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listAssociationsV1VariablesVariableIdAssociationsGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet: (variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/system/features`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet: (variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/system/variables`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: (userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserVariablesV1UsersUserIdVariablesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet: (query, id, page, pageSize, total, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch: (variableId, patchVariableOpArrayPatchVariableOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling patchVariableV1VariablesVariableIdPatch.');
            }
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            if (patchVariableOpArrayPatchVariableOp === null || patchVariableOpArrayPatchVariableOp === undefined) {
                throw new base_1.RequiredError('patchVariableOpArrayPatchVariableOp', 'Required parameter patchVariableOpArrayPatchVariableOp was null or undefined when calling patchVariableV1VariablesVariableIdPatch.');
            }
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchVariableOpArrayPatchVariableOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchVariableOpArrayPatchVariableOp !== undefined ? patchVariableOpArrayPatchVariableOp : {}) : (patchVariableOpArrayPatchVariableOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * VariablesApi - functional programming interface
 * @export
 */
exports.VariablesApiFp = function (configuration) {
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost(variableIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).createAVariableV1VariablesPost(variableIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete(variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).deleteVariableV1VariablesVariableIdDelete(variableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet(variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).getVariableV1VariablesVariableIdGet(variableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listAuthenticatedUserVariablesV1UserVariablesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listUserVariablesV1UsersUserIdVariablesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listVariablesV1VariablesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * VariablesApi - factory interface
 * @export
 */
exports.VariablesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost(variableIn, options) {
            return exports.VariablesApiFp(configuration).createAVariableV1VariablesPost(variableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete(variableId, options) {
            return exports.VariablesApiFp(configuration).deleteVariableV1VariablesVariableIdDelete(variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet(variableId, options) {
            return exports.VariablesApiFp(configuration).getVariableV1VariablesVariableIdGet(variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.VariablesApiFp(configuration).listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.VariablesApiFp(configuration).listAuthenticatedUserVariablesV1UserVariablesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options) {
            return exports.VariablesApiFp(configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength]
         * @param {'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility]
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options) {
            return exports.VariablesApiFp(configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.VariablesApiFp(configuration).listUserVariablesV1UsersUserIdVariablesGet(userId, query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options) {
            return exports.VariablesApiFp(configuration).listVariablesV1VariablesGet(query, id, page, pageSize, total, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options) {
            return exports.VariablesApiFp(configuration).patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * VariablesApi - object-oriented interface
 * @export
 * @class VariablesApi
 * @extends {BaseAPI}
 */
class VariablesApi extends base_1.BaseAPI {
    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {VariablesApiCreateAVariableV1VariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    createAVariableV1VariablesPost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).createAVariableV1VariablesPost(requestParameters.variableIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {VariablesApiDeleteVariableV1VariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    deleteVariableV1VariablesVariableIdDelete(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).deleteVariableV1VariablesVariableIdDelete(requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Variable.
     * @summary Get Variable
     * @param {VariablesApiGetVariableV1VariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    getVariableV1VariablesVariableIdGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).getVariableV1VariablesVariableIdGet(requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters = {}, options) {
        return exports.VariablesApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listUserVariablesV1UsersUserIdVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Variables.
     * @summary List Variables
     * @param {VariablesApiListVariablesV1VariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listVariablesV1VariablesGet(requestParameters = {}, options) {
        return exports.VariablesApiFp(this.configuration).listVariablesV1VariablesGet(requestParameters.query, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {VariablesApiPatchVariableV1VariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    patchVariableV1VariablesVariableIdPatch(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).patchVariableV1VariablesVariableIdPatch(requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VariablesApi = VariablesApi;
