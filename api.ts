/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 * This is a REST API through which clients can interact with System - an **open**, **collaborative**, and **ever-growing knowledge base** of all the world\'s systems. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Add study flow context enum.
 * @export
 * @enum {string}
 */

export enum AddFlowContext {
    Relationship = 'relationship',
    QuickProject = 'quick_project'
}

/**
 * Alert colors for metric monitoring.
 * @export
 * @enum {string}
 */

export enum AlertColor {
    Green = 'GREEN',
    Red = 'RED'
}

/**
 * List of algorithms model.
 * @export
 * @interface AlgorithmListResult
 */
export interface AlgorithmListResult {
    /**
     * 
     * @type {Array<AlgorithmOut>}
     * @memberof AlgorithmListResult
     */
    'items': Array<AlgorithmOut>;
}
/**
 * Algorithm output model.
 * @export
 * @interface AlgorithmOut
 */
export interface AlgorithmOut {
    /**
     * 
     * @type {string}
     * @memberof AlgorithmOut
     */
    'algorithm_id': string;
    /**
     * 
     * @type {string}
     * @memberof AlgorithmOut
     */
    'display_name': string;
    /**
     * 
     * @type {string}
     * @memberof AlgorithmOut
     */
    'description': string;
}
/**
 * Object tag model.
 * @export
 * @interface AppSchemaDatasetsObjectTags
 */
export interface AppSchemaDatasetsObjectTags {
    /**
     * 
     * @type {Array<ConceptOut>}
     * @memberof AppSchemaDatasetsObjectTags
     */
    'concepts'?: Array<ConceptOut>;
    /**
     * 
     * @type {Array<VariableOut>}
     * @memberof AppSchemaDatasetsObjectTags
     */
    'variables'?: Array<VariableOut>;
}
/**
 * Object tag model.
 * @export
 * @interface AppSchemaStudiesObjectTags
 */
export interface AppSchemaStudiesObjectTags {
    /**
     * 
     * @type {Array<ConceptOut>}
     * @memberof AppSchemaStudiesObjectTags
     */
    'concepts'?: Array<ConceptOut>;
    /**
     * 
     * @type {Array<VariableOut>}
     * @memberof AppSchemaStudiesObjectTags
     */
    'variables'?: Array<VariableOut>;
}
/**
 * Values available for filtering associations.
 * @export
 * @interface AssociationFilters
 */
export interface AssociationFilters {
    /**
     * 
     * @type {Array<FeatureContributionMethodFilterCounts>}
     * @memberof AssociationFilters
     */
    'association_values.feature_contribution_method'?: Array<FeatureContributionMethodFilterCounts>;
}
/**
 * A statistical association between two features.
 * @export
 * @interface AssociationIn
 */
export interface AssociationIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AssociationIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AssociationIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof AssociationIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AssociationIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AssociationIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * The id of the features of the association. Use this for normal association.
     * @type {Array<string>}
     * @memberof AssociationIn
     */
    'feature_ids'?: Array<string>;
    /**
     * The id of the variables for a variable/variable association.
     * @type {Array<string>}
     * @memberof AssociationIn
     */
    'variable_ids'?: Array<string>;
    /**
     * The ids of the features that are being directed at.
     * @type {Array<string>}
     * @memberof AssociationIn
     */
    'directed_at_feature_ids'?: Array<string>;
    /**
     * Values of the association.
     * @type {Array<AssociationValueIn>}
     * @memberof AssociationIn
     */
    'association_values'?: Array<AssociationValueIn>;
    /**
     * The partial dependence plot information.
     * @type {Array<PartialDependencePlotIn>}
     * @memberof AssociationIn
     */
    'pdps'?: Array<PartialDependencePlotIn>;
    /**
     * Statistical controls of the association. (overrides model)
     * @type {Array<string>}
     * @memberof AssociationIn
     */
    'statistical_controls'?: Array<string>;
    /**
     * Populations of the association. (overrides dataset)
     * @type {Array<string>}
     * @memberof AssociationIn
     */
    'population_strings'?: Array<string>;
}
/**
 * Association resource links.
 * @export
 * @interface AssociationLinks
 */
export interface AssociationLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof AssociationLinks
     */
    'self': string;
    /**
     * Link to the Model the Association is derived from.
     * @type {string}
     * @memberof AssociationLinks
     */
    'model': string;
    /**
     * Links to the Features of the Association
     * @type {Array<string>}
     * @memberof AssociationLinks
     */
    'features': Array<string>;
}
/**
 * Association output model.
 * @export
 * @interface AssociationOut
 */
export interface AssociationOut {
    /**
     * 
     * @type {string}
     * @memberof AssociationOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof AssociationOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof AssociationOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof AssociationOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof AssociationOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof AssociationOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof AssociationOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof AssociationOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AssociationOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AssociationOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * The id of the features of the association. Use this for normal association.
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'feature_ids'?: Array<string>;
    /**
     * The id of the variables for a variable/variable association.
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'variable_ids'?: Array<string>;
    /**
     * The ids of the features that are being directed at.
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'directed_at_feature_ids'?: Array<string>;
    /**
     * Values of the association.
     * @type {Array<AssociationValueOut>}
     * @memberof AssociationOut
     */
    'association_values'?: Array<AssociationValueOut>;
    /**
     * The partial dependence plot information.
     * @type {Array<PartialDependencePlotIn>}
     * @memberof AssociationOut
     */
    'pdps'?: Array<PartialDependencePlotIn>;
    /**
     * Statistical controls of the association. (overrides model)
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'statistical_controls'?: Array<string>;
    /**
     * Populations of the association. (overrides dataset)
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'population_strings'?: Array<string>;
    /**
     * Collection of links to related resources.
     * @type {AssociationLinks}
     * @memberof AssociationOut
     */
    '_links'?: AssociationLinks;
    /**
     * Model system id the Association belongs to.
     * @type {string}
     * @memberof AssociationOut
     */
    'model_id': string;
    /**
     * The feature data.
     * @type {Array<FeatureOut>}
     * @memberof AssociationOut
     */
    'features'?: Array<FeatureOut>;
}
/**
 * Association pagination out.
 * @export
 * @interface AssociationPaginationOut
 */
export interface AssociationPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof AssociationPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<AssociationOut>}
     * @memberof AssociationPaginationOut
     */
    'items'?: Array<AssociationOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof AssociationPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof AssociationPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof AssociationPaginationOut
     */
    '_sorts'?: Array<string>;
    /**
     * Collection of filter values that can be applied.
     * @type {AssociationFilters}
     * @memberof AssociationPaginationOut
     */
    '_filters'?: AssociationFilters;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum AssociationSortEnum {
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at'
}

/**
 * Association value input class.
 * @export
 * @interface AssociationValueIn
 */
export interface AssociationValueIn {
    /**
     * The strength value of the association.
     * @type {number}
     * @memberof AssociationValueIn
     */
    'value'?: number;
    /**
     * Unit of the association value.
     * @type {string}
     * @memberof AssociationValueIn
     */
    'unit'?: string;
    /**
     * The feature rank based on feature importance
     * @type {number}
     * @memberof AssociationValueIn
     */
    'feature_rank'?: number;
    /**
     * The total number of features in the parent model.
     * @type {number}
     * @memberof AssociationValueIn
     */
    'feature_count'?: number;
    /**
     * Whether one can sum up the feature importance values.
     * @type {boolean}
     * @memberof AssociationValueIn
     */
    'importance_summation'?: boolean;
    /**
     * When using a permutation test for association value, which score type was used to calculate the value.
     * @type {ValidModelScoreEnum}
     * @memberof AssociationValueIn
     */
    'permutation_score_type'?: ValidModelScoreEnum;
    /**
     * Who generated this value.
     * @type {ValidValueSource}
     * @memberof AssociationValueIn
     */
    'generated_by'?: ValidValueSource;
    /**
     * Statistical significance value of the association.
     * @type {SignificanceValueIn}
     * @memberof AssociationValueIn
     */
    'significance_value'?: SignificanceValueIn;
    /**
     * Standard error of the Association value.
     * @type {number}
     * @memberof AssociationValueIn
     */
    'standard_error'?: number;
    /**
     * The method by which the feature importance has been measured.
     * @type {ValidFeatureContributionMethod}
     * @memberof AssociationValueIn
     */
    'feature_contribution_method': ValidFeatureContributionMethod;
    /**
     * Association value properties. Use to prototype.
     * @type {object}
     * @memberof AssociationValueIn
     */
    'properties'?: object;
    /**
     * Historical values.
     * @type {{ [key: string]: AssociationValueInBase; }}
     * @memberof AssociationValueIn
     */
    'history'?: { [key: string]: AssociationValueInBase; };
}
/**
 * Association value class.
 * @export
 * @interface AssociationValueInBase
 */
export interface AssociationValueInBase {
    /**
     * The strength value of the association.
     * @type {number}
     * @memberof AssociationValueInBase
     */
    'value'?: number;
    /**
     * Unit of the association value.
     * @type {string}
     * @memberof AssociationValueInBase
     */
    'unit'?: string;
    /**
     * The feature rank based on feature importance
     * @type {number}
     * @memberof AssociationValueInBase
     */
    'feature_rank'?: number;
    /**
     * The total number of features in the parent model.
     * @type {number}
     * @memberof AssociationValueInBase
     */
    'feature_count'?: number;
    /**
     * Whether one can sum up the feature importance values.
     * @type {boolean}
     * @memberof AssociationValueInBase
     */
    'importance_summation'?: boolean;
    /**
     * When using a permutation test for association value, which score type was used to calculate the value.
     * @type {ValidModelScoreEnum}
     * @memberof AssociationValueInBase
     */
    'permutation_score_type'?: ValidModelScoreEnum;
    /**
     * Who generated this value.
     * @type {ValidValueSource}
     * @memberof AssociationValueInBase
     */
    'generated_by'?: ValidValueSource;
    /**
     * Statistical significance value of the association.
     * @type {SignificanceValueIn}
     * @memberof AssociationValueInBase
     */
    'significance_value'?: SignificanceValueIn;
    /**
     * Standard error of the Association value.
     * @type {number}
     * @memberof AssociationValueInBase
     */
    'standard_error'?: number;
    /**
     * The method by which the feature importance has been measured.
     * @type {ValidFeatureContributionMethod}
     * @memberof AssociationValueInBase
     */
    'feature_contribution_method': ValidFeatureContributionMethod;
    /**
     * Association value properties. Use to prototype.
     * @type {object}
     * @memberof AssociationValueInBase
     */
    'properties'?: object;
}
/**
 * Association value output model.
 * @export
 * @interface AssociationValueOut
 */
export interface AssociationValueOut {
    /**
     * The strength value of the association.
     * @type {number}
     * @memberof AssociationValueOut
     */
    'value'?: number;
    /**
     * Unit of the association value.
     * @type {string}
     * @memberof AssociationValueOut
     */
    'unit'?: string;
    /**
     * The feature rank based on feature importance
     * @type {number}
     * @memberof AssociationValueOut
     */
    'feature_rank'?: number;
    /**
     * The total number of features in the parent model.
     * @type {number}
     * @memberof AssociationValueOut
     */
    'feature_count'?: number;
    /**
     * Whether one can sum up the feature importance values.
     * @type {boolean}
     * @memberof AssociationValueOut
     */
    'importance_summation'?: boolean;
    /**
     * When using a permutation test for association value, which score type was used to calculate the value.
     * @type {ValidModelScoreEnum}
     * @memberof AssociationValueOut
     */
    'permutation_score_type'?: ValidModelScoreEnum;
    /**
     * Who generated this value.
     * @type {ValidValueSource}
     * @memberof AssociationValueOut
     */
    'generated_by'?: ValidValueSource;
    /**
     * Statistical significance value of the association.
     * @type {SignificanceValueOut}
     * @memberof AssociationValueOut
     */
    'significance_value'?: SignificanceValueOut;
    /**
     * Standard error of the Association value.
     * @type {number}
     * @memberof AssociationValueOut
     */
    'standard_error'?: number;
    /**
     * The method by which the feature importance has been measured.
     * @type {FeatureContributionMethod}
     * @memberof AssociationValueOut
     */
    'feature_contribution_method'?: FeatureContributionMethod;
    /**
     * Association value properties. Use to prototype.
     * @type {object}
     * @memberof AssociationValueOut
     */
    'properties'?: object;
    /**
     * Historical values.
     * @type {{ [key: string]: AssociationValueInBase; }}
     * @memberof AssociationValueOut
     */
    'history'?: { [key: string]: AssociationValueInBase; };
    /**
     * Whether this is a primary association_value or not.
     * @type {boolean}
     * @memberof AssociationValueOut
     */
    'primary_association_value'?: boolean;
}
/**
 * Enum for attribute types.
 * @export
 * @enum {string}
 */

export enum AttributeTypeEnum {
    Invalid = 'invalid',
    Categorical = 'categorical',
    DateRange = 'date_range',
    NumberRange = 'number_range',
    FreeText = 'free_text',
    Location = 'location'
}

/**
 * An Author input data.
 * @export
 * @interface AuthorIn
 */
export interface AuthorIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AuthorIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AuthorIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof AuthorIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AuthorIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AuthorIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Author\'s name.
     * @type {string}
     * @memberof AuthorIn
     */
    'name': string;
    /**
     * Author\'s affiliation
     * @type {Array<string>}
     * @memberof AuthorIn
     */
    'affiliation'?: Array<string>;
    /**
     * Author\'s ORCID
     * @type {string}
     * @memberof AuthorIn
     */
    'orcid'?: string;
}
/**
 * Author resource links.
 * @export
 * @interface AuthorLinks
 */
export interface AuthorLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof AuthorLinks
     */
    'self': string;
}
/**
 * Author output model.
 * @export
 * @interface AuthorOut
 */
export interface AuthorOut {
    /**
     * 
     * @type {string}
     * @memberof AuthorOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof AuthorOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof AuthorOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof AuthorOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof AuthorOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof AuthorOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof AuthorOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AuthorOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AuthorOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof AuthorOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AuthorOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AuthorOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Author\'s name.
     * @type {string}
     * @memberof AuthorOut
     */
    'name': string;
    /**
     * Author\'s affiliation
     * @type {Array<string>}
     * @memberof AuthorOut
     */
    'affiliation'?: Array<string>;
    /**
     * Author\'s ORCID
     * @type {string}
     * @memberof AuthorOut
     */
    'orcid'?: string;
    /**
     * Collection of links to related resources.
     * @type {AuthorLinks}
     * @memberof AuthorOut
     */
    '_links'?: AuthorLinks;
    /**
     * The System user id of this Author.
     * @type {string}
     * @memberof AuthorOut
     */
    'user_id'?: string;
}
/**
 * Author pagination out.
 * @export
 * @interface AuthorPaginationOut
 */
export interface AuthorPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof AuthorPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<AuthorOut>}
     * @memberof AuthorPaginationOut
     */
    'items'?: Array<AuthorOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof AuthorPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof AuthorPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof AuthorPaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum AuthorSortEnum {
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Credentials for an integration without password.
 * @export
 * @interface BigQueryCredentials
 */
export interface BigQueryCredentials {
    /**
     * Integration location.
     * @type {string}
     * @memberof BigQueryCredentials
     */
    'location': string;
    /**
     * Integration project.
     * @type {string}
     * @memberof BigQueryCredentials
     */
    'project': string;
}
/**
 * Input credentials for a BigQuery integration.
 * @export
 * @interface BigQueryCredentialsIn
 */
export interface BigQueryCredentialsIn {
    /**
     * Integration location.
     * @type {string}
     * @memberof BigQueryCredentialsIn
     */
    'location': string;
    /**
     * Integration project.
     * @type {string}
     * @memberof BigQueryCredentialsIn
     */
    'project': string;
    /**
     * Integration credentials.
     * @type {string}
     * @memberof BigQueryCredentialsIn
     */
    'raw_credentials': string;
}
/**
 * 
 * @export
 * @interface BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
 */
export interface BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost {
    /**
     * 
     * @type {Array<string>}
     * @memberof BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
     */
    'ids': Array<string>;
}
/**
 * 
 * @export
 * @interface BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
 */
export interface BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost {
    /**
     * 
     * @type {Array<string>}
     * @memberof BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
     */
    'ids': Array<string>;
}
/**
 * 
 * @export
 * @interface BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
 */
export interface BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete {
    /**
     * 
     * @type {Array<string>}
     * @memberof BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
     */
    'ids': Array<string>;
}
/**
 * 
 * @export
 * @interface BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
 */
export interface BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete {
    /**
     * 
     * @type {Array<string>}
     * @memberof BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
     */
    'ids': Array<string>;
}
/**
 * 
 * @export
 * @interface BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
 */
export interface BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete {
    /**
     * 
     * @type {Array<string>}
     * @memberof BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
     */
    'ids': Array<string>;
}
/**
 * 
 * @export
 * @interface BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
 */
export interface BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete {
    /**
     * 
     * @type {Array<string>}
     * @memberof BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
     */
    'ids': Array<string>;
}
/**
 * 
 * @export
 * @interface BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
 */
export interface BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost {
    /**
     * Ids to merge with
     * @type {Array<string>}
     * @memberof BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
     */
    'merge_ids': Array<string>;
}
/**
 * 
 * @export
 * @interface BodyMergeVariablePostV1VariablesVariableIdMergePost
 */
export interface BodyMergeVariablePostV1VariablesVariableIdMergePost {
    /**
     * Ids to merge with
     * @type {Array<string>}
     * @memberof BodyMergeVariablePostV1VariablesVariableIdMergePost
     */
    'merge_ids': Array<string>;
}
/**
 * Patch a `Association` with provided data.
 * @export
 * @interface BulkPatchAssociationOp
 */
export interface BulkPatchAssociationOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof BulkPatchAssociationOp
     */
    'field': string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof BulkPatchAssociationOp
     */
    'value'?: any;
    /**
     * Operation to perform on resource field.
     * @type {PatchOp}
     * @memberof BulkPatchAssociationOp
     */
    'op': PatchOp;
    /**
     * The id of resource to apply this patch to.
     * @type {string}
     * @memberof BulkPatchAssociationOp
     */
    'id': string;
}
/**
 * Patch a `Feature` with provided data.
 * @export
 * @interface BulkPatchFeatureOp
 */
export interface BulkPatchFeatureOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof BulkPatchFeatureOp
     */
    'field': string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof BulkPatchFeatureOp
     */
    'value'?: any;
    /**
     * Operation to perform on resource field.
     * @type {PatchOp}
     * @memberof BulkPatchFeatureOp
     */
    'op': PatchOp;
    /**
     * The id of resource to apply this patch to.
     * @type {string}
     * @memberof BulkPatchFeatureOp
     */
    'id': string;
}
/**
 * Model to represent calibrator bucket params.
 * @export
 * @interface CalibratorBucketParams
 */
export interface CalibratorBucketParams {
    /**
     * Bucket edges for calibrators.
     * @type {Array<number>}
     * @memberof CalibratorBucketParams
     */
    'buckets': Array<number>;
    /**
     * Max value of this relationship type.
     * @type {number}
     * @memberof CalibratorBucketParams
     */
    'max_value': number;
    /**
     * Min value of this relationship type.
     * @type {number}
     * @memberof CalibratorBucketParams
     */
    'min_value': number;
}
/**
 * Represent a structured statistics for a categorical (including binary) feature type.
 * @export
 * @interface CategoricalFeatureStatistics
 */
export interface CategoricalFeatureStatistics {
    /**
     * Number of distinct values in the feature.
     * @type {number}
     * @memberof CategoricalFeatureStatistics
     */
    'distinct_count'?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof CategoricalFeatureStatistics
     */
    'percent_missing'?: number;
    /**
     * Frequency of occurrence of each value.
     * @type {Frequency}
     * @memberof CategoricalFeatureStatistics
     */
    'frequency'?: Frequency;
    /**
     * Distinct Values that the categorical feature takes.
     * @type {Array<string>}
     * @memberof CategoricalFeatureStatistics
     */
    'distinct_values'?: Array<string>;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: CategoricalFeatureStatisticsSimpleBase; }}
     * @memberof CategoricalFeatureStatistics
     */
    'history'?: { [key: string]: CategoricalFeatureStatisticsSimpleBase; };
}
/**
 * Represent a structured statistics for a categorical (including binary) feature type.
 * @export
 * @interface CategoricalFeatureStatisticsSimpleBase
 */
export interface CategoricalFeatureStatisticsSimpleBase {
    /**
     * Number of distinct values in the feature.
     * @type {number}
     * @memberof CategoricalFeatureStatisticsSimpleBase
     */
    'distinct_count'?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof CategoricalFeatureStatisticsSimpleBase
     */
    'percent_missing'?: number;
}
/**
 * Category population attribute value input.
 * @export
 * @interface CategoryIn
 */
export interface CategoryIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof CategoryIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof CategoryIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof CategoryIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof CategoryIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof CategoryIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof CategoryIn
     */
    'xids'?: { [key: string]: string; };
    /**
     * Category name
     * @type {string}
     * @memberof CategoryIn
     */
    'category_name': string;
}
/**
 * Category population attribute value output model.
 * @export
 * @interface CategoryOut
 */
export interface CategoryOut {
    /**
     * 
     * @type {string}
     * @memberof CategoryOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof CategoryOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof CategoryOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof CategoryOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof CategoryOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof CategoryOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof CategoryOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof CategoryOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof CategoryOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof CategoryOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof CategoryOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof CategoryOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof CategoryOut
     */
    'xids'?: { [key: string]: string; };
    /**
     * Collection of links to related resources.
     * @type {PopulationAttributeValueLinks}
     * @memberof CategoryOut
     */
    '_links'?: PopulationAttributeValueLinks;
    /**
     * The population attribute type of the value.
     * @type {AttributeTypeEnum}
     * @memberof CategoryOut
     */
    'attribute_type'?: AttributeTypeEnum;
    /**
     * Category name
     * @type {string}
     * @memberof CategoryOut
     */
    'category_name': string;
}
/**
 * Schema for cluster response.
 * @export
 * @interface Cluster
 */
export interface Cluster {
    /**
     * 
     * @type {string}
     * @memberof Cluster
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Cluster
     */
    'display_summary': string;
    /**
     * 
     * @type {string}
     * @memberof Cluster
     */
    'prompt_summary': string;
    /**
     * 
     * @type {number}
     * @memberof Cluster
     */
    'avg_distance': number;
}
/**
 * Schema for clustered relationship response.
 * @export
 * @interface ClusteredRelationship
 */
export interface ClusteredRelationship {
    /**
     * 
     * @type {Array<SimpleBaseObject>}
     * @memberof ClusteredRelationship
     */
    'variables': Array<SimpleBaseObject>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClusteredRelationship
     */
    'cluster_ids': Array<string>;
    /**
     * 
     * @type {Array<FindingId>}
     * @memberof ClusteredRelationship
     */
    'finding_ids': Array<FindingId>;
}
/**
 * Concept input resource model.
 * @export
 * @interface ConceptIn
 */
export interface ConceptIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ConceptIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ConceptIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof ConceptIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * The Concept\'s corresponding wikidata id.
     * @type {string}
     * @memberof ConceptIn
     */
    'wikidata_id': string;
    /**
     * Preferred name if different from existing.
     * @type {string}
     * @memberof ConceptIn
     */
    'preferred_name'?: string;
}
/**
 * Concept resource links.
 * @export
 * @interface ConceptLinks
 */
export interface ConceptLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof ConceptLinks
     */
    'self': string;
}
/**
 * Concept output model.
 * @export
 * @interface ConceptOut
 */
export interface ConceptOut {
    /**
     * 
     * @type {string}
     * @memberof ConceptOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof ConceptOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof ConceptOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof ConceptOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof ConceptOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof ConceptOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof ConceptOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof ConceptOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * The Concept\'s corresponding wikidata id.
     * @type {string}
     * @memberof ConceptOut
     */
    'wikidata_id': string;
    /**
     * Preferred name if different from existing.
     * @type {string}
     * @memberof ConceptOut
     */
    'preferred_name'?: string;
    /**
     * The Concept\'s name.
     * @type {string}
     * @memberof ConceptOut
     */
    'name'?: string;
    /**
     * The Concept\'s aliases.
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    'aliases'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ConceptOut
     */
    'description'?: string;
    /**
     * Collection of links to related resources.
     * @type {ConceptLinks}
     * @memberof ConceptOut
     */
    '_links'?: ConceptLinks;
}
/**
 * Concept pagination out.
 * @export
 * @interface ConceptPaginationOut
 */
export interface ConceptPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof ConceptPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<ConceptOut>}
     * @memberof ConceptPaginationOut
     */
    'items'?: Array<ConceptOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof ConceptPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof ConceptPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof ConceptPaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum ConceptSortEnum {
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Confidence interval input model.
 * @export
 * @interface ConfidenceIntervalIn
 */
export interface ConfidenceIntervalIn {
    /**
     * Confidence level for interval.
     * @type {ValidSignificanceLevel}
     * @memberof ConfidenceIntervalIn
     */
    'level'?: ValidSignificanceLevel;
    /**
     * The lower bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalIn
     */
    'ci_lower': number;
    /**
     * The upper bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalIn
     */
    'ci_upper': number;
}
/**
 * Confidence interval output model.
 * @export
 * @interface ConfidenceIntervalOut
 */
export interface ConfidenceIntervalOut {
    /**
     * Confidence level for interval.
     * @type {SignificanceLevel}
     * @memberof ConfidenceIntervalOut
     */
    'level'?: SignificanceLevel;
    /**
     * The lower bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalOut
     */
    'ci_lower'?: number;
    /**
     * The upper bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalOut
     */
    'ci_upper'?: number;
}
/**
 * A Dashboard input data.
 * @export
 * @interface DashboardIn
 */
export interface DashboardIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DashboardIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DashboardIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DashboardIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DashboardIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DashboardIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Dashboard\'s name.
     * @type {string}
     * @memberof DashboardIn
     */
    'name': string;
    /**
     * Dashboard\'s description.
     * @type {string}
     * @memberof DashboardIn
     */
    'description'?: string;
    /**
     * Dashboard\'s source url.
     * @type {string}
     * @memberof DashboardIn
     */
    'url'?: string;
    /**
     * Dashboard\'s external tool.
     * @type {ExternalToolEnum}
     * @memberof DashboardIn
     */
    'external_tool'?: ExternalToolEnum;
    /**
     * Dashboard\'s external id.
     * @type {string}
     * @memberof DashboardIn
     */
    'external_id'?: string;
    /**
     * Dashboard\'s external author.
     * @type {string}
     * @memberof DashboardIn
     */
    'external_author'?: string;
    /**
     * Dashboard\'s number of elements.
     * @type {number}
     * @memberof DashboardIn
     */
    'element_count'?: number;
    /**
     * Dashboard\'s number of views.
     * @type {number}
     * @memberof DashboardIn
     */
    'view_count'?: number;
    /**
     * Dashboard\'s number of elements.
     * @type {number}
     * @memberof DashboardIn
     */
    'favorite_count'?: number;
    /**
     * The time this dashboard was created.
     * @type {string}
     * @memberof DashboardIn
     */
    'created_on'?: string;
    /**
     * Dashboard\'s filters used.
     * @type {Array<string>}
     * @memberof DashboardIn
     */
    'filters_used'?: Array<string>;
}
/**
 * Dashboard resource links.
 * @export
 * @interface DashboardLinks
 */
export interface DashboardLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof DashboardLinks
     */
    'self': string;
}
/**
 * Dashboard output model.
 * @export
 * @interface DashboardOut
 */
export interface DashboardOut {
    /**
     * 
     * @type {string}
     * @memberof DashboardOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof DashboardOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof DashboardOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof DashboardOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof DashboardOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof DashboardOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof DashboardOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DashboardOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DashboardOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DashboardOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DashboardOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DashboardOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Dashboard\'s name.
     * @type {string}
     * @memberof DashboardOut
     */
    'name': string;
    /**
     * Dashboard\'s description.
     * @type {string}
     * @memberof DashboardOut
     */
    'description'?: string;
    /**
     * Dashboard\'s source url.
     * @type {string}
     * @memberof DashboardOut
     */
    'url'?: string;
    /**
     * Dashboard\'s external tool.
     * @type {ExternalToolEnum}
     * @memberof DashboardOut
     */
    'external_tool'?: ExternalToolEnum;
    /**
     * Dashboard\'s external id.
     * @type {string}
     * @memberof DashboardOut
     */
    'external_id'?: string;
    /**
     * Dashboard\'s external author.
     * @type {string}
     * @memberof DashboardOut
     */
    'external_author'?: string;
    /**
     * Dashboard\'s number of elements.
     * @type {number}
     * @memberof DashboardOut
     */
    'element_count'?: number;
    /**
     * Dashboard\'s number of views.
     * @type {number}
     * @memberof DashboardOut
     */
    'view_count'?: number;
    /**
     * Dashboard\'s number of elements.
     * @type {number}
     * @memberof DashboardOut
     */
    'favorite_count'?: number;
    /**
     * The time this dashboard was created.
     * @type {string}
     * @memberof DashboardOut
     */
    'created_on'?: string;
    /**
     * Dashboard\'s filters used.
     * @type {Array<string>}
     * @memberof DashboardOut
     */
    'filters_used'?: Array<string>;
    /**
     * Collection of links to related resources.
     * @type {DashboardLinks}
     * @memberof DashboardOut
     */
    '_links'?: DashboardLinks;
    /**
     * Team.
     * @type {TeamOut}
     * @memberof DashboardOut
     */
    'team'?: TeamOut;
}
/**
 * Dashboard pagination out.
 * @export
 * @interface DashboardPaginationOut
 */
export interface DashboardPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof DashboardPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<DashboardOut>}
     * @memberof DashboardPaginationOut
     */
    'items'?: Array<DashboardOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof DashboardPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof DashboardPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof DashboardPaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum DashboardSortEnum {
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * A System Database Usage Object.
 * @export
 * @interface DatabaseUsage
 */
export interface DatabaseUsage {
    /**
     * Text of query run on database.
     * @type {string}
     * @memberof DatabaseUsage
     */
    'query_text'?: string;
    /**
     * List of database user IDs for users that have run this query.
     * @type {Array<string>}
     * @memberof DatabaseUsage
     */
    'db_user_ids'?: Array<string>;
    /**
     * Latest value for database query\'s label.
     * @type {string}
     * @memberof DatabaseUsage
     */
    'latest_label'?: string;
    /**
     * Latest start timestamp for query with this query_text.
     * @type {string}
     * @memberof DatabaseUsage
     */
    'latest_timestamp'?: string;
    /**
     * Number of times this query has been run over specified time span.
     * @type {number}
     * @memberof DatabaseUsage
     */
    'run_count'?: number;
    /**
     * Names of tables referenced in this query.
     * @type {Array<string>}
     * @memberof DatabaseUsage
     */
    'tables_referenced'?: Array<string>;
    /**
     * Names of features referenced in this query, indexed by table name.
     * @type {{ [key: string]: Array<string>; }}
     * @memberof DatabaseUsage
     */
    'features_referenced'?: { [key: string]: Array<string>; };
}
/**
 * A System Dataset Resource.
 * @export
 * @interface DatasetIn
 */
export interface DatasetIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DatasetIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DatasetIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DatasetIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DatasetIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DatasetIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Dataset name.
     * @type {string}
     * @memberof DatasetIn
     */
    'name': string;
    /**
     * The link for the download (*necessary for model to be “Reproducible”)
     * @type {string}
     * @memberof DatasetIn
     */
    'url'?: string;
    /**
     * The link for the API
     * @type {string}
     * @memberof DatasetIn
     */
    'api_url'?: string;
    /**
     * Location of a page describing the dataset.
     * @type {string}
     * @memberof DatasetIn
     */
    'desc_url'?: string;
    /**
     * An identifier, such as a DOI or a Compact Identifier. If the dataset has more than one identifier, repeat the identifier property. If using JSON-LD, this is represented using JSON list syntax.
     * @type {Array<string>}
     * @memberof DatasetIn
     */
    'identifiers'?: Array<string>;
    /**
     * The version number for the dataset.
     * @type {string}
     * @memberof DatasetIn
     */
    'version'?: string;
    /**
     * Dataset description.
     * @type {string}
     * @memberof DatasetIn
     */
    'description'?: string;
    /**
     * The individual or organization to whom this dataset belongs (e.g. holds copyright).
     * @type {string}
     * @memberof DatasetIn
     */
    'owner'?: string;
    /**
     * The file format of the dataset.
     * @type {string}
     * @memberof DatasetIn
     */
    'format'?: string;
    /**
     * Alternative name that have been used to refer to this dataset, such as alias or abbreviation.
     * @type {Array<string>}
     * @memberof DatasetIn
     */
    'aliases'?: Array<string>;
    /**
     * Catalogs to which the dataset belongs
     * @type {Array<string>}
     * @memberof DatasetIn
     */
    'data_catalogs'?: Array<string>;
    /**
     * Sample size of dataset if known and fixed.
     * @type {number}
     * @memberof DatasetIn
     */
    'sample_size'?: number;
    /**
     * Does the dataset contain personally identifiable information?
     * @type {boolean}
     * @memberof DatasetIn
     */
    'has_pii'?: boolean;
    /**
     * Does the dataset contain personally identifiable health information?
     * @type {boolean}
     * @memberof DatasetIn
     */
    'has_phi'?: boolean;
    /**
     * A license under which the dataset is distributed.
     * @type {ValidDatasetLicenseEnum}
     * @memberof DatasetIn
     */
    'license'?: ValidDatasetLicenseEnum;
    /**
     * A database query that a user can execute to produce the dataset object.
     * @type {string}
     * @memberof DatasetIn
     */
    'db_query'?: string;
    /**
     * A database connection string to execute db_query. Might include free-text instructions.
     * @type {string}
     * @memberof DatasetIn
     */
    'db_connection_string'?: string;
    /**
     * The database language or protocol (e.g., Azure Storage, Postgres, MySQL, OpenOffice) used to produce the dataset object.
     * @type {string}
     * @memberof DatasetIn
     */
    'db_language'?: string;
    /**
     * Database Usage JSON object (stored as string) used to populate Usage tab.
     * @type {Array<DatabaseUsage>}
     * @memberof DatasetIn
     */
    'db_usage'?: Array<DatabaseUsage>;
    /**
     * String descriptions of populations.
     * @type {Array<string>}
     * @memberof DatasetIn
     */
    'population_strings'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum DatasetLicenseEnum {
    PublicDomain = 'public_domain',
    CreativeCommonsPublicDomainDedication = 'creative_commons_public_domain_dedication',
    OpendataCommonsPublicDomainDedicationAndLicense = 'opendata_commons_public_domain_dedication_and_license',
    CreativeCommonsAttributionInternational = 'creative_commons_attribution_international',
    CommunityDataLicenseAgreementVersion1Permissive = 'community_data_license_agreement_version_1_permissive',
    OpenDataCommonsAttributionLicense = 'open_data_commons_attribution_license',
    CreativeCommonsAttributionShareAlike4International = 'creative_commons_attribution_share_alike_4_international',
    CommunityDataLicenseAgreementVersion1Sharing = 'community_data_license_agreement_version_1_sharing',
    OpenDataCommonsOpenDatabaseLicense = 'open_data_commons_open_database_license',
    CreativeCommonsAttributionNoncommercial4International = 'creative_commons_attribution_noncommercial_4_international',
    CreativeCommonsAttributionNoderivatives4International = 'creative_commons_attribution_noderivatives_4_international',
    CreativeCommonsAttributionNoncommercialShareAlike4International = 'creative_commons_attribution_noncommercial_share_alike_4_international',
    CreativeCommonsAttributionNoncommercialNoderivatives4International = 'creative_commons_attribution_noncommercial_noderivatives_4_international',
    Other = 'other',
    Invalid = 'invalid'
}

/**
 * Dataset resource links.
 * @export
 * @interface DatasetLinks
 */
export interface DatasetLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof DatasetLinks
     */
    'self': string;
    /**
     * Link to dataset\'s features.
     * @type {string}
     * @memberof DatasetLinks
     */
    'features': string;
    /**
     * Link to dataset\'s index feature if it is set.
     * @type {string}
     * @memberof DatasetLinks
     */
    'index'?: string;
}
/**
 * Dataset output model.
 * @export
 * @interface DatasetOut
 */
export interface DatasetOut {
    /**
     * 
     * @type {string}
     * @memberof DatasetOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof DatasetOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof DatasetOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof DatasetOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof DatasetOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof DatasetOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof DatasetOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DatasetOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DatasetOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DatasetOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Dataset name.
     * @type {string}
     * @memberof DatasetOut
     */
    'name'?: string;
    /**
     * The link for the download (*necessary for model to be “Reproducible”)
     * @type {string}
     * @memberof DatasetOut
     */
    'url'?: string;
    /**
     * The link for the API
     * @type {string}
     * @memberof DatasetOut
     */
    'api_url'?: string;
    /**
     * Location of a page describing the dataset.
     * @type {string}
     * @memberof DatasetOut
     */
    'desc_url'?: string;
    /**
     * An identifier, such as a DOI or a Compact Identifier. If the dataset has more than one identifier, repeat the identifier property. If using JSON-LD, this is represented using JSON list syntax.
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    'identifiers'?: Array<string>;
    /**
     * The version number for the dataset.
     * @type {string}
     * @memberof DatasetOut
     */
    'version'?: string;
    /**
     * Dataset description.
     * @type {string}
     * @memberof DatasetOut
     */
    'description'?: string;
    /**
     * The individual or organization to whom this dataset belongs (e.g. holds copyright).
     * @type {string}
     * @memberof DatasetOut
     */
    'owner'?: string;
    /**
     * The file format of the dataset.
     * @type {string}
     * @memberof DatasetOut
     */
    'format'?: string;
    /**
     * Alternative name that have been used to refer to this dataset, such as alias or abbreviation.
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    'aliases'?: Array<string>;
    /**
     * Catalogs to which the dataset belongs
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    'data_catalogs'?: Array<string>;
    /**
     * Sample size of dataset if known and fixed.
     * @type {number}
     * @memberof DatasetOut
     */
    'sample_size'?: number;
    /**
     * Does the dataset contain personally identifiable information?
     * @type {boolean}
     * @memberof DatasetOut
     */
    'has_pii'?: boolean;
    /**
     * Does the dataset contain personally identifiable health information?
     * @type {boolean}
     * @memberof DatasetOut
     */
    'has_phi'?: boolean;
    /**
     * A license under which the dataset is distributed.
     * @type {DatasetLicenseEnum}
     * @memberof DatasetOut
     */
    'license'?: DatasetLicenseEnum;
    /**
     * A database query that a user can execute to produce the dataset object.
     * @type {string}
     * @memberof DatasetOut
     */
    'db_query'?: string;
    /**
     * A database connection string to execute db_query. Might include free-text instructions.
     * @type {string}
     * @memberof DatasetOut
     */
    'db_connection_string'?: string;
    /**
     * The database language or protocol (e.g., Azure Storage, Postgres, MySQL, OpenOffice) used to produce the dataset object.
     * @type {string}
     * @memberof DatasetOut
     */
    'db_language'?: string;
    /**
     * Database Usage JSON object (stored as string) used to populate Usage tab.
     * @type {Array<DatabaseUsage>}
     * @memberof DatasetOut
     */
    'db_usage'?: Array<DatabaseUsage>;
    /**
     * String descriptions of populations.
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    'population_strings'?: Array<string>;
    /**
     * Collection of links to related resources.
     * @type {DatasetLinks}
     * @memberof DatasetOut
     */
    '_links'?: DatasetLinks;
    /**
     * The index of the dataset is the column in the dataset used as row labels (mostly relevant for trainingset)
     * @type {FeatureOut}
     * @memberof DatasetOut
     */
    'index'?: FeatureOut;
    /**
     * Deprecated: The subgraph id of the resource.
     * @type {string}
     * @memberof DatasetOut
     */
    'subgraph_id'?: string;
    /**
     * Number of models using this dataset.
     * @type {number}
     * @memberof DatasetOut
     */
    'model_count'?: number;
    /**
     * Object\'s tagged to this study.
     * @type {AppSchemaDatasetsObjectTags}
     * @memberof DatasetOut
     */
    'object_tags'?: AppSchemaDatasetsObjectTags;
}
/**
 * Dataset pagination out.
 * @export
 * @interface DatasetPaginationOut
 */
export interface DatasetPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof DatasetPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<DatasetOut>}
     * @memberof DatasetPaginationOut
     */
    'items'?: Array<DatasetOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof DatasetPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof DatasetPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof DatasetPaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum DatasetSortEnum {
    Popularity = 'popularity',
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Date range population attribute value input.
 * @export
 * @interface DateRangeIn
 */
export interface DateRangeIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DateRangeIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DateRangeIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DateRangeIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DateRangeIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DateRangeIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof DateRangeIn
     */
    'xids'?: { [key: string]: string; };
    /**
     * Start datetime.
     * @type {string}
     * @memberof DateRangeIn
     */
    'date_start': string;
    /**
     * End datetime.
     * @type {string}
     * @memberof DateRangeIn
     */
    'date_end': string;
    /**
     * Input date string for start date.
     * @type {string}
     * @memberof DateRangeIn
     */
    'date_start_string'?: string;
    /**
     * Input date string for end date.
     * @type {string}
     * @memberof DateRangeIn
     */
    'date_end_string'?: string;
}
/**
 * Date range population attribute value output model.
 * @export
 * @interface DateRangeOut
 */
export interface DateRangeOut {
    /**
     * 
     * @type {string}
     * @memberof DateRangeOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof DateRangeOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof DateRangeOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof DateRangeOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof DateRangeOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof DateRangeOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof DateRangeOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DateRangeOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DateRangeOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DateRangeOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DateRangeOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DateRangeOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof DateRangeOut
     */
    'xids'?: { [key: string]: string; };
    /**
     * Collection of links to related resources.
     * @type {PopulationAttributeValueLinks}
     * @memberof DateRangeOut
     */
    '_links'?: PopulationAttributeValueLinks;
    /**
     * The population attribute type of the value.
     * @type {AttributeTypeEnum}
     * @memberof DateRangeOut
     */
    'attribute_type'?: AttributeTypeEnum;
    /**
     * Start datetime.
     * @type {string}
     * @memberof DateRangeOut
     */
    'date_start': string;
    /**
     * End datetime.
     * @type {string}
     * @memberof DateRangeOut
     */
    'date_end': string;
    /**
     * Input date string for start date.
     * @type {string}
     * @memberof DateRangeOut
     */
    'date_start_string'?: string;
    /**
     * Input date string for end date.
     * @type {string}
     * @memberof DateRangeOut
     */
    'date_end_string'?: string;
}
/**
 * Represent statistics for a datetime feature.
 * @export
 * @interface DatetimeFeatureStatistics
 */
export interface DatetimeFeatureStatistics {
    /**
     * Percentage of column values that are missing or zero-length.
     * @type {number}
     * @memberof DatetimeFeatureStatistics
     */
    'percent_missing'?: number;
    /**
     * Earliest time of datetime values.
     * @type {string}
     * @memberof DatetimeFeatureStatistics
     */
    'earliest_time'?: string;
    /**
     * Latest time of datetime values.
     * @type {string}
     * @memberof DatetimeFeatureStatistics
     */
    'latest_time'?: string;
    /**
     * Histogram depicting the distribution of datetime features.
     * @type {DatetimeHistogram}
     * @memberof DatetimeFeatureStatistics
     */
    'histogram'?: DatetimeHistogram;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: DatetimeFeatureStatisticsSimpleBase; }}
     * @memberof DatetimeFeatureStatistics
     */
    'history'?: { [key: string]: DatetimeFeatureStatisticsSimpleBase; };
}
/**
 * Represent statistics for datetime feature.  These fields will be included in the stats history.
 * @export
 * @interface DatetimeFeatureStatisticsSimpleBase
 */
export interface DatetimeFeatureStatisticsSimpleBase {
    /**
     * Percentage of column values that are missing or zero-length.
     * @type {number}
     * @memberof DatetimeFeatureStatisticsSimpleBase
     */
    'percent_missing'?: number;
    /**
     * Earliest time of datetime values.
     * @type {string}
     * @memberof DatetimeFeatureStatisticsSimpleBase
     */
    'earliest_time'?: string;
    /**
     * Latest time of datetime values.
     * @type {string}
     * @memberof DatetimeFeatureStatisticsSimpleBase
     */
    'latest_time'?: string;
}
/**
 * A datetime histogram object.  See https://numpy.org/doc/1.18/reference/generated/numpy.histogram.html
 * @export
 * @interface DatetimeHistogram
 */
export interface DatetimeHistogram {
    /**
     * The density values of the histogram
     * @type {Array<number>}
     * @memberof DatetimeHistogram
     */
    'hist'?: Array<number>;
    /**
     * The bin edges (length(hist)+1). All but the last (righthand-most) bin is half-open
     * @type {Array<string>}
     * @memberof DatetimeHistogram
     */
    'bin_edges_date_time'?: Array<string>;
}
/**
 * Model Deployment model.
 * @export
 * @interface Deployment
 */
export interface Deployment {
    /**
     * Model\'s deployment stage.
     * @type {DeploymentStageEnum}
     * @memberof Deployment
     */
    'stage'?: DeploymentStageEnum;
    /**
     * Model\'s deployed artifact url. E.g. link to the object in S3.
     * @type {string}
     * @memberof Deployment
     */
    'artifact_url'?: string;
    /**
     * Model\'s deployed endpoint. E.g. the endpoint at which the deployed model is accessible.
     * @type {string}
     * @memberof Deployment
     */
    'endpoint'?: string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum DeploymentStageEnum {
    Development = 'development',
    Testing = 'testing',
    Staging = 'staging',
    Production = 'production',
    Invalid = 'invalid'
}

/**
 * Direction input for directionality post.
 * @export
 * @interface DirectionIn
 */
export interface DirectionIn {
    /**
     * The id of the features that are being directed at.
     * @type {Array<string>}
     * @memberof DirectionIn
     */
    'directed_at_ids': Array<string>;
}
/**
 * A doi input for studies.
 * @export
 * @interface DoiIn
 */
export interface DoiIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DoiIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DoiIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DoiIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DoiIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DoiIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * The DOI of the study.
     * @type {string}
     * @memberof DoiIn
     */
    'doi': string;
}
/**
 * Represent dynamic series statistics for a dynamic feature type.
 * @export
 * @interface DynamicFeatureStatistics
 */
export interface DynamicFeatureStatistics {
    /**
     * Minimum series length.
     * @type {number}
     * @memberof DynamicFeatureStatistics
     */
    'min_series_length'?: number;
    /**
     * Maximum series length.
     * @type {number}
     * @memberof DynamicFeatureStatistics
     */
    'max_series_length'?: number;
    /**
     * Line Plot of percentile value at each index value for which there are observed values.
     * @type {{ [key: string]: LinePlot; }}
     * @memberof DynamicFeatureStatistics
     */
    'percentile_series'?: { [key: string]: LinePlot; };
    /**
     * Histogram depicting the distribution of series length in the dynamic feature.
     * @type {Histogram}
     * @memberof DynamicFeatureStatistics
     */
    'series_length_distribution'?: Histogram;
    /**
     * Line Plot of the mean value at each index value for which there are observed values.
     * @type {LinePlot}
     * @memberof DynamicFeatureStatistics
     */
    'mean_series'?: LinePlot;
    /**
     * Line Plot of the standard deviation at each index value for which there are observed values.
     * @type {LinePlot}
     * @memberof DynamicFeatureStatistics
     */
    'std_series'?: LinePlot;
    /**
     * A frequency object representing the relative frequency at each index value for which there are observed values for categorical-valued dynamic features.
     * @type {{ [key: string]: Frequency; }}
     * @memberof DynamicFeatureStatistics
     */
    'frequency_series'?: { [key: string]: Frequency; };
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: DynamicFeatureStatisticsSimpleBase; }}
     * @memberof DynamicFeatureStatistics
     */
    'history'?: { [key: string]: DynamicFeatureStatisticsSimpleBase; };
}
/**
 * Represent statistics for a dynamic feature type.  These fields will be included in the stats history.
 * @export
 * @interface DynamicFeatureStatisticsSimpleBase
 */
export interface DynamicFeatureStatisticsSimpleBase {
    /**
     * Minimum series length.
     * @type {number}
     * @memberof DynamicFeatureStatisticsSimpleBase
     */
    'min_series_length'?: number;
    /**
     * Maximum series length.
     * @type {number}
     * @memberof DynamicFeatureStatisticsSimpleBase
     */
    'max_series_length'?: number;
}
/**
 * An Enterprise Resource.
 * @export
 * @interface Enterprise
 */
export interface Enterprise {
    /**
     * Enterprise name.
     * @type {string}
     * @memberof Enterprise
     */
    'name': string;
    /**
     * Enterprise Identity Provider.
     * @type {string}
     * @memberof Enterprise
     */
    'identity_provider'?: string;
    /**
     * Enterprise SAML SSO entity id.
     * @type {string}
     * @memberof Enterprise
     */
    'entity_id'?: string;
    /**
     * Enterprise SAML SSO ACS url.
     * @type {string}
     * @memberof Enterprise
     */
    'acs_url'?: string;
    /**
     * Enterprise SAML SSO IDP metadata
     * @type {string}
     * @memberof Enterprise
     */
    'idp_metadata'?: string;
    /**
     * 
     * @type {number}
     * @memberof Enterprise
     */
    'id': number;
    /**
     * The list of integrations to retrieve
     * @type {Array<Integration>}
     * @memberof Enterprise
     */
    'integrations'?: Array<Integration>;
    /**
     * The enterprise messages
     * @type {Array<MessageOut>}
     * @memberof Enterprise
     */
    'messages'?: Array<MessageOut>;
    /**
     * The actions the requesting user is allowed to perform on this resource.
     * @type {Array<ResourceAction>}
     * @memberof Enterprise
     */
    '_permissions'?: Array<ResourceAction>;
}
/**
 * An Enterprise create/update Resource.
 * @export
 * @interface EnterpriseIn
 */
export interface EnterpriseIn {
    /**
     * Enterprise name.
     * @type {string}
     * @memberof EnterpriseIn
     */
    'name': string;
    /**
     * Enterprise Identity Provider.
     * @type {string}
     * @memberof EnterpriseIn
     */
    'identity_provider'?: string;
    /**
     * Enterprise SAML SSO entity id.
     * @type {string}
     * @memberof EnterpriseIn
     */
    'entity_id'?: string;
    /**
     * Enterprise SAML SSO ACS url.
     * @type {string}
     * @memberof EnterpriseIn
     */
    'acs_url'?: string;
    /**
     * Enterprise SAML SSO IDP metadata
     * @type {string}
     * @memberof EnterpriseIn
     */
    'idp_metadata'?: string;
}
/**
 * Evidence dict for SynthesisIn.
 * @export
 * @interface Evidence
 */
export interface Evidence {
    /**
     * 
     * @type {number}
     * @memberof Evidence
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Evidence
     */
    'summary': string;
}
/**
 * Edge Typed Link model.
 * @export
 * @interface ExtendedLinkObject
 */
export interface ExtendedLinkObject {
    /**
     * 
     * @type {string}
     * @memberof ExtendedLinkObject
     */
    'source': string;
    /**
     * 
     * @type {string}
     * @memberof ExtendedLinkObject
     */
    'target': string;
    /**
     * Type of link.
     * @type {GraphLinkType}
     * @memberof ExtendedLinkObject
     */
    'edgeType'?: GraphLinkType;
    /**
     * 
     * @type {boolean}
     * @memberof ExtendedLinkObject
     */
    'isSubstantiated'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExtendedLinkObject
     */
    'directedAt'?: Array<string>;
    /**
     * Query Count of a dataset relationship.
     * @type {number}
     * @memberof ExtendedLinkObject
     */
    'numQueries'?: number;
}
/**
 * Object Typed Node model.
 * @export
 * @interface ExtendedNodeObject
 */
export interface ExtendedNodeObject {
    /**
     * 
     * @type {string}
     * @memberof ExtendedNodeObject
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ExtendedNodeObject
     */
    'name': string;
    /**
     * 
     * @type {GraphNodeType}
     * @memberof ExtendedNodeObject
     */
    'objectType': GraphNodeType;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExtendedNodeObject
     */
    'tags'?: Array<string>;
}
/**
 * External asset model.
 * @export
 * @interface ExternalAsset
 */
export interface ExternalAsset {
    /**
     * Asset uri.
     * @type {string}
     * @memberof ExternalAsset
     */
    'uri'?: string;
    /**
     * External asset type.
     * @type {ExternalAssetTypeEnum}
     * @memberof ExternalAsset
     */
    'external_asset_type'?: ExternalAssetTypeEnum;
}
/**
 * External asset type enum.
 * @export
 * @enum {string}
 */

export enum ExternalAssetTypeEnum {
    Invalid = 'invalid',
    Document = 'document',
    Notebook = 'notebook'
}

/**
 * Enum for external tools.
 * @export
 * @enum {string}
 */

export enum ExternalToolEnum {
    Looker = 'LOOKER',
    Mode = 'MODE',
    Tableau = 'TABLEAU'
}

/**
 * Properties of each facet in a query.
 * @export
 * @interface Facet
 */
export interface Facet {
    /**
     * Total value of matching results in the database.
     * @type {number}
     * @memberof Facet
     */
    'total_values': number;
    /**
     * List of items for this facet and their counts.
     * @type {Array<FacetItem>}
     * @memberof Facet
     */
    'data': Array<FacetItem>;
}
/**
 * Properties of each item in a facet list.
 * @export
 * @interface FacetItem
 */
export interface FacetItem {
    /**
     * 
     * @type {any}
     * @memberof FacetItem
     */
    'value'?: any;
    /**
     * 
     * @type {number}
     * @memberof FacetItem
     */
    'count': number;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum FeatureContributionMethod {
    Gini = 'gini',
    Gain = 'gain',
    Shap = 'shap',
    Coefficient = 'coefficient',
    Lime = 'lime',
    Permutation = 'permutation',
    PearsonR = 'pearson_r',
    KendallTau = 'kendall_tau',
    CramerV = 'cramer_v',
    KruskalWallisHTest = 'kruskal_wallis_h_test',
    ControlVariable = 'control_variable',
    ProductMomentR = 'product_moment_r',
    FrequencyScore = 'frequency_score',
    OddsRatio = 'odds_ratio',
    RelativeRiskRatio = 'relative_risk_ratio',
    HazardRatio = 'hazard_ratio',
    MeanGainUnstandardized = 'mean_gain_unstandardized',
    MeanGainStandardized = 'mean_gain_standardized',
    MeanDifferenceUnstandardized = 'mean_difference_unstandardized',
    MeanDifferenceStandardized = 'mean_difference_standardized',
    ProportionDifference = 'proportion_difference',
    LogOddsRatio = 'log_odds_ratio',
    PearsonChiSquaredTest = 'pearson_chi_squared_test',
    Forecast = 'forecast',
    PercentChangeDifference = 'percent_change_difference',
    AdjustedOddsRatio = 'adjusted_odds_ratio',
    AdjustedHazardRatio = 'adjusted_hazard_ratio',
    IncidentRateRatio = 'incident_rate_ratio',
    RiskDifference = 'risk_difference',
    InformationFlow = 'information_flow',
    StandardizedCoefficient = 'standardized_coefficient',
    CohensD = 'cohens_d',
    HedgesG = 'hedges_g',
    GlassSDelta = 'glass_s_delta',
    RootMeanSquareDifferencePsi = 'root_mean_square_difference_psi',
    MahalanobisDistance = 'mahalanobis_distance',
    CohensW = 'cohens_w',
    CohensH = 'cohens_h',
    CliffsDelta = 'cliffs_delta',
    RankBiserialCorrelation = 'rank_biserial_correlation',
    SpearmanCorrelation = 'spearman_correlation',
    Elasticity = 'elasticity',
    PrevalenceRatio = 'prevalence_ratio',
    Invalid = 'invalid'
}

/**
 * Feature contribution filter count info.
 * @export
 * @interface FeatureContributionMethodFilterCounts
 */
export interface FeatureContributionMethodFilterCounts {
    /**
     * 
     * @type {string}
     * @memberof FeatureContributionMethodFilterCounts
     */
    'method'?: string;
    /**
     * 
     * @type {number}
     * @memberof FeatureContributionMethodFilterCounts
     */
    'count'?: number;
}
/**
 * A real-world machine learning or statistical feature.
 * @export
 * @interface FeatureIn
 */
export interface FeatureIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FeatureIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FeatureIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof FeatureIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FeatureIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FeatureIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Features\'s name.
     * @type {string}
     * @memberof FeatureIn
     */
    'name': string;
    /**
     * Descriptive statistics of the feature.
     * @type {Array<FeatureStatistics>}
     * @memberof FeatureIn
     */
    'feature_statistics'?: Array<FeatureStatistics>;
    /**
     * ID of Variable this Feature operationalizes.
     * @type {string}
     * @memberof FeatureIn
     */
    'variable_id'?: string;
    /**
     * Filtered by values.
     * @type {Array<FilterValue>}
     * @memberof FeatureIn
     */
    'filtered_by_values'?: Array<FilterValue>;
}
/**
 * Variable resource links.
 * @export
 * @interface FeatureLinks
 */
export interface FeatureLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof FeatureLinks
     */
    'self': string;
    /**
     * Link to feature\'s variable.
     * @type {string}
     * @memberof FeatureLinks
     */
    'variable'?: string;
}
/**
 * Feature output model.
 * @export
 * @interface FeatureOut
 */
export interface FeatureOut {
    /**
     * 
     * @type {string}
     * @memberof FeatureOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof FeatureOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof FeatureOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof FeatureOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof FeatureOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof FeatureOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof FeatureOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FeatureOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FeatureOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof FeatureOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FeatureOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FeatureOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Features\'s name.
     * @type {string}
     * @memberof FeatureOut
     */
    'name': string;
    /**
     * Descriptive statistics of the feature.
     * @type {Array<FeatureStatistics>}
     * @memberof FeatureOut
     */
    'feature_statistics'?: Array<FeatureStatistics>;
    /**
     * ID of Variable this Feature operationalizes.
     * @type {string}
     * @memberof FeatureOut
     */
    'variable_id'?: string;
    /**
     * Filtered by values.
     * @type {Array<FilterValue>}
     * @memberof FeatureOut
     */
    'filtered_by_values'?: Array<FilterValue>;
    /**
     * Collection of links to related resources.
     * @type {FeatureLinks}
     * @memberof FeatureOut
     */
    '_links'?: FeatureLinks;
    /**
     * Number of models using this feature.
     * @type {number}
     * @memberof FeatureOut
     */
    'model_count'?: number;
    /**
     * The variable this feature operationalizes.
     * @type {VariableOut}
     * @memberof FeatureOut
     */
    'variable'?: VariableOut;
}
/**
 * Feature pagination out.
 * @export
 * @interface FeaturePaginationOut
 */
export interface FeaturePaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof FeaturePaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<FeatureOut>}
     * @memberof FeaturePaginationOut
     */
    'items'?: Array<FeatureOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof FeaturePaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof FeaturePaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof FeaturePaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum FeatureSortEnum {
    ModelCount = 'model_count',
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Enum for feature source.
 * @export
 * @enum {string}
 */

export enum FeatureSourceEnum {
    Invalid = 'invalid',
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user'
}

/**
 * Represent statistics of a feature.  Note: exactly one of the `*_feature_statistics` fields must be non-null.
 * @export
 * @interface FeatureStatistics
 */
export interface FeatureStatistics {
    /**
     * Type of the feature.
     * @type {FeatureTypeEnum}
     * @memberof FeatureStatistics
     */
    'feature_type'?: FeatureTypeEnum;
    /**
     * Who generated the statistic object.
     * @type {FeatureSourceEnum}
     * @memberof FeatureStatistics
     */
    'generated_by'?: FeatureSourceEnum;
    /**
     * Statistics for a numerical feature.
     * @type {NumericalFeatureStatistics}
     * @memberof FeatureStatistics
     */
    'numerical_feature_statistics'?: NumericalFeatureStatistics;
    /**
     * Statistics for a categorical feature.
     * @type {CategoricalFeatureStatistics}
     * @memberof FeatureStatistics
     */
    'categorical_feature_statistics'?: CategoricalFeatureStatistics;
    /**
     * Statistics for a time series feature.
     * @type {TimeSeriesFeatureStatistics}
     * @memberof FeatureStatistics
     */
    'time_series_feature_statistics'?: TimeSeriesFeatureStatistics;
    /**
     * Statistics for a dynamic feature.
     * @type {DynamicFeatureStatistics}
     * @memberof FeatureStatistics
     */
    'dynamic_feature_statistics'?: DynamicFeatureStatistics;
    /**
     * Statistics for a string feature.
     * @type {StringFeatureStatistics}
     * @memberof FeatureStatistics
     */
    'string_feature_statistics'?: StringFeatureStatistics;
    /**
     * Statistics for a datetime feature.
     * @type {DatetimeFeatureStatistics}
     * @memberof FeatureStatistics
     */
    'datetime_feature_statistics'?: DatetimeFeatureStatistics;
}
/**
 * Enum for feature types.
 * @export
 * @enum {string}
 */

export enum FeatureTypeEnum {
    Invalid = 'invalid',
    Numerical = 'numerical',
    Categorical = 'categorical',
    Datetime = 'datetime',
    Text = 'text',
    Image = 'image',
    Audio = 'audio',
    Video = 'video',
    File = 'file',
    TimeSeries = 'time_series',
    Dynamic = 'dynamic',
    String = 'string'
}

/**
 * A Filter value object model.
 * @export
 * @interface FilterValue
 */
export interface FilterValue {
    /**
     * Retrieval status.
     * @type {FilterValueType}
     * @memberof FilterValue
     */
    'filter_type'?: FilterValueType;
    /**
     * Filter value.
     * @type {string}
     * @memberof FilterValue
     */
    'value'?: string;
    /**
     * User who filtered by this value.
     * @type {string}
     * @memberof FilterValue
     */
    'added_by'?: string;
    /**
     * Time this value was added.
     * @type {string}
     * @memberof FilterValue
     */
    'added_on'?: string;
    /**
     * Related filter values used in conjunction with this filter.
     * @type {Array<RelatedFilterValue>}
     * @memberof FilterValue
     */
    'related_values'?: Array<RelatedFilterValue>;
}
/**
 * Filter value types.
 * @export
 * @enum {string}
 */

export enum FilterValueType {
    Filter = 'filter',
    Sort = 'sort'
}

/**
 * Schema for identifying finding.
 * @export
 * @interface FindingId
 */
export interface FindingId {
    /**
     * 
     * @type {string}
     * @memberof FindingId
     */
    'doi': string;
    /**
     * 
     * @type {string}
     * @memberof FindingId
     */
    'association_id': string;
}
/**
 * Next/prev Pagination links with first and last urls.
 * @export
 * @interface FirstLastPaginationLinks
 */
export interface FirstLastPaginationLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'self': string;
    /**
     * Link to next page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'next'?: string;
    /**
     * Link to previous page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'prev'?: string;
    /**
     * Link to first page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'first'?: string;
    /**
     * Link to last page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'last'?: string;
}
/**
 * Free text population attribute value input.
 * @export
 * @interface FreeTextIn
 */
export interface FreeTextIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FreeTextIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FreeTextIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof FreeTextIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FreeTextIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FreeTextIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof FreeTextIn
     */
    'xids'?: { [key: string]: string; };
    /**
     * Free text
     * @type {string}
     * @memberof FreeTextIn
     */
    'population_description': string;
}
/**
 * Free text population attribute value output model.
 * @export
 * @interface FreeTextOut
 */
export interface FreeTextOut {
    /**
     * 
     * @type {string}
     * @memberof FreeTextOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof FreeTextOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof FreeTextOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof FreeTextOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof FreeTextOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof FreeTextOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof FreeTextOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FreeTextOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FreeTextOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof FreeTextOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FreeTextOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FreeTextOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof FreeTextOut
     */
    'xids'?: { [key: string]: string; };
    /**
     * Collection of links to related resources.
     * @type {PopulationAttributeValueLinks}
     * @memberof FreeTextOut
     */
    '_links'?: PopulationAttributeValueLinks;
    /**
     * The population attribute type of the value.
     * @type {AttributeTypeEnum}
     * @memberof FreeTextOut
     */
    'attribute_type'?: AttributeTypeEnum;
    /**
     * Free text
     * @type {string}
     * @memberof FreeTextOut
     */
    'population_description': string;
}
/**
 * A frequency object.
 * @export
 * @interface Frequency
 */
export interface Frequency {
    /**
     * The normalized count of each index
     * @type {Array<number>}
     * @memberof Frequency
     */
    'normalized_counts'?: Array<number>;
    /**
     * The index of frequency object
     * @type {Array<string>}
     * @memberof Frequency
     */
    'index'?: Array<string>;
}
/**
 * Graph Data model.
 * @export
 * @interface GraphData
 */
export interface GraphData {
    /**
     * Nodes of graph data.
     * @type {Array<ExtendedNodeObject>}
     * @memberof GraphData
     */
    'nodes': Array<ExtendedNodeObject>;
    /**
     * Links of graph data.
     * @type {Array<ExtendedLinkObject>}
     * @memberof GraphData
     */
    'links': Array<ExtendedLinkObject>;
}
/**
 * Graph Link Type enum.
 * @export
 * @enum {string}
 */

export enum GraphLinkType {
    DatasetRelationship = 'dataset_relationship',
    ConceptRelationship = 'concept_relationship',
    VariableRelationship = 'variable_relationship',
    FeatureRelationship = 'feature_relationship',
    FeatureVariable = 'feature_variable',
    Measures = 'measures'
}

/**
 * Graph Node Type enum.
 * @export
 * @enum {string}
 */

export enum GraphNodeType {
    Dataset = 'dataset',
    Concept = 'concept',
    Variable = 'variable',
    Feature = 'feature'
}

/**
 * GraphQL query model.
 * @export
 * @interface GraphQLQuery
 */
export interface GraphQLQuery {
    /**
     * 
     * @type {string}
     * @memberof GraphQLQuery
     */
    'query': string;
    /**
     * 
     * @type {string}
     * @memberof GraphQLQuery
     */
    'operationName'?: string;
    /**
     * 
     * @type {any}
     * @memberof GraphQLQuery
     */
    'variables'?: any;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * A histogram object.  See https://numpy.org/doc/1.18/reference/generated/numpy.histogram.html
 * @export
 * @interface Histogram
 */
export interface Histogram {
    /**
     * The density values of the histogram
     * @type {Array<number>}
     * @memberof Histogram
     */
    'hist'?: Array<number>;
    /**
     * The bin edges (length(hist)+1). All but the last (righthand-most) bin is half-open
     * @type {Array<number>}
     * @memberof Histogram
     */
    'bin_edges'?: Array<number>;
}
/**
 * Return type for an indexed document.
 * @export
 * @interface IndexedSource
 */
export interface IndexedSource {
    /**
     * 
     * @type {string}
     * @memberof IndexedSource
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof IndexedSource
     */
    'doi': string;
    /**
     * 
     * @type {string}
     * @memberof IndexedSource
     */
    'title': string;
    /**
     * 
     * @type {Array<SimpleTopic>}
     * @memberof IndexedSource
     */
    'topics'?: Array<SimpleTopic>;
    /**
     * 
     * @type {boolean}
     * @memberof IndexedSource
     */
    'has_relationships': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IndexedSource
     */
    'on_system': boolean;
    /**
     * 
     * @type {string}
     * @memberof IndexedSource
     */
    'system_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof IndexedSource
     */
    'journal'?: string;
    /**
     * 
     * @type {Array<TopicRelationship>}
     * @memberof IndexedSource
     */
    'relationships'?: Array<TopicRelationship>;
    /**
     * 
     * @type {number}
     * @memberof IndexedSource
     */
    'publish_date'?: number;
    /**
     * 
     * @type {number}
     * @memberof IndexedSource
     */
    'citation_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof IndexedSource
     */
    'study_type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IndexedSource
     */
    'population_strings'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof IndexedSource
     */
    'sample_size'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof IndexedSource
     */
    'authors'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof IndexedSource
     */
    'text_match': number;
}
/**
 * Return type from Typesense sources index.
 * @export
 * @interface IndexedSourcesOut
 */
export interface IndexedSourcesOut {
    /**
     * 
     * @type {{ [key: string]: Facet; }}
     * @memberof IndexedSourcesOut
     */
    'facets': { [key: string]: Facet; };
    /**
     * 
     * @type {number}
     * @memberof IndexedSourcesOut
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof IndexedSourcesOut
     */
    'page': number;
    /**
     * 
     * @type {Array<IndexedSource>}
     * @memberof IndexedSourcesOut
     */
    'sources': Array<IndexedSource>;
}
/**
 * An Integration Resource.
 * @export
 * @interface Integration
 */
export interface Integration {
    /**
     * Integration name.
     * @type {string}
     * @memberof Integration
     */
    'name'?: string;
    /**
     * Integration state.
     * @type {IntegrationState}
     * @memberof Integration
     */
    'state'?: IntegrationState;
    /**
     * The integration type.
     * @type {IntegrationType}
     * @memberof Integration
     */
    'service_type': IntegrationType;
    /**
     * API Endpoint.
     * @type {string}
     * @memberof Integration
     */
    'endpoint': string;
    /**
     * Integration IP address.
     * @type {string}
     * @memberof Integration
     */
    'ip_address'?: string;
    /**
     * Integration lamdba names.
     * @type {string}
     * @memberof Integration
     */
    'lambda_arn'?: string;
    /**
     * Is this integration deployed on enterprise\'s internal stack?
     * @type {boolean}
     * @memberof Integration
     */
    'on_premise'?: boolean;
    /**
     * The list of tables to retrieve
     * @type {Array<Table>}
     * @memberof Integration
     */
    'tables'?: Array<Table>;
    /**
     * The list of views to retrieve
     * @type {Array<Table>}
     * @memberof Integration
     */
    'views'?: Array<Table>;
    /**
     * The integration messages
     * @type {Array<MessageOut>}
     * @memberof Integration
     */
    'messages'?: Array<MessageOut>;
    /**
     * 
     * @type {number}
     * @memberof Integration
     */
    'id': number;
    /**
     * Integration credentials.
     * @type {RedshiftCredentials | SnowflakeCredentials | BigQueryCredentials | LookerCredentials | ModeCredentials}
     * @memberof Integration
     */
    'credentials': RedshiftCredentials | SnowflakeCredentials | BigQueryCredentials | LookerCredentials | ModeCredentials;
    /**
     * Enterprise link.
     * @type {string}
     * @memberof Integration
     */
    'enterprise'?: string;
    /**
     * Team link.
     * @type {string}
     * @memberof Integration
     */
    'team'?: string;
    /**
     * The actions the requesting user is allowed to perform on this resource.
     * @type {Array<ResourceAction>}
     * @memberof Integration
     */
    '_permissions'?: Array<ResourceAction>;
}
/**
 * Integration model for create/update.
 * @export
 * @interface IntegrationIn
 */
export interface IntegrationIn {
    /**
     * Integration name.
     * @type {string}
     * @memberof IntegrationIn
     */
    'name'?: string;
    /**
     * Integration state.
     * @type {IntegrationState}
     * @memberof IntegrationIn
     */
    'state'?: IntegrationState;
    /**
     * The integration type.
     * @type {IntegrationType}
     * @memberof IntegrationIn
     */
    'service_type'?: IntegrationType;
    /**
     * API Endpoint.
     * @type {string}
     * @memberof IntegrationIn
     */
    'endpoint'?: string;
    /**
     * Integration IP address.
     * @type {string}
     * @memberof IntegrationIn
     */
    'ip_address'?: string;
    /**
     * Integration lamdba names.
     * @type {string}
     * @memberof IntegrationIn
     */
    'lambda_arn'?: string;
    /**
     * Is this integration deployed on enterprise\'s internal stack?
     * @type {boolean}
     * @memberof IntegrationIn
     */
    'on_premise'?: boolean;
    /**
     * The list of tables to retrieve
     * @type {Array<Table>}
     * @memberof IntegrationIn
     */
    'tables'?: Array<Table>;
    /**
     * The list of views to retrieve
     * @type {Array<Table>}
     * @memberof IntegrationIn
     */
    'views'?: Array<Table>;
    /**
     * The integration messages
     * @type {Array<MessageOut>}
     * @memberof IntegrationIn
     */
    'messages'?: Array<MessageOut>;
    /**
     * Integration credentials.
     * @type {RedshiftCredentialsIn | SnowflakeCredentialsIn | BigQueryCredentialsIn | LookerCredentialsIn | ModeCredentialsIn}
     * @memberof IntegrationIn
     */
    'credentials'?: RedshiftCredentialsIn | SnowflakeCredentialsIn | BigQueryCredentialsIn | LookerCredentialsIn | ModeCredentialsIn;
    /**
     * Team or Enterprise link
     * @type {string}
     * @memberof IntegrationIn
     */
    'owner'?: string;
}
/**
 * Integration service state.
 * @export
 * @enum {string}
 */

export enum IntegrationState {
    Initial = 'INITIAL',
    Active = 'ACTIVE',
    Inactive = 'INACTIVE'
}

/**
 * Integration retrieval types.
 * @export
 * @enum {string}
 */

export enum IntegrationType {
    Redshift = 'REDSHIFT',
    Snowflake = 'SNOWFLAKE',
    Bigquery = 'BIGQUERY',
    Looker = 'LOOKER',
    Mode = 'MODE'
}

/**
 * Represent a line plot.
 * @export
 * @interface LinePlot
 */
export interface LinePlot {
    /**
     * The value of the series at each value of the (ordered) index.
     * @type {Array<number>}
     * @memberof LinePlot
     */
    'values'?: Array<number>;
    /**
     * The index for the values. Ordered - can be units of time or dates.
     * @type {Array<string>}
     * @memberof LinePlot
     */
    'index'?: Array<string>;
}
/**
 * Location population attribute value input.
 * @export
 * @interface LocationIn
 */
export interface LocationIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof LocationIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof LocationIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof LocationIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof LocationIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof LocationIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof LocationIn
     */
    'xids'?: { [key: string]: string; };
    /**
     * Location name.
     * @type {string}
     * @memberof LocationIn
     */
    'location_name': string;
    /**
     * Type of location (eg. City, State, Country)
     * @type {string}
     * @memberof LocationIn
     */
    'location_type': string;
}
/**
 * Location population attribute value output model.
 * @export
 * @interface LocationOut
 */
export interface LocationOut {
    /**
     * 
     * @type {string}
     * @memberof LocationOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof LocationOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof LocationOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof LocationOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof LocationOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof LocationOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof LocationOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof LocationOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof LocationOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof LocationOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof LocationOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof LocationOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof LocationOut
     */
    'xids'?: { [key: string]: string; };
    /**
     * Collection of links to related resources.
     * @type {PopulationAttributeValueLinks}
     * @memberof LocationOut
     */
    '_links'?: PopulationAttributeValueLinks;
    /**
     * The population attribute type of the value.
     * @type {AttributeTypeEnum}
     * @memberof LocationOut
     */
    'attribute_type'?: AttributeTypeEnum;
    /**
     * Location name.
     * @type {string}
     * @memberof LocationOut
     */
    'location_name': string;
    /**
     * Type of location (eg. City, State, Country)
     * @type {string}
     * @memberof LocationOut
     */
    'location_type': string;
}
/**
 * Credentials for a Looker integration without password.
 * @export
 * @interface LookerCredentials
 */
export interface LookerCredentials {
    /**
     * Integration verify ssl
     * @type {boolean}
     * @memberof LookerCredentials
     */
    'verify_ssl'?: boolean;
    /**
     * Integration base url
     * @type {string}
     * @memberof LookerCredentials
     */
    'base_url': string;
}
/**
 * Input credentials for a Looker integration.
 * @export
 * @interface LookerCredentialsIn
 */
export interface LookerCredentialsIn {
    /**
     * Integration verify ssl
     * @type {boolean}
     * @memberof LookerCredentialsIn
     */
    'verify_ssl'?: boolean;
    /**
     * Integration base url
     * @type {string}
     * @memberof LookerCredentialsIn
     */
    'base_url': string;
    /**
     * Integration client id.
     * @type {string}
     * @memberof LookerCredentialsIn
     */
    'client_id': string;
    /**
     * Integration client secret key.
     * @type {string}
     * @memberof LookerCredentialsIn
     */
    'client_secret': string;
}
/**
 * A Message object.
 * @export
 * @interface MessageIn
 */
export interface MessageIn {
    /**
     * 
     * @type {string}
     * @memberof MessageIn
     */
    'message': string;
    /**
     * 
     * @type {MessageType}
     * @memberof MessageIn
     */
    'message_type'?: MessageType;
    /**
     * The message attributes
     * @type {any}
     * @memberof MessageIn
     */
    'attributes'?: any;
    /**
     * Integration link.
     * @type {string}
     * @memberof MessageIn
     */
    'integration': string;
}
/**
 * A Message object.
 * @export
 * @interface MessageOut
 */
export interface MessageOut {
    /**
     * 
     * @type {string}
     * @memberof MessageOut
     */
    'message': string;
    /**
     * 
     * @type {MessageType}
     * @memberof MessageOut
     */
    'message_type'?: MessageType;
    /**
     * The message attributes
     * @type {any}
     * @memberof MessageOut
     */
    'attributes'?: any;
    /**
     * Integration link.
     * @type {string}
     * @memberof MessageOut
     */
    'integration': string;
    /**
     * 
     * @type {number}
     * @memberof MessageOut
     */
    'id'?: number;
    /**
     * Creation date
     * @type {string}
     * @memberof MessageOut
     */
    'created'?: string;
}
/**
 * Message type.
 * @export
 * @enum {string}
 */

export enum MessageType {
    Error = 'ERROR',
    DatasetCreated = 'DATASET_CREATED'
}

/**
 * A System Database Usage Object.
 * @export
 * @interface MetricMonitoring
 */
export interface MetricMonitoring {
    /**
     * Color of the alert when the rule is in violation.
     * @type {AlertColor}
     * @memberof MetricMonitoring
     */
    'alert_color': AlertColor;
    /**
     * Last time that the monitoring was enabled.
     * @type {string}
     * @memberof MetricMonitoring
     */
    'enabled': string;
    /**
     * The rule of which determines state of violation.
     * @type {MonitoringRuleSet}
     * @memberof MetricMonitoring
     */
    'rule': MonitoringRuleSet;
}
/**
 * Credentials for a Mode integration without the token and secret.
 * @export
 * @interface ModeCredentials
 */
export interface ModeCredentials {
    /**
     * Integration dashboard
     * @type {string}
     * @memberof ModeCredentials
     */
    'dashboard': string;
}
/**
 * Input credentials for a Mode integration.
 * @export
 * @interface ModeCredentialsIn
 */
export interface ModeCredentialsIn {
    /**
     * Integration dashboard
     * @type {string}
     * @memberof ModeCredentialsIn
     */
    'dashboard': string;
    /**
     * Integration api token.
     * @type {string}
     * @memberof ModeCredentialsIn
     */
    'api_token': string;
    /**
     * Integration api secret.
     * @type {string}
     * @memberof ModeCredentialsIn
     */
    'api_secret': string;
}
/**
 * Values available for filtering models.
 * @export
 * @interface ModelFilters
 */
export interface ModelFilters {
    /**
     * Available performance types for filtering models and their counts. Inner arrays will be of length 2. The first value will be the score type and thesecond the count.
     * @type {Array<Array<number | ModelScoreEnum>>}
     * @memberof ModelFilters
     */
    'performance'?: Array<Array<number | ModelScoreEnum>>;
}
/**
 * A real-world machine learning or statistical model input data.
 * @export
 * @interface ModelIn
 */
export interface ModelIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ModelIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ModelIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof ModelIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ModelIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ModelIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Model algorithm.
     * @type {string}
     * @memberof ModelIn
     */
    'algorithm'?: string;
    /**
     * Standardized ModelDB algorithm id.
     * @type {number}
     * @memberof ModelIn
     */
    'standardized_algorithm_id': number;
    /**
     * Number of observations or nobs..
     * @type {number}
     * @memberof ModelIn
     */
    'number_of_observations'?: number;
    /**
     * Model\'s hyper parameters.
     * @type {ModelParams}
     * @memberof ModelIn
     */
    'model_params'?: ModelParams;
    /**
     * Model label.
     * @type {string}
     * @memberof ModelIn
     */
    'name'?: string;
    /**
     * Description of the model.
     * @type {string}
     * @memberof ModelIn
     */
    'description'?: string;
    /**
     * Statistical controls of the model.
     * @type {Array<string>}
     * @memberof ModelIn
     */
    'statistical_controls'?: Array<string>;
    /**
     * Location of the source code.
     * @type {string}
     * @memberof ModelIn
     */
    'source'?: string;
    /**
     * System ID of training dataset.
     * @type {string}
     * @memberof ModelIn
     */
    'training_dataset_id': string;
    /**
     * System Evaluator specific field.
     * @type {string}
     * @memberof ModelIn
     */
    'stub_id'?: string;
    /**
     * The performance of the model.
     * @type {Array<ModelPerformanceIn>}
     * @memberof ModelIn
     */
    'performance'?: Array<ModelPerformanceIn>;
    /**
     * System ID of target of the model.
     * @type {string}
     * @memberof ModelIn
     */
    'target_feature_id'?: string;
    /**
     * Model\'s deployment information.
     * @type {Deployment}
     * @memberof ModelIn
     */
    'deployment'?: Deployment;
    /**
     * Model\'s module and class
     * @type {string}
     * @memberof ModelIn
     */
    'library'?: string;
}
/**
 * Model resource links.
 * @export
 * @interface ModelLinks
 */
export interface ModelLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof ModelLinks
     */
    'self': string;
    /**
     * Link to model\'s target feature.
     * @type {string}
     * @memberof ModelLinks
     */
    'target_feature'?: string;
    /**
     * Link to model\'s training dataset.
     * @type {string}
     * @memberof ModelLinks
     */
    'training_dataset'?: string;
    /**
     * Link to model\'s study.
     * @type {string}
     * @memberof ModelLinks
     */
    'study'?: string;
}
/**
 * Model output model.
 * @export
 * @interface ModelOut
 */
export interface ModelOut {
    /**
     * 
     * @type {string}
     * @memberof ModelOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof ModelOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof ModelOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof ModelOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof ModelOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof ModelOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof ModelOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ModelOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ModelOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof ModelOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ModelOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ModelOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Model algorithm.
     * @type {string}
     * @memberof ModelOut
     */
    'algorithm'?: string;
    /**
     * Standardized ModelDB algorithm id.
     * @type {number}
     * @memberof ModelOut
     */
    'standardized_algorithm_id': number;
    /**
     * Number of observations or nobs..
     * @type {number}
     * @memberof ModelOut
     */
    'number_of_observations'?: number;
    /**
     * Model\'s hyper parameters.
     * @type {ModelParams}
     * @memberof ModelOut
     */
    'model_params'?: ModelParams;
    /**
     * Model label.
     * @type {string}
     * @memberof ModelOut
     */
    'name'?: string;
    /**
     * Description of the model.
     * @type {string}
     * @memberof ModelOut
     */
    'description'?: string;
    /**
     * Statistical controls of the model.
     * @type {Array<string>}
     * @memberof ModelOut
     */
    'statistical_controls'?: Array<string>;
    /**
     * Location of the source code.
     * @type {string}
     * @memberof ModelOut
     */
    'source'?: string;
    /**
     * System ID of training dataset.
     * @type {string}
     * @memberof ModelOut
     */
    'training_dataset_id': string;
    /**
     * System Evaluator specific field.
     * @type {string}
     * @memberof ModelOut
     */
    'stub_id'?: string;
    /**
     * The performance of the model.
     * @type {Array<ModelPerformanceOut>}
     * @memberof ModelOut
     */
    'performance'?: Array<ModelPerformanceOut>;
    /**
     * System ID of target of the model.
     * @type {string}
     * @memberof ModelOut
     */
    'target_feature_id'?: string;
    /**
     * Model\'s deployment information.
     * @type {Deployment}
     * @memberof ModelOut
     */
    'deployment'?: Deployment;
    /**
     * Model\'s module and class
     * @type {string}
     * @memberof ModelOut
     */
    'library'?: string;
    /**
     * Collection of links to related resources.
     * @type {ModelLinks}
     * @memberof ModelOut
     */
    '_links'?: ModelLinks;
    /**
     * The experiment/project id containing the model.
     * @type {string}
     * @memberof ModelOut
     */
    'experiment_id'?: string;
}
/**
 * Model pagination out.
 * @export
 * @interface ModelPaginationOut
 */
export interface ModelPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof ModelPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<ModelOut>}
     * @memberof ModelPaginationOut
     */
    'items'?: Array<ModelOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof ModelPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof ModelPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof ModelPaginationOut
     */
    '_sorts'?: Array<string>;
    /**
     * Collection of filter values that can be applied.
     * @type {ModelFilters}
     * @memberof ModelPaginationOut
     */
    '_filters'?: ModelFilters;
}
/**
 * Model params model.
 * @export
 * @interface ModelParams
 */
export interface ModelParams {
    /**
     * Model\'s hyper parameters. E.g. for a linear regression, `normalize`, `fit_intercept`, etc.
     * @type {object}
     * @memberof ModelParams
     */
    'params'?: object;
}
/**
 * Base model performance input class.
 * @export
 * @interface ModelPerformanceBaseIn
 */
export interface ModelPerformanceBaseIn {
    /**
     * Who generated this model performance.
     * @type {ValidValueSource}
     * @memberof ModelPerformanceBaseIn
     */
    'generated_by'?: ValidValueSource;
    /**
     * Standard error of the Performance Value.
     * @type {number}
     * @memberof ModelPerformanceBaseIn
     */
    'standard_error'?: number;
    /**
     * The test dataset of this performance.
     * @type {TestDataset}
     * @memberof ModelPerformanceBaseIn
     */
    'test_dataset'?: TestDataset;
    /**
     * 
     * @type {ModelScoreEnum}
     * @memberof ModelPerformanceBaseIn
     */
    'score_type'?: ModelScoreEnum;
    /**
     * Model performance value.
     * @type {number}
     * @memberof ModelPerformanceBaseIn
     */
    'value'?: number;
    /**
     * Complex model performance value.
     * @type {Array<any>}
     * @memberof ModelPerformanceBaseIn
     */
    'complex_value'?: Array<any>;
}
/**
 * Model performance input.
 * @export
 * @interface ModelPerformanceIn
 */
export interface ModelPerformanceIn {
    /**
     * Who generated this model performance.
     * @type {ValidValueSource}
     * @memberof ModelPerformanceIn
     */
    'generated_by'?: ValidValueSource;
    /**
     * Standard error of the Performance Value.
     * @type {number}
     * @memberof ModelPerformanceIn
     */
    'standard_error'?: number;
    /**
     * The test dataset of this performance.
     * @type {TestDataset}
     * @memberof ModelPerformanceIn
     */
    'test_dataset'?: TestDataset;
    /**
     * Model performance score type.
     * @type {ValidModelScoreEnum}
     * @memberof ModelPerformanceIn
     */
    'score_type': ValidModelScoreEnum;
    /**
     * Model performance value.
     * @type {number}
     * @memberof ModelPerformanceIn
     */
    'value'?: number;
    /**
     * Complex model performance value.
     * @type {Array<any>}
     * @memberof ModelPerformanceIn
     */
    'complex_value'?: Array<any>;
    /**
     * History of this model performance value.
     * @type {{ [key: string]: ModelPerformanceBaseIn; }}
     * @memberof ModelPerformanceIn
     */
    'history'?: { [key: string]: ModelPerformanceBaseIn; };
}
/**
 * Model performance input.
 * @export
 * @interface ModelPerformanceOut
 */
export interface ModelPerformanceOut {
    /**
     * Who generated this model performance.
     * @type {ValidValueSource}
     * @memberof ModelPerformanceOut
     */
    'generated_by'?: ValidValueSource;
    /**
     * Standard error of the Performance Value.
     * @type {number}
     * @memberof ModelPerformanceOut
     */
    'standard_error'?: number;
    /**
     * The test dataset of this performance.
     * @type {TestDataset}
     * @memberof ModelPerformanceOut
     */
    'test_dataset'?: TestDataset;
    /**
     * Model performance score type.
     * @type {ValidModelScoreEnum}
     * @memberof ModelPerformanceOut
     */
    'score_type': ValidModelScoreEnum;
    /**
     * Model performance value.
     * @type {number}
     * @memberof ModelPerformanceOut
     */
    'value'?: number;
    /**
     * Complex model performance value.
     * @type {Array<any>}
     * @memberof ModelPerformanceOut
     */
    'complex_value'?: Array<any>;
    /**
     * History of this model performance value.
     * @type {{ [key: string]: ModelPerformanceBaseIn; }}
     * @memberof ModelPerformanceOut
     */
    'history'?: { [key: string]: ModelPerformanceBaseIn; };
    /**
     * 
     * @type {boolean}
     * @memberof ModelPerformanceOut
     */
    'primary_performance'?: boolean;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum ModelScoreEnum {
    AccuracyScore = 'accuracy_score',
    AveragePrecisionScore = 'average_precision_score',
    BalancedAccuracyScore = 'balanced_accuracy_score',
    BrierScoreLoss = 'brier_score_loss',
    CohenKappaScore = 'cohen_kappa_score',
    F1Score = 'f1_score',
    HammingLoss = 'hamming_loss',
    HingeLoss = 'hinge_loss',
    JaccardScore = 'jaccard_score',
    LogLoss = 'log_loss',
    MatthewsCorrCoef = 'matthews_corr_coef',
    PrecisionScore = 'precision_score',
    RecallScore = 'recall_score',
    RocAucScore = 'roc_auc_score',
    ZeroOneLoss = 'zero_one_loss',
    ExplainedVarianceScore = 'explained_variance_score',
    MaxError = 'max_error',
    MeanAbsoluteError = 'mean_absolute_error',
    MeanAbsolutePercentageError = 'mean_absolute_percentage_error',
    MeanSquaredError = 'mean_squared_error',
    MeanSquaredLogError = 'mean_squared_log_error',
    MedianAbsoluteError = 'median_absolute_error',
    R2Score = 'r2_score',
    CoverageError = 'coverage_error',
    LabelRankingAveragePrecisionScore = 'label_ranking_average_precision_score',
    LabelRankingLoss = 'label_ranking_loss',
    AdjustedR2Score = 'adjusted_r2_score',
    MutualInformationScore = 'mutual_information_score',
    AdjMutualInformationScore = 'adj_mutual_information_score',
    NormalizedMutualInformationScore = 'normalized_mutual_information_score',
    AdjRandScore = 'adj_rand_score',
    CompletenessScore = 'completeness_score',
    FowlkesMallowsScore = 'fowlkes_mallows_score',
    HomogeneityScore = 'homogeneity_score',
    VMeasureScore = 'v_measure_score',
    NegMeanAbsoluteError = 'neg_mean_absolute_error',
    NegMeanSquaredError = 'neg_mean_squared_error',
    RootMeanSquaredError = 'root_mean_squared_error',
    NegRootMeanSquaredError = 'neg_root_mean_squared_error',
    RootMeanSquaredLogError = 'root_mean_squared_log_error',
    NegMedianAbsoluteError = 'neg_median_absolute_error',
    CosineProximity = 'cosine_proximity',
    KullbackLeiblerDivergence = 'kullback_leibler_divergence',
    PoissonMetric = 'poisson_metric',
    MulticlassLogLoss = 'multiclass_log_loss',
    NormalizedDiscountedCumulativeGain = 'normalized_discounted_cumulative_gain',
    GammaDeviance = 'gamma_deviance',
    HuberMetric = 'huber_metric',
    FBetaScore = 'f_beta_score',
    EuclideanDistance = 'euclidean_distance',
    HaversineDistance = 'haversine_distance',
    MeanSquaredPredictioneRror = 'mean_squared_predictione_rror',
    PseudoR2Mcfadden = 'pseudo_r2_mcfadden',
    AdjustedPseudoR2Mcfadden = 'adjusted_pseudo_r2_mcfadden',
    PseudoR2Nagelkerke = 'pseudo_r2_nagelkerke',
    PseudoR2CoxSnell = 'pseudo_r2_cox_snell',
    PseudoR2Effron = 'pseudo_r2_effron',
    Bic = 'bic',
    Aic = 'aic',
    CorrelationActualForecast = 'correlation_actual_forecast',
    ForecastVsActual = 'forecast_vs_actual',
    MeanSquaredPercentageError = 'mean_squared_percentage_error',
    ConfusionMatrix = 'confusion_matrix',
    MulticlassConfusionMatrix = 'multiclass_confusion_matrix',
    RocCurve = 'roc_curve',
    Invalid = 'invalid'
}

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum ModelSortEnum {
    TargetName = 'target_name',
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at'
}

/**
 * Field options for monitoring a metric.
 * @export
 * @enum {string}
 */

export enum MonitoringField {
    Value = 'VALUE',
    Change = 'CHANGE',
    PctChange = 'PCT_CHANGE',
    AbsPctChange = 'ABS_PCT_CHANGE',
    AbsChange = 'ABS_CHANGE'
}

/**
 * Monitoring comparison operators.
 * @export
 * @enum {string}
 */

export enum MonitoringOperation {
    Gt = 'GT',
    Ge = 'GE',
    Lt = 'LT',
    Le = 'LE',
    Eq = 'EQ',
    Ne = 'NE'
}

/**
 * A ruleset for metric modeling comparisons.
 * @export
 * @interface MonitoringRuleSet
 */
export interface MonitoringRuleSet {
    /**
     * The field to compare
     * @type {MonitoringField}
     * @memberof MonitoringRuleSet
     */
    'field': MonitoringField;
    /**
     * The operator to compare with
     * @type {MonitoringOperation}
     * @memberof MonitoringRuleSet
     */
    'operator': MonitoringOperation;
    /**
     * The value to compare with
     * @type {number}
     * @memberof MonitoringRuleSet
     */
    'value': number;
}
/**
 * Pagination links with next and prev urls.
 * @export
 * @interface NextPrevPaginationLinks
 */
export interface NextPrevPaginationLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof NextPrevPaginationLinks
     */
    'self': string;
    /**
     * Link to next page.
     * @type {string}
     * @memberof NextPrevPaginationLinks
     */
    'next'?: string;
    /**
     * Link to previous page.
     * @type {string}
     * @memberof NextPrevPaginationLinks
     */
    'prev'?: string;
}
/**
 * Null hypothesis input model.
 * @export
 * @interface NullHypothesisIn
 */
export interface NullHypothesisIn {
    /**
     * Statistical test type.
     * @type {ValidStatisticalTestType}
     * @memberof NullHypothesisIn
     */
    'test_type'?: ValidStatisticalTestType;
    /**
     * Significance level used for the test
     * @type {ValidSignificanceLevel}
     * @memberof NullHypothesisIn
     */
    'level'?: ValidSignificanceLevel;
    /**
     * Null hypothesis value.
     * @type {number}
     * @memberof NullHypothesisIn
     */
    'h0_value'?: number;
    /**
     * p-value of the test, used with significance_level to determine significance.
     * @type {number}
     * @memberof NullHypothesisIn
     */
    'p'?: number;
    /**
     * Manual flag to directly indicate test is significant without using p-value.
     * @type {boolean}
     * @memberof NullHypothesisIn
     */
    'is_significant'?: boolean;
}
/**
 * Null hypothesis output model.
 * @export
 * @interface NullHypothesisOut
 */
export interface NullHypothesisOut {
    /**
     * Statistical test type.
     * @type {StatisticalTestType}
     * @memberof NullHypothesisOut
     */
    'test_type'?: StatisticalTestType;
    /**
     * Significance level used for the test
     * @type {SignificanceLevel}
     * @memberof NullHypothesisOut
     */
    'level'?: SignificanceLevel;
    /**
     * Null hypothesis value.
     * @type {number}
     * @memberof NullHypothesisOut
     */
    'h0_value'?: number;
    /**
     * p-value of the test, used with significance_level to determine significance.
     * @type {number}
     * @memberof NullHypothesisOut
     */
    'p'?: number;
    /**
     * Manual flag to directly indicate test is significant without using p-value.
     * @type {boolean}
     * @memberof NullHypothesisOut
     */
    'is_significant'?: boolean;
}
/**
 * Number range population attribute value input.
 * @export
 * @interface NumberRangeIn
 */
export interface NumberRangeIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof NumberRangeIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof NumberRangeIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof NumberRangeIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof NumberRangeIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof NumberRangeIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof NumberRangeIn
     */
    'xids'?: { [key: string]: string; };
    /**
     * Start number.
     * @type {number}
     * @memberof NumberRangeIn
     */
    'number_start': number;
    /**
     * End number.
     * @type {number}
     * @memberof NumberRangeIn
     */
    'number_end': number;
}
/**
 * Number range population attribute value output model.
 * @export
 * @interface NumberRangeOut
 */
export interface NumberRangeOut {
    /**
     * 
     * @type {string}
     * @memberof NumberRangeOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof NumberRangeOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof NumberRangeOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof NumberRangeOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof NumberRangeOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof NumberRangeOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof NumberRangeOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof NumberRangeOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof NumberRangeOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof NumberRangeOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof NumberRangeOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof NumberRangeOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof NumberRangeOut
     */
    'xids'?: { [key: string]: string; };
    /**
     * Collection of links to related resources.
     * @type {PopulationAttributeValueLinks}
     * @memberof NumberRangeOut
     */
    '_links'?: PopulationAttributeValueLinks;
    /**
     * The population attribute type of the value.
     * @type {AttributeTypeEnum}
     * @memberof NumberRangeOut
     */
    'attribute_type'?: AttributeTypeEnum;
    /**
     * Start number.
     * @type {number}
     * @memberof NumberRangeOut
     */
    'number_start'?: number;
    /**
     * End number.
     * @type {number}
     * @memberof NumberRangeOut
     */
    'number_end'?: number;
}
/**
 * Represent a structured statistics for a numerical feature type.
 * @export
 * @interface NumericalFeatureStatistics
 */
export interface NumericalFeatureStatistics {
    /**
     * The value below which a given percentage of observations in a group of observations falls.
     * @type {{ [key: string]: number; }}
     * @memberof NumericalFeatureStatistics
     */
    'percentiles'?: { [key: string]: number; };
    /**
     * Minimum value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'min'?: number;
    /**
     * Maximum value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'max'?: number;
    /**
     * Median value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'median'?: number;
    /**
     * Mean value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'mean'?: number;
    /**
     * Standard deviation of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'std'?: number;
    /**
     * Interquartile range of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'iqr'?: number;
    /**
     * Kurtosis of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'kurtosis'?: number;
    /**
     * Skewness of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'skewness'?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'percent_missing'?: number;
    /**
     * Histogram of the feature
     * @type {Histogram}
     * @memberof NumericalFeatureStatistics
     */
    'histogram'?: Histogram;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: NumericalFeatureStatisticsSimpleBase; }}
     * @memberof NumericalFeatureStatistics
     */
    'history'?: { [key: string]: NumericalFeatureStatisticsSimpleBase; };
}
/**
 * Represent a structured statistics for a numerical feature type.  These fields will be included in the stats history.
 * @export
 * @interface NumericalFeatureStatisticsSimpleBase
 */
export interface NumericalFeatureStatisticsSimpleBase {
    /**
     * The value below which a given percentage of observations in a group of observations falls.
     * @type {{ [key: string]: number; }}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'percentiles'?: { [key: string]: number; };
    /**
     * Minimum value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'min'?: number;
    /**
     * Maximum value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'max'?: number;
    /**
     * Median value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'median'?: number;
    /**
     * Mean value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'mean'?: number;
    /**
     * Standard deviation of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'std'?: number;
    /**
     * Interquartile range of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'iqr'?: number;
    /**
     * Kurtosis of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'kurtosis'?: number;
    /**
     * Skewness of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'skewness'?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'percent_missing'?: number;
}
/**
 * Interface for OpenAlex Metadata output.
 * @export
 * @interface OpenAlexStudyMetadata
 */
export interface OpenAlexStudyMetadata {
    /**
     * 
     * @type {number}
     * @memberof OpenAlexStudyMetadata
     */
    'cited_by': number;
    /**
     * 
     * @type {string}
     * @memberof OpenAlexStudyMetadata
     */
    'doi': string;
    /**
     * 
     * @type {string}
     * @memberof OpenAlexStudyMetadata
     */
    'journal'?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenAlexStudyMetadata
     */
    'publish_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenAlexStudyMetadata
     */
    'link'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OpenAlexStudyMetadata
     */
    'authors': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OpenAlexStudyMetadata
     */
    'name'?: string;
}
/**
 * Ordering direction enum.
 * @export
 * @enum {string}
 */

export enum Ordering {
    Asc = 'asc',
    Desc = 'desc'
}

/**
 * Partial dependence plot input.
 * @export
 * @interface PartialDependencePlotIn
 */
export interface PartialDependencePlotIn {
    /**
     * The partial dependence values or x-axis of PDP.
     * @type {Array<number>}
     * @memberof PartialDependencePlotIn
     */
    'pdp_value': Array<number>;
    /**
     * The partial dependence effect or y-axis of PDP.
     * @type {Array<number>}
     * @memberof PartialDependencePlotIn
     */
    'pdp_effect': Array<number>;
    /**
     * Who generated this object.
     * @type {ValidValueSource}
     * @memberof PartialDependencePlotIn
     */
    'generated_by'?: ValidValueSource;
}
/**
 * Patch a `Variable` with provided data.
 * @export
 * @interface PatchConceptOp
 */
export interface PatchConceptOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof PatchConceptOp
     */
    'field': string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof PatchConceptOp
     */
    'value'?: any;
    /**
     * Operation to perform on resource field.
     * @type {PatchOp}
     * @memberof PatchConceptOp
     */
    'op': PatchOp;
}
/**
 * Patch a `Dataset` with provided data.
 * @export
 * @interface PatchDatasetOp
 */
export interface PatchDatasetOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof PatchDatasetOp
     */
    'field': string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof PatchDatasetOp
     */
    'value'?: any;
    /**
     * Operation to perform on resource field.
     * @type {PatchOp}
     * @memberof PatchDatasetOp
     */
    'op': PatchOp;
}
/**
 * Patch a `Feature` with provided data.
 * @export
 * @interface PatchFeatureOp
 */
export interface PatchFeatureOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof PatchFeatureOp
     */
    'field': string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof PatchFeatureOp
     */
    'value'?: any;
    /**
     * Operation to perform on resource field.
     * @type {PatchOp}
     * @memberof PatchFeatureOp
     */
    'op': PatchOp;
}
/**
 * Patch a `Model` with provided data.
 * @export
 * @interface PatchModelOp
 */
export interface PatchModelOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof PatchModelOp
     */
    'field': string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof PatchModelOp
     */
    'value'?: any;
    /**
     * Operation to perform on resource field.
     * @type {PatchOp}
     * @memberof PatchModelOp
     */
    'op': PatchOp;
}
/**
 * Enum for PATCH operations.
 * @export
 * @enum {string}
 */

export enum PatchOp {
    Update = 'update',
    Append = 'append',
    Delete = 'delete'
}

/**
 * Patch a `Study` with provided data.
 * @export
 * @interface PatchStudyOp
 */
export interface PatchStudyOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof PatchStudyOp
     */
    'field': string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof PatchStudyOp
     */
    'value'?: any;
    /**
     * Operation to perform on resource field.
     * @type {PatchOp}
     * @memberof PatchStudyOp
     */
    'op': PatchOp;
}
/**
 * Patch a `Variable` with provided data.
 * @export
 * @interface PatchVariableOp
 */
export interface PatchVariableOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof PatchVariableOp
     */
    'field': string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof PatchVariableOp
     */
    'value'?: any;
    /**
     * Operation to perform on resource field.
     * @type {PatchOp}
     * @memberof PatchVariableOp
     */
    'op': PatchOp;
}
/**
 * A real-world population attribute.
 * @export
 * @interface PopulationAttributeIn
 */
export interface PopulationAttributeIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof PopulationAttributeIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof PopulationAttributeIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof PopulationAttributeIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof PopulationAttributeIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof PopulationAttributeIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Population attribute\'s name.
     * @type {string}
     * @memberof PopulationAttributeIn
     */
    'name': string;
    /**
     * A valid population attribute type.
     * @type {AttributeTypeEnum}
     * @memberof PopulationAttributeIn
     */
    'attribute_type': AttributeTypeEnum;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof PopulationAttributeIn
     */
    'xids'?: { [key: string]: string; };
    /**
     * Marks attribute as standard. Only administrators can set this to true.
     * @type {boolean}
     * @memberof PopulationAttributeIn
     */
    'is_standard'?: boolean;
    /**
     * Source of truth for this attribute (e.g. wikidata, ACS)
     * @type {string}
     * @memberof PopulationAttributeIn
     */
    'attribute_source'?: string;
}
/**
 * Population attribute resource links.
 * @export
 * @interface PopulationAttributeLinks
 */
export interface PopulationAttributeLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof PopulationAttributeLinks
     */
    'self': string;
}
/**
 * Population attribute output model.
 * @export
 * @interface PopulationAttributeOut
 */
export interface PopulationAttributeOut {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof PopulationAttributeOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof PopulationAttributeOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof PopulationAttributeOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof PopulationAttributeOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof PopulationAttributeOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof PopulationAttributeOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof PopulationAttributeOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Population attribute\'s name.
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    'name': string;
    /**
     * A valid population attribute type.
     * @type {AttributeTypeEnum}
     * @memberof PopulationAttributeOut
     */
    'attribute_type': AttributeTypeEnum;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof PopulationAttributeOut
     */
    'xids'?: { [key: string]: string; };
    /**
     * Marks attribute as standard. Only administrators can set this to true.
     * @type {boolean}
     * @memberof PopulationAttributeOut
     */
    'is_standard'?: boolean;
    /**
     * Source of truth for this attribute (e.g. wikidata, ACS)
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    'attribute_source'?: string;
    /**
     * Collection of links to related resources.
     * @type {PopulationAttributeLinks}
     * @memberof PopulationAttributeOut
     */
    '_links'?: PopulationAttributeLinks;
}
/**
 * Population attribute pagination out.
 * @export
 * @interface PopulationAttributePaginationOut
 */
export interface PopulationAttributePaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof PopulationAttributePaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<PopulationAttributeOut>}
     * @memberof PopulationAttributePaginationOut
     */
    'items'?: Array<PopulationAttributeOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof PopulationAttributePaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof PopulationAttributePaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof PopulationAttributePaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum PopulationAttributeSortEnum {
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Population attribute value resource links.
 * @export
 * @interface PopulationAttributeValueLinks
 */
export interface PopulationAttributeValueLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof PopulationAttributeValueLinks
     */
    'self': string;
    /**
     * Link to this resource\'s population attribute.
     * @type {string}
     * @memberof PopulationAttributeValueLinks
     */
    'attribute': string;
}
/**
 * Population attribute value pagination out.
 * @export
 * @interface PopulationAttributeValuePaginationOut
 */
export interface PopulationAttributeValuePaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof PopulationAttributeValuePaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>}
     * @memberof PopulationAttributeValuePaginationOut
     */
    'items'?: Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof PopulationAttributeValuePaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof PopulationAttributeValuePaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof PopulationAttributeValuePaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum PopulationAttributeValueSortEnum {
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Publication author.
 * @export
 * @interface PublicationAuthor
 */
export interface PublicationAuthor {
    /**
     * Name of author.
     * @type {string}
     * @memberof PublicationAuthor
     */
    'name': string;
    /**
     * ORCID of author.
     * @type {string}
     * @memberof PublicationAuthor
     */
    'orcid'?: string;
}
/**
 * Publication info model.
 * @export
 * @interface PublicationInfo
 */
export interface PublicationInfo {
    /**
     * Date of publication.
     * @type {string}
     * @memberof PublicationInfo
     */
    'date_published'?: string;
    /**
     * Publication name (journal, etc).
     * @type {string}
     * @memberof PublicationInfo
     */
    'publication'?: string;
    /**
     * Ordered authors of publication.
     * @type {Array<PublicationAuthor>}
     * @memberof PublicationInfo
     */
    'ordered_authors'?: Array<PublicationAuthor>;
}
/**
 * Credentials for a Redshift integration without password.
 * @export
 * @interface RedshiftCredentials
 */
export interface RedshiftCredentials {
    /**
     * Integration database name.
     * @type {string}
     * @memberof RedshiftCredentials
     */
    'db_name': string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof RedshiftCredentials
     */
    'db_user': string;
    /**
     * Integration host (Required for Redshift).
     * @type {string}
     * @memberof RedshiftCredentials
     */
    'db_host': string;
    /**
     * Integration port (Required for Redshift).
     * @type {number}
     * @memberof RedshiftCredentials
     */
    'db_port': number;
}
/**
 * Input credentials for a Redshift integration.
 * @export
 * @interface RedshiftCredentialsIn
 */
export interface RedshiftCredentialsIn {
    /**
     * Integration database name.
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    'db_name': string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    'db_user': string;
    /**
     * Integration host (Required for Redshift).
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    'db_host': string;
    /**
     * Integration port (Required for Redshift).
     * @type {number}
     * @memberof RedshiftCredentialsIn
     */
    'db_port': number;
    /**
     * Integration password.
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    'db_password': string;
}
/**
 * A related filter value object model.
 * @export
 * @interface RelatedFilterValue
 */
export interface RelatedFilterValue {
    /**
     * Retrieval status.
     * @type {FilterValueType}
     * @memberof RelatedFilterValue
     */
    'filter_type'?: FilterValueType;
    /**
     * Filter value.
     * @type {string}
     * @memberof RelatedFilterValue
     */
    'value'?: string;
    /**
     * User who filtered by this value.
     * @type {string}
     * @memberof RelatedFilterValue
     */
    'added_by'?: string;
    /**
     * Time this value was added.
     * @type {string}
     * @memberof RelatedFilterValue
     */
    'added_on'?: string;
    /**
     * Feature.
     * @type {string}
     * @memberof RelatedFilterValue
     */
    'feature_id'?: string;
}
/**
 * Model to represent directionality of an Association.
 * @export
 * @interface RelationshipDirection
 */
export interface RelationshipDirection {
    /**
     * Relationship value.
     * @type {number}
     * @memberof RelationshipDirection
     */
    'relationship_value': number;
    /**
     * Direction of the association.
     * @type {ValidRelationshipDirectionEnum}
     * @memberof RelationshipDirection
     */
    'level': ValidRelationshipDirectionEnum;
    /**
     * Type of relationship.
     * @type {ValidCalibratedRelationshipType}
     * @memberof RelationshipDirection
     */
    'relationship_type': ValidCalibratedRelationshipType;
}
/**
 * Relationship resource links.
 * @export
 * @interface RelationshipLinks
 */
export interface RelationshipLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof RelationshipLinks
     */
    'self': string;
    /**
     * Link to Relationships\'s variables.
     * @type {string}
     * @memberof RelationshipLinks
     */
    'variables'?: string;
    /**
     * Link to Relationships\'s concepts.
     * @type {string}
     * @memberof RelationshipLinks
     */
    'topics'?: string;
}
/**
 * Relationship output model.
 * @export
 * @interface RelationshipOut
 */
export interface RelationshipOut {
    /**
     * The concepts in this relationship
     * @type {Array<string>}
     * @memberof RelationshipOut
     */
    'concept_ids'?: Array<string>;
    /**
     * Collection of links to related resources.
     * @type {RelationshipLinks}
     * @memberof RelationshipOut
     */
    '_links'?: RelationshipLinks;
}
/**
 * Relationship pagination out.
 * @export
 * @interface RelationshipPaginationOut
 */
export interface RelationshipPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof RelationshipPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<RelationshipOut>}
     * @memberof RelationshipPaginationOut
     */
    'items'?: Array<RelationshipOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof RelationshipPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof RelationshipPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof RelationshipPaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * Model to represent reproducibility of an Association.
 * @export
 * @interface RelationshipReproducibility
 */
export interface RelationshipReproducibility {
    /**
     * Type of study.
     * @type {StudyTypeEnum}
     * @memberof RelationshipReproducibility
     */
    'study_type': StudyTypeEnum;
    /**
     * Reproducibility of the association.
     * @type {ValidReproducibilityEnum}
     * @memberof RelationshipReproducibility
     */
    'level': ValidReproducibilityEnum;
    /**
     * Has experiment description.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_experiment_description': boolean;
    /**
     * Has experiment source.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_experiment_source': boolean;
    /**
     * Has experiment doi.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_experiment_doi': boolean;
    /**
     * Has experiment control.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_experiment_control': boolean;
    /**
     * Has model hyperparams.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_model_hyperparams': boolean;
    /**
     * Has training dataset url.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_training_ds_url': boolean;
    /**
     * Has training dataset description url.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_training_ds_desc_url': boolean;
    /**
     * Has source dataset.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_source_ds': boolean;
    /**
     * Has pdp.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_pdp': boolean;
    /**
     * Has significance.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_significance': boolean;
}
/**
 * Model to represent strength of an Association.
 * @export
 * @interface RelationshipStrength
 */
export interface RelationshipStrength {
    /**
     * Strength of the association.
     * @type {ValidRelationshipStrengthEnum}
     * @memberof RelationshipStrength
     */
    'level': ValidRelationshipStrengthEnum;
    /**
     * Relationship value.
     * @type {number}
     * @memberof RelationshipStrength
     */
    'relationship_value': number;
    /**
     * Type of relationship.
     * @type {ValidCalibratedRelationshipType}
     * @memberof RelationshipStrength
     */
    'relationship_type': ValidCalibratedRelationshipType;
    /**
     * Relationship model performance value.
     * @type {number}
     * @memberof RelationshipStrength
     */
    'relationship_model_performance'?: number;
    /**
     * Max values map.
     * @type {{ [key: string]: CalibratorBucketParams; }}
     * @memberof RelationshipStrength
     */
    'all_max_values': { [key: string]: CalibratorBucketParams; };
}
/**
 * API resource action enum.
 * @export
 * @enum {string}
 */

export enum ResourceAction {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}

/**
 * Generic resource collection element.
 * @export
 * @interface ResourceCollectionElement
 */
export interface ResourceCollectionElement {
    /**
     * The System resource type.
     * @type {SystemObjectResources}
     * @memberof ResourceCollectionElement
     */
    'type': SystemObjectResources;
    /**
     * The output model for resource.
     * @type {any}
     * @memberof ResourceCollectionElement
     */
    'elem': any;
}
/**
 * A System Resource Flag Output Object.
 * @export
 * @interface ResourceFlag
 */
export interface ResourceFlag {
    /**
     * Given reasons for the flag.
     * @type {Array<string>}
     * @memberof ResourceFlag
     */
    'reasons': Array<string>;
    /**
     * Additional metadata for the flag.
     * @type {object}
     * @memberof ResourceFlag
     */
    'meta'?: object;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof ResourceFlag
     */
    'added_on': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof ResourceFlag
     */
    'added_by': string;
}
/**
 * A System Resource Flag Input Object.
 * @export
 * @interface ResourceFlagIn
 */
export interface ResourceFlagIn {
    /**
     * Given reasons for the flag.
     * @type {Array<string>}
     * @memberof ResourceFlagIn
     */
    'reasons': Array<string>;
    /**
     * Additional metadata for the flag.
     * @type {object}
     * @memberof ResourceFlagIn
     */
    'meta'?: object;
}
/**
 * Table retrieval status.
 * @export
 * @enum {string}
 */

export enum RetrievalStatus {
    Pending = 'pending',
    Success = 'success',
    Failure = 'failure'
}

/**
 * Role input model.
 * @export
 * @interface RoleIn
 */
export interface RoleIn {
    /**
     * Role name
     * @type {TeamRoles}
     * @memberof RoleIn
     */
    'role_name': TeamRoles;
}
/**
 * Role input model.
 * @export
 * @interface RoleOut
 */
export interface RoleOut {
    /**
     * Role name
     * @type {TeamRoles}
     * @memberof RoleOut
     */
    'role_name': TeamRoles;
    /**
     * Role id
     * @type {string}
     * @memberof RoleOut
     */
    'role_id': string;
}
/**
 * Semantic search out model.
 * @export
 * @interface SemanticSearchOut
 */
export interface SemanticSearchOut {
    /**
     * 
     * @type {Array<Cluster>}
     * @memberof SemanticSearchOut
     */
    'clusters': Array<Cluster>;
    /**
     * 
     * @type {Array<ClusteredRelationship>}
     * @memberof SemanticSearchOut
     */
    'relationships': Array<ClusteredRelationship>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum SignificanceLevel {
    NinetyFive = 'ninety_five',
    NinetyNine = 'ninety_nine',
    NinetyNinePointNine = 'ninety_nine_point_nine',
    Invalid = 'invalid'
}

/**
 * Statistical significance input information.
 * @export
 * @interface SignificanceValueIn
 */
export interface SignificanceValueIn {
    /**
     * Confidence interval data.
     * @type {ConfidenceIntervalIn}
     * @memberof SignificanceValueIn
     */
    'confidence_interval'?: ConfidenceIntervalIn;
    /**
     * Statistical test null hypothesis data.
     * @type {NullHypothesisIn}
     * @memberof SignificanceValueIn
     */
    'null_hypothesis'?: NullHypothesisIn;
    /**
     * Who generated this object.
     * @type {ValidValueSource}
     * @memberof SignificanceValueIn
     */
    'generated_by'?: ValidValueSource;
}
/**
 * Statistical significance input information.
 * @export
 * @interface SignificanceValueOut
 */
export interface SignificanceValueOut {
    /**
     * Confidence interval data.
     * @type {ConfidenceIntervalOut}
     * @memberof SignificanceValueOut
     */
    'confidence_interval'?: ConfidenceIntervalOut;
    /**
     * Statistical test null hypothesis data.
     * @type {NullHypothesisOut}
     * @memberof SignificanceValueOut
     */
    'null_hypothesis'?: NullHypothesisOut;
    /**
     * Who generated this object.
     * @type {ValueSourceEnum}
     * @memberof SignificanceValueOut
     */
    'generated_by'?: ValueSourceEnum;
}
/**
 * Simplified object schema.
 * @export
 * @interface SimpleBaseObject
 */
export interface SimpleBaseObject {
    /**
     * 
     * @type {string}
     * @memberof SimpleBaseObject
     */
    'system_id': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleBaseObject
     */
    'name': string;
}
/**
 * Simplified topic schema.
 * @export
 * @interface SimpleTopic
 */
export interface SimpleTopic {
    /**
     * 
     * @type {string}
     * @memberof SimpleTopic
     */
    'system_id': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleTopic
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleTopic
     */
    'wikidata_id': string;
}
/**
 * Credentials for a Snowflake integration without password.
 * @export
 * @interface SnowflakeCredentials
 */
export interface SnowflakeCredentials {
    /**
     * Integration database name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    'db_name': string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    'db_user': string;
    /**
     * Integration account name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    'db_account': string;
    /**
     * Integration warehouse name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    'db_warehouse': string;
}
/**
 * Input credentials for a Snowflake integration.
 * @export
 * @interface SnowflakeCredentialsIn
 */
export interface SnowflakeCredentialsIn {
    /**
     * Integration database name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_name': string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_user': string;
    /**
     * Integration account name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_account': string;
    /**
     * Integration warehouse name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_warehouse': string;
    /**
     * Integration password.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_password': string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum StatisticalTestType {
    Ttest = 'ttest',
    Ztest = 'ztest',
    Anova = 'anova',
    Chisquared = 'chisquared',
    Htest = 'htest',
    Invalid = 'invalid'
}

/**
 * Represent statistics for a string feature.
 * @export
 * @interface StringFeatureStatistics
 */
export interface StringFeatureStatistics {
    /**
     * Percentage of column values that are missing or zero-length.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    'percent_missing_or_empty'?: number;
    /**
     * Minimum of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    'min_string_length'?: number;
    /**
     * Maximum of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    'max_string_length'?: number;
    /**
     * Mean of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    'mean_string_length'?: number;
    /**
     * Number of distinct non-missing values of the column.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    'distinct_values'?: number;
    /**
     * Histogram depicting the distribution of string length in the feature.
     * @type {Histogram}
     * @memberof StringFeatureStatistics
     */
    'character_length_distribution'?: Histogram;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: StringFeatureStatisticsSimpleBase; }}
     * @memberof StringFeatureStatistics
     */
    'history'?: { [key: string]: StringFeatureStatisticsSimpleBase; };
}
/**
 * Represent statistics for string feature.  These fields will be included in the stats history.
 * @export
 * @interface StringFeatureStatisticsSimpleBase
 */
export interface StringFeatureStatisticsSimpleBase {
    /**
     * Percentage of column values that are missing or zero-length.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    'percent_missing_or_empty'?: number;
    /**
     * Minimum of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    'min_string_length'?: number;
    /**
     * Maximum of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    'max_string_length'?: number;
    /**
     * Mean of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    'mean_string_length'?: number;
    /**
     * Number of distinct non-missing values of the column.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    'distinct_values'?: number;
}
/**
 * Stripe object.
 * @export
 * @interface StripeOut
 */
export interface StripeOut {
    /**
     * Subscription start date.
     * @type {string}
     * @memberof StripeOut
     */
    'start_date'?: string;
    /**
     * Subscription end date.
     * @type {string}
     * @memberof StripeOut
     */
    'end_date'?: string;
    /**
     * Subscription status.
     * @type {string}
     * @memberof StripeOut
     */
    'status'?: string;
    /**
     * Monthly or yearly.
     * @type {string}
     * @memberof StripeOut
     */
    'interval'?: string;
    /**
     * Autonew subscription
     * @type {boolean}
     * @memberof StripeOut
     */
    'cancel_at_period_end'?: boolean;
}
/**
 * Stripe session object.
 * @export
 * @interface StripeSessionOut
 */
export interface StripeSessionOut {
    /**
     * Session url link.
     * @type {string}
     * @memberof StripeSessionOut
     */
    'session_url'?: string;
}
/**
 * Interface for individual association finding in study.
 * @export
 * @interface StudyFinding
 */
export interface StudyFinding {
    /**
     * 
     * @type {string}
     * @memberof StudyFinding
     */
    'association_id': string;
    /**
     * 
     * @type {string}
     * @memberof StudyFinding
     */
    'finding': string;
}
/**
 * Interface for a single study and its finding sentences, populations, sample size, and id.
 * @export
 * @interface StudyFindingObject
 */
export interface StudyFindingObject {
    /**
     * 
     * @type {Array<StudyFinding>}
     * @memberof StudyFindingObject
     */
    'findings': Array<StudyFinding>;
    /**
     * 
     * @type {Array<string>}
     * @memberof StudyFindingObject
     */
    'populations': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof StudyFindingObject
     */
    'sample_size'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudyFindingObject
     */
    'system_id': string;
}
/**
 * Interface for /findings input.
 * @export
 * @interface StudyFindingsIn
 */
export interface StudyFindingsIn {
    /**
     * 
     * @type {Array<string>}
     * @memberof StudyFindingsIn
     */
    'association_ids': Array<string>;
}
/**
 * Interface for /findings response type.
 * @export
 * @interface StudyFindingsOut
 */
export interface StudyFindingsOut {
    /**
     * 
     * @type {Array<StudyFindingObject>}
     * @memberof StudyFindingsOut
     */
    'studies': Array<StudyFindingObject>;
}
/**
 * A real world study.
 * @export
 * @interface StudyIn
 */
export interface StudyIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof StudyIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof StudyIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof StudyIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof StudyIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof StudyIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Study\'s name.
     * @type {string}
     * @memberof StudyIn
     */
    'name': string;
    /**
     * Study\'s description.
     * @type {string}
     * @memberof StudyIn
     */
    'description'?: string;
    /**
     * The source (e.g. github link) of the study.
     * @type {string}
     * @memberof StudyIn
     */
    'source'?: string;
    /**
     * The type of study.
     * @type {StudyTypeEnum}
     * @memberof StudyIn
     */
    'study_type'?: StudyTypeEnum;
    /**
     * The DOI of the study.
     * @type {string}
     * @memberof StudyIn
     */
    'doi'?: string;
    /**
     * The lede of the study.
     * @type {string}
     * @memberof StudyIn
     */
    'lede'?: string;
    /**
     * External assets data.
     * @type {Array<ExternalAsset>}
     * @memberof StudyIn
     */
    'external_assets'?: Array<ExternalAsset>;
    /**
     * Optional add flow context flag.
     * @type {AddFlowContext}
     * @memberof StudyIn
     */
    'add_context'?: AddFlowContext;
    /**
     * Insights generated by this study.
     * @type {Array<string>}
     * @memberof StudyIn
     */
    'insights'?: Array<string>;
    /**
     * Publication info of study.
     * @type {PublicationInfo}
     * @memberof StudyIn
     */
    'publication_info'?: PublicationInfo;
    /**
     * Publication type string field.
     * @type {string}
     * @memberof StudyIn
     */
    'publication_type'?: string;
}
/**
 * Study resource links.
 * @export
 * @interface StudyLinks
 */
export interface StudyLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof StudyLinks
     */
    'self': string;
    /**
     * Link to study\'s authors.
     * @type {string}
     * @memberof StudyLinks
     */
    'authors': string;
    /**
     * Link to study\'s models.
     * @type {string}
     * @memberof StudyLinks
     */
    'models': string;
}
/**
 * Interface for input to /study-metadata.
 * @export
 * @interface StudyMetadataIn
 */
export interface StudyMetadataIn {
    /**
     * 
     * @type {Array<string>}
     * @memberof StudyMetadataIn
     */
    'dois': Array<string>;
}
/**
 * Interface for /study-metadata response type.
 * @export
 * @interface StudyMetadataOut
 */
export interface StudyMetadataOut {
    /**
     * 
     * @type {Array<OpenAlexStudyMetadata>}
     * @memberof StudyMetadataOut
     */
    'open_alex_metadata': Array<OpenAlexStudyMetadata>;
}
/**
 * A real world study.
 * @export
 * @interface StudyOut
 */
export interface StudyOut {
    /**
     * 
     * @type {string}
     * @memberof StudyOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof StudyOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof StudyOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof StudyOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof StudyOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof StudyOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof StudyOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof StudyOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof StudyOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof StudyOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof StudyOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof StudyOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Study\'s name.
     * @type {string}
     * @memberof StudyOut
     */
    'name'?: string;
    /**
     * Study\'s description.
     * @type {string}
     * @memberof StudyOut
     */
    'description'?: string;
    /**
     * The source (e.g. github link) of the study.
     * @type {string}
     * @memberof StudyOut
     */
    'source'?: string;
    /**
     * The type of study.
     * @type {StudyTypeEnum}
     * @memberof StudyOut
     */
    'study_type'?: StudyTypeEnum;
    /**
     * The DOI of the study.
     * @type {string}
     * @memberof StudyOut
     */
    'doi'?: string;
    /**
     * The lede of the study.
     * @type {string}
     * @memberof StudyOut
     */
    'lede'?: string;
    /**
     * External assets data.
     * @type {Array<ExternalAsset>}
     * @memberof StudyOut
     */
    'external_assets'?: Array<ExternalAsset>;
    /**
     * Optional add flow context flag.
     * @type {AddFlowContext}
     * @memberof StudyOut
     */
    'add_context'?: AddFlowContext;
    /**
     * Insights generated by this study.
     * @type {Array<string>}
     * @memberof StudyOut
     */
    'insights'?: Array<string>;
    /**
     * Publication info of study.
     * @type {PublicationInfo}
     * @memberof StudyOut
     */
    'publication_info'?: PublicationInfo;
    /**
     * Publication type string field.
     * @type {string}
     * @memberof StudyOut
     */
    'publication_type'?: string;
    /**
     * Collection of links to related resources.
     * @type {StudyLinks}
     * @memberof StudyOut
     */
    '_links'?: StudyLinks;
    /**
     * Deprecated: The subgraph id of the resource.
     * @type {string}
     * @memberof StudyOut
     */
    'subgraph_id'?: string;
    /**
     * Object\'s tagged to this study.
     * @type {AppSchemaStudiesObjectTags}
     * @memberof StudyOut
     */
    'object_tags'?: AppSchemaStudiesObjectTags;
    /**
     * Authors of the study.
     * @type {Array<AuthorOut>}
     * @memberof StudyOut
     */
    'authors'?: Array<AuthorOut>;
}
/**
 * Study pagination out.
 * @export
 * @interface StudyPaginationOut
 */
export interface StudyPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof StudyPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<StudyOut>}
     * @memberof StudyPaginationOut
     */
    'items'?: Array<StudyOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof StudyPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof StudyPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof StudyPaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum StudySortEnum {
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Enum for study types.
 * @export
 * @enum {string}
 */

export enum StudyTypeEnum {
    Invalid = 'invalid',
    SupervisedMl = 'supervised_ml',
    UnsupervisedMl = 'unsupervised_ml',
    StatisticalInference = 'statistical_inference',
    RandomizedControlTrial = 'randomized_control_trial'
}

/**
 * Post body for /synthesis endpoint.
 * @export
 * @interface SynthesisIn
 */
export interface SynthesisIn {
    /**
     * 
     * @type {string}
     * @memberof SynthesisIn
     */
    'question'?: string;
    /**
     * 
     * @type {Array<Evidence>}
     * @memberof SynthesisIn
     */
    'evidence': Array<Evidence>;
}
/**
 * Synthesis output model.
 * @export
 * @interface SynthesisOut
 */
export interface SynthesisOut {
    /**
     * 
     * @type {string}
     * @memberof SynthesisOut
     */
    'synthesis': string;
    /**
     * 
     * @type {number}
     * @memberof SynthesisOut
     */
    'last_updated': number;
}
/**
 * Enum System object resource names.
 * @export
 * @enum {string}
 */

export enum SystemObjectResources {
    Variable = 'variable',
    Dataset = 'dataset',
    Feature = 'feature',
    Study = 'study',
    Model = 'model',
    Author = 'author',
    Concept = 'concept',
    PopulationAttribute = 'population_attribute',
    PopulationAttributeValue = 'population_attribute_value',
    Association = 'association',
    Team = 'team',
    Dashboard = 'dashboard',
    Relationship = 'relationship'
}

/**
 * A table object.
 * @export
 * @interface Table
 */
export interface Table {
    /**
     * 
     * @type {number}
     * @memberof Table
     */
    'id'?: number;
    /**
     * Table name.
     * @type {string}
     * @memberof Table
     */
    'name'?: string;
    /**
     * Active status.
     * @type {boolean}
     * @memberof Table
     */
    'active'?: boolean;
    /**
     * Schema name.
     * @type {string}
     * @memberof Table
     */
    'schema_name'?: string;
    /**
     * System ID of dataset this table corresponds to.
     * @type {string}
     * @memberof Table
     */
    'dataset_id'?: string;
    /**
     * Retrieval status.
     * @type {RetrievalStatus}
     * @memberof Table
     */
    'status'?: RetrievalStatus;
    /**
     * Time when table was last retrieved.
     * @type {string}
     * @memberof Table
     */
    'last_retrieval'?: string;
    /**
     * Time when interactions were last computed.
     * @type {string}
     * @memberof Table
     */
    'last_interactions_on'?: string;
    /**
     * Integration link.
     * @type {string}
     * @memberof Table
     */
    'integration': string;
}
/**
 * An Team input data.
 * @export
 * @interface TeamIn
 */
export interface TeamIn {
    /**
     * Team\'s name.
     * @type {string}
     * @memberof TeamIn
     */
    'name': string;
    /**
     * Identifier of the team.
     * @type {string}
     * @memberof TeamIn
     */
    'slug': string;
    /**
     * Team\'s logo
     * @type {string}
     * @memberof TeamIn
     */
    'logo'?: string;
}
/**
 * Team resource links.
 * @export
 * @interface TeamLinks
 */
export interface TeamLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof TeamLinks
     */
    'self': string;
}
/**
 * Team output model.
 * @export
 * @interface TeamOut
 */
export interface TeamOut {
    /**
     * 
     * @type {string}
     * @memberof TeamOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof TeamOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof TeamOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof TeamOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof TeamOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof TeamOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof TeamOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Team\'s name.
     * @type {string}
     * @memberof TeamOut
     */
    'name': string;
    /**
     * Identifier of the team.
     * @type {string}
     * @memberof TeamOut
     */
    'slug': string;
    /**
     * Team\'s logo
     * @type {string}
     * @memberof TeamOut
     */
    'logo'?: string;
    /**
     * The list of integrations to retrieve
     * @type {Array<Integration>}
     * @memberof TeamOut
     */
    'integrations'?: Array<Integration>;
    /**
     * The team messages
     * @type {Array<MessageOut>}
     * @memberof TeamOut
     */
    'messages'?: Array<MessageOut>;
    /**
     * Collection of links to related resources.
     * @type {TeamLinks}
     * @memberof TeamOut
     */
    '_links'?: TeamLinks;
    /**
     * Public status
     * @type {boolean}
     * @memberof TeamOut
     */
    'public'?: boolean;
}
/**
 * Roles available for a team.
 * @export
 * @enum {string}
 */

export enum TeamRoles {
    Admin = 'admin',
    Editor = 'editor'
}

/**
 * Represent a test dataset.
 * @export
 * @interface TestDataset
 */
export interface TestDataset {
    /**
     * Source dataset transformation was applied to.
     * @type {string}
     * @memberof TestDataset
     */
    'dataset_id': string;
    /**
     * 
     * @type {ValidTransformationTypeEnum}
     * @memberof TestDataset
     */
    'transformation_type'?: ValidTransformationTypeEnum;
    /**
     * Details of transformation.
     * @type {object}
     * @memberof TestDataset
     */
    'details'?: object;
}
/**
 * Represent time series statistics for a time series feature type.
 * @export
 * @interface TimeSeriesFeatureStatistics
 */
export interface TimeSeriesFeatureStatistics {
    /**
     * Number of (time) periods for which the feature exists.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'length'?: number;
    /**
     * Minimum value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'min'?: number;
    /**
     * Maximum value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'max'?: number;
    /**
     * Median value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'median'?: number;
    /**
     * Mean value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'mean'?: number;
    /**
     * Standard deviation of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'std'?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'percent_missing'?: number;
    /**
     * Time frequency for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatistics
     */
    'time_frequency'?: string;
    /**
     * First time period (string, ISO format) for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatistics
     */
    'time_start'?: string;
    /**
     * Last time period (string, ISO format) for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatistics
     */
    'time_end'?: string;
    /**
     * Line plot of the time series feature.
     * @type {LinePlot}
     * @memberof TimeSeriesFeatureStatistics
     */
    'lineplot'?: LinePlot;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: TimeSeriesFeatureStatisticsSimpleBase; }}
     * @memberof TimeSeriesFeatureStatistics
     */
    'history'?: { [key: string]: TimeSeriesFeatureStatisticsSimpleBase; };
}
/**
 * Represent time series statistics for a time series feature type.  These fields will be included in the stats history.
 * @export
 * @interface TimeSeriesFeatureStatisticsSimpleBase
 */
export interface TimeSeriesFeatureStatisticsSimpleBase {
    /**
     * Number of (time) periods for which the feature exists.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'length'?: number;
    /**
     * Minimum value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'min'?: number;
    /**
     * Maximum value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'max'?: number;
    /**
     * Median value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'median'?: number;
    /**
     * Mean value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'mean'?: number;
    /**
     * Standard deviation of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'std'?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'percent_missing'?: number;
    /**
     * Time frequency for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'time_frequency'?: string;
    /**
     * First time period (string, ISO format) for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'time_start'?: string;
    /**
     * Last time period (string, ISO format) for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'time_end'?: string;
}
/**
 * Timeline pagination out.
 * @export
 * @interface TimelinePaginationOut
 */
export interface TimelinePaginationOut {
    /**
     * Collection of links to related resources.
     * @type {NextPrevPaginationLinks}
     * @memberof TimelinePaginationOut
     */
    '_links'?: NextPrevPaginationLinks;
    /**
     * List of results.
     * @type {Array<ResourceCollectionElement>}
     * @memberof TimelinePaginationOut
     */
    'items'?: Array<ResourceCollectionElement>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof TimelinePaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof TimelinePaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof TimelinePaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * Simplified topic relationships schema.
 * @export
 * @interface TopicRelationship
 */
export interface TopicRelationship {
    /**
     * 
     * @type {Array<SimpleTopic>}
     * @memberof TopicRelationship
     */
    'topics': Array<SimpleTopic>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TopicRelationship
     */
    'directed_at': Array<string>;
}
/**
 * Return type for topic relationship syntheses.
 * @export
 * @interface TopicRelationshipSynthesisOut
 */
export interface TopicRelationshipSynthesisOut {
    /**
     * ID of topic relationship
     * @type {string}
     * @memberof TopicRelationshipSynthesisOut
     */
    'relationship_id'?: string;
    /**
     * Direction Enum for Relationship
     * @type {string}
     * @memberof TopicRelationshipSynthesisOut
     */
    'directed_at'?: string;
    /**
     * Topic ID 1
     * @type {string}
     * @memberof TopicRelationshipSynthesisOut
     */
    'topic_id_1'?: string;
    /**
     * Topic ID 2
     * @type {string}
     * @memberof TopicRelationshipSynthesisOut
     */
    'topic_id_2'?: string;
    /**
     * Relationship Synthesis Summary
     * @type {string}
     * @memberof TopicRelationshipSynthesisOut
     */
    'synthesis'?: string;
    /**
     * Last updated time stamp
     * @type {string}
     * @memberof TopicRelationshipSynthesisOut
     */
    'last_updated'?: string;
}
/**
 * User profile data input.
 * @export
 * @interface UpdateProfileIn
 */
export interface UpdateProfileIn {
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'display_name'?: string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'last_name'?: string;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'field_of_work'?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'email'?: string;
    /**
     * User roles.
     * @type {Array<string>}
     * @memberof UpdateProfileIn
     */
    'roles'?: Array<string>;
}
/**
 * User input for adding to a team.
 * @export
 * @interface UserInvite
 */
export interface UserInvite {
    /**
     * User email address.
     * @type {string}
     * @memberof UserInvite
     */
    'email': string;
}
/**
 * Private user profile out.
 * @export
 * @interface UserPrivateProfileOut
 */
export interface UserPrivateProfileOut {
    /**
     * The user\'s System ID.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'id': string;
    /**
     * Time when the user\'s profile was created.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'created_at': string;
    /**
     * The Author ID corresponding to this user.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'author_id': string;
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'display_name': string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'last_name'?: string;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'field_of_work'?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'email': string;
    /**
     * User roles.
     * @type {Array<string>}
     * @memberof UserPrivateProfileOut
     */
    'roles'?: Array<string>;
    /**
     * Stripe object
     * @type {StripeOut}
     * @memberof UserPrivateProfileOut
     */
    'stripe'?: StripeOut;
}
/**
 * User profile data input.
 * @export
 * @interface UserProfileIn
 */
export interface UserProfileIn {
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserProfileIn
     */
    'display_name': string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserProfileIn
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserProfileIn
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UserProfileIn
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UserProfileIn
     */
    'last_name'?: string;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UserProfileIn
     */
    'field_of_work'?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UserProfileIn
     */
    'email': string;
    /**
     * User roles.
     * @type {Array<string>}
     * @memberof UserProfileIn
     */
    'roles'?: Array<string>;
}
/**
 * Public user profile out.
 * @export
 * @interface UserPublicProfileOut
 */
export interface UserPublicProfileOut {
    /**
     * The user\'s System ID.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'id': string;
    /**
     * Time when the user\'s profile was created.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'created_at': string;
    /**
     * The Author ID corresponding to this user.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'author_id': string;
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'display_name': string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'last_name'?: string;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'field_of_work'?: string;
}
/**
 * Enum for valid calibrated relationship type.
 * @export
 * @enum {string}
 */

export enum ValidCalibratedRelationshipType {
    Invalid = 'invalid',
    SiPearsonR = 'si_pearson_r',
    SiKendallTau = 'si_kendall_tau',
    SiCramerV = 'si_cramer_v',
    MlPermutationF1 = 'ml_permutation_f1',
    MlPermutationR2 = 'ml_permutation_r2',
    SiEffectSizeR = 'si_effect_size_r',
    SiEffectSizeD = 'si_effect_size_d',
    SiEffectSizeW = 'si_effect_size_w'
}

/**
 * Enum for valid dataset license.
 * @export
 * @enum {string}
 */

export enum ValidDatasetLicenseEnum {
    PublicDomain = 'public_domain',
    CreativeCommonsPublicDomainDedication = 'creative_commons_public_domain_dedication',
    OpendataCommonsPublicDomainDedicationAndLicense = 'opendata_commons_public_domain_dedication_and_license',
    CreativeCommonsAttributionInternational = 'creative_commons_attribution_international',
    CommunityDataLicenseAgreementVersion1Permissive = 'community_data_license_agreement_version_1_permissive',
    OpenDataCommonsAttributionLicense = 'open_data_commons_attribution_license',
    CreativeCommonsAttributionShareAlike4International = 'creative_commons_attribution_share_alike_4_international',
    CommunityDataLicenseAgreementVersion1Sharing = 'community_data_license_agreement_version_1_sharing',
    OpenDataCommonsOpenDatabaseLicense = 'open_data_commons_open_database_license',
    CreativeCommonsAttributionNoncommercial4International = 'creative_commons_attribution_noncommercial_4_international',
    CreativeCommonsAttributionNoderivatives4International = 'creative_commons_attribution_noderivatives_4_international',
    CreativeCommonsAttributionNoncommercialShareAlike4International = 'creative_commons_attribution_noncommercial_share_alike_4_international',
    CreativeCommonsAttributionNoncommercialNoderivatives4International = 'creative_commons_attribution_noncommercial_noderivatives_4_international',
    Other = 'other'
}

/**
 * Valid feature contribution method enums.
 * @export
 * @enum {string}
 */

export enum ValidFeatureContributionMethod {
    Gini = 'gini',
    Gain = 'gain',
    Shap = 'shap',
    Coefficient = 'coefficient',
    Lime = 'lime',
    Permutation = 'permutation',
    PearsonR = 'pearson_r',
    KendallTau = 'kendall_tau',
    CramerV = 'cramer_v',
    KruskalWallisHTest = 'kruskal_wallis_h_test',
    ControlVariable = 'control_variable',
    ProductMomentR = 'product_moment_r',
    FrequencyScore = 'frequency_score',
    OddsRatio = 'odds_ratio',
    RelativeRiskRatio = 'relative_risk_ratio',
    HazardRatio = 'hazard_ratio',
    MeanGainUnstandardized = 'mean_gain_unstandardized',
    MeanGainStandardized = 'mean_gain_standardized',
    MeanDifferenceUnstandardized = 'mean_difference_unstandardized',
    MeanDifferenceStandardized = 'mean_difference_standardized',
    ProportionDifference = 'proportion_difference',
    LogOddsRatio = 'log_odds_ratio',
    PearsonChiSquaredTest = 'pearson_chi_squared_test',
    Forecast = 'forecast',
    PercentChangeDifference = 'percent_change_difference',
    AdjustedOddsRatio = 'adjusted_odds_ratio',
    AdjustedHazardRatio = 'adjusted_hazard_ratio',
    IncidentRateRatio = 'incident_rate_ratio',
    RiskDifference = 'risk_difference',
    InformationFlow = 'information_flow',
    StandardizedCoefficient = 'standardized_coefficient',
    CohensD = 'cohens_d',
    HedgesG = 'hedges_g',
    GlassSDelta = 'glass_s_delta',
    RootMeanSquareDifferencePsi = 'root_mean_square_difference_psi',
    MahalanobisDistance = 'mahalanobis_distance',
    CohensW = 'cohens_w',
    CohensH = 'cohens_h',
    CliffsDelta = 'cliffs_delta',
    RankBiserialCorrelation = 'rank_biserial_correlation',
    SpearmanCorrelation = 'spearman_correlation',
    Elasticity = 'elasticity',
    PrevalenceRatio = 'prevalence_ratio'
}

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum ValidModelScoreEnum {
    AccuracyScore = 'accuracy_score',
    AveragePrecisionScore = 'average_precision_score',
    BalancedAccuracyScore = 'balanced_accuracy_score',
    BrierScoreLoss = 'brier_score_loss',
    CohenKappaScore = 'cohen_kappa_score',
    F1Score = 'f1_score',
    HammingLoss = 'hamming_loss',
    HingeLoss = 'hinge_loss',
    JaccardScore = 'jaccard_score',
    LogLoss = 'log_loss',
    MatthewsCorrCoef = 'matthews_corr_coef',
    PrecisionScore = 'precision_score',
    RecallScore = 'recall_score',
    RocAucScore = 'roc_auc_score',
    ZeroOneLoss = 'zero_one_loss',
    ExplainedVarianceScore = 'explained_variance_score',
    MaxError = 'max_error',
    MeanAbsoluteError = 'mean_absolute_error',
    MeanAbsolutePercentageError = 'mean_absolute_percentage_error',
    MeanSquaredError = 'mean_squared_error',
    MeanSquaredLogError = 'mean_squared_log_error',
    MedianAbsoluteError = 'median_absolute_error',
    R2Score = 'r2_score',
    CoverageError = 'coverage_error',
    LabelRankingAveragePrecisionScore = 'label_ranking_average_precision_score',
    LabelRankingLoss = 'label_ranking_loss',
    AdjustedR2Score = 'adjusted_r2_score',
    MutualInformationScore = 'mutual_information_score',
    AdjMutualInformationScore = 'adj_mutual_information_score',
    NormalizedMutualInformationScore = 'normalized_mutual_information_score',
    AdjRandScore = 'adj_rand_score',
    CompletenessScore = 'completeness_score',
    FowlkesMallowsScore = 'fowlkes_mallows_score',
    HomogeneityScore = 'homogeneity_score',
    VMeasureScore = 'v_measure_score',
    NegMeanAbsoluteError = 'neg_mean_absolute_error',
    NegMeanSquaredError = 'neg_mean_squared_error',
    RootMeanSquaredError = 'root_mean_squared_error',
    NegRootMeanSquaredError = 'neg_root_mean_squared_error',
    RootMeanSquaredLogError = 'root_mean_squared_log_error',
    NegMedianAbsoluteError = 'neg_median_absolute_error',
    CosineProximity = 'cosine_proximity',
    KullbackLeiblerDivergence = 'kullback_leibler_divergence',
    PoissonMetric = 'poisson_metric',
    MulticlassLogLoss = 'multiclass_log_loss',
    NormalizedDiscountedCumulativeGain = 'normalized_discounted_cumulative_gain',
    GammaDeviance = 'gamma_deviance',
    HuberMetric = 'huber_metric',
    FBetaScore = 'f_beta_score',
    EuclideanDistance = 'euclidean_distance',
    HaversineDistance = 'haversine_distance',
    MeanSquaredPredictioneRror = 'mean_squared_predictione_rror',
    PseudoR2Mcfadden = 'pseudo_r2_mcfadden',
    AdjustedPseudoR2Mcfadden = 'adjusted_pseudo_r2_mcfadden',
    PseudoR2Nagelkerke = 'pseudo_r2_nagelkerke',
    PseudoR2CoxSnell = 'pseudo_r2_cox_snell',
    PseudoR2Effron = 'pseudo_r2_effron',
    Bic = 'bic',
    Aic = 'aic',
    CorrelationActualForecast = 'correlation_actual_forecast',
    ForecastVsActual = 'forecast_vs_actual',
    MeanSquaredPercentageError = 'mean_squared_percentage_error',
    ConfusionMatrix = 'confusion_matrix',
    MulticlassConfusionMatrix = 'multiclass_confusion_matrix',
    RocCurve = 'roc_curve'
}

/**
 * Enum for valid relationship direction.
 * @export
 * @enum {string}
 */

export enum ValidRelationshipDirectionEnum {
    Positive = 'positive',
    Negative = 'negative',
    Zero = 'zero',
    Invalid = 'invalid'
}

/**
 * Enum for valid relationship strength.
 * @export
 * @enum {string}
 */

export enum ValidRelationshipStrengthEnum {
    Invalid = 'invalid',
    VeryWeak = 'very_weak',
    Weak = 'weak',
    Moderate = 'moderate',
    Strong = 'strong',
    VeryStrong = 'very_strong'
}

/**
 * Enum for valid reproducibility level.
 * @export
 * @enum {string}
 */

export enum ValidReproducibilityEnum {
    Invalid = 'invalid',
    Low = 'low',
    Medium = 'medium',
    High = 'high'
}

/**
 * Valid significance level enums.
 * @export
 * @enum {string}
 */

export enum ValidSignificanceLevel {
    Five = 'ninety_five',
    Nine = 'ninety_nine',
    NinePointNine = 'ninety_nine_point_nine'
}

/**
 * Valid statistical test type enums.
 * @export
 * @enum {string}
 */

export enum ValidStatisticalTestType {
    Ttest = 'ttest',
    Ztest = 'ztest',
    Anova = 'anova',
    Chisquared = 'chisquared',
    Htest = 'htest'
}

/**
 * Valid transformation type enums.
 * @export
 * @enum {string}
 */

export enum ValidTransformationTypeEnum {
    NoTransformation = 'no_transformation',
    Kfold = 'kfold',
    LeavePOut = 'leave_p_out',
    Holdout = 'holdout',
    Independent = 'independent'
}

/**
 * Valid value source enum.
 * @export
 * @enum {string}
 */

export enum ValidValueSource {
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user'
}

/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    'loc': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum ValueSourceEnum {
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user',
    Invalid = 'invalid'
}

/**
 * A real-world variable that is measured on a concept.
 * @export
 * @interface VariableIn
 */
export interface VariableIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof VariableIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof VariableIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof VariableIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof VariableIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof VariableIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Variable\'s name.
     * @type {string}
     * @memberof VariableIn
     */
    'name': string;
    /**
     * A short description of the variable.
     * @type {string}
     * @memberof VariableIn
     */
    'description'?: string;
    /**
     * Other names for the variable.
     * @type {Array<string>}
     * @memberof VariableIn
     */
    'aliases'?: Array<string>;
    /**
     * External identifier mapping from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof VariableIn
     */
    'xid'?: { [key: string]: string; };
    /**
     * Type of the variable.
     * @type {VariableType}
     * @memberof VariableIn
     */
    'variable_type'?: VariableType;
    /**
     * The id of the Variable\'s Concept.
     * @type {string}
     * @memberof VariableIn
     */
    'concept_id'?: string;
    /**
     * The monitoring rules for the metric.
     * @type {MetricMonitoring}
     * @memberof VariableIn
     */
    'monitoring'?: MetricMonitoring;
    /**
     * The uuid of the metric cluster.
     * @type {string}
     * @memberof VariableIn
     */
    'cluster_id'?: string;
    /**
     * The name of the metric cluster.
     * @type {string}
     * @memberof VariableIn
     */
    'cluster_name'?: string;
}
/**
 * Variable resource links.
 * @export
 * @interface VariableLinks
 */
export interface VariableLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof VariableLinks
     */
    'self': string;
    /**
     * Link to Variable\'s Concept.
     * @type {string}
     * @memberof VariableLinks
     */
    'concept'?: string;
}
/**
 * Variable output model.
 * @export
 * @interface VariableOut
 */
export interface VariableOut {
    /**
     * 
     * @type {string}
     * @memberof VariableOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof VariableOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof VariableOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof VariableOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof VariableOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof VariableOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof VariableOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof VariableOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof VariableOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof VariableOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof VariableOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof VariableOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Variable\'s name.
     * @type {string}
     * @memberof VariableOut
     */
    'name': string;
    /**
     * A short description of the variable.
     * @type {string}
     * @memberof VariableOut
     */
    'description'?: string;
    /**
     * Other names for the variable.
     * @type {Array<string>}
     * @memberof VariableOut
     */
    'aliases'?: Array<string>;
    /**
     * External identifier mapping from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof VariableOut
     */
    'xid'?: { [key: string]: string; };
    /**
     * Type of the variable.
     * @type {VariableType}
     * @memberof VariableOut
     */
    'variable_type'?: VariableType;
    /**
     * The id of the Variable\'s Concept.
     * @type {string}
     * @memberof VariableOut
     */
    'concept_id'?: string;
    /**
     * The monitoring rules for the metric.
     * @type {MetricMonitoring}
     * @memberof VariableOut
     */
    'monitoring'?: MetricMonitoring;
    /**
     * The uuid of the metric cluster.
     * @type {string}
     * @memberof VariableOut
     */
    'cluster_id'?: string;
    /**
     * The name of the metric cluster.
     * @type {string}
     * @memberof VariableOut
     */
    'cluster_name'?: string;
    /**
     * Collection of links to related resources.
     * @type {VariableLinks}
     * @memberof VariableOut
     */
    '_links'?: VariableLinks;
    /**
     * Number of models using this variable.
     * @type {number}
     * @memberof VariableOut
     */
    'model_count'?: number;
    /**
     * Number of models predicting this variable.
     * @type {number}
     * @memberof VariableOut
     */
    'model_predict_count'?: number;
    /**
     * Number of datasets using this variable.
     * @type {number}
     * @memberof VariableOut
     */
    'dataset_count'?: number;
    /**
     * Number of associations using this variable.
     * @type {number}
     * @memberof VariableOut
     */
    'association_count'?: number;
    /**
     * Number of features operationalizing this variable.
     * @type {number}
     * @memberof VariableOut
     */
    'feature_count'?: number;
}
/**
 * Variable pagination out.
 * @export
 * @interface VariablePaginationOut
 */
export interface VariablePaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof VariablePaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<VariableOut>}
     * @memberof VariablePaginationOut
     */
    'items'?: Array<VariableOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof VariablePaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof VariablePaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof VariablePaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum VariableSortEnum {
    ModelCount = 'model_count',
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Variable type model.
 * @export
 * @interface VariableType
 */
export interface VariableType {
    /**
     * 
     * @type {VariableTypeEnum}
     * @memberof VariableType
     */
    'type'?: VariableTypeEnum;
    /**
     * Optional description only when valid when type=unknown
     * @type {string}
     * @memberof VariableType
     */
    'description'?: string;
}
/**
 * Enum for variable types.
 * @export
 * @enum {string}
 */

export enum VariableTypeEnum {
    Unknown = 'unknown',
    CategoricalNominal = 'categorical_nominal',
    CategoricalOrdinal = 'categorical_ordinal',
    CategoricalBinary = 'categorical_binary',
    NumericalDiscrete = 'numerical_discrete',
    NumericalContinuous = 'numerical_continuous'
}


/**
 * AssociationsApi - axios parameter creator
 * @export
 */
export const AssociationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost: async (datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('createAssociationsV1DatasetsDatasetIdAssociationsPost', 'datasetId', datasetId)
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            assertParamExists('createAssociationsV1DatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn)
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost: async (modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('createAssociationsV1ModelsModelIdAssociationsPost', 'modelId', modelId)
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            assertParamExists('createAssociationsV1ModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn)
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost: async (teamId: string, datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'datasetId', datasetId)
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost: async (teamId: string, modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'modelId', modelId)
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete: async (modelId: string, associationId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId)
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete: async (teamId: string, modelId: string, associationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete: async (modelId: string, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteAssociationsV1ModelsModelIdAssociationsDelete', 'modelId', modelId)
            // verify required parameter 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete' is not null or undefined
            assertParamExists('deleteAssociationsV1ModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete)
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: async (teamId: string, modelId: string, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'modelId', modelId)
            // verify required parameter 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete' is not null or undefined
            assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: async (datasetId: string, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId)
            // verify required parameter 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete' is not null or undefined
            assertParamExists('deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete)
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: async (teamId: string, datasetId: string, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId)
            // verify required parameter 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete' is not null or undefined
            assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost: async (associationId: string, resourceFlagIn: ResourceFlagIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('flagAssociationV1AssociationsAssociationIdFlagsPost', 'associationId', associationId)
            // verify required parameter 'resourceFlagIn' is not null or undefined
            assertParamExists('flagAssociationV1AssociationsAssociationIdFlagsPost', 'resourceFlagIn', resourceFlagIn)
            const localVarPath = `/v1/associations/{association_id}/flags`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceFlagIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost_1: async (associationId: string, resourceFlagIn: ResourceFlagIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('flagAssociationV1AssociationsAssociationIdFlagsPost_1', 'associationId', associationId)
            // verify required parameter 'resourceFlagIn' is not null or undefined
            assertParamExists('flagAssociationV1AssociationsAssociationIdFlagsPost_1', 'resourceFlagIn', resourceFlagIn)
            const localVarPath = `/v1/associations/{association_id}/flags`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceFlagIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost: async (teamId: string, associationId: string, resourceFlagIn: ResourceFlagIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost', 'associationId', associationId)
            // verify required parameter 'resourceFlagIn' is not null or undefined
            assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost', 'resourceFlagIn', resourceFlagIn)
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/flags`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceFlagIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2: async (teamId: string, associationId: string, resourceFlagIn: ResourceFlagIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2', 'associationId', associationId)
            // verify required parameter 'resourceFlagIn' is not null or undefined
            assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2', 'resourceFlagIn', resourceFlagIn)
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/flags`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceFlagIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: async (associationId: string, modelId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet: async (teamId: string, associationId: string, modelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet: async (associationId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getRelationshipDirectionV1AssociationsAssociationIdDirectionGet', 'associationId', associationId)
            const localVarPath = `/v1/associations/{association_id}/direction`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet: async (teamId: string, associationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet', 'associationId', associationId)
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/direction`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet: async (associationId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet', 'associationId', associationId)
            const localVarPath = `/v1/associations/{association_id}/reproducibility`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet: async (teamId: string, associationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet', 'associationId', associationId)
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/reproducibility`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1AssociationsAssociationIdStrengthGet: async (associationId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getRelationshipStrengthV1AssociationsAssociationIdStrengthGet', 'associationId', associationId)
            const localVarPath = `/v1/associations/{association_id}/strength`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet: async (teamId: string, associationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet', 'associationId', associationId)
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/strength`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet: async (teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/user/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet: async (studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/user/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/associations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }

            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet: async (datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listAssociationsV1DatasetsDatasetIdAssociationsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: async (modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listAssociationsV1ModelsModelIdAssociationsGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet: async (studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsV1StudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdAssociationsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }

            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet: async (teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet: async (teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet', 'modelId', modelId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet: async (teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet: async (teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet', 'variableId', variableId)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: async (variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listAssociationsV1VariablesVariableIdAssociationsGet', 'variableId', variableId)
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch: async (modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('patchAssociationsV1ModelsModelIdAssociationsPatch', 'modelId', modelId)
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            assertParamExists('patchAssociationsV1ModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp)
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch: async (teamId: string, modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'modelId', modelId)
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost: async (associationId: string, modelId: string, directionIn: DirectionIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost', 'associationId', associationId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost', 'modelId', modelId)
            // verify required parameter 'directionIn' is not null or undefined
            assertParamExists('postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost', 'directionIn', directionIn)
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}/directed_at`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(directionIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost: async (teamId: string, associationId: string, modelId: string, directionIn: DirectionIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'associationId', associationId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'modelId', modelId)
            // verify required parameter 'directionIn' is not null or undefined
            assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'directionIn', directionIn)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}/directed_at`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(directionIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssociationsApi - functional programming interface
 * @export
 */
export const AssociationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssociationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1ModelsModelIdAssociationsPost(modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId: string, datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId: string, modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId: string, associationId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId: string, modelId: string, associationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId: string, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId: string, modelId: string, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId: string, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId: string, datasetId: string, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flagAssociationV1AssociationsAssociationIdFlagsPost(associationId: string, resourceFlagIn: ResourceFlagIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flagAssociationV1AssociationsAssociationIdFlagsPost(associationId, resourceFlagIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId: string, resourceFlagIn: ResourceFlagIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId, resourceFlagIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId: string, associationId: string, resourceFlagIn: ResourceFlagIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId, associationId, resourceFlagIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2(teamId: string, associationId: string, resourceFlagIn: ResourceFlagIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2(teamId, associationId, resourceFlagIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId: string, modelId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId: string, associationId: string, modelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipDirection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId: string, associationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipDirection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipReproducibility>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId: string, associationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipReproducibility>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipStrength>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId: string, associationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipStrength>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1AssociationsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1ModelsModelIdAssociationsGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1StudiesStudyIdAssociationsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdAssociationsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1VariablesVariableIdAssociationsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssociationsV1ModelsModelIdAssociationsPatch(modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId: string, modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId: string, modelId: string, directionIn: DirectionIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId, modelId, directionIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId: string, associationId: string, modelId: string, directionIn: DirectionIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssociationsApi - factory interface
 * @export
 */
export const AssociationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssociationsApiFp(configuration)
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, teamId?: string, options?: any): AxiosPromise<Array<AssociationOut>> {
            return localVarFp.createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, teamId?: string, options?: any): AxiosPromise<Array<AssociationOut>> {
            return localVarFp.createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId: string, datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options?: any): AxiosPromise<Array<AssociationOut>> {
            return localVarFp.createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId: string, modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options?: any): AxiosPromise<Array<AssociationOut>> {
            return localVarFp.createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId: string, associationId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId: string, modelId: string, associationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId: string, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId: string, modelId: string, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId: string, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId: string, datasetId: string, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options?: any): AxiosPromise<void> {
            return localVarFp.deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost(associationId: string, resourceFlagIn: ResourceFlagIn, teamId?: string, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.flagAssociationV1AssociationsAssociationIdFlagsPost(associationId, resourceFlagIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId: string, resourceFlagIn: ResourceFlagIn, teamId?: string, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId, resourceFlagIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId: string, associationId: string, resourceFlagIn: ResourceFlagIn, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId, associationId, resourceFlagIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2(teamId: string, associationId: string, resourceFlagIn: ResourceFlagIn, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2(teamId, associationId, resourceFlagIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId: string, modelId: string, teamId?: string, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId: string, associationId: string, modelId: string, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId: string, teamId?: string, options?: any): AxiosPromise<RelationshipDirection> {
            return localVarFp.getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId: string, associationId: string, options?: any): AxiosPromise<RelationshipDirection> {
            return localVarFp.getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId: string, teamId?: string, options?: any): AxiosPromise<RelationshipReproducibility> {
            return localVarFp.getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId: string, associationId: string, options?: any): AxiosPromise<RelationshipReproducibility> {
            return localVarFp.getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId: string, teamId?: string, options?: any): AxiosPromise<RelationshipStrength> {
            return localVarFp.getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId: string, associationId: string, options?: any): AxiosPromise<RelationshipStrength> {
            return localVarFp.getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, teamId?: string, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, teamId?: string, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId: string, modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId: string, modelId: string, directionIn: DirectionIn, teamId?: string, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId, modelId, directionIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId: string, associationId: string, modelId: string, directionIn: DirectionIn, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAssociationsV1DatasetsDatasetIdAssociationsPost operation in AssociationsApi.
 * @export
 * @interface AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest
 */
export interface AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createAssociationsV1ModelsModelIdAssociationsPost operation in AssociationsApi.
 * @export
 * @interface AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest
 */
export interface AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly modelId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>

    /**
     * 
     * @type {boolean}
     * @memberof AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly mergeFeatures?: boolean

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost operation in AssociationsApi.
 * @export
 * @interface AssociationsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest
 */
export interface AssociationsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof AssociationsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>
}

/**
 * Request parameters for createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost operation in AssociationsApi.
 * @export
 * @interface AssociationsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest
 */
export interface AssociationsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost
     */
    readonly modelId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof AssociationsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>

    /**
     * 
     * @type {boolean}
     * @memberof AssociationsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost
     */
    readonly mergeFeatures?: boolean
}

/**
 * Request parameters for deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete operation in AssociationsApi.
 * @export
 * @interface AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest
 */
export interface AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete operation in AssociationsApi.
 * @export
 * @interface AssociationsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest
 */
export interface AssociationsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete
     */
    readonly associationId: string
}

/**
 * Request parameters for deleteAssociationsV1ModelsModelIdAssociationsDelete operation in AssociationsApi.
 * @export
 * @interface AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest
 */
export interface AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete}
     * @memberof AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDelete
     */
    readonly bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete operation in AssociationsApi.
 * @export
 * @interface AssociationsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest
 */
export interface AssociationsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete}
     * @memberof AssociationsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
     */
    readonly bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
}

/**
 * Request parameters for deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete operation in AssociationsApi.
 * @export
 * @interface AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest
 */
export interface AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete}
     * @memberof AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
     */
    readonly bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete operation in AssociationsApi.
 * @export
 * @interface AssociationsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest
 */
export interface AssociationsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete}
     * @memberof AssociationsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
     */
    readonly bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
}

/**
 * Request parameters for flagAssociationV1AssociationsAssociationIdFlagsPost operation in AssociationsApi.
 * @export
 * @interface AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPostRequest
 */
export interface AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost
     */
    readonly associationId: string

    /**
     * 
     * @type {ResourceFlagIn}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost
     */
    readonly resourceFlagIn: ResourceFlagIn

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for flagAssociationV1AssociationsAssociationIdFlagsPost_1 operation in AssociationsApi.
 * @export
 * @interface AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0Request
 */
export interface AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0Request {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0
     */
    readonly associationId: string

    /**
     * 
     * @type {ResourceFlagIn}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0
     */
    readonly resourceFlagIn: ResourceFlagIn

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0
     */
    readonly teamId?: string
}

/**
 * Request parameters for flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost operation in AssociationsApi.
 * @export
 * @interface AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPostRequest
 */
export interface AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost
     */
    readonly associationId: string

    /**
     * 
     * @type {ResourceFlagIn}
     * @memberof AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost
     */
    readonly resourceFlagIn: ResourceFlagIn
}

/**
 * Request parameters for flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2 operation in AssociationsApi.
 * @export
 * @interface AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost0Request
 */
export interface AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost0Request {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost0
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost0
     */
    readonly associationId: string

    /**
     * 
     * @type {ResourceFlagIn}
     * @memberof AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost0
     */
    readonly resourceFlagIn: ResourceFlagIn
}

/**
 * Request parameters for getAssociationV1ModelsModelIdAssociationsAssociationIdGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest
 */
export interface AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest
 */
export interface AssociationsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet
     */
    readonly modelId: string
}

/**
 * Request parameters for getRelationshipDirectionV1AssociationsAssociationIdDirectionGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest
 */
export interface AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGetRequest
 */
export interface AssociationsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet
     */
    readonly associationId: string
}

/**
 * Request parameters for getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest
 */
export interface AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGetRequest
 */
export interface AssociationsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet
     */
    readonly associationId: string
}

/**
 * Request parameters for getRelationshipStrengthV1AssociationsAssociationIdStrengthGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGetRequest
 */
export interface AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGetRequest
 */
export interface AssociationsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet
     */
    readonly associationId: string
}

/**
 * Request parameters for listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAssociationsV1AssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1AssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1AssociationsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly isVariableAssociation?: boolean

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly featureRelationship?: string

    /**
     * Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly conceptRelationship?: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAssociationsV1DatasetsDatasetIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1ModelsModelIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1StudiesStudyIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly featureRelationship?: string

    /**
     * Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly conceptRelationship?: string
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly modelId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly variableId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1VariablesVariableIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly variableId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for patchAssociationsV1ModelsModelIdAssociationsPatch operation in AssociationsApi.
 * @export
 * @interface AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest
 */
export interface AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatch
     */
    readonly modelId: string

    /**
     * 
     * @type {Array<BulkPatchAssociationOp>}
     * @memberof AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatch
     */
    readonly bulkPatchAssociationOp: Array<BulkPatchAssociationOp>

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatch
     */
    readonly teamId?: string
}

/**
 * Request parameters for patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch operation in AssociationsApi.
 * @export
 * @interface AssociationsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest
 */
export interface AssociationsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch
     */
    readonly modelId: string

    /**
     * 
     * @type {Array<BulkPatchAssociationOp>}
     * @memberof AssociationsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch
     */
    readonly bulkPatchAssociationOp: Array<BulkPatchAssociationOp>
}

/**
 * Request parameters for postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost operation in AssociationsApi.
 * @export
 * @interface AssociationsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPostRequest
 */
export interface AssociationsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly modelId: string

    /**
     * 
     * @type {DirectionIn}
     * @memberof AssociationsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly directionIn: DirectionIn

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost operation in AssociationsApi.
 * @export
 * @interface AssociationsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest
 */
export interface AssociationsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly modelId: string

    /**
     * 
     * @type {DirectionIn}
     * @memberof AssociationsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly directionIn: DirectionIn
}

/**
 * AssociationsApi - object-oriented interface
 * @export
 * @class AssociationsApi
 * @extends {BaseAPI}
 */
export class AssociationsApi extends BaseAPI {
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters: AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public createAssociationsV1ModelsModelIdAssociationsPost(requestParameters: AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).createAssociationsV1ModelsModelIdAssociationsPost(requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters: AssociationsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters: AssociationsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters.teamId, requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters: AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters.modelId, requestParameters.associationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {AssociationsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters: AssociationsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters: AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {AssociationsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters: AssociationsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters: AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {AssociationsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters: AssociationsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public flagAssociationV1AssociationsAssociationIdFlagsPost(requestParameters: AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPostRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).flagAssociationV1AssociationsAssociationIdFlagsPost(requestParameters.associationId, requestParameters.resourceFlagIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public flagAssociationV1AssociationsAssociationIdFlagsPost_1(requestParameters: AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0Request, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).flagAssociationV1AssociationsAssociationIdFlagsPost_1(requestParameters.associationId, requestParameters.resourceFlagIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(requestParameters: AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPostRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(requestParameters.teamId, requestParameters.associationId, requestParameters.resourceFlagIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2(requestParameters: AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost0Request, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2(requestParameters.teamId, requestParameters.associationId, requestParameters.resourceFlagIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Association.
     * @summary Get Association
     * @param {AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters: AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Association.
     * @summary Get Association
     * @param {AssociationsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters: AssociationsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(requestParameters: AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(requestParameters.associationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {AssociationsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(requestParameters: AssociationsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(requestParameters: AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(requestParameters.associationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {AssociationsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(requestParameters: AssociationsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get strength of this association.
     * @summary Get Relationship Strength
     * @param {AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(requestParameters: AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(requestParameters.associationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get strength of this association.
     * @summary Get Relationship Strength
     * @param {AssociationsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(requestParameters: AssociationsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters: AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters: AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Associations.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1AssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1AssociationsGet(requestParameters: AssociationsApiListAssociationsV1AssociationsGetRequest = {}, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1AssociationsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in model.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1ModelsModelIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Associations.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1TeamsTeamIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdAssociationsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in model.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters: AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters.modelId, requestParameters.bulkPatchAssociationOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {AssociationsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters: AssociationsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Association.
     * @summary Post Association Direction
     * @param {AssociationsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters: AssociationsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPostRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters.associationId, requestParameters.modelId, requestParameters.directionIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Association.
     * @summary Post Association Direction
     * @param {AssociationsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters: AssociationsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, requestParameters.directionIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthorsApi - axios parameter creator
 * @export
 */
export const AuthorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut: async (studyId: string, authorId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId)
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut: async (teamId: string, studyId: string, authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost: async (studyId: string, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost', 'studyId', studyId)
            // verify required parameter 'bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost' is not null or undefined
            assertParamExists('bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost', 'bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost', bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost)
            const localVarPath = `/v1/studies/{study_id}/authors/bulk`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: async (teamId: string, studyId: string, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'studyId', studyId)
            // verify required parameter 'bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost' is not null or undefined
            assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1AuthorsPost: async (authorIn: AuthorIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorIn' is not null or undefined
            assertParamExists('createAuthorV1AuthorsPost', 'authorIn', authorIn)
            const localVarPath = `/v1/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId 
         * @param {AuthorIn} authorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost: async (teamId: string, authorIn: AuthorIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAuthorV1TeamsTeamIdAuthorsPost', 'teamId', teamId)
            // verify required parameter 'authorIn' is not null or undefined
            assertParamExists('createAuthorV1TeamsTeamIdAuthorsPost', 'authorIn', authorIn)
            const localVarPath = `/v1/teams/{team_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1AuthorsBulkPost: async (arrayAuthorInAuthorIn: Array<AuthorIn> | AuthorIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arrayAuthorInAuthorIn' is not null or undefined
            assertParamExists('createMultipleAuthorsV1AuthorsBulkPost', 'arrayAuthorInAuthorIn', arrayAuthorInAuthorIn)
            const localVarPath = `/v1/authors/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(arrayAuthorInAuthorIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {string} teamId 
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost: async (teamId: string, arrayAuthorInAuthorIn: Array<AuthorIn> | AuthorIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost', 'teamId', teamId)
            // verify required parameter 'arrayAuthorInAuthorIn' is not null or undefined
            assertParamExists('createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost', 'arrayAuthorInAuthorIn', arrayAuthorInAuthorIn)
            const localVarPath = `/v1/teams/{team_id}/authors/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(arrayAuthorInAuthorIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1AuthorsAuthorIdDelete: async (authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('deleteAuthorV1AuthorsAuthorIdDelete', 'authorId', authorId)
            const localVarPath = `/v1/authors/{author_id}`
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete: async (teamId: string, authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete', 'teamId', teamId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete', 'authorId', authorId)
            const localVarPath = `/v1/teams/{team_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet: async (authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('getAuthorV1AuthorsAuthorIdGet', 'authorId', authorId)
            const localVarPath = `/v1/authors/{author_id}`
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet: async (teamId: string, authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getAuthorV1TeamsTeamIdAuthorsAuthorIdGet', 'teamId', teamId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('getAuthorV1TeamsTeamIdAuthorsAuthorIdGet', 'authorId', authorId)
            const localVarPath = `/v1/teams/{team_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet: async (teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthorsV1TeamsTeamIdAuthorsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete: async (studyId: string, authorId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId)
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete: async (teamId: string, studyId: string, authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorsApi - functional programming interface
 * @export
 */
export const AuthorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId: string, authorId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId: string, studyId: string, authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId: string, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId: string, studyId: string, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthorV1AuthorsPost(authorIn: AuthorIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthorV1AuthorsPost(authorIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId 
         * @param {AuthorIn} authorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthorV1TeamsTeamIdAuthorsPost(teamId: string, authorIn: AuthorIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMultipleAuthorsV1AuthorsBulkPost(arrayAuthorInAuthorIn: Array<AuthorIn> | AuthorIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthorOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMultipleAuthorsV1AuthorsBulkPost(arrayAuthorInAuthorIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {string} teamId 
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId: string, arrayAuthorInAuthorIn: Array<AuthorIn> | AuthorIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthorOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId, arrayAuthorInAuthorIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthorV1AuthorsAuthorIdDelete(authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAuthorV1AuthorsAuthorIdDelete(authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId: string, authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorV1AuthorsAuthorIdGet(authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorV1AuthorsAuthorIdGet(authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId: string, authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthorsV1AuthorsGet(teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthorsV1AuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthorsV1TeamsTeamIdAuthorsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId: string, authorId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId: string, studyId: string, authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorsApi - factory interface
 * @export
 */
export const AuthorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorsApiFp(configuration)
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId: string, authorId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId: string, studyId: string, authorId: string, options?: any): AxiosPromise<void> {
            return localVarFp.addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId: string, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId: string, studyId: string, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options?: any): AxiosPromise<void> {
            return localVarFp.bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1AuthorsPost(authorIn: AuthorIn, teamId?: string, options?: any): AxiosPromise<AuthorOut> {
            return localVarFp.createAuthorV1AuthorsPost(authorIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId 
         * @param {AuthorIn} authorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost(teamId: string, authorIn: AuthorIn, options?: any): AxiosPromise<AuthorOut> {
            return localVarFp.createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1AuthorsBulkPost(arrayAuthorInAuthorIn: Array<AuthorIn> | AuthorIn, teamId?: string, options?: any): AxiosPromise<Array<AuthorOut>> {
            return localVarFp.createMultipleAuthorsV1AuthorsBulkPost(arrayAuthorInAuthorIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {string} teamId 
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId: string, arrayAuthorInAuthorIn: Array<AuthorIn> | AuthorIn, options?: any): AxiosPromise<Array<AuthorOut>> {
            return localVarFp.createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId, arrayAuthorInAuthorIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1AuthorsAuthorIdDelete(authorId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAuthorV1AuthorsAuthorIdDelete(authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId: string, authorId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet(authorId: string, options?: any): AxiosPromise<AuthorOut> {
            return localVarFp.getAuthorV1AuthorsAuthorIdGet(authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId: string, authorId: string, options?: any): AxiosPromise<AuthorOut> {
            return localVarFp.getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet(teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<AuthorPaginationOut> {
            return localVarFp.listAuthorsV1AuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<AuthorPaginationOut> {
            return localVarFp.listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId: string, authorId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId: string, studyId: string, authorId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut operation in AuthorsApi.
 * @export
 * @interface AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest
 */
export interface AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut
     */
    readonly authorId: string

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut operation in AuthorsApi.
 * @export
 * @interface AuthorsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest
 */
export interface AuthorsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut
     */
    readonly authorId: string
}

/**
 * Request parameters for bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost operation in AuthorsApi.
 * @export
 * @interface AuthorsApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPostRequest
 */
export interface AuthorsApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
     */
    readonly studyId: string

    /**
     * 
     * @type {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost}
     * @memberof AuthorsApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
     */
    readonly bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost operation in AuthorsApi.
 * @export
 * @interface AuthorsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest
 */
export interface AuthorsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
     */
    readonly studyId: string

    /**
     * 
     * @type {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost}
     * @memberof AuthorsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
     */
    readonly bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
}

/**
 * Request parameters for createAuthorV1AuthorsPost operation in AuthorsApi.
 * @export
 * @interface AuthorsApiCreateAuthorV1AuthorsPostRequest
 */
export interface AuthorsApiCreateAuthorV1AuthorsPostRequest {
    /**
     * 
     * @type {AuthorIn}
     * @memberof AuthorsApiCreateAuthorV1AuthorsPost
     */
    readonly authorIn: AuthorIn

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiCreateAuthorV1AuthorsPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createAuthorV1TeamsTeamIdAuthorsPost operation in AuthorsApi.
 * @export
 * @interface AuthorsApiCreateAuthorV1TeamsTeamIdAuthorsPostRequest
 */
export interface AuthorsApiCreateAuthorV1TeamsTeamIdAuthorsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiCreateAuthorV1TeamsTeamIdAuthorsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {AuthorIn}
     * @memberof AuthorsApiCreateAuthorV1TeamsTeamIdAuthorsPost
     */
    readonly authorIn: AuthorIn
}

/**
 * Request parameters for createMultipleAuthorsV1AuthorsBulkPost operation in AuthorsApi.
 * @export
 * @interface AuthorsApiCreateMultipleAuthorsV1AuthorsBulkPostRequest
 */
export interface AuthorsApiCreateMultipleAuthorsV1AuthorsBulkPostRequest {
    /**
     * 
     * @type {Array<AuthorIn> | AuthorIn}
     * @memberof AuthorsApiCreateMultipleAuthorsV1AuthorsBulkPost
     */
    readonly arrayAuthorInAuthorIn: Array<AuthorIn> | AuthorIn

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiCreateMultipleAuthorsV1AuthorsBulkPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost operation in AuthorsApi.
 * @export
 * @interface AuthorsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPostRequest
 */
export interface AuthorsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost
     */
    readonly teamId: string

    /**
     * 
     * @type {Array<AuthorIn> | AuthorIn}
     * @memberof AuthorsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost
     */
    readonly arrayAuthorInAuthorIn: Array<AuthorIn> | AuthorIn
}

/**
 * Request parameters for deleteAuthorV1AuthorsAuthorIdDelete operation in AuthorsApi.
 * @export
 * @interface AuthorsApiDeleteAuthorV1AuthorsAuthorIdDeleteRequest
 */
export interface AuthorsApiDeleteAuthorV1AuthorsAuthorIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiDeleteAuthorV1AuthorsAuthorIdDelete
     */
    readonly authorId: string
}

/**
 * Request parameters for deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete operation in AuthorsApi.
 * @export
 * @interface AuthorsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDeleteRequest
 */
export interface AuthorsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete
     */
    readonly authorId: string
}

/**
 * Request parameters for getAuthorV1AuthorsAuthorIdGet operation in AuthorsApi.
 * @export
 * @interface AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest
 */
export interface AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiGetAuthorV1AuthorsAuthorIdGet
     */
    readonly authorId: string
}

/**
 * Request parameters for getAuthorV1TeamsTeamIdAuthorsAuthorIdGet operation in AuthorsApi.
 * @export
 * @interface AuthorsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGetRequest
 */
export interface AuthorsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGet
     */
    readonly authorId: string
}

/**
 * Request parameters for listAuthorsV1AuthorsGet operation in AuthorsApi.
 * @export
 * @interface AuthorsApiListAuthorsV1AuthorsGetRequest
 */
export interface AuthorsApiListAuthorsV1AuthorsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AuthorSortEnum}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly orderBy?: AuthorSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listAuthorsV1TeamsTeamIdAuthorsGet operation in AuthorsApi.
 * @export
 * @interface AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGetRequest
 */
export interface AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AuthorSortEnum}
     * @memberof AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly orderBy?: AuthorSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete operation in AuthorsApi.
 * @export
 * @interface AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest
 */
export interface AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly authorId: string

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete operation in AuthorsApi.
 * @export
 * @interface AuthorsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest
 */
export interface AuthorsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly authorId: string
}

/**
 * AuthorsApi - object-oriented interface
 * @export
 * @class AuthorsApi
 * @extends {BaseAPI}
 */
export class AuthorsApi extends BaseAPI {
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters: AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters.studyId, requestParameters.authorId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {AuthorsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters: AuthorsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an author to a study.
     * @summary Bulk Add Authors To Study
     * @param {AuthorsApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(requestParameters: AuthorsApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPostRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(requestParameters.studyId, requestParameters.bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an author to a study.
     * @summary Bulk Add Authors To Study
     * @param {AuthorsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(requestParameters: AuthorsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(requestParameters.teamId, requestParameters.studyId, requestParameters.bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Author.
     * @summary Create Author
     * @param {AuthorsApiCreateAuthorV1AuthorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public createAuthorV1AuthorsPost(requestParameters: AuthorsApiCreateAuthorV1AuthorsPostRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).createAuthorV1AuthorsPost(requestParameters.authorIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Author.
     * @summary Create Author
     * @param {AuthorsApiCreateAuthorV1TeamsTeamIdAuthorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public createAuthorV1TeamsTeamIdAuthorsPost(requestParameters: AuthorsApiCreateAuthorV1TeamsTeamIdAuthorsPostRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).createAuthorV1TeamsTeamIdAuthorsPost(requestParameters.teamId, requestParameters.authorIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create mulitple Authors.
     * @summary Create Multiple Authors.
     * @param {AuthorsApiCreateMultipleAuthorsV1AuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public createMultipleAuthorsV1AuthorsBulkPost(requestParameters: AuthorsApiCreateMultipleAuthorsV1AuthorsBulkPostRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).createMultipleAuthorsV1AuthorsBulkPost(requestParameters.arrayAuthorInAuthorIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create mulitple Authors.
     * @summary Create Multiple Authors.
     * @param {AuthorsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(requestParameters: AuthorsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPostRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(requestParameters.teamId, requestParameters.arrayAuthorInAuthorIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Author.
     * @summary Delete Author
     * @param {AuthorsApiDeleteAuthorV1AuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public deleteAuthorV1AuthorsAuthorIdDelete(requestParameters: AuthorsApiDeleteAuthorV1AuthorsAuthorIdDeleteRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).deleteAuthorV1AuthorsAuthorIdDelete(requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Author.
     * @summary Delete Author
     * @param {AuthorsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(requestParameters: AuthorsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDeleteRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Author.
     * @summary Get Author
     * @param {AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public getAuthorV1AuthorsAuthorIdGet(requestParameters: AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).getAuthorV1AuthorsAuthorIdGet(requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Author.
     * @summary Get Author
     * @param {AuthorsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(requestParameters: AuthorsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGetRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(requestParameters.teamId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {AuthorsApiListAuthorsV1AuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public listAuthorsV1AuthorsGet(requestParameters: AuthorsApiListAuthorsV1AuthorsGetRequest = {}, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).listAuthorsV1AuthorsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public listAuthorsV1TeamsTeamIdAuthorsGet(requestParameters: AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGetRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).listAuthorsV1TeamsTeamIdAuthorsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters: AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters.studyId, requestParameters.authorId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {AuthorsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters: AuthorsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConceptsApi - axios parameter creator
 * @export
 */
export const ConceptsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn 
         * @param {boolean} [overwriteExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost: async (conceptIn: ConceptIn, overwriteExisting?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptIn' is not null or undefined
            assertParamExists('createConceptV1ConceptsPost', 'conceptIn', conceptIn)
            const localVarPath = `/v1/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (overwriteExisting !== undefined) {
                localVarQueryParameter['overwrite_existing'] = overwriteExisting;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(conceptIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId 
         * @param {ConceptIn} conceptIn 
         * @param {boolean} [overwriteExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost: async (teamId: string, conceptIn: ConceptIn, overwriteExisting?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createConceptV1TeamsTeamIdConceptsPost', 'teamId', teamId)
            // verify required parameter 'conceptIn' is not null or undefined
            assertParamExists('createConceptV1TeamsTeamIdConceptsPost', 'conceptIn', conceptIn)
            const localVarPath = `/v1/teams/{team_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (overwriteExisting !== undefined) {
                localVarQueryParameter['overwrite_existing'] = overwriteExisting;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(conceptIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete: async (conceptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('deleteConceptV1ConceptsConceptIdDelete', 'conceptId', conceptId)
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete: async (teamId: string, conceptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteConceptV1TeamsTeamIdConceptsConceptIdDelete', 'teamId', teamId)
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('deleteConceptV1TeamsTeamIdConceptsConceptIdDelete', 'conceptId', conceptId)
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet: async (conceptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('getConceptV1ConceptsConceptIdGet', 'conceptId', conceptId)
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet: async (teamId: string, conceptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getConceptV1TeamsTeamIdConceptsConceptIdGet', 'teamId', teamId)
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('getConceptV1TeamsTeamIdConceptsConceptIdGet', 'conceptId', conceptId)
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [teamId] 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet: async (teamId?: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet: async (teamId: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listConceptsV1TeamsTeamIdConceptsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserConceptsV1UsersUserIdConceptsGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} conceptId 
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1ConceptsConceptIdPatch: async (conceptId: string, patchConceptOpArrayPatchConceptOp: PatchConceptOp | Array<PatchConceptOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('patchConceptV1ConceptsConceptIdPatch', 'conceptId', conceptId)
            // verify required parameter 'patchConceptOpArrayPatchConceptOp' is not null or undefined
            assertParamExists('patchConceptV1ConceptsConceptIdPatch', 'patchConceptOpArrayPatchConceptOp', patchConceptOpArrayPatchConceptOp)
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchConceptOpArrayPatchConceptOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1TeamsTeamIdConceptsConceptIdPatch: async (teamId: string, conceptId: string, patchConceptOpArrayPatchConceptOp: PatchConceptOp | Array<PatchConceptOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchConceptV1TeamsTeamIdConceptsConceptIdPatch', 'teamId', teamId)
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('patchConceptV1TeamsTeamIdConceptsConceptIdPatch', 'conceptId', conceptId)
            // verify required parameter 'patchConceptOpArrayPatchConceptOp' is not null or undefined
            assertParamExists('patchConceptV1TeamsTeamIdConceptsConceptIdPatch', 'patchConceptOpArrayPatchConceptOp', patchConceptOpArrayPatchConceptOp)
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchConceptOpArrayPatchConceptOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConceptsApi - functional programming interface
 * @export
 */
export const ConceptsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConceptsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn 
         * @param {boolean} [overwriteExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConceptV1ConceptsPost(conceptIn: ConceptIn, overwriteExisting?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConceptV1ConceptsPost(conceptIn, overwriteExisting, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId 
         * @param {ConceptIn} conceptIn 
         * @param {boolean} [overwriteExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConceptV1TeamsTeamIdConceptsPost(teamId: string, conceptIn: ConceptIn, overwriteExisting?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, overwriteExisting, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConceptV1ConceptsConceptIdDelete(conceptId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConceptV1ConceptsConceptIdDelete(conceptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId: string, conceptId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConceptV1ConceptsConceptIdGet(conceptId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConceptV1ConceptsConceptIdGet(conceptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId: string, conceptId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserConceptsV1UserConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [teamId] 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConceptsV1ConceptsGet(teamId?: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConceptsV1ConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConceptsV1TeamsTeamIdConceptsGet(teamId: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConceptsV1TeamsTeamIdConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserConceptsV1UsersUserIdConceptsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} conceptId 
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchConceptV1ConceptsConceptIdPatch(conceptId: string, patchConceptOpArrayPatchConceptOp: PatchConceptOp | Array<PatchConceptOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchConceptV1ConceptsConceptIdPatch(conceptId, patchConceptOpArrayPatchConceptOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId: string, conceptId: string, patchConceptOpArrayPatchConceptOp: PatchConceptOp | Array<PatchConceptOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId, conceptId, patchConceptOpArrayPatchConceptOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConceptsApi - factory interface
 * @export
 */
export const ConceptsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConceptsApiFp(configuration)
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn 
         * @param {boolean} [overwriteExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost(conceptIn: ConceptIn, overwriteExisting?: boolean, options?: any): AxiosPromise<ConceptOut> {
            return localVarFp.createConceptV1ConceptsPost(conceptIn, overwriteExisting, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId 
         * @param {ConceptIn} conceptIn 
         * @param {boolean} [overwriteExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost(teamId: string, conceptIn: ConceptIn, overwriteExisting?: boolean, options?: any): AxiosPromise<ConceptOut> {
            return localVarFp.createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, overwriteExisting, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete(conceptId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteConceptV1ConceptsConceptIdDelete(conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId: string, conceptId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet(conceptId: string, options?: any): AxiosPromise<ConceptOut> {
            return localVarFp.getConceptV1ConceptsConceptIdGet(conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId: string, conceptId: string, options?: any): AxiosPromise<ConceptOut> {
            return localVarFp.getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [teamId] 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet(teamId?: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listConceptsV1ConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet(teamId: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listConceptsV1TeamsTeamIdConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} conceptId 
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1ConceptsConceptIdPatch(conceptId: string, patchConceptOpArrayPatchConceptOp: PatchConceptOp | Array<PatchConceptOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchConceptV1ConceptsConceptIdPatch(conceptId, patchConceptOpArrayPatchConceptOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId: string, conceptId: string, patchConceptOpArrayPatchConceptOp: PatchConceptOp | Array<PatchConceptOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId, conceptId, patchConceptOpArrayPatchConceptOp, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createConceptV1ConceptsPost operation in ConceptsApi.
 * @export
 * @interface ConceptsApiCreateConceptV1ConceptsPostRequest
 */
export interface ConceptsApiCreateConceptV1ConceptsPostRequest {
    /**
     * 
     * @type {ConceptIn}
     * @memberof ConceptsApiCreateConceptV1ConceptsPost
     */
    readonly conceptIn: ConceptIn

    /**
     * 
     * @type {boolean}
     * @memberof ConceptsApiCreateConceptV1ConceptsPost
     */
    readonly overwriteExisting?: boolean
}

/**
 * Request parameters for createConceptV1TeamsTeamIdConceptsPost operation in ConceptsApi.
 * @export
 * @interface ConceptsApiCreateConceptV1TeamsTeamIdConceptsPostRequest
 */
export interface ConceptsApiCreateConceptV1TeamsTeamIdConceptsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiCreateConceptV1TeamsTeamIdConceptsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {ConceptIn}
     * @memberof ConceptsApiCreateConceptV1TeamsTeamIdConceptsPost
     */
    readonly conceptIn: ConceptIn

    /**
     * 
     * @type {boolean}
     * @memberof ConceptsApiCreateConceptV1TeamsTeamIdConceptsPost
     */
    readonly overwriteExisting?: boolean
}

/**
 * Request parameters for deleteConceptV1ConceptsConceptIdDelete operation in ConceptsApi.
 * @export
 * @interface ConceptsApiDeleteConceptV1ConceptsConceptIdDeleteRequest
 */
export interface ConceptsApiDeleteConceptV1ConceptsConceptIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiDeleteConceptV1ConceptsConceptIdDelete
     */
    readonly conceptId: string
}

/**
 * Request parameters for deleteConceptV1TeamsTeamIdConceptsConceptIdDelete operation in ConceptsApi.
 * @export
 * @interface ConceptsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDeleteRequest
 */
export interface ConceptsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ConceptsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDelete
     */
    readonly conceptId: string
}

/**
 * Request parameters for getConceptV1ConceptsConceptIdGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiGetConceptV1ConceptsConceptIdGetRequest
 */
export interface ConceptsApiGetConceptV1ConceptsConceptIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiGetConceptV1ConceptsConceptIdGet
     */
    readonly conceptId: string
}

/**
 * Request parameters for getConceptV1TeamsTeamIdConceptsConceptIdGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiGetConceptV1TeamsTeamIdConceptsConceptIdGetRequest
 */
export interface ConceptsApiGetConceptV1TeamsTeamIdConceptsConceptIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiGetConceptV1TeamsTeamIdConceptsConceptIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ConceptsApiGetConceptV1TeamsTeamIdConceptsConceptIdGet
     */
    readonly conceptId: string
}

/**
 * Request parameters for listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest
 */
export interface ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listAuthenticatedUserConceptsV1UserConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest
 */
export interface ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly inConceptGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listConceptsV1ConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListConceptsV1ConceptsGetRequest
 */
export interface ConceptsApiListConceptsV1ConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly teamId?: string

    /**
     * Min strength
     * @type {number}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly minRelationshipStrength?: number

    /**
     * Search query.
     * @type {string}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listConceptsV1TeamsTeamIdConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListConceptsV1TeamsTeamIdConceptsGetRequest
 */
export interface ConceptsApiListConceptsV1TeamsTeamIdConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly teamId: string

    /**
     * Min strength
     * @type {number}
     * @memberof ConceptsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly minRelationshipStrength?: number

    /**
     * Search query.
     * @type {string}
     * @memberof ConceptsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ConceptsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof ConceptsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ConceptsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ConceptsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest
 */
export interface ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listUserConceptsV1UsersUserIdConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest
 */
export interface ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly inConceptGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for patchConceptV1ConceptsConceptIdPatch operation in ConceptsApi.
 * @export
 * @interface ConceptsApiPatchConceptV1ConceptsConceptIdPatchRequest
 */
export interface ConceptsApiPatchConceptV1ConceptsConceptIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiPatchConceptV1ConceptsConceptIdPatch
     */
    readonly conceptId: string

    /**
     * 
     * @type {PatchConceptOp | Array<PatchConceptOp>}
     * @memberof ConceptsApiPatchConceptV1ConceptsConceptIdPatch
     */
    readonly patchConceptOpArrayPatchConceptOp: PatchConceptOp | Array<PatchConceptOp>
}

/**
 * Request parameters for patchConceptV1TeamsTeamIdConceptsConceptIdPatch operation in ConceptsApi.
 * @export
 * @interface ConceptsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatchRequest
 */
export interface ConceptsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ConceptsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatch
     */
    readonly conceptId: string

    /**
     * 
     * @type {PatchConceptOp | Array<PatchConceptOp>}
     * @memberof ConceptsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatch
     */
    readonly patchConceptOpArrayPatchConceptOp: PatchConceptOp | Array<PatchConceptOp>
}

/**
 * ConceptsApi - object-oriented interface
 * @export
 * @class ConceptsApi
 * @extends {BaseAPI}
 */
export class ConceptsApi extends BaseAPI {
    /**
     * Create a Concept.
     * @summary Create Concept
     * @param {ConceptsApiCreateConceptV1ConceptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public createConceptV1ConceptsPost(requestParameters: ConceptsApiCreateConceptV1ConceptsPostRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).createConceptV1ConceptsPost(requestParameters.conceptIn, requestParameters.overwriteExisting, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Concept.
     * @summary Create Concept
     * @param {ConceptsApiCreateConceptV1TeamsTeamIdConceptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public createConceptV1TeamsTeamIdConceptsPost(requestParameters: ConceptsApiCreateConceptV1TeamsTeamIdConceptsPostRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).createConceptV1TeamsTeamIdConceptsPost(requestParameters.teamId, requestParameters.conceptIn, requestParameters.overwriteExisting, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
     * @summary Delete Concept
     * @param {ConceptsApiDeleteConceptV1ConceptsConceptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public deleteConceptV1ConceptsConceptIdDelete(requestParameters: ConceptsApiDeleteConceptV1ConceptsConceptIdDeleteRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).deleteConceptV1ConceptsConceptIdDelete(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
     * @summary Delete Concept
     * @param {ConceptsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(requestParameters: ConceptsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDeleteRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(requestParameters.teamId, requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Concept.
     * @summary Get Concept
     * @param {ConceptsApiGetConceptV1ConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public getConceptV1ConceptsConceptIdGet(requestParameters: ConceptsApiGetConceptV1ConceptsConceptIdGetRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).getConceptV1ConceptsConceptIdGet(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Concept.
     * @summary Get Concept
     * @param {ConceptsApiGetConceptV1TeamsTeamIdConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public getConceptV1TeamsTeamIdConceptsConceptIdGet(requestParameters: ConceptsApiGetConceptV1TeamsTeamIdConceptsConceptIdGetRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).getConceptV1TeamsTeamIdConceptsConceptIdGet(requestParameters.teamId, requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters: ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters: ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest = {}, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Concepts.
     * @summary List Concepts
     * @param {ConceptsApiListConceptsV1ConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public listConceptsV1ConceptsGet(requestParameters: ConceptsApiListConceptsV1ConceptsGetRequest = {}, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).listConceptsV1ConceptsGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Concepts.
     * @summary List Concepts
     * @param {ConceptsApiListConceptsV1TeamsTeamIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public listConceptsV1TeamsTeamIdConceptsGet(requestParameters: ConceptsApiListConceptsV1TeamsTeamIdConceptsGetRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).listConceptsV1TeamsTeamIdConceptsGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters: ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public listUserConceptsV1UsersUserIdConceptsGet(requestParameters: ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Variable resource with partial update.
     * @summary Patch Concept
     * @param {ConceptsApiPatchConceptV1ConceptsConceptIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public patchConceptV1ConceptsConceptIdPatch(requestParameters: ConceptsApiPatchConceptV1ConceptsConceptIdPatchRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).patchConceptV1ConceptsConceptIdPatch(requestParameters.conceptId, requestParameters.patchConceptOpArrayPatchConceptOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Variable resource with partial update.
     * @summary Patch Concept
     * @param {ConceptsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public patchConceptV1TeamsTeamIdConceptsConceptIdPatch(requestParameters: ConceptsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatchRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).patchConceptV1TeamsTeamIdConceptsConceptIdPatch(requestParameters.teamId, requestParameters.conceptId, requestParameters.patchConceptOpArrayPatchConceptOp, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DashboardsApi - axios parameter creator
 * @export
 */
export const DashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut: async (dashboardId: string, featureId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut', 'dashboardId', dashboardId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut', 'featureId', featureId)
            const localVarPath = `/v1/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut: async (teamId: string, dashboardId: string, featureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'teamId', teamId)
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'dashboardId', dashboardId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'featureId', featureId)
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {DashboardIn} dashboardIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1DashboardsPost: async (dashboardIn: DashboardIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardIn' is not null or undefined
            assertParamExists('createDashboardPostV1DashboardsPost', 'dashboardIn', dashboardIn)
            const localVarPath = `/v1/dashboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dashboardIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId 
         * @param {DashboardIn} dashboardIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost: async (teamId: string, dashboardIn: DashboardIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createDashboardPostV1TeamsTeamIdDashboardsPost', 'teamId', teamId)
            // verify required parameter 'dashboardIn' is not null or undefined
            assertParamExists('createDashboardPostV1TeamsTeamIdDashboardsPost', 'dashboardIn', dashboardIn)
            const localVarPath = `/v1/teams/{team_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dashboardIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1DashboardsDashboardIdDelete: async (dashboardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('deleteDashboardV1DashboardsDashboardIdDelete', 'dashboardId', dashboardId)
            const localVarPath = `/v1/dashboards/{dashboard_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete: async (teamId: string, dashboardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete', 'teamId', teamId)
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete', 'dashboardId', dashboardId)
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1DashboardsDashboardIdGet: async (dashboardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('getDashboardV1DashboardsDashboardIdGet', 'dashboardId', dashboardId)
            const localVarPath = `/v1/dashboards/{dashboard_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet: async (teamId: string, dashboardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getDashboardV1TeamsTeamIdDashboardsDashboardIdGet', 'teamId', teamId)
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('getDashboardV1TeamsTeamIdDashboardsDashboardIdGet', 'dashboardId', dashboardId)
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet: async (dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet', 'dashboardId', dashboardId)
            const localVarPath = `/v1/dashboards/{dashboard_id}/features`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet: async (teamId: string, dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet', 'teamId', teamId)
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet', 'dashboardId', dashboardId)
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1DashboardsGet: async (teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/dashboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDashboardsV1TeamsTeamIdDashboardsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet: async (teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet', 'variableId', variableId)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet: async (variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listDashboardsV1VariablesVariableIdDashboardsGet', 'variableId', variableId)
            const localVarPath = `/v1/variables/{variable_id}/dashboards`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardsApi - functional programming interface
 * @export
 */
export const DashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId: string, featureId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId: string, dashboardId: string, featureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {DashboardIn} dashboardIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDashboardPostV1DashboardsPost(dashboardIn: DashboardIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDashboardPostV1DashboardsPost(dashboardIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId 
         * @param {DashboardIn} dashboardIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDashboardPostV1TeamsTeamIdDashboardsPost(teamId: string, dashboardIn: DashboardIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDashboardV1DashboardsDashboardIdDelete(dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDashboardV1DashboardsDashboardIdDelete(dashboardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId: string, dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDashboardV1DashboardsDashboardIdGet(dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDashboardV1DashboardsDashboardIdGet(dashboardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId: string, dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId: string, dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardsV1DashboardsGet(teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardsV1DashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardsV1TeamsTeamIdDashboardsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardsV1VariablesVariableIdDashboardsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DashboardsApi - factory interface
 * @export
 */
export const DashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardsApiFp(configuration)
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId: string, featureId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId: string, dashboardId: string, featureId: string, options?: any): AxiosPromise<void> {
            return localVarFp.addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {DashboardIn} dashboardIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1DashboardsPost(dashboardIn: DashboardIn, teamId?: string, options?: any): AxiosPromise<DashboardOut> {
            return localVarFp.createDashboardPostV1DashboardsPost(dashboardIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId 
         * @param {DashboardIn} dashboardIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost(teamId: string, dashboardIn: DashboardIn, options?: any): AxiosPromise<DashboardOut> {
            return localVarFp.createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1DashboardsDashboardIdDelete(dashboardId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDashboardV1DashboardsDashboardIdDelete(dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId: string, dashboardId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1DashboardsDashboardIdGet(dashboardId: string, options?: any): AxiosPromise<DashboardOut> {
            return localVarFp.getDashboardV1DashboardsDashboardIdGet(dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId: string, dashboardId: string, options?: any): AxiosPromise<DashboardOut> {
            return localVarFp.getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId: string, dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1DashboardsGet(teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<DashboardPaginationOut> {
            return localVarFp.listDashboardsV1DashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<DashboardPaginationOut> {
            return localVarFp.listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<DashboardPaginationOut> {
            return localVarFp.listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<DashboardPaginationOut> {
            return localVarFp.listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut operation in DashboardsApi.
 * @export
 * @interface DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest
 */
export interface DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly dashboardId: string

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut operation in DashboardsApi.
 * @export
 * @interface DashboardsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest
 */
export interface DashboardsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly dashboardId: string

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly featureId: string
}

/**
 * Request parameters for createDashboardPostV1DashboardsPost operation in DashboardsApi.
 * @export
 * @interface DashboardsApiCreateDashboardPostV1DashboardsPostRequest
 */
export interface DashboardsApiCreateDashboardPostV1DashboardsPostRequest {
    /**
     * 
     * @type {DashboardIn}
     * @memberof DashboardsApiCreateDashboardPostV1DashboardsPost
     */
    readonly dashboardIn: DashboardIn

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiCreateDashboardPostV1DashboardsPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createDashboardPostV1TeamsTeamIdDashboardsPost operation in DashboardsApi.
 * @export
 * @interface DashboardsApiCreateDashboardPostV1TeamsTeamIdDashboardsPostRequest
 */
export interface DashboardsApiCreateDashboardPostV1TeamsTeamIdDashboardsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiCreateDashboardPostV1TeamsTeamIdDashboardsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {DashboardIn}
     * @memberof DashboardsApiCreateDashboardPostV1TeamsTeamIdDashboardsPost
     */
    readonly dashboardIn: DashboardIn
}

/**
 * Request parameters for deleteDashboardV1DashboardsDashboardIdDelete operation in DashboardsApi.
 * @export
 * @interface DashboardsApiDeleteDashboardV1DashboardsDashboardIdDeleteRequest
 */
export interface DashboardsApiDeleteDashboardV1DashboardsDashboardIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiDeleteDashboardV1DashboardsDashboardIdDelete
     */
    readonly dashboardId: string
}

/**
 * Request parameters for deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete operation in DashboardsApi.
 * @export
 * @interface DashboardsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDeleteRequest
 */
export interface DashboardsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete
     */
    readonly dashboardId: string
}

/**
 * Request parameters for getDashboardV1DashboardsDashboardIdGet operation in DashboardsApi.
 * @export
 * @interface DashboardsApiGetDashboardV1DashboardsDashboardIdGetRequest
 */
export interface DashboardsApiGetDashboardV1DashboardsDashboardIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiGetDashboardV1DashboardsDashboardIdGet
     */
    readonly dashboardId: string
}

/**
 * Request parameters for getDashboardV1TeamsTeamIdDashboardsDashboardIdGet operation in DashboardsApi.
 * @export
 * @interface DashboardsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGetRequest
 */
export interface DashboardsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGet
     */
    readonly dashboardId: string
}

/**
 * Request parameters for listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet operation in DashboardsApi.
 * @export
 * @interface DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest
 */
export interface DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly dashboardId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet operation in DashboardsApi.
 * @export
 * @interface DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest
 */
export interface DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly dashboardId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listDashboardsV1DashboardsGet operation in DashboardsApi.
 * @export
 * @interface DashboardsApiListDashboardsV1DashboardsGetRequest
 */
export interface DashboardsApiListDashboardsV1DashboardsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DashboardSortEnum}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly orderBy?: DashboardSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listDashboardsV1TeamsTeamIdDashboardsGet operation in DashboardsApi.
 * @export
 * @interface DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGetRequest
 */
export interface DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DashboardSortEnum}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly orderBy?: DashboardSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet operation in DashboardsApi.
 * @export
 * @interface DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest
 */
export interface DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly variableId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DashboardSortEnum}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly orderBy?: DashboardSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listDashboardsV1VariablesVariableIdDashboardsGet operation in DashboardsApi.
 * @export
 * @interface DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGetRequest
 */
export interface DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly variableId: string

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DashboardSortEnum}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly orderBy?: DashboardSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly sortBy?: string
}

/**
 * DashboardsApi - object-oriented interface
 * @export
 * @class DashboardsApi
 * @extends {BaseAPI}
 */
export class DashboardsApi extends BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters: DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.dashboardId, requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {DashboardsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters: DashboardsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.dashboardId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Dashboard.
     * @summary Create Dashboard Post
     * @param {DashboardsApiCreateDashboardPostV1DashboardsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public createDashboardPostV1DashboardsPost(requestParameters: DashboardsApiCreateDashboardPostV1DashboardsPostRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).createDashboardPostV1DashboardsPost(requestParameters.dashboardIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Dashboard.
     * @summary Create Dashboard Post
     * @param {DashboardsApiCreateDashboardPostV1TeamsTeamIdDashboardsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public createDashboardPostV1TeamsTeamIdDashboardsPost(requestParameters: DashboardsApiCreateDashboardPostV1TeamsTeamIdDashboardsPostRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).createDashboardPostV1TeamsTeamIdDashboardsPost(requestParameters.teamId, requestParameters.dashboardIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dashboard
     * @param {DashboardsApiDeleteDashboardV1DashboardsDashboardIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public deleteDashboardV1DashboardsDashboardIdDelete(requestParameters: DashboardsApiDeleteDashboardV1DashboardsDashboardIdDeleteRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).deleteDashboardV1DashboardsDashboardIdDelete(requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dashboard
     * @param {DashboardsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(requestParameters: DashboardsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDeleteRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(requestParameters.teamId, requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Dashboard.
     * @summary Get Dashboard
     * @param {DashboardsApiGetDashboardV1DashboardsDashboardIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public getDashboardV1DashboardsDashboardIdGet(requestParameters: DashboardsApiGetDashboardV1DashboardsDashboardIdGetRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).getDashboardV1DashboardsDashboardIdGet(requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Dashboard.
     * @summary Get Dashboard
     * @param {DashboardsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(requestParameters: DashboardsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGetRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(requestParameters.teamId, requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters: DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters: DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters.teamId, requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Dashboards.  Paginated list of all Dashboards.
     * @summary List Dashboards
     * @param {DashboardsApiListDashboardsV1DashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public listDashboardsV1DashboardsGet(requestParameters: DashboardsApiListDashboardsV1DashboardsGetRequest = {}, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).listDashboardsV1DashboardsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Dashboards.  Paginated list of all Dashboards.
     * @summary List Dashboards
     * @param {DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public listDashboardsV1TeamsTeamIdDashboardsGet(requestParameters: DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGetRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).listDashboardsV1TeamsTeamIdDashboardsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get dashboards connected to the Variable.
     * @summary List Dashboards
     * @param {DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(requestParameters: DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get dashboards connected to the Variable.
     * @summary List Dashboards
     * @param {DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public listDashboardsV1VariablesVariableIdDashboardsGet(requestParameters: DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGetRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).listDashboardsV1VariablesVariableIdDashboardsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DatasetsApi - axios parameter creator
 * @export
 */
export const DatasetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut: async (datasetId: string, featureId: string, index?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId)
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut: async (teamId: string, datasetId: string, featureId: string, index?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {boolean} [reconcileFeatures] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1DatasetsDatasetIdParentsParentIdPut: async (datasetId: string, parentId: string, reconcileFeatures?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('addParentDatasetV1DatasetsDatasetIdParentsParentIdPut', 'datasetId', datasetId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('addParentDatasetV1DatasetsDatasetIdParentsParentIdPut', 'parentId', parentId)
            const localVarPath = `/v1/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (reconcileFeatures !== undefined) {
                localVarQueryParameter['reconcile_features'] = reconcileFeatures;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {boolean} [reconcileFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut: async (teamId: string, datasetId: string, parentId: string, reconcileFeatures?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut', 'datasetId', datasetId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut', 'parentId', parentId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (reconcileFeatures !== undefined) {
                localVarQueryParameter['reconcile_features'] = reconcileFeatures;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: async (datasetId: string, populationAttributeValueId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId)
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            assertParamExists('addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId)
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: async (teamId: string, datasetId: string, populationAttributeValueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId)
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost: async (datasetId: string, featureIn: Array<FeatureIn>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost', 'datasetId', datasetId)
            // verify required parameter 'featureIn' is not null or undefined
            assertParamExists('createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost', 'featureIn', featureIn)
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost: async (teamId: string, datasetId: string, featureIn: Array<FeatureIn>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'datasetId', datasetId)
            // verify required parameter 'featureIn' is not null or undefined
            assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'featureIn', featureIn)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost: async (datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('createAssociationsV1DatasetsDatasetIdAssociationsPost', 'datasetId', datasetId)
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            assertParamExists('createAssociationsV1DatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn)
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost: async (teamId: string, datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'datasetId', datasetId)
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost: async (datasetIn: DatasetIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetIn' is not null or undefined
            assertParamExists('createDatasetV1DatasetsPost', 'datasetIn', datasetIn)
            const localVarPath = `/v1/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost: async (teamId: string, datasetIn: DatasetIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createDatasetV1TeamsTeamIdDatasetsPost', 'teamId', teamId)
            // verify required parameter 'datasetIn' is not null or undefined
            assertParamExists('createDatasetV1TeamsTeamIdDatasetsPost', 'datasetIn', datasetIn)
            const localVarPath = `/v1/teams/{team_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete: async (datasetId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('deleteDatasetV1DatasetsDatasetIdDelete', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete: async (teamId: string, datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: async (datasetId: string, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId)
            // verify required parameter 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete' is not null or undefined
            assertParamExists('deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete)
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: async (teamId: string, datasetId: string, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId)
            // verify required parameter 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete' is not null or undefined
            assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet: async (datasetId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet: async (teamId: string, datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet: async (datasetId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('getDatasetV1DatasetsDatasetIdGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet: async (teamId: string, datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getDatasetV1TeamsTeamIdDatasetsDatasetIdGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('getDatasetV1TeamsTeamIdDatasetsDatasetIdGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet: async (datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listAssociationsV1DatasetsDatasetIdAssociationsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet: async (teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: async (datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet: async (teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet: async (datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listDatasetParentsV1DatasetsDatasetIdParentsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/parents`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet: async (teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDatasetsV1TeamsTeamIdDatasetsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet: async (datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listModelsUsingDatasetV1DatasetsDatasetIdModelsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/models`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet: async (teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserDatasetsV1UsersUserIdDatasetsGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId 
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch: async (datasetId: string, patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('patchDatasetV1DatasetsDatasetIdPatch', 'datasetId', datasetId)
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            assertParamExists('patchDatasetV1DatasetsDatasetIdPatch', 'patchDatasetOpArrayPatchDatasetOp', patchDatasetOpArrayPatchDatasetOp)
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchDatasetOpArrayPatchDatasetOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch: async (teamId: string, datasetId: string, patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch', 'datasetId', datasetId)
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            assertParamExists('patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch', 'patchDatasetOpArrayPatchDatasetOp', patchDatasetOpArrayPatchDatasetOp)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchDatasetOpArrayPatchDatasetOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete: async (datasetId: string, featureId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId)
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete: async (teamId: string, datasetId: string, featureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete: async (datasetId: string, tagObjectId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete', 'datasetId', datasetId)
            // verify required parameter 'tagObjectId' is not null or undefined
            assertParamExists('removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId)
            const localVarPath = `/v1/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete: async (teamId: string, datasetId: string, tagObjectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'datasetId', datasetId)
            // verify required parameter 'tagObjectId' is not null or undefined
            assertParamExists('removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete: async (datasetId: string, parentId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete', 'datasetId', datasetId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete', 'parentId', parentId)
            const localVarPath = `/v1/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete: async (teamId: string, datasetId: string, parentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete', 'datasetId', datasetId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete', 'parentId', parentId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: async (datasetId: string, populationAttributeValueId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId)
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            assertParamExists('removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId)
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: async (teamId: string, datasetId: string, populationAttributeValueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId)
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId 
         * @param {DatasetIn} datasetIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut: async (datasetId: string, datasetIn: DatasetIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('replaceDatasetV1DatasetsDatasetIdPut', 'datasetId', datasetId)
            // verify required parameter 'datasetIn' is not null or undefined
            assertParamExists('replaceDatasetV1DatasetsDatasetIdPut', 'datasetIn', datasetIn)
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut: async (teamId: string, datasetId: string, datasetIn: DatasetIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut', 'datasetId', datasetId)
            // verify required parameter 'datasetIn' is not null or undefined
            assertParamExists('replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut', 'datasetIn', datasetIn)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut: async (datasetId: string, tagObjectId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut', 'datasetId', datasetId)
            // verify required parameter 'tagObjectId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId)
            const localVarPath = `/v1/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut: async (teamId: string, datasetId: string, tagObjectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut', 'datasetId', datasetId)
            // verify required parameter 'tagObjectId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatasetsApi - functional programming interface
 * @export
 */
export const DatasetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatasetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId: string, featureId: string, index?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId: string, datasetId: string, featureId: string, index?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {boolean} [reconcileFeatures] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId: string, parentId: string, reconcileFeatures?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {boolean} [reconcileFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId: string, datasetId: string, parentId: string, reconcileFeatures?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId: string, populationAttributeValueId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId: string, datasetId: string, populationAttributeValueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId: string, featureIn: Array<FeatureIn>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId: string, datasetId: string, featureIn: Array<FeatureIn>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId: string, datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDatasetV1DatasetsPost(datasetIn: DatasetIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDatasetV1DatasetsPost(datasetIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDatasetV1TeamsTeamIdDatasetsPost(teamId: string, datasetIn: DatasetIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDatasetV1DatasetsDatasetIdDelete(datasetId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDatasetV1DatasetsDatasetIdDelete(datasetId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId: string, datasetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId: string, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId: string, datasetId: string, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId: string, datasetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetV1DatasetsDatasetIdGet(datasetId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatasetV1DatasetsDatasetIdGet(datasetId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId: string, datasetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserDatasetsV1UserDatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetsV1DatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetsV1TeamsTeamIdDatasetsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserDatasetsV1UsersUserIdDatasetsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId 
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchDatasetV1DatasetsDatasetIdPatch(datasetId: string, patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId: string, datasetId: string, patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId: string, featureId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId: string, datasetId: string, featureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId: string, tagObjectId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId: string, datasetId: string, tagObjectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId: string, parentId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId: string, datasetId: string, parentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId: string, populationAttributeValueId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId: string, datasetId: string, populationAttributeValueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId 
         * @param {DatasetIn} datasetIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceDatasetV1DatasetsDatasetIdPut(datasetId: string, datasetIn: DatasetIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId: string, datasetId: string, datasetIn: DatasetIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId: string, tagObjectId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId: string, datasetId: string, tagObjectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DatasetsApi - factory interface
 * @export
 */
export const DatasetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatasetsApiFp(configuration)
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId: string, featureId: string, index?: boolean, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId: string, datasetId: string, featureId: string, index?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {boolean} [reconcileFeatures] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId: string, parentId: string, reconcileFeatures?: boolean, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {boolean} [reconcileFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId: string, datasetId: string, parentId: string, reconcileFeatures?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId: string, populationAttributeValueId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId: string, datasetId: string, populationAttributeValueId: string, options?: any): AxiosPromise<void> {
            return localVarFp.addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId: string, featureIn: Array<FeatureIn>, teamId?: string, options?: any): AxiosPromise<Array<FeatureOut>> {
            return localVarFp.createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId: string, datasetId: string, featureIn: Array<FeatureIn>, options?: any): AxiosPromise<Array<FeatureOut>> {
            return localVarFp.createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, teamId?: string, options?: any): AxiosPromise<Array<AssociationOut>> {
            return localVarFp.createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId: string, datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options?: any): AxiosPromise<Array<AssociationOut>> {
            return localVarFp.createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost(datasetIn: DatasetIn, teamId?: string, options?: any): AxiosPromise<DatasetOut> {
            return localVarFp.createDatasetV1DatasetsPost(datasetIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost(teamId: string, datasetIn: DatasetIn, options?: any): AxiosPromise<DatasetOut> {
            return localVarFp.createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete(datasetId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDatasetV1DatasetsDatasetIdDelete(datasetId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId: string, datasetId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId: string, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId: string, datasetId: string, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options?: any): AxiosPromise<void> {
            return localVarFp.deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId: string, teamId?: string, options?: any): AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>> {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId: string, datasetId: string, options?: any): AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>> {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet(datasetId: string, teamId?: string, options?: any): AxiosPromise<DatasetOut> {
            return localVarFp.getDatasetV1DatasetsDatasetIdGet(datasetId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId: string, datasetId: string, options?: any): AxiosPromise<DatasetOut> {
            return localVarFp.getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, teamId?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId 
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch(datasetId: string, patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId: string, datasetId: string, patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId: string, featureId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId: string, datasetId: string, featureId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId: string, tagObjectId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId: string, datasetId: string, tagObjectId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId: string, parentId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId: string, datasetId: string, parentId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId: string, populationAttributeValueId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId: string, datasetId: string, populationAttributeValueId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId 
         * @param {DatasetIn} datasetIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut(datasetId: string, datasetIn: DatasetIn, teamId?: string, options?: any): AxiosPromise<DatasetOut> {
            return localVarFp.replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId: string, datasetId: string, datasetIn: DatasetIn, options?: any): AxiosPromise<DatasetOut> {
            return localVarFp.replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId: string, tagObjectId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId: string, datasetId: string, tagObjectId: string, options?: any): AxiosPromise<void> {
            return localVarFp.tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest
 */
export interface DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * If true, then set the feature as the dataset index.
     * @type {boolean}
     * @memberof DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly index?: boolean

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest
 */
export interface DatasetsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * If true, then set the feature as the dataset index.
     * @type {boolean}
     * @memberof DatasetsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly index?: boolean
}

/**
 * Request parameters for addParentDatasetV1DatasetsDatasetIdParentsParentIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPutRequest
 */
export interface DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPut
     */
    readonly parentId: string

    /**
     * 
     * @type {boolean}
     * @memberof DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPut
     */
    readonly reconcileFeatures?: boolean

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPutRequest
 */
export interface DatasetsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut
     */
    readonly parentId: string

    /**
     * 
     * @type {boolean}
     * @memberof DatasetsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut
     */
    readonly reconcileFeatures?: boolean
}

/**
 * Request parameters for addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest
 */
export interface DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly populationAttributeValueId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest
 */
export interface DatasetsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly populationAttributeValueId: string
}

/**
 * Request parameters for createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost operation in DatasetsApi.
 * @export
 * @interface DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest
 */
export interface DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {Array<FeatureIn>}
     * @memberof DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost
     */
    readonly featureIn: Array<FeatureIn>

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost operation in DatasetsApi.
 * @export
 * @interface DatasetsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest
 */
export interface DatasetsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {Array<FeatureIn>}
     * @memberof DatasetsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost
     */
    readonly featureIn: Array<FeatureIn>
}

/**
 * Request parameters for createAssociationsV1DatasetsDatasetIdAssociationsPost operation in DatasetsApi.
 * @export
 * @interface DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest
 */
export interface DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost operation in DatasetsApi.
 * @export
 * @interface DatasetsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest
 */
export interface DatasetsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof DatasetsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>
}

/**
 * Request parameters for createDatasetV1DatasetsPost operation in DatasetsApi.
 * @export
 * @interface DatasetsApiCreateDatasetV1DatasetsPostRequest
 */
export interface DatasetsApiCreateDatasetV1DatasetsPostRequest {
    /**
     * 
     * @type {DatasetIn}
     * @memberof DatasetsApiCreateDatasetV1DatasetsPost
     */
    readonly datasetIn: DatasetIn

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiCreateDatasetV1DatasetsPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createDatasetV1TeamsTeamIdDatasetsPost operation in DatasetsApi.
 * @export
 * @interface DatasetsApiCreateDatasetV1TeamsTeamIdDatasetsPostRequest
 */
export interface DatasetsApiCreateDatasetV1TeamsTeamIdDatasetsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiCreateDatasetV1TeamsTeamIdDatasetsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {DatasetIn}
     * @memberof DatasetsApiCreateDatasetV1TeamsTeamIdDatasetsPost
     */
    readonly datasetIn: DatasetIn
}

/**
 * Request parameters for deleteDatasetV1DatasetsDatasetIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiDeleteDatasetV1DatasetsDatasetIdDeleteRequest
 */
export interface DatasetsApiDeleteDatasetV1DatasetsDatasetIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiDeleteDatasetV1DatasetsDatasetIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiDeleteDatasetV1DatasetsDatasetIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDeleteRequest
 */
export interface DatasetsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete
     */
    readonly datasetId: string
}

/**
 * Request parameters for deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest
 */
export interface DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete}
     * @memberof DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
     */
    readonly bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest
 */
export interface DatasetsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete}
     * @memberof DatasetsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
     */
    readonly bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
}

/**
 * Request parameters for fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest
 */
export interface DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest
 */
export interface DatasetsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet
     */
    readonly datasetId: string
}

/**
 * Request parameters for getDatasetV1DatasetsDatasetIdGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest
 */
export interface DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiGetDatasetV1DatasetsDatasetIdGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiGetDatasetV1DatasetsDatasetIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getDatasetV1TeamsTeamIdDatasetsDatasetIdGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGetRequest
 */
export interface DatasetsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGet
     */
    readonly datasetId: string
}

/**
 * Request parameters for listAssociationsV1DatasetsDatasetIdAssociationsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest
 */
export interface DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest
 */
export interface DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest
 */
export interface DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listAuthenticatedUserDatasetsV1UserDatasetsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest
 */
export interface DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest
 */
export interface DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest
 */
export interface DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listDatasetParentsV1DatasetsDatasetIdParentsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest
 */
export interface DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGetRequest
 */
export interface DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listDatasetsV1DatasetsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListDatasetsV1DatasetsGetRequest
 */
export interface DatasetsApiListDatasetsV1DatasetsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly conceptTag?: string

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly featureRelationship?: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listDatasetsV1TeamsTeamIdDatasetsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGetRequest
 */
export interface DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly conceptTag?: string

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly featureRelationship?: string
}

/**
 * Request parameters for listModelsUsingDatasetV1DatasetsDatasetIdModelsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest
 */
export interface DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGetRequest
 */
export interface DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest
 */
export interface DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listUserDatasetsV1UsersUserIdDatasetsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest
 */
export interface DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for patchDatasetV1DatasetsDatasetIdPatch operation in DatasetsApi.
 * @export
 * @interface DatasetsApiPatchDatasetV1DatasetsDatasetIdPatchRequest
 */
export interface DatasetsApiPatchDatasetV1DatasetsDatasetIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiPatchDatasetV1DatasetsDatasetIdPatch
     */
    readonly datasetId: string

    /**
     * 
     * @type {PatchDatasetOp | Array<PatchDatasetOp>}
     * @memberof DatasetsApiPatchDatasetV1DatasetsDatasetIdPatch
     */
    readonly patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiPatchDatasetV1DatasetsDatasetIdPatch
     */
    readonly teamId?: string
}

/**
 * Request parameters for patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch operation in DatasetsApi.
 * @export
 * @interface DatasetsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatchRequest
 */
export interface DatasetsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch
     */
    readonly datasetId: string

    /**
     * 
     * @type {PatchDatasetOp | Array<PatchDatasetOp>}
     * @memberof DatasetsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch
     */
    readonly patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>
}

/**
 * Request parameters for removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest
 */
export interface DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly featureId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest
 */
export interface DatasetsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly featureId: string
}

/**
 * Request parameters for removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest
 */
export interface DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete
     */
    readonly tagObjectId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest
 */
export interface DatasetsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete
     */
    readonly tagObjectId: string
}

/**
 * Request parameters for removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDeleteRequest
 */
export interface DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDelete
     */
    readonly parentId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDeleteRequest
 */
export interface DatasetsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete
     */
    readonly parentId: string
}

/**
 * Request parameters for removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest
 */
export interface DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly populationAttributeValueId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest
 */
export interface DatasetsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly populationAttributeValueId: string
}

/**
 * Request parameters for replaceDatasetV1DatasetsDatasetIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiReplaceDatasetV1DatasetsDatasetIdPutRequest
 */
export interface DatasetsApiReplaceDatasetV1DatasetsDatasetIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiReplaceDatasetV1DatasetsDatasetIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {DatasetIn}
     * @memberof DatasetsApiReplaceDatasetV1DatasetsDatasetIdPut
     */
    readonly datasetIn: DatasetIn

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiReplaceDatasetV1DatasetsDatasetIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPutRequest
 */
export interface DatasetsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {DatasetIn}
     * @memberof DatasetsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut
     */
    readonly datasetIn: DatasetIn
}

/**
 * Request parameters for tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPutRequest
 */
export interface DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut
     */
    readonly tagObjectId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPutRequest
 */
export interface DatasetsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut
     */
    readonly tagObjectId: string
}

/**
 * DatasetsApi - object-oriented interface
 * @export
 * @class DatasetsApi
 * @extends {BaseAPI}
 */
export class DatasetsApi extends BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters: DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.datasetId, requestParameters.featureId, requestParameters.index, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {DatasetsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters: DatasetsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a parent dataset.
     * @summary Add Parent Dataset
     * @param {DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(requestParameters: DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPutRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(requestParameters.datasetId, requestParameters.parentId, requestParameters.reconcileFeatures, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a parent dataset.
     * @summary Add Parent Dataset
     * @param {DatasetsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(requestParameters: DatasetsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPutRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.parentId, requestParameters.reconcileFeatures, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters: DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.datasetId, requestParameters.populationAttributeValueId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {DatasetsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters: DatasetsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters: DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters.datasetId, requestParameters.featureIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {DatasetsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters: DatasetsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters: DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {DatasetsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters: DatasetsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {DatasetsApiCreateDatasetV1DatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public createDatasetV1DatasetsPost(requestParameters: DatasetsApiCreateDatasetV1DatasetsPostRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).createDatasetV1DatasetsPost(requestParameters.datasetIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {DatasetsApiCreateDatasetV1TeamsTeamIdDatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public createDatasetV1TeamsTeamIdDatasetsPost(requestParameters: DatasetsApiCreateDatasetV1TeamsTeamIdDatasetsPostRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).createDatasetV1TeamsTeamIdDatasetsPost(requestParameters.teamId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {DatasetsApiDeleteDatasetV1DatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public deleteDatasetV1DatasetsDatasetIdDelete(requestParameters: DatasetsApiDeleteDatasetV1DatasetsDatasetIdDeleteRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).deleteDatasetV1DatasetsDatasetIdDelete(requestParameters.datasetId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {DatasetsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(requestParameters: DatasetsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDeleteRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters: DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {DatasetsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters: DatasetsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters: DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.datasetId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {DatasetsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters: DatasetsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public getDatasetV1DatasetsDatasetIdGet(requestParameters: DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).getDatasetV1DatasetsDatasetIdGet(requestParameters.datasetId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {DatasetsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(requestParameters: DatasetsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters: DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters: DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters: DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters: DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest = {}, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters: DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters: DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listDatasetParentsV1DatasetsDatasetIdParentsGet(requestParameters: DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listDatasetParentsV1DatasetsDatasetIdParentsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(requestParameters: DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {DatasetsApiListDatasetsV1DatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listDatasetsV1DatasetsGet(requestParameters: DatasetsApiListDatasetsV1DatasetsGetRequest = {}, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listDatasetsV1DatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listDatasetsV1TeamsTeamIdDatasetsGet(requestParameters: DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listDatasetsV1TeamsTeamIdDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters: DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(requestParameters: DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters: DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters: DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {DatasetsApiPatchDatasetV1DatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public patchDatasetV1DatasetsDatasetIdPatch(requestParameters: DatasetsApiPatchDatasetV1DatasetsDatasetIdPatchRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).patchDatasetV1DatasetsDatasetIdPatch(requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {DatasetsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(requestParameters: DatasetsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatchRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(requestParameters.teamId, requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters: DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.datasetId, requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {DatasetsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters: DatasetsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the dataset with object with provided id.
     * @summary Remove Object Tag From Dataset
     * @param {DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters: DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters.datasetId, requestParameters.tagObjectId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the dataset with object with provided id.
     * @summary Remove Object Tag From Dataset
     * @param {DatasetsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters: DatasetsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a parent dataset.
     * @summary Remove Parent Dataset
     * @param {DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(requestParameters: DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDeleteRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(requestParameters.datasetId, requestParameters.parentId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a parent dataset.
     * @summary Remove Parent Dataset
     * @param {DatasetsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(requestParameters: DatasetsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDeleteRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters: DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.datasetId, requestParameters.populationAttributeValueId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {DatasetsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters: DatasetsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {DatasetsApiReplaceDatasetV1DatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public replaceDatasetV1DatasetsDatasetIdPut(requestParameters: DatasetsApiReplaceDatasetV1DatasetsDatasetIdPutRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).replaceDatasetV1DatasetsDatasetIdPut(requestParameters.datasetId, requestParameters.datasetIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {DatasetsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(requestParameters: DatasetsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPutRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the dataset with object with provided id.
     * @summary Tag Study With Object
     * @param {DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters: DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPutRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters.datasetId, requestParameters.tagObjectId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the dataset with object with provided id.
     * @summary Tag Study With Object
     * @param {DatasetsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters: DatasetsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPutRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnterpriseApi - axios parameter creator
 * @export
 */
export const EnterpriseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationIn} integrationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost: async (integrationIn: IntegrationIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationIn' is not null or undefined
            assertParamExists('createIntegrationV1EnterpriseIntegrationsPost', 'integrationIn', integrationIn)
            const localVarPath = `/v1/enterprise/integrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(integrationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost: async (messageIn: MessageIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageIn' is not null or undefined
            assertParamExists('createMessageV1EnterpriseMessagesPost', 'messageIn', messageIn)
            const localVarPath = `/v1/enterprise/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/enterprise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet: async (integrationId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            assertParamExists('getIntegrationV1EnterpriseIntegrationsIntegrationIdGet', 'integrationId', integrationId)
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1EnterpriseIntegrationsGet: async (teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/enterprise/integrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet: async (messageId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('getMessageV1EnterpriseMessagesMessageIdGet', 'messageId', messageId)
            const localVarPath = `/v1/enterprise/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Enterprise.
         * @summary Update Enterprise
         * @param {EnterpriseIn} enterpriseIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnterpriseV1EnterprisePatch: async (enterpriseIn: EnterpriseIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enterpriseIn' is not null or undefined
            assertParamExists('updateEnterpriseV1EnterprisePatch', 'enterpriseIn', enterpriseIn)
            const localVarPath = `/v1/enterprise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enterpriseIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} integrationId 
         * @param {IntegrationIn} integrationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch: async (integrationId: string, integrationIn: IntegrationIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            assertParamExists('updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch', 'integrationId', integrationId)
            // verify required parameter 'integrationIn' is not null or undefined
            assertParamExists('updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch', 'integrationIn', integrationIn)
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(integrationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId 
         * @param {MessageIn} messageIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch: async (messageId: string, messageIn: MessageIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('updateMessageV1EnterpriseMessagesMessageIdPatch', 'messageId', messageId)
            // verify required parameter 'messageIn' is not null or undefined
            assertParamExists('updateMessageV1EnterpriseMessagesMessageIdPatch', 'messageIn', messageIn)
            const localVarPath = `/v1/enterprise/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnterpriseApi - functional programming interface
 * @export
 */
export const EnterpriseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnterpriseApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationIn} integrationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIntegrationV1EnterpriseIntegrationsPost(integrationIn: IntegrationIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIntegrationV1EnterpriseIntegrationsPost(integrationIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMessageV1EnterpriseMessagesPost(messageIn: MessageIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMessageV1EnterpriseMessagesPost(messageIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnterpriseV1EnterpriseGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Enterprise>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnterpriseV1EnterpriseGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrationsV1EnterpriseIntegrationsGet(teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Integration>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrationsV1EnterpriseIntegrationsGet(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageV1EnterpriseMessagesMessageIdGet(messageId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageV1EnterpriseMessagesMessageIdGet(messageId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Enterprise.
         * @summary Update Enterprise
         * @param {EnterpriseIn} enterpriseIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnterpriseV1EnterprisePatch(enterpriseIn: EnterpriseIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Enterprise>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnterpriseV1EnterprisePatch(enterpriseIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} integrationId 
         * @param {IntegrationIn} integrationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId: string, integrationIn: IntegrationIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId 
         * @param {MessageIn} messageIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMessageV1EnterpriseMessagesMessageIdPatch(messageId: string, messageIn: MessageIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnterpriseApi - factory interface
 * @export
 */
export const EnterpriseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnterpriseApiFp(configuration)
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationIn} integrationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost(integrationIn: IntegrationIn, teamId?: string, options?: any): AxiosPromise<Integration> {
            return localVarFp.createIntegrationV1EnterpriseIntegrationsPost(integrationIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost(messageIn: MessageIn, teamId?: string, options?: any): AxiosPromise<MessageOut> {
            return localVarFp.createMessageV1EnterpriseMessagesPost(messageIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet(options?: any): AxiosPromise<Enterprise> {
            return localVarFp.getEnterpriseV1EnterpriseGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId: string, teamId?: string, options?: any): AxiosPromise<Integration> {
            return localVarFp.getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1EnterpriseIntegrationsGet(teamId?: string, options?: any): AxiosPromise<Array<Integration>> {
            return localVarFp.getIntegrationsV1EnterpriseIntegrationsGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet(messageId: string, teamId?: string, options?: any): AxiosPromise<MessageOut> {
            return localVarFp.getMessageV1EnterpriseMessagesMessageIdGet(messageId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Enterprise.
         * @summary Update Enterprise
         * @param {EnterpriseIn} enterpriseIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnterpriseV1EnterprisePatch(enterpriseIn: EnterpriseIn, options?: any): AxiosPromise<Enterprise> {
            return localVarFp.updateEnterpriseV1EnterprisePatch(enterpriseIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} integrationId 
         * @param {IntegrationIn} integrationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId: string, integrationIn: IntegrationIn, teamId?: string, options?: any): AxiosPromise<Integration> {
            return localVarFp.updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId 
         * @param {MessageIn} messageIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch(messageId: string, messageIn: MessageIn, teamId?: string, options?: any): AxiosPromise<MessageOut> {
            return localVarFp.updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, teamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createIntegrationV1EnterpriseIntegrationsPost operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest
 */
export interface EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest {
    /**
     * 
     * @type {IntegrationIn}
     * @memberof EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPost
     */
    readonly integrationIn: IntegrationIn

    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createMessageV1EnterpriseMessagesPost operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest
 */
export interface EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest {
    /**
     * 
     * @type {MessageIn}
     * @memberof EnterpriseApiCreateMessageV1EnterpriseMessagesPost
     */
    readonly messageIn: MessageIn

    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiCreateMessageV1EnterpriseMessagesPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for getIntegrationV1EnterpriseIntegrationsIntegrationIdGet operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest
 */
export interface EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGet
     */
    readonly integrationId: string

    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getIntegrationsV1EnterpriseIntegrationsGet operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest
 */
export interface EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getMessageV1EnterpriseMessagesMessageIdGet operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest
 */
export interface EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGet
     */
    readonly messageId: string

    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for updateEnterpriseV1EnterprisePatch operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiUpdateEnterpriseV1EnterprisePatchRequest
 */
export interface EnterpriseApiUpdateEnterpriseV1EnterprisePatchRequest {
    /**
     * 
     * @type {EnterpriseIn}
     * @memberof EnterpriseApiUpdateEnterpriseV1EnterprisePatch
     */
    readonly enterpriseIn: EnterpriseIn
}

/**
 * Request parameters for updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest
 */
export interface EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch
     */
    readonly integrationId: string

    /**
     * 
     * @type {IntegrationIn}
     * @memberof EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch
     */
    readonly integrationIn: IntegrationIn

    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch
     */
    readonly teamId?: string
}

/**
 * Request parameters for updateMessageV1EnterpriseMessagesMessageIdPatch operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest
 */
export interface EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatch
     */
    readonly messageId: string

    /**
     * 
     * @type {MessageIn}
     * @memberof EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatch
     */
    readonly messageIn: MessageIn

    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatch
     */
    readonly teamId?: string
}

/**
 * EnterpriseApi - object-oriented interface
 * @export
 * @class EnterpriseApi
 * @extends {BaseAPI}
 */
export class EnterpriseApi extends BaseAPI {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public createIntegrationV1EnterpriseIntegrationsPost(requestParameters: EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).createIntegrationV1EnterpriseIntegrationsPost(requestParameters.integrationIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new message.
     * @summary Create Message
     * @param {EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public createMessageV1EnterpriseMessagesPost(requestParameters: EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).createMessageV1EnterpriseMessagesPost(requestParameters.messageIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the Enterprise.
     * @summary Get Enterprise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getEnterpriseV1EnterpriseGet(options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).getEnterpriseV1EnterpriseGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters: EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters.integrationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get team integrations.
     * @summary Get Integrations
     * @param {EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getIntegrationsV1EnterpriseIntegrationsGet(requestParameters: EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest = {}, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).getIntegrationsV1EnterpriseIntegrationsGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Message.
     * @summary Get Message
     * @param {EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getMessageV1EnterpriseMessagesMessageIdGet(requestParameters: EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).getMessageV1EnterpriseMessagesMessageIdGet(requestParameters.messageId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Enterprise.
     * @summary Update Enterprise
     * @param {EnterpriseApiUpdateEnterpriseV1EnterprisePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public updateEnterpriseV1EnterprisePatch(requestParameters: EnterpriseApiUpdateEnterpriseV1EnterprisePatchRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).updateEnterpriseV1EnterprisePatch(requestParameters.enterpriseIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Integration.
     * @summary Update Integration
     * @param {EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters: EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters.integrationId, requestParameters.integrationIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Message.
     * @summary Update Message
     * @param {EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public updateMessageV1EnterpriseMessagesMessageIdPatch(requestParameters: EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).updateMessageV1EnterpriseMessagesMessageIdPatch(requestParameters.messageId, requestParameters.messageIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FeaturesApi - axios parameter creator
 * @export
 */
export const FeaturesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut: async (dashboardId: string, featureId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut', 'dashboardId', dashboardId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut', 'featureId', featureId)
            const localVarPath = `/v1/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut: async (teamId: string, dashboardId: string, featureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'teamId', teamId)
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'dashboardId', dashboardId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'featureId', featureId)
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut: async (datasetId: string, featureId: string, index?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId)
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut: async (teamId: string, datasetId: string, featureId: string, index?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost: async (datasetId: string, featureIn: Array<FeatureIn>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost', 'datasetId', datasetId)
            // verify required parameter 'featureIn' is not null or undefined
            assertParamExists('createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost', 'featureIn', featureIn)
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost: async (teamId: string, datasetId: string, featureIn: Array<FeatureIn>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'datasetId', datasetId)
            // verify required parameter 'featureIn' is not null or undefined
            assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'featureIn', featureIn)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost: async (featureIn: FeatureIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureIn' is not null or undefined
            assertParamExists('createFeatureV1FeaturesPost', 'featureIn', featureIn)
            const localVarPath = `/v1/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost: async (teamId: string, featureIn: FeatureIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createFeatureV1TeamsTeamIdFeaturesPost', 'teamId', teamId)
            // verify required parameter 'featureIn' is not null or undefined
            assertParamExists('createFeatureV1TeamsTeamIdFeaturesPost', 'featureIn', featureIn)
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete: async (featureId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('deleteFeatureV1FeaturesFeatureIdDelete', 'featureId', featureId)
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete: async (teamId: string, featureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete', 'teamId', teamId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete', 'featureId', featureId)
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet: async (featureId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('getFeatureV1FeaturesFeatureIdGet', 'featureId', featureId)
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet: async (teamId: string, featureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getFeatureV1TeamsTeamIdFeaturesFeatureIdGet', 'teamId', teamId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('getFeatureV1TeamsTeamIdFeaturesFeatureIdGet', 'featureId', featureId)
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet: async (dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet', 'dashboardId', dashboardId)
            const localVarPath = `/v1/dashboards/{dashboard_id}/features`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet: async (teamId: string, dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet', 'teamId', teamId)
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet', 'dashboardId', dashboardId)
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: async (datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet: async (teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listFeaturesV1TeamsTeamIdFeaturesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet: async (modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listModelFeaturesV1ModelsModelIdFeaturesGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/features`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet: async (teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet', 'modelId', modelId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserFeaturesV1UsersUserIdFeaturesGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} featureId 
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch: async (featureId: string, patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('patchFeatureV1FeaturesFeatureIdPatch', 'featureId', featureId)
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            assertParamExists('patchFeatureV1FeaturesFeatureIdPatch', 'patchFeatureOpArrayPatchFeatureOp', patchFeatureOpArrayPatchFeatureOp)
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchFeatureOpArrayPatchFeatureOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch: async (teamId: string, featureId: string, patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch', 'teamId', teamId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch', 'featureId', featureId)
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            assertParamExists('patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch', 'patchFeatureOpArrayPatchFeatureOp', patchFeatureOpArrayPatchFeatureOp)
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchFeatureOpArrayPatchFeatureOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch: async (bulkPatchFeatureOp: Array<BulkPatchFeatureOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            assertParamExists('patchMultipleFeaturesV1FeaturesPatch', 'bulkPatchFeatureOp', bulkPatchFeatureOp)
            const localVarPath = `/v1/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkPatchFeatureOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId 
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch: async (teamId: string, bulkPatchFeatureOp: Array<BulkPatchFeatureOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch', 'teamId', teamId)
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            assertParamExists('patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch', 'bulkPatchFeatureOp', bulkPatchFeatureOp)
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkPatchFeatureOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete: async (datasetId: string, featureId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId)
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete: async (teamId: string, datasetId: string, featureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId 
         * @param {FeatureIn} featureIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut: async (featureId: string, featureIn: FeatureIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('replaceFeatureV1FeaturesFeatureIdPut', 'featureId', featureId)
            // verify required parameter 'featureIn' is not null or undefined
            assertParamExists('replaceFeatureV1FeaturesFeatureIdPut', 'featureIn', featureIn)
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut: async (teamId: string, featureId: string, featureIn: FeatureIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut', 'teamId', teamId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut', 'featureId', featureId)
            // verify required parameter 'featureIn' is not null or undefined
            assertParamExists('replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut', 'featureIn', featureIn)
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeaturesApi - functional programming interface
 * @export
 */
export const FeaturesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeaturesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId: string, featureId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId: string, dashboardId: string, featureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId: string, featureId: string, index?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId: string, datasetId: string, featureId: string, index?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId: string, featureIn: Array<FeatureIn>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId: string, datasetId: string, featureIn: Array<FeatureIn>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeatureV1FeaturesPost(featureIn: FeatureIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFeatureV1FeaturesPost(featureIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeatureV1TeamsTeamIdFeaturesPost(teamId: string, featureIn: FeatureIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFeatureV1FeaturesFeatureIdDelete(featureId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFeatureV1FeaturesFeatureIdDelete(featureId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId: string, featureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatureV1FeaturesFeatureIdGet(featureId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatureV1FeaturesFeatureIdGet(featureId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId: string, featureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserFeaturesV1UserFeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId: string, dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeaturesV1FeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeaturesV1TeamsTeamIdFeaturesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelFeaturesV1ModelsModelIdFeaturesGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserFeaturesV1UsersUserIdFeaturesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} featureId 
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchFeatureV1FeaturesFeatureIdPatch(featureId: string, patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId: string, featureId: string, patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp: Array<BulkPatchFeatureOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId 
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId: string, bulkPatchFeatureOp: Array<BulkPatchFeatureOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId: string, featureId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId: string, datasetId: string, featureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId 
         * @param {FeatureIn} featureIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceFeatureV1FeaturesFeatureIdPut(featureId: string, featureIn: FeatureIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId: string, featureId: string, featureIn: FeatureIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeaturesApi - factory interface
 * @export
 */
export const FeaturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeaturesApiFp(configuration)
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId: string, featureId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId: string, dashboardId: string, featureId: string, options?: any): AxiosPromise<void> {
            return localVarFp.addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId: string, featureId: string, index?: boolean, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId: string, datasetId: string, featureId: string, index?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId: string, featureIn: Array<FeatureIn>, teamId?: string, options?: any): AxiosPromise<Array<FeatureOut>> {
            return localVarFp.createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId: string, datasetId: string, featureIn: Array<FeatureIn>, options?: any): AxiosPromise<Array<FeatureOut>> {
            return localVarFp.createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost(featureIn: FeatureIn, teamId?: string, options?: any): AxiosPromise<FeatureOut> {
            return localVarFp.createFeatureV1FeaturesPost(featureIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost(teamId: string, featureIn: FeatureIn, options?: any): AxiosPromise<FeatureOut> {
            return localVarFp.createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete(featureId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFeatureV1FeaturesFeatureIdDelete(featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId: string, featureId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet(featureId: string, teamId?: string, options?: any): AxiosPromise<FeatureOut> {
            return localVarFp.getFeatureV1FeaturesFeatureIdGet(featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId: string, featureId: string, options?: any): AxiosPromise<FeatureOut> {
            return localVarFp.getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId: string, dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} featureId 
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch(featureId: string, patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId: string, featureId: string, patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp: Array<BulkPatchFeatureOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId 
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId: string, bulkPatchFeatureOp: Array<BulkPatchFeatureOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId: string, featureId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId: string, datasetId: string, featureId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId 
         * @param {FeatureIn} featureIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut(featureId: string, featureIn: FeatureIn, teamId?: string, options?: any): AxiosPromise<FeatureOut> {
            return localVarFp.replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId: string, featureId: string, featureIn: FeatureIn, options?: any): AxiosPromise<FeatureOut> {
            return localVarFp.replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest
 */
export interface FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly dashboardId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest
 */
export interface FeaturesApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly dashboardId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly featureId: string
}

/**
 * Request parameters for addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest
 */
export interface FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * If true, then set the feature as the dataset index.
     * @type {boolean}
     * @memberof FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly index?: boolean

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest
 */
export interface FeaturesApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * If true, then set the feature as the dataset index.
     * @type {boolean}
     * @memberof FeaturesApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly index?: boolean
}

/**
 * Request parameters for createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost operation in FeaturesApi.
 * @export
 * @interface FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest
 */
export interface FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {Array<FeatureIn>}
     * @memberof FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost
     */
    readonly featureIn: Array<FeatureIn>

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost operation in FeaturesApi.
 * @export
 * @interface FeaturesApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest
 */
export interface FeaturesApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {Array<FeatureIn>}
     * @memberof FeaturesApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost
     */
    readonly featureIn: Array<FeatureIn>
}

/**
 * Request parameters for createFeatureV1FeaturesPost operation in FeaturesApi.
 * @export
 * @interface FeaturesApiCreateFeatureV1FeaturesPostRequest
 */
export interface FeaturesApiCreateFeatureV1FeaturesPostRequest {
    /**
     * 
     * @type {FeatureIn}
     * @memberof FeaturesApiCreateFeatureV1FeaturesPost
     */
    readonly featureIn: FeatureIn

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiCreateFeatureV1FeaturesPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createFeatureV1TeamsTeamIdFeaturesPost operation in FeaturesApi.
 * @export
 * @interface FeaturesApiCreateFeatureV1TeamsTeamIdFeaturesPostRequest
 */
export interface FeaturesApiCreateFeatureV1TeamsTeamIdFeaturesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiCreateFeatureV1TeamsTeamIdFeaturesPost
     */
    readonly teamId: string

    /**
     * 
     * @type {FeatureIn}
     * @memberof FeaturesApiCreateFeatureV1TeamsTeamIdFeaturesPost
     */
    readonly featureIn: FeatureIn
}

/**
 * Request parameters for deleteFeatureV1FeaturesFeatureIdDelete operation in FeaturesApi.
 * @export
 * @interface FeaturesApiDeleteFeatureV1FeaturesFeatureIdDeleteRequest
 */
export interface FeaturesApiDeleteFeatureV1FeaturesFeatureIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiDeleteFeatureV1FeaturesFeatureIdDelete
     */
    readonly featureId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiDeleteFeatureV1FeaturesFeatureIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete operation in FeaturesApi.
 * @export
 * @interface FeaturesApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDeleteRequest
 */
export interface FeaturesApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete
     */
    readonly featureId: string
}

/**
 * Request parameters for getFeatureV1FeaturesFeatureIdGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest
 */
export interface FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiGetFeatureV1FeaturesFeatureIdGet
     */
    readonly featureId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiGetFeatureV1FeaturesFeatureIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getFeatureV1TeamsTeamIdFeaturesFeatureIdGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGetRequest
 */
export interface FeaturesApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGet
     */
    readonly featureId: string
}

/**
 * Request parameters for listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest
 */
export interface FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listAuthenticatedUserFeaturesV1UserFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest
 */
export interface FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest
 */
export interface FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly dashboardId: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest
 */
export interface FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly dashboardId: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest
 */
export interface FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest
 */
export interface FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listFeaturesV1FeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListFeaturesV1FeaturesGetRequest
 */
export interface FeaturesApiListFeaturesV1FeaturesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listFeaturesV1TeamsTeamIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGetRequest
 */
export interface FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listModelFeaturesV1ModelsModelIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest
 */
export interface FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest
 */
export interface FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly modelId: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest
 */
export interface FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listUserFeaturesV1UsersUserIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest
 */
export interface FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for patchFeatureV1FeaturesFeatureIdPatch operation in FeaturesApi.
 * @export
 * @interface FeaturesApiPatchFeatureV1FeaturesFeatureIdPatchRequest
 */
export interface FeaturesApiPatchFeatureV1FeaturesFeatureIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiPatchFeatureV1FeaturesFeatureIdPatch
     */
    readonly featureId: string

    /**
     * 
     * @type {PatchFeatureOp | Array<PatchFeatureOp>}
     * @memberof FeaturesApiPatchFeatureV1FeaturesFeatureIdPatch
     */
    readonly patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiPatchFeatureV1FeaturesFeatureIdPatch
     */
    readonly teamId?: string
}

/**
 * Request parameters for patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch operation in FeaturesApi.
 * @export
 * @interface FeaturesApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatchRequest
 */
export interface FeaturesApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch
     */
    readonly featureId: string

    /**
     * 
     * @type {PatchFeatureOp | Array<PatchFeatureOp>}
     * @memberof FeaturesApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch
     */
    readonly patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>
}

/**
 * Request parameters for patchMultipleFeaturesV1FeaturesPatch operation in FeaturesApi.
 * @export
 * @interface FeaturesApiPatchMultipleFeaturesV1FeaturesPatchRequest
 */
export interface FeaturesApiPatchMultipleFeaturesV1FeaturesPatchRequest {
    /**
     * 
     * @type {Array<BulkPatchFeatureOp>}
     * @memberof FeaturesApiPatchMultipleFeaturesV1FeaturesPatch
     */
    readonly bulkPatchFeatureOp: Array<BulkPatchFeatureOp>
}

/**
 * Request parameters for patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch operation in FeaturesApi.
 * @export
 * @interface FeaturesApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatchRequest
 */
export interface FeaturesApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {Array<BulkPatchFeatureOp>}
     * @memberof FeaturesApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatch
     */
    readonly bulkPatchFeatureOp: Array<BulkPatchFeatureOp>
}

/**
 * Request parameters for removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete operation in FeaturesApi.
 * @export
 * @interface FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest
 */
export interface FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly featureId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete operation in FeaturesApi.
 * @export
 * @interface FeaturesApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest
 */
export interface FeaturesApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly featureId: string
}

/**
 * Request parameters for replaceFeatureV1FeaturesFeatureIdPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiReplaceFeatureV1FeaturesFeatureIdPutRequest
 */
export interface FeaturesApiReplaceFeatureV1FeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiReplaceFeatureV1FeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * 
     * @type {FeatureIn}
     * @memberof FeaturesApiReplaceFeatureV1FeaturesFeatureIdPut
     */
    readonly featureIn: FeatureIn

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiReplaceFeatureV1FeaturesFeatureIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPutRequest
 */
export interface FeaturesApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * 
     * @type {FeatureIn}
     * @memberof FeaturesApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut
     */
    readonly featureIn: FeatureIn
}

/**
 * FeaturesApi - object-oriented interface
 * @export
 * @class FeaturesApi
 * @extends {BaseAPI}
 */
export class FeaturesApi extends BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters: FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.dashboardId, requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {FeaturesApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters: FeaturesApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.dashboardId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters: FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.datasetId, requestParameters.featureId, requestParameters.index, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {FeaturesApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters: FeaturesApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters: FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters.datasetId, requestParameters.featureIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {FeaturesApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters: FeaturesApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {FeaturesApiCreateFeatureV1FeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public createFeatureV1FeaturesPost(requestParameters: FeaturesApiCreateFeatureV1FeaturesPostRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).createFeatureV1FeaturesPost(requestParameters.featureIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {FeaturesApiCreateFeatureV1TeamsTeamIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public createFeatureV1TeamsTeamIdFeaturesPost(requestParameters: FeaturesApiCreateFeatureV1TeamsTeamIdFeaturesPostRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).createFeatureV1TeamsTeamIdFeaturesPost(requestParameters.teamId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {FeaturesApiDeleteFeatureV1FeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public deleteFeatureV1FeaturesFeatureIdDelete(requestParameters: FeaturesApiDeleteFeatureV1FeaturesFeatureIdDeleteRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).deleteFeatureV1FeaturesFeatureIdDelete(requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {FeaturesApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(requestParameters: FeaturesApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDeleteRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get feature.
     * @summary Get Feature
     * @param {FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public getFeatureV1FeaturesFeatureIdGet(requestParameters: FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).getFeatureV1FeaturesFeatureIdGet(requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get feature.
     * @summary Get Feature
     * @param {FeaturesApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(requestParameters: FeaturesApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(requestParameters.teamId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters: FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters: FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest = {}, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters: FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters: FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters.teamId, requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters: FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters: FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Features.
     * @summary List Features
     * @param {FeaturesApiListFeaturesV1FeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listFeaturesV1FeaturesGet(requestParameters: FeaturesApiListFeaturesV1FeaturesGetRequest = {}, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listFeaturesV1FeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Features.
     * @summary List Features
     * @param {FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listFeaturesV1TeamsTeamIdFeaturesGet(requestParameters: FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listFeaturesV1TeamsTeamIdFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get features in model.
     * @summary List Model Features
     * @param {FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listModelFeaturesV1ModelsModelIdFeaturesGet(requestParameters: FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listModelFeaturesV1ModelsModelIdFeaturesGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get features in model.
     * @summary List Model Features
     * @param {FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(requestParameters: FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters: FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters: FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
     * @summary Patch Feature
     * @param {FeaturesApiPatchFeatureV1FeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public patchFeatureV1FeaturesFeatureIdPatch(requestParameters: FeaturesApiPatchFeatureV1FeaturesFeatureIdPatchRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).patchFeatureV1FeaturesFeatureIdPatch(requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
     * @summary Patch Feature
     * @param {FeaturesApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(requestParameters: FeaturesApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatchRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(requestParameters.teamId, requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {FeaturesApiPatchMultipleFeaturesV1FeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public patchMultipleFeaturesV1FeaturesPatch(requestParameters: FeaturesApiPatchMultipleFeaturesV1FeaturesPatchRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).patchMultipleFeaturesV1FeaturesPatch(requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {FeaturesApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(requestParameters: FeaturesApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatchRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(requestParameters.teamId, requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters: FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.datasetId, requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {FeaturesApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters: FeaturesApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {FeaturesApiReplaceFeatureV1FeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public replaceFeatureV1FeaturesFeatureIdPut(requestParameters: FeaturesApiReplaceFeatureV1FeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).replaceFeatureV1FeaturesFeatureIdPut(requestParameters.featureId, requestParameters.featureIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {FeaturesApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(requestParameters: FeaturesApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.featureId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FindingsApi - axios parameter creator
 * @export
 */
export const FindingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get study findings via dois and association ids.
         * @summary Get Study Findings Ans Systemdb Metadata From List Of Association Ids
         * @param {StudyFindingsIn} studyFindingsIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPost: async (studyFindingsIn: StudyFindingsIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyFindingsIn' is not null or undefined
            assertParamExists('getStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPost', 'studyFindingsIn', studyFindingsIn)
            const localVarPath = `/v1/findings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyFindingsIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FindingsApi - functional programming interface
 * @export
 */
export const FindingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FindingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get study findings via dois and association ids.
         * @summary Get Study Findings Ans Systemdb Metadata From List Of Association Ids
         * @param {StudyFindingsIn} studyFindingsIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPost(studyFindingsIn: StudyFindingsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyFindingsOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPost(studyFindingsIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FindingsApi - factory interface
 * @export
 */
export const FindingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FindingsApiFp(configuration)
    return {
        /**
         * Get study findings via dois and association ids.
         * @summary Get Study Findings Ans Systemdb Metadata From List Of Association Ids
         * @param {StudyFindingsIn} studyFindingsIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPost(studyFindingsIn: StudyFindingsIn, options?: any): AxiosPromise<StudyFindingsOut> {
            return localVarFp.getStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPost(studyFindingsIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPost operation in FindingsApi.
 * @export
 * @interface FindingsApiGetStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPostRequest
 */
export interface FindingsApiGetStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPostRequest {
    /**
     * 
     * @type {StudyFindingsIn}
     * @memberof FindingsApiGetStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPost
     */
    readonly studyFindingsIn: StudyFindingsIn
}

/**
 * FindingsApi - object-oriented interface
 * @export
 * @class FindingsApi
 * @extends {BaseAPI}
 */
export class FindingsApi extends BaseAPI {
    /**
     * Get study findings via dois and association ids.
     * @summary Get Study Findings Ans Systemdb Metadata From List Of Association Ids
     * @param {FindingsApiGetStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FindingsApi
     */
    public getStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPost(requestParameters: FindingsApiGetStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPostRequest, options?: AxiosRequestConfig) {
        return FindingsApiFp(this.configuration).getStudyFindingsAnsSystemDBMetadataFromListOfAssociationIdsV1FindingsPost(requestParameters.studyFindingsIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GraphApi - axios parameter creator
 * @export
 */
export const GraphApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet: async (teamId: string, minRelationshipStrength?: number, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getConceptGraphV1GraphConceptGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/graph/concept_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet: async (teamId: string, minRelationshipStrength?: number, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getConceptGraphV1TeamsTeamIdGraphConceptGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/concept_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getDatasetGraphV1GraphDatasetGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/graph/dataset_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/dataset_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1GraphMetricsMetricIdGet: async (metricId: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metricId' is not null or undefined
            assertParamExists('getMetricNodeGraphV1GraphMetricsMetricIdGet', 'metricId', metricId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getMetricNodeGraphV1GraphMetricsMetricIdGet', 'teamId', teamId)
            const localVarPath = `/v1/graph/metrics/{metric_id}`
                .replace(`{${"metric_id"}}`, encodeURIComponent(String(metricId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet: async (metricId: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metricId' is not null or undefined
            assertParamExists('getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet', 'metricId', metricId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/metrics/{metric_id}`
                .replace(`{${"metric_id"}}`, encodeURIComponent(String(metricId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1 
         * @param {string} metricId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get: async (metricId1: string, metricId2: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metricId1' is not null or undefined
            assertParamExists('getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get', 'metricId1', metricId1)
            // verify required parameter 'metricId2' is not null or undefined
            assertParamExists('getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get', 'metricId2', metricId2)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get', 'teamId', teamId)
            const localVarPath = `/v1/graph/metrics/{metric_id_1}/relationship/{metric_id_2}`
                .replace(`{${"metric_id_1"}}`, encodeURIComponent(String(metricId1)))
                .replace(`{${"metric_id_2"}}`, encodeURIComponent(String(metricId2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1 
         * @param {string} metricId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get: async (metricId1: string, metricId2: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metricId1' is not null or undefined
            assertParamExists('getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get', 'metricId1', metricId1)
            // verify required parameter 'metricId2' is not null or undefined
            assertParamExists('getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get', 'metricId2', metricId2)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/metrics/{metric_id_1}/relationship/{metric_id_2}`
                .replace(`{${"metric_id_1"}}`, encodeURIComponent(String(metricId1)))
                .replace(`{${"metric_id_2"}}`, encodeURIComponent(String(metricId2)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId 
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1GraphSemanticGraphGet: async (teamId: string, topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, minStrength?: number, minCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getSemanticGraphV1GraphSemanticGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/graph/semantic_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (topic1 !== undefined) {
                localVarQueryParameter['topic_1'] = topic1;
            }

            if (topic2 !== undefined) {
                localVarQueryParameter['topic_2'] = topic2;
            }

            if (ids1) {
                localVarQueryParameter['ids_1'] = ids1;
            }

            if (ids2) {
                localVarQueryParameter['ids_2'] = ids2;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (minCount !== undefined) {
                localVarQueryParameter['min_count'] = minCount;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId 
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet: async (teamId: string, topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, minStrength?: number, minCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/semantic_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (topic1 !== undefined) {
                localVarQueryParameter['topic_1'] = topic1;
            }

            if (topic2 !== undefined) {
                localVarQueryParameter['topic_2'] = topic2;
            }

            if (ids1) {
                localVarQueryParameter['ids_1'] = ids1;
            }

            if (ids2) {
                localVarQueryParameter['ids_2'] = ids2;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (minCount !== undefined) {
                localVarQueryParameter['min_count'] = minCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Graph
         * @param {string} teamId 
         * @param {boolean} [randomSubset] Flag for getting a random subset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1GraphTopicGraphGet: async (teamId: string, randomSubset?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTopicGraphV1GraphTopicGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/graph/topic_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (randomSubset !== undefined) {
                localVarQueryParameter['random_subset'] = randomSubset;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Graph
         * @param {string} teamId 
         * @param {boolean} [randomSubset] Flag for getting a random subset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1TeamsTeamIdGraphTopicGraphGet: async (teamId: string, randomSubset?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTopicGraphV1TeamsTeamIdGraphTopicGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/topic_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (randomSubset !== undefined) {
                localVarQueryParameter['random_subset'] = randomSubset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1GraphTopicsTopicIdGet: async (topicId: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicId' is not null or undefined
            assertParamExists('getTopicNodeGraphV1GraphTopicsTopicIdGet', 'topicId', topicId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTopicNodeGraphV1GraphTopicsTopicIdGet', 'teamId', teamId)
            const localVarPath = `/v1/graph/topics/{topic_id}`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet: async (topicId: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicId' is not null or undefined
            assertParamExists('getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet', 'topicId', topicId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/topics/{topic_id}`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1 
         * @param {string} topicId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get: async (topicId1: string, topicId2: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicId1' is not null or undefined
            assertParamExists('getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get', 'topicId1', topicId1)
            // verify required parameter 'topicId2' is not null or undefined
            assertParamExists('getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get', 'topicId2', topicId2)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get', 'teamId', teamId)
            const localVarPath = `/v1/graph/topics/{topic_id_1}/relationship/{topic_id_2}`
                .replace(`{${"topic_id_1"}}`, encodeURIComponent(String(topicId1)))
                .replace(`{${"topic_id_2"}}`, encodeURIComponent(String(topicId2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1 
         * @param {string} topicId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get: async (topicId1: string, topicId2: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicId1' is not null or undefined
            assertParamExists('getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get', 'topicId1', topicId1)
            // verify required parameter 'topicId2' is not null or undefined
            assertParamExists('getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get', 'topicId2', topicId2)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/topics/{topic_id_1}/relationship/{topic_id_2}`
                .replace(`{${"topic_id_1"}}`, encodeURIComponent(String(topicId1)))
                .replace(`{${"topic_id_2"}}`, encodeURIComponent(String(topicId2)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GraphApi - functional programming interface
 * @export
 */
export const GraphApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GraphApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConceptGraphV1GraphConceptGraphGet(teamId: string, minRelationshipStrength?: number, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConceptGraphV1GraphConceptGraphGet(teamId, minRelationshipStrength, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId: string, minRelationshipStrength?: number, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetGraphV1GraphDatasetGraphGet(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatasetGraphV1GraphDatasetGraphGet(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetricNodeGraphV1GraphMetricsMetricIdGet(metricId: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricNodeGraphV1GraphMetricsMetricIdGet(metricId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1 
         * @param {string} metricId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(metricId1: string, metricId2: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1 
         * @param {string} metricId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1: string, metricId2: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId 
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSemanticGraphV1GraphSemanticGraphGet(teamId: string, topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, minStrength?: number, minCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSemanticGraphV1GraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId 
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId: string, topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, minStrength?: number, minCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Graph
         * @param {string} teamId 
         * @param {boolean} [randomSubset] Flag for getting a random subset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicGraphV1GraphTopicGraphGet(teamId: string, randomSubset?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopicGraphV1GraphTopicGraphGet(teamId, randomSubset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Graph
         * @param {string} teamId 
         * @param {boolean} [randomSubset] Flag for getting a random subset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId: string, randomSubset?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId, randomSubset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicNodeGraphV1GraphTopicsTopicIdGet(topicId: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopicNodeGraphV1GraphTopicsTopicIdGet(topicId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1 
         * @param {string} topicId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(topicId1: string, topicId2: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1 
         * @param {string} topicId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1: string, topicId2: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GraphApi - factory interface
 * @export
 */
export const GraphApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GraphApiFp(configuration)
    return {
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet(teamId: string, minRelationshipStrength?: number, tags?: Array<string>, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getConceptGraphV1GraphConceptGraphGet(teamId, minRelationshipStrength, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId: string, minRelationshipStrength?: number, tags?: Array<string>, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet(teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getDatasetGraphV1GraphDatasetGraphGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1GraphMetricsMetricIdGet(metricId: string, teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getMetricNodeGraphV1GraphMetricsMetricIdGet(metricId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId: string, teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1 
         * @param {string} metricId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(metricId1: string, metricId2: string, teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1 
         * @param {string} metricId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1: string, metricId2: string, teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId 
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1GraphSemanticGraphGet(teamId: string, topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, minStrength?: number, minCount?: number, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getSemanticGraphV1GraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId 
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId: string, topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, minStrength?: number, minCount?: number, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Graph
         * @param {string} teamId 
         * @param {boolean} [randomSubset] Flag for getting a random subset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1GraphTopicGraphGet(teamId: string, randomSubset?: boolean, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getTopicGraphV1GraphTopicGraphGet(teamId, randomSubset, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Graph
         * @param {string} teamId 
         * @param {boolean} [randomSubset] Flag for getting a random subset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId: string, randomSubset?: boolean, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId, randomSubset, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1GraphTopicsTopicIdGet(topicId: string, teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getTopicNodeGraphV1GraphTopicsTopicIdGet(topicId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId: string, teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1 
         * @param {string} topicId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(topicId1: string, topicId2: string, teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1 
         * @param {string} topicId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1: string, topicId2: string, teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getConceptGraphV1GraphConceptGraphGet operation in GraphApi.
 * @export
 * @interface GraphApiGetConceptGraphV1GraphConceptGraphGetRequest
 */
export interface GraphApiGetConceptGraphV1GraphConceptGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetConceptGraphV1GraphConceptGraphGet
     */
    readonly teamId: string

    /**
     * Min strength
     * @type {number}
     * @memberof GraphApiGetConceptGraphV1GraphConceptGraphGet
     */
    readonly minRelationshipStrength?: number

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof GraphApiGetConceptGraphV1GraphConceptGraphGet
     */
    readonly tags?: Array<string>
}

/**
 * Request parameters for getConceptGraphV1TeamsTeamIdGraphConceptGraphGet operation in GraphApi.
 * @export
 * @interface GraphApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGetRequest
 */
export interface GraphApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGet
     */
    readonly teamId: string

    /**
     * Min strength
     * @type {number}
     * @memberof GraphApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGet
     */
    readonly minRelationshipStrength?: number

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof GraphApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGet
     */
    readonly tags?: Array<string>
}

/**
 * Request parameters for getDatasetGraphV1GraphDatasetGraphGet operation in GraphApi.
 * @export
 * @interface GraphApiGetDatasetGraphV1GraphDatasetGraphGetRequest
 */
export interface GraphApiGetDatasetGraphV1GraphDatasetGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetDatasetGraphV1GraphDatasetGraphGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet operation in GraphApi.
 * @export
 * @interface GraphApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGetRequest
 */
export interface GraphApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getMetricNodeGraphV1GraphMetricsMetricIdGet operation in GraphApi.
 * @export
 * @interface GraphApiGetMetricNodeGraphV1GraphMetricsMetricIdGetRequest
 */
export interface GraphApiGetMetricNodeGraphV1GraphMetricsMetricIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricNodeGraphV1GraphMetricsMetricIdGet
     */
    readonly metricId: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricNodeGraphV1GraphMetricsMetricIdGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet operation in GraphApi.
 * @export
 * @interface GraphApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGetRequest
 */
export interface GraphApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet
     */
    readonly metricId: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get operation in GraphApi.
 * @export
 * @interface GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2GetRequest
 */
export interface GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2GetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get
     */
    readonly metricId1: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get
     */
    readonly metricId2: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get
     */
    readonly teamId: string
}

/**
 * Request parameters for getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get operation in GraphApi.
 * @export
 * @interface GraphApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2GetRequest
 */
export interface GraphApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2GetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get
     */
    readonly metricId1: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get
     */
    readonly metricId2: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get
     */
    readonly teamId: string
}

/**
 * Request parameters for getSemanticGraphV1GraphSemanticGraphGet operation in GraphApi.
 * @export
 * @interface GraphApiGetSemanticGraphV1GraphSemanticGraphGetRequest
 */
export interface GraphApiGetSemanticGraphV1GraphSemanticGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetSemanticGraphV1GraphSemanticGraphGet
     */
    readonly teamId: string

    /**
     * Topic 1
     * @type {string}
     * @memberof GraphApiGetSemanticGraphV1GraphSemanticGraphGet
     */
    readonly topic1?: string

    /**
     * Topic 2
     * @type {string}
     * @memberof GraphApiGetSemanticGraphV1GraphSemanticGraphGet
     */
    readonly topic2?: string

    /**
     * Topic 1 ids
     * @type {Array<string>}
     * @memberof GraphApiGetSemanticGraphV1GraphSemanticGraphGet
     */
    readonly ids1?: Array<string>

    /**
     * Topic 2 ids
     * @type {Array<string>}
     * @memberof GraphApiGetSemanticGraphV1GraphSemanticGraphGet
     */
    readonly ids2?: Array<string>

    /**
     * Min strength
     * @type {number}
     * @memberof GraphApiGetSemanticGraphV1GraphSemanticGraphGet
     */
    readonly minStrength?: number

    /**
     * Min count
     * @type {number}
     * @memberof GraphApiGetSemanticGraphV1GraphSemanticGraphGet
     */
    readonly minCount?: number
}

/**
 * Request parameters for getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet operation in GraphApi.
 * @export
 * @interface GraphApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGetRequest
 */
export interface GraphApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly teamId: string

    /**
     * Topic 1
     * @type {string}
     * @memberof GraphApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly topic1?: string

    /**
     * Topic 2
     * @type {string}
     * @memberof GraphApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly topic2?: string

    /**
     * Topic 1 ids
     * @type {Array<string>}
     * @memberof GraphApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly ids1?: Array<string>

    /**
     * Topic 2 ids
     * @type {Array<string>}
     * @memberof GraphApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly ids2?: Array<string>

    /**
     * Min strength
     * @type {number}
     * @memberof GraphApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly minStrength?: number

    /**
     * Min count
     * @type {number}
     * @memberof GraphApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly minCount?: number
}

/**
 * Request parameters for getTopicGraphV1GraphTopicGraphGet operation in GraphApi.
 * @export
 * @interface GraphApiGetTopicGraphV1GraphTopicGraphGetRequest
 */
export interface GraphApiGetTopicGraphV1GraphTopicGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicGraphV1GraphTopicGraphGet
     */
    readonly teamId: string

    /**
     * Flag for getting a random subset.
     * @type {boolean}
     * @memberof GraphApiGetTopicGraphV1GraphTopicGraphGet
     */
    readonly randomSubset?: boolean
}

/**
 * Request parameters for getTopicGraphV1TeamsTeamIdGraphTopicGraphGet operation in GraphApi.
 * @export
 * @interface GraphApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGetRequest
 */
export interface GraphApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGet
     */
    readonly teamId: string

    /**
     * Flag for getting a random subset.
     * @type {boolean}
     * @memberof GraphApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGet
     */
    readonly randomSubset?: boolean
}

/**
 * Request parameters for getTopicNodeGraphV1GraphTopicsTopicIdGet operation in GraphApi.
 * @export
 * @interface GraphApiGetTopicNodeGraphV1GraphTopicsTopicIdGetRequest
 */
export interface GraphApiGetTopicNodeGraphV1GraphTopicsTopicIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicNodeGraphV1GraphTopicsTopicIdGet
     */
    readonly topicId: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicNodeGraphV1GraphTopicsTopicIdGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet operation in GraphApi.
 * @export
 * @interface GraphApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGetRequest
 */
export interface GraphApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet
     */
    readonly topicId: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get operation in GraphApi.
 * @export
 * @interface GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2GetRequest
 */
export interface GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2GetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get
     */
    readonly topicId1: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get
     */
    readonly topicId2: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get
     */
    readonly teamId: string
}

/**
 * Request parameters for getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get operation in GraphApi.
 * @export
 * @interface GraphApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2GetRequest
 */
export interface GraphApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2GetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get
     */
    readonly topicId1: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get
     */
    readonly topicId2: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get
     */
    readonly teamId: string
}

/**
 * GraphApi - object-oriented interface
 * @export
 * @class GraphApi
 * @extends {BaseAPI}
 */
export class GraphApi extends BaseAPI {
    /**
     * Fetch concept graph.
     * @summary Get Concept Graph
     * @param {GraphApiGetConceptGraphV1GraphConceptGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getConceptGraphV1GraphConceptGraphGet(requestParameters: GraphApiGetConceptGraphV1GraphConceptGraphGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getConceptGraphV1GraphConceptGraphGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch concept graph.
     * @summary Get Concept Graph
     * @param {GraphApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(requestParameters: GraphApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Dataset Graph
     * @param {GraphApiGetDatasetGraphV1GraphDatasetGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getDatasetGraphV1GraphDatasetGraphGet(requestParameters: GraphApiGetDatasetGraphV1GraphDatasetGraphGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getDatasetGraphV1GraphDatasetGraphGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Dataset Graph
     * @param {GraphApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(requestParameters: GraphApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Metric Node Graph
     * @param {GraphApiGetMetricNodeGraphV1GraphMetricsMetricIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getMetricNodeGraphV1GraphMetricsMetricIdGet(requestParameters: GraphApiGetMetricNodeGraphV1GraphMetricsMetricIdGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getMetricNodeGraphV1GraphMetricsMetricIdGet(requestParameters.metricId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Metric Node Graph
     * @param {GraphApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(requestParameters: GraphApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(requestParameters.metricId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Metric Relationship Graph
     * @param {GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(requestParameters: GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2GetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(requestParameters.metricId1, requestParameters.metricId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Metric Relationship Graph
     * @param {GraphApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(requestParameters: GraphApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2GetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(requestParameters.metricId1, requestParameters.metricId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph
     * @param {GraphApiGetSemanticGraphV1GraphSemanticGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getSemanticGraphV1GraphSemanticGraphGet(requestParameters: GraphApiGetSemanticGraphV1GraphSemanticGraphGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getSemanticGraphV1GraphSemanticGraphGet(requestParameters.teamId, requestParameters.topic1, requestParameters.topic2, requestParameters.ids1, requestParameters.ids2, requestParameters.minStrength, requestParameters.minCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph
     * @param {GraphApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(requestParameters: GraphApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(requestParameters.teamId, requestParameters.topic1, requestParameters.topic2, requestParameters.ids1, requestParameters.ids2, requestParameters.minStrength, requestParameters.minCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Topic Graph
     * @param {GraphApiGetTopicGraphV1GraphTopicGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getTopicGraphV1GraphTopicGraphGet(requestParameters: GraphApiGetTopicGraphV1GraphTopicGraphGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getTopicGraphV1GraphTopicGraphGet(requestParameters.teamId, requestParameters.randomSubset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Topic Graph
     * @param {GraphApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(requestParameters: GraphApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(requestParameters.teamId, requestParameters.randomSubset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Topic Node Graph
     * @param {GraphApiGetTopicNodeGraphV1GraphTopicsTopicIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getTopicNodeGraphV1GraphTopicsTopicIdGet(requestParameters: GraphApiGetTopicNodeGraphV1GraphTopicsTopicIdGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getTopicNodeGraphV1GraphTopicsTopicIdGet(requestParameters.topicId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Topic Node Graph
     * @param {GraphApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(requestParameters: GraphApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(requestParameters.topicId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Topic Relationship Graph
     * @param {GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(requestParameters: GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2GetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(requestParameters.topicId1, requestParameters.topicId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Topic Relationship Graph
     * @param {GraphApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(requestParameters: GraphApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2GetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(requestParameters.topicId1, requestParameters.topicId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IndexedSourcesApi - axios parameter creator
 * @export
 */
export const IndexedSourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List Indexed Sources.  Paginated list of all Indexed Sources.
         * @summary Get Sources Paged
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per paginated page return
         * @param {string} [q] Search query
         * @param {string} [filterBy] Filters for search results
         * @param {string} [sortBy] Sorts for search results
         * @param {string} [queryBy] Fields to query
         * @param {string} [facetBy] Fields to facet on
         * @param {string} [facetQuery] Search query for facets
         * @param {number} [maxFacetValues] Max number of facet values returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourcesPagedV1IndexedSourcesGet: async (page?: number, perPage?: number, q?: string, filterBy?: string, sortBy?: string, queryBy?: string, facetBy?: string, facetQuery?: string, maxFacetValues?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/indexed-sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (filterBy !== undefined) {
                localVarQueryParameter['filter_by'] = filterBy;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (queryBy !== undefined) {
                localVarQueryParameter['query_by'] = queryBy;
            }

            if (facetBy !== undefined) {
                localVarQueryParameter['facet_by'] = facetBy;
            }

            if (facetQuery !== undefined) {
                localVarQueryParameter['facet_query'] = facetQuery;
            }

            if (maxFacetValues !== undefined) {
                localVarQueryParameter['max_facet_values'] = maxFacetValues;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndexedSourcesApi - functional programming interface
 * @export
 */
export const IndexedSourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IndexedSourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * List Indexed Sources.  Paginated list of all Indexed Sources.
         * @summary Get Sources Paged
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per paginated page return
         * @param {string} [q] Search query
         * @param {string} [filterBy] Filters for search results
         * @param {string} [sortBy] Sorts for search results
         * @param {string} [queryBy] Fields to query
         * @param {string} [facetBy] Fields to facet on
         * @param {string} [facetQuery] Search query for facets
         * @param {number} [maxFacetValues] Max number of facet values returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSourcesPagedV1IndexedSourcesGet(page?: number, perPage?: number, q?: string, filterBy?: string, sortBy?: string, queryBy?: string, facetBy?: string, facetQuery?: string, maxFacetValues?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexedSourcesOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSourcesPagedV1IndexedSourcesGet(page, perPage, q, filterBy, sortBy, queryBy, facetBy, facetQuery, maxFacetValues, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IndexedSourcesApi - factory interface
 * @export
 */
export const IndexedSourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IndexedSourcesApiFp(configuration)
    return {
        /**
         * List Indexed Sources.  Paginated list of all Indexed Sources.
         * @summary Get Sources Paged
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per paginated page return
         * @param {string} [q] Search query
         * @param {string} [filterBy] Filters for search results
         * @param {string} [sortBy] Sorts for search results
         * @param {string} [queryBy] Fields to query
         * @param {string} [facetBy] Fields to facet on
         * @param {string} [facetQuery] Search query for facets
         * @param {number} [maxFacetValues] Max number of facet values returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourcesPagedV1IndexedSourcesGet(page?: number, perPage?: number, q?: string, filterBy?: string, sortBy?: string, queryBy?: string, facetBy?: string, facetQuery?: string, maxFacetValues?: number, options?: any): AxiosPromise<IndexedSourcesOut> {
            return localVarFp.getSourcesPagedV1IndexedSourcesGet(page, perPage, q, filterBy, sortBy, queryBy, facetBy, facetQuery, maxFacetValues, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSourcesPagedV1IndexedSourcesGet operation in IndexedSourcesApi.
 * @export
 * @interface IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGetRequest
 */
export interface IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGetRequest {
    /**
     * Page number
     * @type {number}
     * @memberof IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGet
     */
    readonly page?: number

    /**
     * Number of results per paginated page return
     * @type {number}
     * @memberof IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGet
     */
    readonly perPage?: number

    /**
     * Search query
     * @type {string}
     * @memberof IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGet
     */
    readonly q?: string

    /**
     * Filters for search results
     * @type {string}
     * @memberof IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGet
     */
    readonly filterBy?: string

    /**
     * Sorts for search results
     * @type {string}
     * @memberof IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGet
     */
    readonly sortBy?: string

    /**
     * Fields to query
     * @type {string}
     * @memberof IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGet
     */
    readonly queryBy?: string

    /**
     * Fields to facet on
     * @type {string}
     * @memberof IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGet
     */
    readonly facetBy?: string

    /**
     * Search query for facets
     * @type {string}
     * @memberof IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGet
     */
    readonly facetQuery?: string

    /**
     * Max number of facet values returned
     * @type {number}
     * @memberof IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGet
     */
    readonly maxFacetValues?: number
}

/**
 * IndexedSourcesApi - object-oriented interface
 * @export
 * @class IndexedSourcesApi
 * @extends {BaseAPI}
 */
export class IndexedSourcesApi extends BaseAPI {
    /**
     * List Indexed Sources.  Paginated list of all Indexed Sources.
     * @summary Get Sources Paged
     * @param {IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexedSourcesApi
     */
    public getSourcesPagedV1IndexedSourcesGet(requestParameters: IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGetRequest = {}, options?: AxiosRequestConfig) {
        return IndexedSourcesApiFp(this.configuration).getSourcesPagedV1IndexedSourcesGet(requestParameters.page, requestParameters.perPage, requestParameters.q, requestParameters.filterBy, requestParameters.sortBy, requestParameters.queryBy, requestParameters.facetBy, requestParameters.facetQuery, requestParameters.maxFacetValues, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ModeldbApi - axios parameter creator
 * @export
 */
export const ModeldbApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet: async (algorithmId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algorithmId' is not null or undefined
            assertParamExists('getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet', 'algorithmId', algorithmId)
            const localVarPath = `/v1/modeldb/algorithms/{algorithm_id}`
                .replace(`{${"algorithm_id"}}`, encodeURIComponent(String(algorithmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet: async (algorithmClass?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/modeldb/algorithms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (algorithmClass !== undefined) {
                localVarQueryParameter['algorithm_class'] = algorithmClass;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModeldbApi - functional programming interface
 * @export
 */
export const ModeldbApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModeldbApiAxiosParamCreator(configuration)
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgorithmOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgorithmListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModeldbApi - factory interface
 * @export
 */
export const ModeldbApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModeldbApiFp(configuration)
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId: string, options?: any): AxiosPromise<AlgorithmOut> {
            return localVarFp.getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options).then((request) => request(axios, basePath));
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass?: string, options?: any): AxiosPromise<AlgorithmListResult> {
            return localVarFp.listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet operation in ModeldbApi.
 * @export
 * @interface ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest
 */
export interface ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet
     */
    readonly algorithmId: string
}

/**
 * Request parameters for listAlgorithmsV1ModeldbAlgorithmsGet operation in ModeldbApi.
 * @export
 * @interface ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest
 */
export interface ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGet
     */
    readonly algorithmClass?: string
}

/**
 * ModeldbApi - object-oriented interface
 * @export
 * @class ModeldbApi
 * @extends {BaseAPI}
 */
export class ModeldbApi extends BaseAPI {
    /**
     * Get algorithms by id.
     * @summary Get Algorithm
     * @param {ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    public getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(requestParameters: ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest, options?: AxiosRequestConfig) {
        return ModeldbApiFp(this.configuration).getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(requestParameters.algorithmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List available algorithms in ModelDB. Search with algorithm class if passed.
     * @summary List Algorithms
     * @param {ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    public listAlgorithmsV1ModeldbAlgorithmsGet(requestParameters: ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest = {}, options?: AxiosRequestConfig) {
        return ModeldbApiFp(this.configuration).listAlgorithmsV1ModeldbAlgorithmsGet(requestParameters.algorithmClass, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ModelsApi - axios parameter creator
 * @export
 */
export const ModelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost: async (modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('createAssociationsV1ModelsModelIdAssociationsPost', 'modelId', modelId)
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            assertParamExists('createAssociationsV1ModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn)
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost: async (teamId: string, modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'modelId', modelId)
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost: async (studyId: string, modelIn: Array<ModelIn>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('createModelsV1StudiesStudyIdModelsPost', 'studyId', studyId)
            // verify required parameter 'modelIn' is not null or undefined
            assertParamExists('createModelsV1StudiesStudyIdModelsPost', 'modelIn', modelIn)
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost: async (teamId: string, studyId: string, modelIn: Array<ModelIn>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'studyId', studyId)
            // verify required parameter 'modelIn' is not null or undefined
            assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'modelIn', modelIn)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete: async (modelId: string, associationId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId)
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete: async (teamId: string, modelId: string, associationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete: async (modelId: string, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteAssociationsV1ModelsModelIdAssociationsDelete', 'modelId', modelId)
            // verify required parameter 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete' is not null or undefined
            assertParamExists('deleteAssociationsV1ModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete)
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: async (teamId: string, modelId: string, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'modelId', modelId)
            // verify required parameter 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete' is not null or undefined
            assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete: async (modelId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteModelV1ModelsModelIdDelete', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete: async (teamId: string, modelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteModelV1TeamsTeamIdModelsModelIdDelete', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteModelV1TeamsTeamIdModelsModelIdDelete', 'modelId', modelId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: async (associationId: string, modelId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet: async (teamId: string, associationId: string, modelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet: async (modelId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getModelV1ModelsModelIdGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet: async (teamId: string, modelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getModelV1TeamsTeamIdModelsModelIdGet', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getModelV1TeamsTeamIdModelsModelIdGet', 'modelId', modelId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: async (modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listAssociationsV1ModelsModelIdAssociationsGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet: async (teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet', 'modelId', modelId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet: async (modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listModelFeaturesV1ModelsModelIdFeaturesGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/features`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet: async (teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet', 'modelId', modelId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet: async (studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listModelsInStudyV1StudiesStudyIdModelsGet', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet: async (teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listModelsV1TeamsTeamIdModelsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserModelsV1TeamsTeamIdUsersUserIdModelsGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserModelsV1TeamsTeamIdUsersUserIdModelsGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserModelsV1UsersUserIdModelsGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch: async (modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('patchAssociationsV1ModelsModelIdAssociationsPatch', 'modelId', modelId)
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            assertParamExists('patchAssociationsV1ModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp)
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch: async (teamId: string, modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'modelId', modelId)
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId 
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch: async (modelId: string, patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('patchModelV1ModelsModelIdPatch', 'modelId', modelId)
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            assertParamExists('patchModelV1ModelsModelIdPatch', 'patchModelOpArrayPatchModelOp', patchModelOpArrayPatchModelOp)
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchModelOpArrayPatchModelOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch: async (teamId: string, modelId: string, patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchModelV1TeamsTeamIdModelsModelIdPatch', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('patchModelV1TeamsTeamIdModelsModelIdPatch', 'modelId', modelId)
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            assertParamExists('patchModelV1TeamsTeamIdModelsModelIdPatch', 'patchModelOpArrayPatchModelOp', patchModelOpArrayPatchModelOp)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchModelOpArrayPatchModelOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost: async (associationId: string, modelId: string, directionIn: DirectionIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost', 'associationId', associationId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost', 'modelId', modelId)
            // verify required parameter 'directionIn' is not null or undefined
            assertParamExists('postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost', 'directionIn', directionIn)
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}/directed_at`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(directionIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost: async (teamId: string, associationId: string, modelId: string, directionIn: DirectionIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'associationId', associationId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'modelId', modelId)
            // verify required parameter 'directionIn' is not null or undefined
            assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'directionIn', directionIn)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}/directed_at`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(directionIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId 
         * @param {ModelIn} modelIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut: async (modelId: string, modelIn: ModelIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('replaceModelV1ModelsModelIdPut', 'modelId', modelId)
            // verify required parameter 'modelIn' is not null or undefined
            assertParamExists('replaceModelV1ModelsModelIdPut', 'modelIn', modelIn)
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {ModelIn} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut: async (teamId: string, modelId: string, modelIn: ModelIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('replaceModelV1TeamsTeamIdModelsModelIdPut', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('replaceModelV1TeamsTeamIdModelsModelIdPut', 'modelId', modelId)
            // verify required parameter 'modelIn' is not null or undefined
            assertParamExists('replaceModelV1TeamsTeamIdModelsModelIdPut', 'modelIn', modelIn)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelsApi - functional programming interface
 * @export
 */
export const ModelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1ModelsModelIdAssociationsPost(modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId: string, modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModelsV1StudiesStudyIdModelsPost(studyId: string, modelIn: Array<ModelIn>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId: string, studyId: string, modelIn: Array<ModelIn>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId: string, associationId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId: string, modelId: string, associationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId: string, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId: string, modelId: string, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModelV1ModelsModelIdDelete(modelId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModelV1ModelsModelIdDelete(modelId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId: string, modelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId: string, modelId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId: string, associationId: string, modelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelV1ModelsModelIdGet(modelId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModelV1ModelsModelIdGet(modelId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelV1TeamsTeamIdModelsModelIdGet(teamId: string, modelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1ModelsModelIdAssociationsGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserModelsV1UserModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelFeaturesV1ModelsModelIdFeaturesGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsInStudyV1StudiesStudyIdModelsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsV1ModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsV1TeamsTeamIdModelsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserModelsV1UsersUserIdModelsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssociationsV1ModelsModelIdAssociationsPatch(modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId: string, modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId 
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchModelV1ModelsModelIdPatch(modelId: string, patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchModelV1TeamsTeamIdModelsModelIdPatch(teamId: string, modelId: string, patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId: string, modelId: string, directionIn: DirectionIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId, modelId, directionIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId: string, associationId: string, modelId: string, directionIn: DirectionIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId 
         * @param {ModelIn} modelIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceModelV1ModelsModelIdPut(modelId: string, modelIn: ModelIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceModelV1ModelsModelIdPut(modelId, modelIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {ModelIn} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceModelV1TeamsTeamIdModelsModelIdPut(teamId: string, modelId: string, modelIn: ModelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModelsApi - factory interface
 * @export
 */
export const ModelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelsApiFp(configuration)
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, teamId?: string, options?: any): AxiosPromise<Array<AssociationOut>> {
            return localVarFp.createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId: string, modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options?: any): AxiosPromise<Array<AssociationOut>> {
            return localVarFp.createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId: string, modelIn: Array<ModelIn>, teamId?: string, options?: any): AxiosPromise<Array<ModelOut>> {
            return localVarFp.createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId: string, studyId: string, modelIn: Array<ModelIn>, options?: any): AxiosPromise<Array<ModelOut>> {
            return localVarFp.createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId: string, associationId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId: string, modelId: string, associationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId: string, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId: string, modelId: string, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete(modelId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteModelV1ModelsModelIdDelete(modelId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId: string, modelId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId: string, modelId: string, teamId?: string, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId: string, associationId: string, modelId: string, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet(modelId: string, teamId?: string, options?: any): AxiosPromise<ModelOut> {
            return localVarFp.getModelV1ModelsModelIdGet(modelId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet(teamId: string, modelId: string, options?: any): AxiosPromise<ModelOut> {
            return localVarFp.getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId: string, modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId 
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch(modelId: string, patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch(teamId: string, modelId: string, patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId: string, modelId: string, directionIn: DirectionIn, teamId?: string, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId, modelId, directionIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId: string, associationId: string, modelId: string, directionIn: DirectionIn, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId 
         * @param {ModelIn} modelIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut(modelId: string, modelIn: ModelIn, teamId?: string, options?: any): AxiosPromise<ModelOut> {
            return localVarFp.replaceModelV1ModelsModelIdPut(modelId, modelIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {ModelIn} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut(teamId: string, modelId: string, modelIn: ModelIn, options?: any): AxiosPromise<ModelOut> {
            return localVarFp.replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAssociationsV1ModelsModelIdAssociationsPost operation in ModelsApi.
 * @export
 * @interface ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest
 */
export interface ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly modelId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>

    /**
     * 
     * @type {boolean}
     * @memberof ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly mergeFeatures?: boolean

    /**
     * 
     * @type {string}
     * @memberof ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost operation in ModelsApi.
 * @export
 * @interface ModelsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest
 */
export interface ModelsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost
     */
    readonly modelId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof ModelsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>

    /**
     * 
     * @type {boolean}
     * @memberof ModelsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost
     */
    readonly mergeFeatures?: boolean
}

/**
 * Request parameters for createModelsV1StudiesStudyIdModelsPost operation in ModelsApi.
 * @export
 * @interface ModelsApiCreateModelsV1StudiesStudyIdModelsPostRequest
 */
export interface ModelsApiCreateModelsV1StudiesStudyIdModelsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiCreateModelsV1StudiesStudyIdModelsPost
     */
    readonly studyId: string

    /**
     * 
     * @type {Array<ModelIn>}
     * @memberof ModelsApiCreateModelsV1StudiesStudyIdModelsPost
     */
    readonly modelIn: Array<ModelIn>

    /**
     * 
     * @type {string}
     * @memberof ModelsApiCreateModelsV1StudiesStudyIdModelsPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createModelsV1TeamsTeamIdStudiesStudyIdModelsPost operation in ModelsApi.
 * @export
 * @interface ModelsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest
 */
export interface ModelsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPost
     */
    readonly studyId: string

    /**
     * 
     * @type {Array<ModelIn>}
     * @memberof ModelsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPost
     */
    readonly modelIn: Array<ModelIn>
}

/**
 * Request parameters for deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete operation in ModelsApi.
 * @export
 * @interface ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest
 */
export interface ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete operation in ModelsApi.
 * @export
 * @interface ModelsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest
 */
export interface ModelsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete
     */
    readonly associationId: string
}

/**
 * Request parameters for deleteAssociationsV1ModelsModelIdAssociationsDelete operation in ModelsApi.
 * @export
 * @interface ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest
 */
export interface ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete}
     * @memberof ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDelete
     */
    readonly bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete

    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete operation in ModelsApi.
 * @export
 * @interface ModelsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest
 */
export interface ModelsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete}
     * @memberof ModelsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
     */
    readonly bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
}

/**
 * Request parameters for deleteModelV1ModelsModelIdDelete operation in ModelsApi.
 * @export
 * @interface ModelsApiDeleteModelV1ModelsModelIdDeleteRequest
 */
export interface ModelsApiDeleteModelV1ModelsModelIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteModelV1ModelsModelIdDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteModelV1ModelsModelIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for deleteModelV1TeamsTeamIdModelsModelIdDelete operation in ModelsApi.
 * @export
 * @interface ModelsApiDeleteModelV1TeamsTeamIdModelsModelIdDeleteRequest
 */
export interface ModelsApiDeleteModelV1TeamsTeamIdModelsModelIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteModelV1TeamsTeamIdModelsModelIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteModelV1TeamsTeamIdModelsModelIdDelete
     */
    readonly modelId: string
}

/**
 * Request parameters for getAssociationV1ModelsModelIdAssociationsAssociationIdGet operation in ModelsApi.
 * @export
 * @interface ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest
 */
export interface ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet operation in ModelsApi.
 * @export
 * @interface ModelsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest
 */
export interface ModelsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet
     */
    readonly modelId: string
}

/**
 * Request parameters for getModelV1ModelsModelIdGet operation in ModelsApi.
 * @export
 * @interface ModelsApiGetModelV1ModelsModelIdGetRequest
 */
export interface ModelsApiGetModelV1ModelsModelIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetModelV1ModelsModelIdGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetModelV1ModelsModelIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getModelV1TeamsTeamIdModelsModelIdGet operation in ModelsApi.
 * @export
 * @interface ModelsApiGetModelV1TeamsTeamIdModelsModelIdGetRequest
 */
export interface ModelsApiGetModelV1TeamsTeamIdModelsModelIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetModelV1TeamsTeamIdModelsModelIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetModelV1TeamsTeamIdModelsModelIdGet
     */
    readonly modelId: string
}

/**
 * Request parameters for listAssociationsV1ModelsModelIdAssociationsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest
 */
export interface ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest
 */
export interface ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly modelId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest
 */
export interface ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listAuthenticatedUserModelsV1UserModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest
 */
export interface ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly containsVariableId?: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listModelFeaturesV1ModelsModelIdFeaturesGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest
 */
export interface ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest
 */
export interface ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly modelId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listModelsInStudyV1StudiesStudyIdModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest
 */
export interface ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest
 */
export interface ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listModelsV1ModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListModelsV1ModelsGetRequest
 */
export interface ModelsApiListModelsV1ModelsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly containsVariableId?: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listModelsV1TeamsTeamIdModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListModelsV1TeamsTeamIdModelsGetRequest
 */
export interface ModelsApiListModelsV1TeamsTeamIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof ModelsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listUserModelsV1TeamsTeamIdUsersUserIdModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest
 */
export interface ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listUserModelsV1UsersUserIdModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListUserModelsV1UsersUserIdModelsGetRequest
 */
export interface ModelsApiListUserModelsV1UsersUserIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly containsVariableId?: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for patchAssociationsV1ModelsModelIdAssociationsPatch operation in ModelsApi.
 * @export
 * @interface ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest
 */
export interface ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatch
     */
    readonly modelId: string

    /**
     * 
     * @type {Array<BulkPatchAssociationOp>}
     * @memberof ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatch
     */
    readonly bulkPatchAssociationOp: Array<BulkPatchAssociationOp>

    /**
     * 
     * @type {string}
     * @memberof ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatch
     */
    readonly teamId?: string
}

/**
 * Request parameters for patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch operation in ModelsApi.
 * @export
 * @interface ModelsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest
 */
export interface ModelsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch
     */
    readonly modelId: string

    /**
     * 
     * @type {Array<BulkPatchAssociationOp>}
     * @memberof ModelsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch
     */
    readonly bulkPatchAssociationOp: Array<BulkPatchAssociationOp>
}

/**
 * Request parameters for patchModelV1ModelsModelIdPatch operation in ModelsApi.
 * @export
 * @interface ModelsApiPatchModelV1ModelsModelIdPatchRequest
 */
export interface ModelsApiPatchModelV1ModelsModelIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiPatchModelV1ModelsModelIdPatch
     */
    readonly modelId: string

    /**
     * 
     * @type {PatchModelOp | Array<PatchModelOp>}
     * @memberof ModelsApiPatchModelV1ModelsModelIdPatch
     */
    readonly patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>

    /**
     * 
     * @type {string}
     * @memberof ModelsApiPatchModelV1ModelsModelIdPatch
     */
    readonly teamId?: string
}

/**
 * Request parameters for patchModelV1TeamsTeamIdModelsModelIdPatch operation in ModelsApi.
 * @export
 * @interface ModelsApiPatchModelV1TeamsTeamIdModelsModelIdPatchRequest
 */
export interface ModelsApiPatchModelV1TeamsTeamIdModelsModelIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiPatchModelV1TeamsTeamIdModelsModelIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiPatchModelV1TeamsTeamIdModelsModelIdPatch
     */
    readonly modelId: string

    /**
     * 
     * @type {PatchModelOp | Array<PatchModelOp>}
     * @memberof ModelsApiPatchModelV1TeamsTeamIdModelsModelIdPatch
     */
    readonly patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>
}

/**
 * Request parameters for postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost operation in ModelsApi.
 * @export
 * @interface ModelsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPostRequest
 */
export interface ModelsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly modelId: string

    /**
     * 
     * @type {DirectionIn}
     * @memberof ModelsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly directionIn: DirectionIn

    /**
     * 
     * @type {string}
     * @memberof ModelsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost operation in ModelsApi.
 * @export
 * @interface ModelsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest
 */
export interface ModelsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly modelId: string

    /**
     * 
     * @type {DirectionIn}
     * @memberof ModelsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly directionIn: DirectionIn
}

/**
 * Request parameters for replaceModelV1ModelsModelIdPut operation in ModelsApi.
 * @export
 * @interface ModelsApiReplaceModelV1ModelsModelIdPutRequest
 */
export interface ModelsApiReplaceModelV1ModelsModelIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiReplaceModelV1ModelsModelIdPut
     */
    readonly modelId: string

    /**
     * 
     * @type {ModelIn}
     * @memberof ModelsApiReplaceModelV1ModelsModelIdPut
     */
    readonly modelIn: ModelIn

    /**
     * 
     * @type {string}
     * @memberof ModelsApiReplaceModelV1ModelsModelIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for replaceModelV1TeamsTeamIdModelsModelIdPut operation in ModelsApi.
 * @export
 * @interface ModelsApiReplaceModelV1TeamsTeamIdModelsModelIdPutRequest
 */
export interface ModelsApiReplaceModelV1TeamsTeamIdModelsModelIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiReplaceModelV1TeamsTeamIdModelsModelIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiReplaceModelV1TeamsTeamIdModelsModelIdPut
     */
    readonly modelId: string

    /**
     * 
     * @type {ModelIn}
     * @memberof ModelsApiReplaceModelV1TeamsTeamIdModelsModelIdPut
     */
    readonly modelIn: ModelIn
}

/**
 * ModelsApi - object-oriented interface
 * @export
 * @class ModelsApi
 * @extends {BaseAPI}
 */
export class ModelsApi extends BaseAPI {
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public createAssociationsV1ModelsModelIdAssociationsPost(requestParameters: ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).createAssociationsV1ModelsModelIdAssociationsPost(requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {ModelsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters: ModelsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters.teamId, requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {ModelsApiCreateModelsV1StudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public createModelsV1StudiesStudyIdModelsPost(requestParameters: ModelsApiCreateModelsV1StudiesStudyIdModelsPostRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).createModelsV1StudiesStudyIdModelsPost(requestParameters.studyId, requestParameters.modelIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {ModelsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters: ModelsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters.teamId, requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters: ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters.modelId, requestParameters.associationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {ModelsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters: ModelsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters: ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {ModelsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters: ModelsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {ModelsApiDeleteModelV1ModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public deleteModelV1ModelsModelIdDelete(requestParameters: ModelsApiDeleteModelV1ModelsModelIdDeleteRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).deleteModelV1ModelsModelIdDelete(requestParameters.modelId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {ModelsApiDeleteModelV1TeamsTeamIdModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public deleteModelV1TeamsTeamIdModelsModelIdDelete(requestParameters: ModelsApiDeleteModelV1TeamsTeamIdModelsModelIdDeleteRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).deleteModelV1TeamsTeamIdModelsModelIdDelete(requestParameters.teamId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Association.
     * @summary Get Association
     * @param {ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters: ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Association.
     * @summary Get Association
     * @param {ModelsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters: ModelsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Model.
     * @summary Get Model
     * @param {ModelsApiGetModelV1ModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public getModelV1ModelsModelIdGet(requestParameters: ModelsApiGetModelV1ModelsModelIdGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).getModelV1ModelsModelIdGet(requestParameters.modelId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Model.
     * @summary Get Model
     * @param {ModelsApiGetModelV1TeamsTeamIdModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public getModelV1TeamsTeamIdModelsModelIdGet(requestParameters: ModelsApiGetModelV1TeamsTeamIdModelsModelIdGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).getModelV1TeamsTeamIdModelsModelIdGet(requestParameters.teamId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in model.
     * @summary List Associations
     * @param {ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listAssociationsV1ModelsModelIdAssociationsGet(requestParameters: ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in model.
     * @summary List Associations
     * @param {ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters: ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters: ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listAuthenticatedUserModelsV1UserModelsGet(requestParameters: ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest = {}, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get features in model.
     * @summary List Model Features
     * @param {ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listModelFeaturesV1ModelsModelIdFeaturesGet(requestParameters: ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listModelFeaturesV1ModelsModelIdFeaturesGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get features in model.
     * @summary List Model Features
     * @param {ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(requestParameters: ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters: ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters: ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Models.
     * @summary List Models
     * @param {ModelsApiListModelsV1ModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listModelsV1ModelsGet(requestParameters: ModelsApiListModelsV1ModelsGetRequest = {}, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listModelsV1ModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Models.
     * @summary List Models
     * @param {ModelsApiListModelsV1TeamsTeamIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listModelsV1TeamsTeamIdModelsGet(requestParameters: ModelsApiListModelsV1TeamsTeamIdModelsGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listModelsV1TeamsTeamIdModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters: ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {ModelsApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listUserModelsV1UsersUserIdModelsGet(requestParameters: ModelsApiListUserModelsV1UsersUserIdModelsGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters: ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters.modelId, requestParameters.bulkPatchAssociationOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {ModelsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters: ModelsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {ModelsApiPatchModelV1ModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public patchModelV1ModelsModelIdPatch(requestParameters: ModelsApiPatchModelV1ModelsModelIdPatchRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).patchModelV1ModelsModelIdPatch(requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {ModelsApiPatchModelV1TeamsTeamIdModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public patchModelV1TeamsTeamIdModelsModelIdPatch(requestParameters: ModelsApiPatchModelV1TeamsTeamIdModelsModelIdPatchRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).patchModelV1TeamsTeamIdModelsModelIdPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Association.
     * @summary Post Association Direction
     * @param {ModelsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters: ModelsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPostRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters.associationId, requestParameters.modelId, requestParameters.directionIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Association.
     * @summary Post Association Direction
     * @param {ModelsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters: ModelsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, requestParameters.directionIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {ModelsApiReplaceModelV1ModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public replaceModelV1ModelsModelIdPut(requestParameters: ModelsApiReplaceModelV1ModelsModelIdPutRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).replaceModelV1ModelsModelIdPut(requestParameters.modelId, requestParameters.modelIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {ModelsApiReplaceModelV1TeamsTeamIdModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public replaceModelV1TeamsTeamIdModelsModelIdPut(requestParameters: ModelsApiReplaceModelV1TeamsTeamIdModelsModelIdPutRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).replaceModelV1TeamsTeamIdModelsModelIdPut(requestParameters.teamId, requestParameters.modelId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PassthroughApi - axios parameter creator
 * @export
 */
export const PassthroughApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Forward request to crossref.
         * @summary Get Crossref
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCrossrefV1CrossrefRestOfPathGet: async (restOfPath: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restOfPath' is not null or undefined
            assertParamExists('getCrossrefV1CrossrefRestOfPathGet', 'restOfPath', restOfPath)
            const localVarPath = `/v1/crossref/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Forward request to ORCID.
         * @summary Get Orcid
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrcidV1OrcidRestOfPathGet: async (restOfPath: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restOfPath' is not null or undefined
            assertParamExists('getOrcidV1OrcidRestOfPathGet', 'restOfPath', restOfPath)
            const localVarPath = `/v1/orcid/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost: async (graphQLQuery: GraphQLQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphQLQuery' is not null or undefined
            assertParamExists('postGraphqlV1GraphqlPost', 'graphQLQuery', graphQLQuery)
            const localVarPath = `/v1/graphql`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(graphQLQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PassthroughApi - functional programming interface
 * @export
 */
export const PassthroughApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PassthroughApiAxiosParamCreator(configuration)
    return {
        /**
         * Forward request to crossref.
         * @summary Get Crossref
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCrossrefV1CrossrefRestOfPathGet(restOfPath: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCrossrefV1CrossrefRestOfPathGet(restOfPath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Forward request to ORCID.
         * @summary Get Orcid
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrcidV1OrcidRestOfPathGet(restOfPath: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrcidV1OrcidRestOfPathGet(restOfPath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGraphqlV1GraphqlPost(graphQLQuery: GraphQLQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGraphqlV1GraphqlPost(graphQLQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PassthroughApi - factory interface
 * @export
 */
export const PassthroughApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PassthroughApiFp(configuration)
    return {
        /**
         * Forward request to crossref.
         * @summary Get Crossref
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCrossrefV1CrossrefRestOfPathGet(restOfPath: any, options?: any): AxiosPromise<any> {
            return localVarFp.getCrossrefV1CrossrefRestOfPathGet(restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward request to ORCID.
         * @summary Get Orcid
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrcidV1OrcidRestOfPathGet(restOfPath: any, options?: any): AxiosPromise<any> {
            return localVarFp.getOrcidV1OrcidRestOfPathGet(restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost(graphQLQuery: GraphQLQuery, options?: any): AxiosPromise<any> {
            return localVarFp.postGraphqlV1GraphqlPost(graphQLQuery, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCrossrefV1CrossrefRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest
 */
export interface PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest {
    /**
     * 
     * @type {any}
     * @memberof PassthroughApiGetCrossrefV1CrossrefRestOfPathGet
     */
    readonly restOfPath: any
}

/**
 * Request parameters for getOrcidV1OrcidRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest
 */
export interface PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest {
    /**
     * 
     * @type {any}
     * @memberof PassthroughApiGetOrcidV1OrcidRestOfPathGet
     */
    readonly restOfPath: any
}

/**
 * Request parameters for postGraphqlV1GraphqlPost operation in PassthroughApi.
 * @export
 * @interface PassthroughApiPostGraphqlV1GraphqlPostRequest
 */
export interface PassthroughApiPostGraphqlV1GraphqlPostRequest {
    /**
     * 
     * @type {GraphQLQuery}
     * @memberof PassthroughApiPostGraphqlV1GraphqlPost
     */
    readonly graphQLQuery: GraphQLQuery
}

/**
 * PassthroughApi - object-oriented interface
 * @export
 * @class PassthroughApi
 * @extends {BaseAPI}
 */
export class PassthroughApi extends BaseAPI {
    /**
     * Forward request to crossref.
     * @summary Get Crossref
     * @param {PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    public getCrossrefV1CrossrefRestOfPathGet(requestParameters: PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest, options?: AxiosRequestConfig) {
        return PassthroughApiFp(this.configuration).getCrossrefV1CrossrefRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Forward request to ORCID.
     * @summary Get Orcid
     * @param {PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    public getOrcidV1OrcidRestOfPathGet(requestParameters: PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest, options?: AxiosRequestConfig) {
        return PassthroughApiFp(this.configuration).getOrcidV1OrcidRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Forward GraphQL request to SystemDB.
     * @summary Post Graphql
     * @param {PassthroughApiPostGraphqlV1GraphqlPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    public postGraphqlV1GraphqlPost(requestParameters: PassthroughApiPostGraphqlV1GraphqlPostRequest, options?: AxiosRequestConfig) {
        return PassthroughApiFp(this.configuration).postGraphqlV1GraphqlPost(requestParameters.graphQLQuery, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PopulationAttributeValuesApi - axios parameter creator
 * @export
 */
export const PopulationAttributeValuesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: async (datasetId: string, populationAttributeValueId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId)
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            assertParamExists('addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId)
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: async (teamId: string, datasetId: string, populationAttributeValueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId)
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete: async (populationAttributeValueId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            assertParamExists('deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId)
            const localVarPath = `/v1/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet: async (datasetId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet: async (teamId: string, datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet: async (populationAttributeValueId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            assertParamExists('getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet', 'populationAttributeValueId', populationAttributeValueId)
            const localVarPath = `/v1/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet: async (teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: PopulationAttributeValueSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/population_attribute_values`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: async (datasetId: string, populationAttributeValueId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId)
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            assertParamExists('removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId)
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: async (teamId: string, datasetId: string, populationAttributeValueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId)
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PopulationAttributeValuesApi - functional programming interface
 * @export
 */
export const PopulationAttributeValuesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PopulationAttributeValuesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId: string, populationAttributeValueId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId: string, datasetId: string, populationAttributeValueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId: string, datasetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPopulationAttributeValuesV1PopulationAttributeValuesGet(teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: PopulationAttributeValueSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PopulationAttributeValuePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPopulationAttributeValuesV1PopulationAttributeValuesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId: string, populationAttributeValueId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId: string, datasetId: string, populationAttributeValueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PopulationAttributeValuesApi - factory interface
 * @export
 */
export const PopulationAttributeValuesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PopulationAttributeValuesApiFp(configuration)
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId: string, populationAttributeValueId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId: string, datasetId: string, populationAttributeValueId: string, options?: any): AxiosPromise<void> {
            return localVarFp.addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId: string, teamId?: string, options?: any): AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>> {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId: string, datasetId: string, options?: any): AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>> {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId: string, teamId?: string, options?: any): AxiosPromise<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut> {
            return localVarFp.getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet(teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: PopulationAttributeValueSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<PopulationAttributeValuePaginationOut> {
            return localVarFp.listPopulationAttributeValuesV1PopulationAttributeValuesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId: string, populationAttributeValueId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId: string, datasetId: string, populationAttributeValueId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest
 */
export interface PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly populationAttributeValueId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest
 */
export interface PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly populationAttributeValueId: string
}

/**
 * Request parameters for deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDeleteRequest
 */
export interface PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly populationAttributeValueId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest
 */
export interface PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest
 */
export interface PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet
     */
    readonly datasetId: string
}

/**
 * Request parameters for getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGetRequest
 */
export interface PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet
     */
    readonly populationAttributeValueId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listPopulationAttributeValuesV1PopulationAttributeValuesGet operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGetRequest
 */
export interface PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {PopulationAttributeValueSortEnum}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly orderBy?: PopulationAttributeValueSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest
 */
export interface PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly populationAttributeValueId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest
 */
export interface PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly populationAttributeValueId: string
}

/**
 * PopulationAttributeValuesApi - object-oriented interface
 * @export
 * @class PopulationAttributeValuesApi
 * @extends {BaseAPI}
 */
export class PopulationAttributeValuesApi extends BaseAPI {
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters: PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest, options?: AxiosRequestConfig) {
        return PopulationAttributeValuesApiFp(this.configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.datasetId, requestParameters.populationAttributeValueId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters: PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest, options?: AxiosRequestConfig) {
        return PopulationAttributeValuesApiFp(this.configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete population attribute value.
     * @summary Delete Population Attribute Value
     * @param {PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters: PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDeleteRequest, options?: AxiosRequestConfig) {
        return PopulationAttributeValuesApiFp(this.configuration).deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.populationAttributeValueId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters: PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest, options?: AxiosRequestConfig) {
        return PopulationAttributeValuesApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.datasetId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters: PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest, options?: AxiosRequestConfig) {
        return PopulationAttributeValuesApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get population attribute value.
     * @summary Get Population Attribute Value
     * @param {PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(requestParameters: PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGetRequest, options?: AxiosRequestConfig) {
        return PopulationAttributeValuesApiFp(this.configuration).getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(requestParameters.populationAttributeValueId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List population attribute values.
     * @summary List Population Attribute Values
     * @param {PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public listPopulationAttributeValuesV1PopulationAttributeValuesGet(requestParameters: PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGetRequest = {}, options?: AxiosRequestConfig) {
        return PopulationAttributeValuesApiFp(this.configuration).listPopulationAttributeValuesV1PopulationAttributeValuesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters: PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest, options?: AxiosRequestConfig) {
        return PopulationAttributeValuesApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.datasetId, requestParameters.populationAttributeValueId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters: PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest, options?: AxiosRequestConfig) {
        return PopulationAttributeValuesApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PopulationAttributesApi - axios parameter creator
 * @export
 */
export const PopulationAttributesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost: async (populationAttributeIn: PopulationAttributeIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeIn' is not null or undefined
            assertParamExists('createPopulationAttributeV1PopulationAttributesPost', 'populationAttributeIn', populationAttributeIn)
            const localVarPath = `/v1/population_attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(populationAttributeIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId 
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost: async (populationAttributeId: string, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn: DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeId' is not null or undefined
            assertParamExists('createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost', 'populationAttributeId', populationAttributeId)
            // verify required parameter 'dateRangeInLocationInNumberRangeInCategoryInFreeTextIn' is not null or undefined
            assertParamExists('createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost', 'dateRangeInLocationInNumberRangeInCategoryInFreeTextIn', dateRangeInLocationInNumberRangeInCategoryInFreeTextIn)
            const localVarPath = `/v1/population_attributes/{population_attribute_id}/values`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete: async (populationAttributeId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeId' is not null or undefined
            assertParamExists('deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete', 'populationAttributeId', populationAttributeId)
            const localVarPath = `/v1/population_attributes/{population_attribute_id}`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet: async (populationAttributeId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeId' is not null or undefined
            assertParamExists('getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet', 'populationAttributeId', populationAttributeId)
            const localVarPath = `/v1/population_attributes/{population_attribute_id}`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet: async (populationAttributeId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: PopulationAttributeValueSortEnum, ordering?: Ordering, sortBy?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeId' is not null or undefined
            assertParamExists('listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet', 'populationAttributeId', populationAttributeId)
            const localVarPath = `/v1/population_attributes/{population_attribute_id}/values`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet: async (teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: PopulationAttributeSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/population_attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PopulationAttributesApi - functional programming interface
 * @export
 */
export const PopulationAttributesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PopulationAttributesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn: PopulationAttributeIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PopulationAttributeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId 
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId: string, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn: DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PopulationAttributeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: PopulationAttributeValueSortEnum, ordering?: Ordering, sortBy?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PopulationAttributeValuePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPopulationAttributesV1PopulationAttributesGet(teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: PopulationAttributeSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PopulationAttributePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPopulationAttributesV1PopulationAttributesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PopulationAttributesApi - factory interface
 * @export
 */
export const PopulationAttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PopulationAttributesApiFp(configuration)
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn: PopulationAttributeIn, options?: any): AxiosPromise<PopulationAttributeOut> {
            return localVarFp.createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId 
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId: string, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn: DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn, teamId?: string, options?: any): AxiosPromise<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut> {
            return localVarFp.createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId: string, teamId?: string, options?: any): AxiosPromise<PopulationAttributeOut> {
            return localVarFp.getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: PopulationAttributeValueSortEnum, ordering?: Ordering, sortBy?: string, teamId?: string, options?: any): AxiosPromise<PopulationAttributeValuePaginationOut> {
            return localVarFp.listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet(teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: PopulationAttributeSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<PopulationAttributePaginationOut> {
            return localVarFp.listPopulationAttributesV1PopulationAttributesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPopulationAttributeV1PopulationAttributesPost operation in PopulationAttributesApi.
 * @export
 * @interface PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPostRequest
 */
export interface PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPostRequest {
    /**
     * 
     * @type {PopulationAttributeIn}
     * @memberof PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPost
     */
    readonly populationAttributeIn: PopulationAttributeIn
}

/**
 * Request parameters for createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost operation in PopulationAttributesApi.
 * @export
 * @interface PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPostRequest
 */
export interface PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost
     */
    readonly populationAttributeId: string

    /**
     * 
     * @type {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn}
     * @memberof PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost
     */
    readonly dateRangeInLocationInNumberRangeInCategoryInFreeTextIn: DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete operation in PopulationAttributesApi.
 * @export
 * @interface PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDeleteRequest
 */
export interface PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete
     */
    readonly populationAttributeId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet operation in PopulationAttributesApi.
 * @export
 * @interface PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGetRequest
 */
export interface PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet
     */
    readonly populationAttributeId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet operation in PopulationAttributesApi.
 * @export
 * @interface PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGetRequest
 */
export interface PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly populationAttributeId: string

    /**
     * Search query.
     * @type {string}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {PopulationAttributeValueSortEnum}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly orderBy?: PopulationAttributeValueSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly sortBy?: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listPopulationAttributesV1PopulationAttributesGet operation in PopulationAttributesApi.
 * @export
 * @interface PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGetRequest
 */
export interface PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {PopulationAttributeSortEnum}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly orderBy?: PopulationAttributeSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly sortBy?: string
}

/**
 * PopulationAttributesApi - object-oriented interface
 * @export
 * @class PopulationAttributesApi
 * @extends {BaseAPI}
 */
export class PopulationAttributesApi extends BaseAPI {
    /**
     * Create a population attribute.
     * @summary Create Population Attribute
     * @param {PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    public createPopulationAttributeV1PopulationAttributesPost(requestParameters: PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPostRequest, options?: AxiosRequestConfig) {
        return PopulationAttributesApiFp(this.configuration).createPopulationAttributeV1PopulationAttributesPost(requestParameters.populationAttributeIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a population attribute value.
     * @summary Create Population Attribute Value
     * @param {PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    public createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(requestParameters: PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPostRequest, options?: AxiosRequestConfig) {
        return PopulationAttributesApiFp(this.configuration).createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(requestParameters.populationAttributeId, requestParameters.dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete population attribute.
     * @summary Delete Population Attribute
     * @param {PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    public deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(requestParameters: PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDeleteRequest, options?: AxiosRequestConfig) {
        return PopulationAttributesApiFp(this.configuration).deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(requestParameters.populationAttributeId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get population attribute.
     * @summary Get Population Attribute
     * @param {PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    public getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(requestParameters: PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGetRequest, options?: AxiosRequestConfig) {
        return PopulationAttributesApiFp(this.configuration).getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(requestParameters.populationAttributeId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a population attribute\'s values.
     * @summary List A Population Attributes Values
     * @param {PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    public listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(requestParameters: PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGetRequest, options?: AxiosRequestConfig) {
        return PopulationAttributesApiFp(this.configuration).listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(requestParameters.populationAttributeId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List population attributes.
     * @summary List Population Attributes
     * @param {PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    public listPopulationAttributesV1PopulationAttributesGet(requestParameters: PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGetRequest = {}, options?: AxiosRequestConfig) {
        return PopulationAttributesApiFp(this.configuration).listPopulationAttributesV1PopulationAttributesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RelationshipsApi - axios parameter creator
 * @export
 */
export const RelationshipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId 
         * @param {string} [directedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1RelationshipsRelationshipIdSynthesisGet: async (relationshipId: any, directedAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relationshipId' is not null or undefined
            assertParamExists('getSynthesisV1RelationshipsRelationshipIdSynthesisGet', 'relationshipId', relationshipId)
            const localVarPath = `/v1/relationships/{relationship_id}/synthesis`
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (directedAt !== undefined) {
                localVarQueryParameter['directed_at'] = directedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId 
         * @param {string} teamId 
         * @param {string} [directedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet: async (relationshipId: any, teamId: string, directedAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relationshipId' is not null or undefined
            assertParamExists('getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet', 'relationshipId', relationshipId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/relationships/{relationship_id}/synthesis`
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (directedAt !== undefined) {
                localVarQueryParameter['directed_at'] = directedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1RelationshipsGet: async (query?: string, includeHidden?: boolean, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, sortBy?: string, directionality?: number, originQuery?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/relationships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (directionality !== undefined) {
                localVarQueryParameter['directionality'] = directionality;
            }

            if (originQuery !== undefined) {
                localVarQueryParameter['origin_query'] = originQuery;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1TeamsTeamIdRelationshipsGet: async (teamId: string, query?: string, includeHidden?: boolean, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, sortBy?: string, directionality?: number, originQuery?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listRelationshipsV1TeamsTeamIdRelationshipsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/relationships`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (directionality !== undefined) {
                localVarQueryParameter['directionality'] = directionality;
            }

            if (originQuery !== undefined) {
                localVarQueryParameter['origin_query'] = originQuery;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RelationshipsApi - functional programming interface
 * @export
 */
export const RelationshipsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RelationshipsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId 
         * @param {string} [directedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSynthesisV1RelationshipsRelationshipIdSynthesisGet(relationshipId: any, directedAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicRelationshipSynthesisOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSynthesisV1RelationshipsRelationshipIdSynthesisGet(relationshipId, directedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId 
         * @param {string} teamId 
         * @param {string} [directedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId: any, teamId: string, directedAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicRelationshipSynthesisOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId, teamId, directedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRelationshipsV1RelationshipsGet(query?: string, includeHidden?: boolean, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, sortBy?: string, directionality?: number, originQuery?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRelationshipsV1RelationshipsGet(query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId: string, query?: string, includeHidden?: boolean, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, sortBy?: string, directionality?: number, originQuery?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RelationshipsApi - factory interface
 * @export
 */
export const RelationshipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RelationshipsApiFp(configuration)
    return {
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId 
         * @param {string} [directedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1RelationshipsRelationshipIdSynthesisGet(relationshipId: any, directedAt?: string, options?: any): AxiosPromise<TopicRelationshipSynthesisOut> {
            return localVarFp.getSynthesisV1RelationshipsRelationshipIdSynthesisGet(relationshipId, directedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId 
         * @param {string} teamId 
         * @param {string} [directedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId: any, teamId: string, directedAt?: string, options?: any): AxiosPromise<TopicRelationshipSynthesisOut> {
            return localVarFp.getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId, teamId, directedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1RelationshipsGet(query?: string, includeHidden?: boolean, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, sortBy?: string, directionality?: number, originQuery?: string, teamId?: string, options?: any): AxiosPromise<RelationshipPaginationOut> {
            return localVarFp.listRelationshipsV1RelationshipsGet(query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId: string, query?: string, includeHidden?: boolean, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, sortBy?: string, directionality?: number, originQuery?: string, options?: any): AxiosPromise<RelationshipPaginationOut> {
            return localVarFp.listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSynthesisV1RelationshipsRelationshipIdSynthesisGet operation in RelationshipsApi.
 * @export
 * @interface RelationshipsApiGetSynthesisV1RelationshipsRelationshipIdSynthesisGetRequest
 */
export interface RelationshipsApiGetSynthesisV1RelationshipsRelationshipIdSynthesisGetRequest {
    /**
     * 
     * @type {any}
     * @memberof RelationshipsApiGetSynthesisV1RelationshipsRelationshipIdSynthesisGet
     */
    readonly relationshipId: any

    /**
     * 
     * @type {string}
     * @memberof RelationshipsApiGetSynthesisV1RelationshipsRelationshipIdSynthesisGet
     */
    readonly directedAt?: string
}

/**
 * Request parameters for getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet operation in RelationshipsApi.
 * @export
 * @interface RelationshipsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGetRequest
 */
export interface RelationshipsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGetRequest {
    /**
     * 
     * @type {any}
     * @memberof RelationshipsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet
     */
    readonly relationshipId: any

    /**
     * 
     * @type {string}
     * @memberof RelationshipsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof RelationshipsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet
     */
    readonly directedAt?: string
}

/**
 * Request parameters for listRelationshipsV1RelationshipsGet operation in RelationshipsApi.
 * @export
 * @interface RelationshipsApiListRelationshipsV1RelationshipsGetRequest
 */
export interface RelationshipsApiListRelationshipsV1RelationshipsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly includeHidden?: boolean

    /**
     * 
     * @type {number}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly idsOnly?: boolean

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly sortBy?: string

    /**
     * Filter by directionality
     * @type {number}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly directionality?: number

    /**
     * Search query for the origin node.
     * @type {string}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly originQuery?: string

    /**
     * 
     * @type {string}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listRelationshipsV1TeamsTeamIdRelationshipsGet operation in RelationshipsApi.
 * @export
 * @interface RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGetRequest
 */
export interface RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly includeHidden?: boolean

    /**
     * 
     * @type {number}
     * @memberof RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly idsOnly?: boolean

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly sortBy?: string

    /**
     * Filter by directionality
     * @type {number}
     * @memberof RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly directionality?: number

    /**
     * Search query for the origin node.
     * @type {string}
     * @memberof RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly originQuery?: string
}

/**
 * RelationshipsApi - object-oriented interface
 * @export
 * @class RelationshipsApi
 * @extends {BaseAPI}
 */
export class RelationshipsApi extends BaseAPI {
    /**
     * Get Topic Relationship Synthesis.
     * @summary Get Synthesis
     * @param {RelationshipsApiGetSynthesisV1RelationshipsRelationshipIdSynthesisGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipsApi
     */
    public getSynthesisV1RelationshipsRelationshipIdSynthesisGet(requestParameters: RelationshipsApiGetSynthesisV1RelationshipsRelationshipIdSynthesisGetRequest, options?: AxiosRequestConfig) {
        return RelationshipsApiFp(this.configuration).getSynthesisV1RelationshipsRelationshipIdSynthesisGet(requestParameters.relationshipId, requestParameters.directedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Topic Relationship Synthesis.
     * @summary Get Synthesis
     * @param {RelationshipsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipsApi
     */
    public getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(requestParameters: RelationshipsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGetRequest, options?: AxiosRequestConfig) {
        return RelationshipsApiFp(this.configuration).getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(requestParameters.relationshipId, requestParameters.teamId, requestParameters.directedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List relationships.
     * @summary List Relationships
     * @param {RelationshipsApiListRelationshipsV1RelationshipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipsApi
     */
    public listRelationshipsV1RelationshipsGet(requestParameters: RelationshipsApiListRelationshipsV1RelationshipsGetRequest = {}, options?: AxiosRequestConfig) {
        return RelationshipsApiFp(this.configuration).listRelationshipsV1RelationshipsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.sortBy, requestParameters.directionality, requestParameters.originQuery, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List relationships.
     * @summary List Relationships
     * @param {RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipsApi
     */
    public listRelationshipsV1TeamsTeamIdRelationshipsGet(requestParameters: RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGetRequest, options?: AxiosRequestConfig) {
        return RelationshipsApiFp(this.configuration).listRelationshipsV1TeamsTeamIdRelationshipsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.sortBy, requestParameters.directionality, requestParameters.originQuery, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SemanticSearchApi - axios parameter creator
 * @export
 */
export const SemanticSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Get Semantic Search
         * @param {string} [q] Search query
         * @param {string} [filterBy] Filter semantic search results.
         * @param {number} [studyDistance] Study distance threshold
         * @param {number} [studyMoveTo] Study moveTo distance force
         * @param {number} [relationshipDistance] Relationship distance threshold
         * @param {number} [relationshipMoveTo] Relationship moveTo distance force
         * @param {number} [relationshipMoveAwayFrom] Relationship moveAwayFrom distance force
         * @param {string} [clusteringThresholds] Clustering thresholds as json stringified list of pairs of floats.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticSearchV1SemanticSearchGet: async (q?: string, filterBy?: string, studyDistance?: number, studyMoveTo?: number, relationshipDistance?: number, relationshipMoveTo?: number, relationshipMoveAwayFrom?: number, clusteringThresholds?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/semantic-search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (filterBy !== undefined) {
                localVarQueryParameter['filter_by'] = filterBy;
            }

            if (studyDistance !== undefined) {
                localVarQueryParameter['study_distance'] = studyDistance;
            }

            if (studyMoveTo !== undefined) {
                localVarQueryParameter['study_move_to'] = studyMoveTo;
            }

            if (relationshipDistance !== undefined) {
                localVarQueryParameter['relationship_distance'] = relationshipDistance;
            }

            if (relationshipMoveTo !== undefined) {
                localVarQueryParameter['relationship_move_to'] = relationshipMoveTo;
            }

            if (relationshipMoveAwayFrom !== undefined) {
                localVarQueryParameter['relationship_move_away_from'] = relationshipMoveAwayFrom;
            }

            if (clusteringThresholds !== undefined) {
                localVarQueryParameter['clustering_thresholds'] = clusteringThresholds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SemanticSearchApi - functional programming interface
 * @export
 */
export const SemanticSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SemanticSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Get Semantic Search
         * @param {string} [q] Search query
         * @param {string} [filterBy] Filter semantic search results.
         * @param {number} [studyDistance] Study distance threshold
         * @param {number} [studyMoveTo] Study moveTo distance force
         * @param {number} [relationshipDistance] Relationship distance threshold
         * @param {number} [relationshipMoveTo] Relationship moveTo distance force
         * @param {number} [relationshipMoveAwayFrom] Relationship moveAwayFrom distance force
         * @param {string} [clusteringThresholds] Clustering thresholds as json stringified list of pairs of floats.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSemanticSearchV1SemanticSearchGet(q?: string, filterBy?: string, studyDistance?: number, studyMoveTo?: number, relationshipDistance?: number, relationshipMoveTo?: number, relationshipMoveAwayFrom?: number, clusteringThresholds?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SemanticSearchOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSemanticSearchV1SemanticSearchGet(q, filterBy, studyDistance, studyMoveTo, relationshipDistance, relationshipMoveTo, relationshipMoveAwayFrom, clusteringThresholds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SemanticSearchApi - factory interface
 * @export
 */
export const SemanticSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SemanticSearchApiFp(configuration)
    return {
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Get Semantic Search
         * @param {string} [q] Search query
         * @param {string} [filterBy] Filter semantic search results.
         * @param {number} [studyDistance] Study distance threshold
         * @param {number} [studyMoveTo] Study moveTo distance force
         * @param {number} [relationshipDistance] Relationship distance threshold
         * @param {number} [relationshipMoveTo] Relationship moveTo distance force
         * @param {number} [relationshipMoveAwayFrom] Relationship moveAwayFrom distance force
         * @param {string} [clusteringThresholds] Clustering thresholds as json stringified list of pairs of floats.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticSearchV1SemanticSearchGet(q?: string, filterBy?: string, studyDistance?: number, studyMoveTo?: number, relationshipDistance?: number, relationshipMoveTo?: number, relationshipMoveAwayFrom?: number, clusteringThresholds?: string, options?: any): AxiosPromise<SemanticSearchOut> {
            return localVarFp.getSemanticSearchV1SemanticSearchGet(q, filterBy, studyDistance, studyMoveTo, relationshipDistance, relationshipMoveTo, relationshipMoveAwayFrom, clusteringThresholds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSemanticSearchV1SemanticSearchGet operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiGetSemanticSearchV1SemanticSearchGetRequest
 */
export interface SemanticSearchApiGetSemanticSearchV1SemanticSearchGetRequest {
    /**
     * Search query
     * @type {string}
     * @memberof SemanticSearchApiGetSemanticSearchV1SemanticSearchGet
     */
    readonly q?: string

    /**
     * Filter semantic search results.
     * @type {string}
     * @memberof SemanticSearchApiGetSemanticSearchV1SemanticSearchGet
     */
    readonly filterBy?: string

    /**
     * Study distance threshold
     * @type {number}
     * @memberof SemanticSearchApiGetSemanticSearchV1SemanticSearchGet
     */
    readonly studyDistance?: number

    /**
     * Study moveTo distance force
     * @type {number}
     * @memberof SemanticSearchApiGetSemanticSearchV1SemanticSearchGet
     */
    readonly studyMoveTo?: number

    /**
     * Relationship distance threshold
     * @type {number}
     * @memberof SemanticSearchApiGetSemanticSearchV1SemanticSearchGet
     */
    readonly relationshipDistance?: number

    /**
     * Relationship moveTo distance force
     * @type {number}
     * @memberof SemanticSearchApiGetSemanticSearchV1SemanticSearchGet
     */
    readonly relationshipMoveTo?: number

    /**
     * Relationship moveAwayFrom distance force
     * @type {number}
     * @memberof SemanticSearchApiGetSemanticSearchV1SemanticSearchGet
     */
    readonly relationshipMoveAwayFrom?: number

    /**
     * Clustering thresholds as json stringified list of pairs of floats.
     * @type {string}
     * @memberof SemanticSearchApiGetSemanticSearchV1SemanticSearchGet
     */
    readonly clusteringThresholds?: string
}

/**
 * SemanticSearchApi - object-oriented interface
 * @export
 * @class SemanticSearchApi
 * @extends {BaseAPI}
 */
export class SemanticSearchApi extends BaseAPI {
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Get Semantic Search
     * @param {SemanticSearchApiGetSemanticSearchV1SemanticSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    public getSemanticSearchV1SemanticSearchGet(requestParameters: SemanticSearchApiGetSemanticSearchV1SemanticSearchGetRequest = {}, options?: AxiosRequestConfig) {
        return SemanticSearchApiFp(this.configuration).getSemanticSearchV1SemanticSearchGet(requestParameters.q, requestParameters.filterBy, requestParameters.studyDistance, requestParameters.studyMoveTo, requestParameters.relationshipDistance, requestParameters.relationshipMoveTo, requestParameters.relationshipMoveAwayFrom, requestParameters.clusteringThresholds, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StripeApi - axios parameter creator
 * @export
 */
export const StripeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Start stripe checkout session.
         * @summary Stripe Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeStatusV1StripeSubscriptionManagePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/stripe/subscription-manage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StripeApi - functional programming interface
 * @export
 */
export const StripeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StripeApiAxiosParamCreator(configuration)
    return {
        /**
         * Start stripe checkout session.
         * @summary Stripe Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stripeStatusV1StripeSubscriptionManagePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeSessionOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stripeStatusV1StripeSubscriptionManagePost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StripeApi - factory interface
 * @export
 */
export const StripeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StripeApiFp(configuration)
    return {
        /**
         * Start stripe checkout session.
         * @summary Stripe Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeStatusV1StripeSubscriptionManagePost(options?: any): AxiosPromise<StripeSessionOut> {
            return localVarFp.stripeStatusV1StripeSubscriptionManagePost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StripeApi - object-oriented interface
 * @export
 * @class StripeApi
 * @extends {BaseAPI}
 */
export class StripeApi extends BaseAPI {
    /**
     * Start stripe checkout session.
     * @summary Stripe Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public stripeStatusV1StripeSubscriptionManagePost(options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).stripeStatusV1StripeSubscriptionManagePost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudiesApi - axios parameter creator
 * @export
 */
export const StudiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut: async (studyId: string, authorId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId)
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut: async (teamId: string, studyId: string, authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost: async (studyId: string, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost', 'studyId', studyId)
            // verify required parameter 'bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost' is not null or undefined
            assertParamExists('bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost', 'bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost', bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost)
            const localVarPath = `/v1/studies/{study_id}/authors/bulk`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: async (teamId: string, studyId: string, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'studyId', studyId)
            // verify required parameter 'bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost' is not null or undefined
            assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn | DoiIn} studyInDoiIn 
         * @param {boolean} [updateExisting] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1StudiesPost: async (studyInDoiIn: StudyIn | DoiIn, updateExisting?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyInDoiIn' is not null or undefined
            assertParamExists('createAStudyV1StudiesPost', 'studyInDoiIn', studyInDoiIn)
            const localVarPath = `/v1/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (updateExisting !== undefined) {
                localVarQueryParameter['update_existing'] = updateExisting;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyInDoiIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId 
         * @param {StudyIn | DoiIn} studyInDoiIn 
         * @param {boolean} [updateExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost: async (teamId: string, studyInDoiIn: StudyIn | DoiIn, updateExisting?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAStudyV1TeamsTeamIdStudiesPost', 'teamId', teamId)
            // verify required parameter 'studyInDoiIn' is not null or undefined
            assertParamExists('createAStudyV1TeamsTeamIdStudiesPost', 'studyInDoiIn', studyInDoiIn)
            const localVarPath = `/v1/teams/{team_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (updateExisting !== undefined) {
                localVarQueryParameter['update_existing'] = updateExisting;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyInDoiIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost: async (studyId: string, modelIn: Array<ModelIn>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('createModelsV1StudiesStudyIdModelsPost', 'studyId', studyId)
            // verify required parameter 'modelIn' is not null or undefined
            assertParamExists('createModelsV1StudiesStudyIdModelsPost', 'modelIn', modelIn)
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost: async (teamId: string, studyId: string, modelIn: Array<ModelIn>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'studyId', studyId)
            // verify required parameter 'modelIn' is not null or undefined
            assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'modelIn', modelIn)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete: async (studyId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('deleteStudyV1StudiesStudyIdDelete', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete: async (teamId: string, studyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteStudyV1TeamsTeamIdStudiesStudyIdDelete', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('deleteStudyV1TeamsTeamIdStudiesStudyIdDelete', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet: async (studyId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('getStudyV1StudiesStudyIdGet', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet: async (teamId: string, studyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getStudyV1TeamsTeamIdStudiesStudyIdGet', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('getStudyV1TeamsTeamIdStudiesStudyIdGet', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet: async (studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsV1StudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet: async (teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet: async (studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAuthorsV1StudiesStudyIdAuthorsGet', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}/authors`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet: async (teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet: async (studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listModelsInStudyV1StudiesStudyIdModelsGet', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet: async (teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listStudiesV1TeamsTeamIdStudiesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserStudiesV1UsersUserIdStudiesGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId 
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1StudiesStudyIdPatch: async (studyId: string, patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('patchStudyEndpointV1StudiesStudyIdPatch', 'studyId', studyId)
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            assertParamExists('patchStudyEndpointV1StudiesStudyIdPatch', 'patchStudyOpArrayPatchStudyOp', patchStudyOpArrayPatchStudyOp)
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchStudyOpArrayPatchStudyOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch: async (teamId: string, studyId: string, patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch', 'studyId', studyId)
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            assertParamExists('patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch', 'patchStudyOpArrayPatchStudyOp', patchStudyOpArrayPatchStudyOp)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchStudyOpArrayPatchStudyOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1StudiesStudyIdPublishPost: async (studyId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('publishStudyV1StudiesStudyIdPublishPost', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}/publish`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost: async (teamId: string, studyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/publish`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete: async (studyId: string, authorId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId)
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete: async (teamId: string, studyId: string, authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete: async (studyId: string, tagObjectId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete', 'studyId', studyId)
            // verify required parameter 'tagObjectId' is not null or undefined
            assertParamExists('removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId)
            const localVarPath = `/v1/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete: async (teamId: string, studyId: string, tagObjectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete', 'studyId', studyId)
            // verify required parameter 'tagObjectId' is not null or undefined
            assertParamExists('removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut: async (studyId: string, tagObjectId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut', 'studyId', studyId)
            // verify required parameter 'tagObjectId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId)
            const localVarPath = `/v1/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut: async (teamId: string, studyId: string, tagObjectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut', 'studyId', studyId)
            // verify required parameter 'tagObjectId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudiesApi - functional programming interface
 * @export
 */
export const StudiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId: string, authorId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId: string, studyId: string, authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId: string, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId: string, studyId: string, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn | DoiIn} studyInDoiIn 
         * @param {boolean} [updateExisting] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAStudyV1StudiesPost(studyInDoiIn: StudyIn | DoiIn, updateExisting?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAStudyV1StudiesPost(studyInDoiIn, updateExisting, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId 
         * @param {StudyIn | DoiIn} studyInDoiIn 
         * @param {boolean} [updateExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAStudyV1TeamsTeamIdStudiesPost(teamId: string, studyInDoiIn: StudyIn | DoiIn, updateExisting?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAStudyV1TeamsTeamIdStudiesPost(teamId, studyInDoiIn, updateExisting, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModelsV1StudiesStudyIdModelsPost(studyId: string, modelIn: Array<ModelIn>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId: string, studyId: string, modelIn: Array<ModelIn>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudyV1StudiesStudyIdDelete(studyId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudyV1StudiesStudyIdDelete(studyId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId: string, studyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudyV1StudiesStudyIdGet(studyId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudyV1StudiesStudyIdGet(studyId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId: string, studyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1StudiesStudyIdAssociationsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserStudiesV1UserStudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthorsV1StudiesStudyIdAuthorsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsInStudyV1StudiesStudyIdModelsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStudiesV1StudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStudiesV1TeamsTeamIdStudiesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserStudiesV1UsersUserIdStudiesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId 
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchStudyEndpointV1StudiesStudyIdPatch(studyId: string, patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId: string, studyId: string, patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishStudyV1StudiesStudyIdPublishPost(studyId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishStudyV1StudiesStudyIdPublishPost(studyId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId: string, studyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId: string, authorId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId: string, studyId: string, authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId: string, tagObjectId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId: string, studyId: string, tagObjectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId: string, tagObjectId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId: string, studyId: string, tagObjectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudiesApi - factory interface
 * @export
 */
export const StudiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudiesApiFp(configuration)
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId: string, authorId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId: string, studyId: string, authorId: string, options?: any): AxiosPromise<void> {
            return localVarFp.addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId: string, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId: string, studyId: string, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options?: any): AxiosPromise<void> {
            return localVarFp.bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn | DoiIn} studyInDoiIn 
         * @param {boolean} [updateExisting] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1StudiesPost(studyInDoiIn: StudyIn | DoiIn, updateExisting?: boolean, teamId?: string, options?: any): AxiosPromise<StudyOut> {
            return localVarFp.createAStudyV1StudiesPost(studyInDoiIn, updateExisting, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId 
         * @param {StudyIn | DoiIn} studyInDoiIn 
         * @param {boolean} [updateExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost(teamId: string, studyInDoiIn: StudyIn | DoiIn, updateExisting?: boolean, options?: any): AxiosPromise<StudyOut> {
            return localVarFp.createAStudyV1TeamsTeamIdStudiesPost(teamId, studyInDoiIn, updateExisting, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId: string, modelIn: Array<ModelIn>, teamId?: string, options?: any): AxiosPromise<Array<ModelOut>> {
            return localVarFp.createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId: string, studyId: string, modelIn: Array<ModelIn>, options?: any): AxiosPromise<Array<ModelOut>> {
            return localVarFp.createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete(studyId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteStudyV1StudiesStudyIdDelete(studyId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId: string, studyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet(studyId: string, teamId?: string, options?: any): AxiosPromise<StudyOut> {
            return localVarFp.getStudyV1StudiesStudyIdGet(studyId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId: string, studyId: string, options?: any): AxiosPromise<StudyOut> {
            return localVarFp.getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, teamId?: string, options?: any): AxiosPromise<AuthorPaginationOut> {
            return localVarFp.listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<AuthorPaginationOut> {
            return localVarFp.listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, teamId?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId 
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1StudiesStudyIdPatch(studyId: string, patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId: string, studyId: string, patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1StudiesStudyIdPublishPost(studyId: string, teamId?: string, options?: any): AxiosPromise<StudyOut> {
            return localVarFp.publishStudyV1StudiesStudyIdPublishPost(studyId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId: string, studyId: string, options?: any): AxiosPromise<StudyOut> {
            return localVarFp.publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId: string, authorId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId: string, studyId: string, authorId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId: string, tagObjectId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId: string, studyId: string, tagObjectId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId: string, tagObjectId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId: string, studyId: string, tagObjectId: string, options?: any): AxiosPromise<void> {
            return localVarFp.tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut operation in StudiesApi.
 * @export
 * @interface StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest
 */
export interface StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut
     */
    readonly authorId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut operation in StudiesApi.
 * @export
 * @interface StudiesApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest
 */
export interface StudiesApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut
     */
    readonly authorId: string
}

/**
 * Request parameters for bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost operation in StudiesApi.
 * @export
 * @interface StudiesApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPostRequest
 */
export interface StudiesApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
     */
    readonly studyId: string

    /**
     * 
     * @type {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost}
     * @memberof StudiesApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
     */
    readonly bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost

    /**
     * 
     * @type {string}
     * @memberof StudiesApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost operation in StudiesApi.
 * @export
 * @interface StudiesApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest
 */
export interface StudiesApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
     */
    readonly studyId: string

    /**
     * 
     * @type {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost}
     * @memberof StudiesApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
     */
    readonly bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
}

/**
 * Request parameters for createAStudyV1StudiesPost operation in StudiesApi.
 * @export
 * @interface StudiesApiCreateAStudyV1StudiesPostRequest
 */
export interface StudiesApiCreateAStudyV1StudiesPostRequest {
    /**
     * 
     * @type {StudyIn | DoiIn}
     * @memberof StudiesApiCreateAStudyV1StudiesPost
     */
    readonly studyInDoiIn: StudyIn | DoiIn

    /**
     * 
     * @type {boolean}
     * @memberof StudiesApiCreateAStudyV1StudiesPost
     */
    readonly updateExisting?: boolean

    /**
     * 
     * @type {string}
     * @memberof StudiesApiCreateAStudyV1StudiesPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createAStudyV1TeamsTeamIdStudiesPost operation in StudiesApi.
 * @export
 * @interface StudiesApiCreateAStudyV1TeamsTeamIdStudiesPostRequest
 */
export interface StudiesApiCreateAStudyV1TeamsTeamIdStudiesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiCreateAStudyV1TeamsTeamIdStudiesPost
     */
    readonly teamId: string

    /**
     * 
     * @type {StudyIn | DoiIn}
     * @memberof StudiesApiCreateAStudyV1TeamsTeamIdStudiesPost
     */
    readonly studyInDoiIn: StudyIn | DoiIn

    /**
     * 
     * @type {boolean}
     * @memberof StudiesApiCreateAStudyV1TeamsTeamIdStudiesPost
     */
    readonly updateExisting?: boolean
}

/**
 * Request parameters for createModelsV1StudiesStudyIdModelsPost operation in StudiesApi.
 * @export
 * @interface StudiesApiCreateModelsV1StudiesStudyIdModelsPostRequest
 */
export interface StudiesApiCreateModelsV1StudiesStudyIdModelsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiCreateModelsV1StudiesStudyIdModelsPost
     */
    readonly studyId: string

    /**
     * 
     * @type {Array<ModelIn>}
     * @memberof StudiesApiCreateModelsV1StudiesStudyIdModelsPost
     */
    readonly modelIn: Array<ModelIn>

    /**
     * 
     * @type {string}
     * @memberof StudiesApiCreateModelsV1StudiesStudyIdModelsPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createModelsV1TeamsTeamIdStudiesStudyIdModelsPost operation in StudiesApi.
 * @export
 * @interface StudiesApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest
 */
export interface StudiesApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPost
     */
    readonly studyId: string

    /**
     * 
     * @type {Array<ModelIn>}
     * @memberof StudiesApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPost
     */
    readonly modelIn: Array<ModelIn>
}

/**
 * Request parameters for deleteStudyV1StudiesStudyIdDelete operation in StudiesApi.
 * @export
 * @interface StudiesApiDeleteStudyV1StudiesStudyIdDeleteRequest
 */
export interface StudiesApiDeleteStudyV1StudiesStudyIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiDeleteStudyV1StudiesStudyIdDelete
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiDeleteStudyV1StudiesStudyIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for deleteStudyV1TeamsTeamIdStudiesStudyIdDelete operation in StudiesApi.
 * @export
 * @interface StudiesApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDeleteRequest
 */
export interface StudiesApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDelete
     */
    readonly studyId: string
}

/**
 * Request parameters for getStudyV1StudiesStudyIdGet operation in StudiesApi.
 * @export
 * @interface StudiesApiGetStudyV1StudiesStudyIdGetRequest
 */
export interface StudiesApiGetStudyV1StudiesStudyIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiGetStudyV1StudiesStudyIdGet
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiGetStudyV1StudiesStudyIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getStudyV1TeamsTeamIdStudiesStudyIdGet operation in StudiesApi.
 * @export
 * @interface StudiesApiGetStudyV1TeamsTeamIdStudiesStudyIdGetRequest
 */
export interface StudiesApiGetStudyV1TeamsTeamIdStudiesStudyIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiGetStudyV1TeamsTeamIdStudiesStudyIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiGetStudyV1TeamsTeamIdStudiesStudyIdGet
     */
    readonly studyId: string
}

/**
 * Request parameters for listAssociationsV1StudiesStudyIdAssociationsGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest
 */
export interface StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest
 */
export interface StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest
 */
export interface StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listAuthenticatedUserStudiesV1UserStudiesGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest
 */
export interface StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthorsV1StudiesStudyIdAuthorsGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest
 */
export interface StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AuthorSortEnum}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly orderBy?: AuthorSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly sortBy?: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGetRequest
 */
export interface StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AuthorSortEnum}
     * @memberof StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly orderBy?: AuthorSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listModelsInStudyV1StudiesStudyIdModelsGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest
 */
export interface StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest
 */
export interface StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listStudiesV1StudiesGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListStudiesV1StudiesGetRequest
 */
export interface StudiesApiListStudiesV1StudiesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly conceptTag?: string

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly featureRelationship?: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listStudiesV1TeamsTeamIdStudiesGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListStudiesV1TeamsTeamIdStudiesGetRequest
 */
export interface StudiesApiListStudiesV1TeamsTeamIdStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly conceptTag?: string

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof StudiesApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly featureRelationship?: string
}

/**
 * Request parameters for listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest
 */
export interface StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listUserStudiesV1UsersUserIdStudiesGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest
 */
export interface StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for patchStudyEndpointV1StudiesStudyIdPatch operation in StudiesApi.
 * @export
 * @interface StudiesApiPatchStudyEndpointV1StudiesStudyIdPatchRequest
 */
export interface StudiesApiPatchStudyEndpointV1StudiesStudyIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiPatchStudyEndpointV1StudiesStudyIdPatch
     */
    readonly studyId: string

    /**
     * 
     * @type {PatchStudyOp | Array<PatchStudyOp>}
     * @memberof StudiesApiPatchStudyEndpointV1StudiesStudyIdPatch
     */
    readonly patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>

    /**
     * 
     * @type {string}
     * @memberof StudiesApiPatchStudyEndpointV1StudiesStudyIdPatch
     */
    readonly teamId?: string
}

/**
 * Request parameters for patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch operation in StudiesApi.
 * @export
 * @interface StudiesApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatchRequest
 */
export interface StudiesApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch
     */
    readonly studyId: string

    /**
     * 
     * @type {PatchStudyOp | Array<PatchStudyOp>}
     * @memberof StudiesApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch
     */
    readonly patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>
}

/**
 * Request parameters for publishStudyV1StudiesStudyIdPublishPost operation in StudiesApi.
 * @export
 * @interface StudiesApiPublishStudyV1StudiesStudyIdPublishPostRequest
 */
export interface StudiesApiPublishStudyV1StudiesStudyIdPublishPostRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiPublishStudyV1StudiesStudyIdPublishPost
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiPublishStudyV1StudiesStudyIdPublishPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost operation in StudiesApi.
 * @export
 * @interface StudiesApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPostRequest
 */
export interface StudiesApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPostRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPost
     */
    readonly studyId: string
}

/**
 * Request parameters for removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete operation in StudiesApi.
 * @export
 * @interface StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest
 */
export interface StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly authorId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete operation in StudiesApi.
 * @export
 * @interface StudiesApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest
 */
export interface StudiesApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly authorId: string
}

/**
 * Request parameters for removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete operation in StudiesApi.
 * @export
 * @interface StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDeleteRequest
 */
export interface StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete
     */
    readonly tagObjectId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete operation in StudiesApi.
 * @export
 * @interface StudiesApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDeleteRequest
 */
export interface StudiesApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete
     */
    readonly tagObjectId: string
}

/**
 * Request parameters for tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut operation in StudiesApi.
 * @export
 * @interface StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPutRequest
 */
export interface StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut
     */
    readonly tagObjectId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut operation in StudiesApi.
 * @export
 * @interface StudiesApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPutRequest
 */
export interface StudiesApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut
     */
    readonly tagObjectId: string
}

/**
 * StudiesApi - object-oriented interface
 * @export
 * @class StudiesApi
 * @extends {BaseAPI}
 */
export class StudiesApi extends BaseAPI {
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters: StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters.studyId, requestParameters.authorId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {StudiesApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters: StudiesApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an author to a study.
     * @summary Bulk Add Authors To Study
     * @param {StudiesApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(requestParameters: StudiesApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPostRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(requestParameters.studyId, requestParameters.bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an author to a study.
     * @summary Bulk Add Authors To Study
     * @param {StudiesApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(requestParameters: StudiesApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(requestParameters.teamId, requestParameters.studyId, requestParameters.bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Study.
     * @summary Create A Study.
     * @param {StudiesApiCreateAStudyV1StudiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public createAStudyV1StudiesPost(requestParameters: StudiesApiCreateAStudyV1StudiesPostRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).createAStudyV1StudiesPost(requestParameters.studyInDoiIn, requestParameters.updateExisting, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Study.
     * @summary Create A Study.
     * @param {StudiesApiCreateAStudyV1TeamsTeamIdStudiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public createAStudyV1TeamsTeamIdStudiesPost(requestParameters: StudiesApiCreateAStudyV1TeamsTeamIdStudiesPostRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).createAStudyV1TeamsTeamIdStudiesPost(requestParameters.teamId, requestParameters.studyInDoiIn, requestParameters.updateExisting, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {StudiesApiCreateModelsV1StudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public createModelsV1StudiesStudyIdModelsPost(requestParameters: StudiesApiCreateModelsV1StudiesStudyIdModelsPostRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).createModelsV1StudiesStudyIdModelsPost(requestParameters.studyId, requestParameters.modelIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {StudiesApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters: StudiesApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters.teamId, requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {StudiesApiDeleteStudyV1StudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public deleteStudyV1StudiesStudyIdDelete(requestParameters: StudiesApiDeleteStudyV1StudiesStudyIdDeleteRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).deleteStudyV1StudiesStudyIdDelete(requestParameters.studyId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {StudiesApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(requestParameters: StudiesApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDeleteRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Study.
     * @summary Get Study
     * @param {StudiesApiGetStudyV1StudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public getStudyV1StudiesStudyIdGet(requestParameters: StudiesApiGetStudyV1StudiesStudyIdGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).getStudyV1StudiesStudyIdGet(requestParameters.studyId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Study.
     * @summary Get Study
     * @param {StudiesApiGetStudyV1TeamsTeamIdStudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public getStudyV1TeamsTeamIdStudiesStudyIdGet(requestParameters: StudiesApiGetStudyV1TeamsTeamIdStudiesStudyIdGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).getStudyV1TeamsTeamIdStudiesStudyIdGet(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters: StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters: StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters: StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters: StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest = {}, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listAuthorsV1StudiesStudyIdAuthorsGet(requestParameters: StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listAuthorsV1StudiesStudyIdAuthorsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(requestParameters: StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters: StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters: StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Studies.
     * @summary List Studies
     * @param {StudiesApiListStudiesV1StudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listStudiesV1StudiesGet(requestParameters: StudiesApiListStudiesV1StudiesGetRequest = {}, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listStudiesV1StudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Studies.
     * @summary List Studies
     * @param {StudiesApiListStudiesV1TeamsTeamIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listStudiesV1TeamsTeamIdStudiesGet(requestParameters: StudiesApiListStudiesV1TeamsTeamIdStudiesGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listStudiesV1TeamsTeamIdStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters: StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listUserStudiesV1UsersUserIdStudiesGet(requestParameters: StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Study resource with partial update.
     * @summary Patch Study Endpoint
     * @param {StudiesApiPatchStudyEndpointV1StudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public patchStudyEndpointV1StudiesStudyIdPatch(requestParameters: StudiesApiPatchStudyEndpointV1StudiesStudyIdPatchRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).patchStudyEndpointV1StudiesStudyIdPatch(requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Study resource with partial update.
     * @summary Patch Study Endpoint
     * @param {StudiesApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(requestParameters: StudiesApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatchRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(requestParameters.teamId, requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish the study making it visible to other users.
     * @summary Publish Study
     * @param {StudiesApiPublishStudyV1StudiesStudyIdPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public publishStudyV1StudiesStudyIdPublishPost(requestParameters: StudiesApiPublishStudyV1StudiesStudyIdPublishPostRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).publishStudyV1StudiesStudyIdPublishPost(requestParameters.studyId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish the study making it visible to other users.
     * @summary Publish Study
     * @param {StudiesApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(requestParameters: StudiesApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPostRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters: StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters.studyId, requestParameters.authorId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {StudiesApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters: StudiesApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the study with object with provided id.
     * @summary Remove Object Tag From Study
     * @param {StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters: StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDeleteRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters.studyId, requestParameters.tagObjectId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the study with object with provided id.
     * @summary Remove Object Tag From Study
     * @param {StudiesApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters: StudiesApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDeleteRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the study with object with provided id.
     * @summary Tag Study With Object
     * @param {StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(requestParameters: StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPutRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(requestParameters.studyId, requestParameters.tagObjectId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the study with object with provided id.
     * @summary Tag Study With Object
     * @param {StudiesApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters: StudiesApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPutRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudyMetadataApi - axios parameter creator
 * @export
 */
export const StudyMetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get study metadata from OpenAlex via dois.
         * @summary Get Study Metadata From Openalex For A Given List Of Dois.
         * @param {StudyMetadataIn} studyMetadataIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost: async (studyMetadataIn: StudyMetadataIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyMetadataIn' is not null or undefined
            assertParamExists('getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost', 'studyMetadataIn', studyMetadataIn)
            const localVarPath = `/v1/study-metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyMetadataIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudyMetadataApi - functional programming interface
 * @export
 */
export const StudyMetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudyMetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * Get study metadata from OpenAlex via dois.
         * @summary Get Study Metadata From Openalex For A Given List Of Dois.
         * @param {StudyMetadataIn} studyMetadataIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost(studyMetadataIn: StudyMetadataIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyMetadataOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost(studyMetadataIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudyMetadataApi - factory interface
 * @export
 */
export const StudyMetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudyMetadataApiFp(configuration)
    return {
        /**
         * Get study metadata from OpenAlex via dois.
         * @summary Get Study Metadata From Openalex For A Given List Of Dois.
         * @param {StudyMetadataIn} studyMetadataIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost(studyMetadataIn: StudyMetadataIn, options?: any): AxiosPromise<StudyMetadataOut> {
            return localVarFp.getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost(studyMetadataIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost operation in StudyMetadataApi.
 * @export
 * @interface StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPostRequest
 */
export interface StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPostRequest {
    /**
     * 
     * @type {StudyMetadataIn}
     * @memberof StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost
     */
    readonly studyMetadataIn: StudyMetadataIn
}

/**
 * StudyMetadataApi - object-oriented interface
 * @export
 * @class StudyMetadataApi
 * @extends {BaseAPI}
 */
export class StudyMetadataApi extends BaseAPI {
    /**
     * Get study metadata from OpenAlex via dois.
     * @summary Get Study Metadata From Openalex For A Given List Of Dois.
     * @param {StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyMetadataApi
     */
    public getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost(requestParameters: StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPostRequest, options?: AxiosRequestConfig) {
        return StudyMetadataApiFp(this.configuration).getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost(requestParameters.studyMetadataIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SynthesisApi - axios parameter creator
 * @export
 */
export const SynthesisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate and return summary synthesis.
         * @summary Generate A Synthesis.
         * @param {SynthesisIn} synthesisIn 
         * @param {boolean} [singleQuestionPrompt] 
         * @param {string} [modelName] 
         * @param {string} [length] 
         * @param {number} [temperature] 
         * @param {number} [maxTokens] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateASynthesisV1SynthesisPost: async (synthesisIn: SynthesisIn, singleQuestionPrompt?: boolean, modelName?: string, length?: string, temperature?: number, maxTokens?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'synthesisIn' is not null or undefined
            assertParamExists('generateASynthesisV1SynthesisPost', 'synthesisIn', synthesisIn)
            const localVarPath = `/v1/synthesis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (singleQuestionPrompt !== undefined) {
                localVarQueryParameter['single_question_prompt'] = singleQuestionPrompt;
            }

            if (modelName !== undefined) {
                localVarQueryParameter['model_name'] = modelName;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (temperature !== undefined) {
                localVarQueryParameter['temperature'] = temperature;
            }

            if (maxTokens !== undefined) {
                localVarQueryParameter['max_tokens'] = maxTokens;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(synthesisIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SynthesisApi - functional programming interface
 * @export
 */
export const SynthesisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SynthesisApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate and return summary synthesis.
         * @summary Generate A Synthesis.
         * @param {SynthesisIn} synthesisIn 
         * @param {boolean} [singleQuestionPrompt] 
         * @param {string} [modelName] 
         * @param {string} [length] 
         * @param {number} [temperature] 
         * @param {number} [maxTokens] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateASynthesisV1SynthesisPost(synthesisIn: SynthesisIn, singleQuestionPrompt?: boolean, modelName?: string, length?: string, temperature?: number, maxTokens?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SynthesisOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateASynthesisV1SynthesisPost(synthesisIn, singleQuestionPrompt, modelName, length, temperature, maxTokens, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SynthesisApi - factory interface
 * @export
 */
export const SynthesisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SynthesisApiFp(configuration)
    return {
        /**
         * Generate and return summary synthesis.
         * @summary Generate A Synthesis.
         * @param {SynthesisIn} synthesisIn 
         * @param {boolean} [singleQuestionPrompt] 
         * @param {string} [modelName] 
         * @param {string} [length] 
         * @param {number} [temperature] 
         * @param {number} [maxTokens] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateASynthesisV1SynthesisPost(synthesisIn: SynthesisIn, singleQuestionPrompt?: boolean, modelName?: string, length?: string, temperature?: number, maxTokens?: number, options?: any): AxiosPromise<SynthesisOut> {
            return localVarFp.generateASynthesisV1SynthesisPost(synthesisIn, singleQuestionPrompt, modelName, length, temperature, maxTokens, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateASynthesisV1SynthesisPost operation in SynthesisApi.
 * @export
 * @interface SynthesisApiGenerateASynthesisV1SynthesisPostRequest
 */
export interface SynthesisApiGenerateASynthesisV1SynthesisPostRequest {
    /**
     * 
     * @type {SynthesisIn}
     * @memberof SynthesisApiGenerateASynthesisV1SynthesisPost
     */
    readonly synthesisIn: SynthesisIn

    /**
     * 
     * @type {boolean}
     * @memberof SynthesisApiGenerateASynthesisV1SynthesisPost
     */
    readonly singleQuestionPrompt?: boolean

    /**
     * 
     * @type {string}
     * @memberof SynthesisApiGenerateASynthesisV1SynthesisPost
     */
    readonly modelName?: string

    /**
     * 
     * @type {string}
     * @memberof SynthesisApiGenerateASynthesisV1SynthesisPost
     */
    readonly length?: string

    /**
     * 
     * @type {number}
     * @memberof SynthesisApiGenerateASynthesisV1SynthesisPost
     */
    readonly temperature?: number

    /**
     * 
     * @type {number}
     * @memberof SynthesisApiGenerateASynthesisV1SynthesisPost
     */
    readonly maxTokens?: number
}

/**
 * SynthesisApi - object-oriented interface
 * @export
 * @class SynthesisApi
 * @extends {BaseAPI}
 */
export class SynthesisApi extends BaseAPI {
    /**
     * Generate and return summary synthesis.
     * @summary Generate A Synthesis.
     * @param {SynthesisApiGenerateASynthesisV1SynthesisPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SynthesisApi
     */
    public generateASynthesisV1SynthesisPost(requestParameters: SynthesisApiGenerateASynthesisV1SynthesisPostRequest, options?: AxiosRequestConfig) {
        return SynthesisApiFp(this.configuration).generateASynthesisV1SynthesisPost(requestParameters.synthesisIn, requestParameters.singleQuestionPrompt, requestParameters.modelName, requestParameters.length, requestParameters.temperature, requestParameters.maxTokens, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a user to a team by user_id.
         * @summary Add A Role To A Team.
         * @param {string} teamId 
         * @param {RoleIn | Array<RoleIn>} roleInArrayRoleIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addARoleToATeamV1TeamsTeamIdRolesPost: async (teamId: string, roleInArrayRoleIn: RoleIn | Array<RoleIn>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addARoleToATeamV1TeamsTeamIdRolesPost', 'teamId', teamId)
            // verify required parameter 'roleInArrayRoleIn' is not null or undefined
            assertParamExists('addARoleToATeamV1TeamsTeamIdRolesPost', 'roleInArrayRoleIn', roleInArrayRoleIn)
            const localVarPath = `/v1/teams/{team_id}/roles`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleInArrayRoleIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a user to a team role.
         * @summary Add A User To A Role.
         * @param {string} userId 
         * @param {string} roleName 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut: async (userId: string, roleName: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut', 'userId', userId)
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut', 'roleName', roleName)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/roles/{role_name}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a user to a team by user_id.
         * @summary Add A User To A Team.
         * @param {string} userId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToATeamV1TeamsTeamIdUsersUserIdPut: async (userId: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addAUserToATeamV1TeamsTeamIdUsersUserIdPut', 'userId', userId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addAUserToATeamV1TeamsTeamIdUsersUserIdPut', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut: async (teamId: string, studyId: string, authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut: async (teamId: string, dashboardId: string, featureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'teamId', teamId)
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'dashboardId', dashboardId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'featureId', featureId)
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut: async (teamId: string, datasetId: string, featureId: string, index?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {boolean} [reconcileFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut: async (teamId: string, datasetId: string, parentId: string, reconcileFeatures?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut', 'datasetId', datasetId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut', 'parentId', parentId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (reconcileFeatures !== undefined) {
                localVarQueryParameter['reconcile_features'] = reconcileFeatures;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: async (teamId: string, datasetId: string, populationAttributeValueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId)
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: async (teamId: string, studyId: string, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'studyId', studyId)
            // verify required parameter 'bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost' is not null or undefined
            assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId 
         * @param {StudyIn | DoiIn} studyInDoiIn 
         * @param {boolean} [updateExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost: async (teamId: string, studyInDoiIn: StudyIn | DoiIn, updateExisting?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAStudyV1TeamsTeamIdStudiesPost', 'teamId', teamId)
            // verify required parameter 'studyInDoiIn' is not null or undefined
            assertParamExists('createAStudyV1TeamsTeamIdStudiesPost', 'studyInDoiIn', studyInDoiIn)
            const localVarPath = `/v1/teams/{team_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (updateExisting !== undefined) {
                localVarQueryParameter['update_existing'] = updateExisting;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyInDoiIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} teamId 
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1TeamsTeamIdUsersPost: async (teamId: string, userId: string, updateProfileIn: UpdateProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAUserByCognitoIdV1TeamsTeamIdUsersPost', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createAUserByCognitoIdV1TeamsTeamIdUsersPost', 'userId', userId)
            // verify required parameter 'updateProfileIn' is not null or undefined
            assertParamExists('createAUserByCognitoIdV1TeamsTeamIdUsersPost', 'updateProfileIn', updateProfileIn)
            const localVarPath = `/v1/teams/{team_id}/users`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {string} teamId 
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1TeamsTeamIdUserPost: async (teamId: string, userProfileIn: UserProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAUserFromCredentialsV1TeamsTeamIdUserPost', 'teamId', teamId)
            // verify required parameter 'userProfileIn' is not null or undefined
            assertParamExists('createAUserFromCredentialsV1TeamsTeamIdUserPost', 'userProfileIn', userProfileIn)
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId 
         * @param {VariableIn} variableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost: async (teamId: string, variableIn: VariableIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAVariableV1TeamsTeamIdVariablesPost', 'teamId', teamId)
            // verify required parameter 'variableIn' is not null or undefined
            assertParamExists('createAVariableV1TeamsTeamIdVariablesPost', 'variableIn', variableIn)
            const localVarPath = `/v1/teams/{team_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(variableIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost: async (teamId: string, datasetId: string, featureIn: Array<FeatureIn>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'datasetId', datasetId)
            // verify required parameter 'featureIn' is not null or undefined
            assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'featureIn', featureIn)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost: async (teamId: string, datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'datasetId', datasetId)
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost: async (teamId: string, modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'modelId', modelId)
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId 
         * @param {AuthorIn} authorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost: async (teamId: string, authorIn: AuthorIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAuthorV1TeamsTeamIdAuthorsPost', 'teamId', teamId)
            // verify required parameter 'authorIn' is not null or undefined
            assertParamExists('createAuthorV1TeamsTeamIdAuthorsPost', 'authorIn', authorIn)
            const localVarPath = `/v1/teams/{team_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId 
         * @param {ConceptIn} conceptIn 
         * @param {boolean} [overwriteExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost: async (teamId: string, conceptIn: ConceptIn, overwriteExisting?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createConceptV1TeamsTeamIdConceptsPost', 'teamId', teamId)
            // verify required parameter 'conceptIn' is not null or undefined
            assertParamExists('createConceptV1TeamsTeamIdConceptsPost', 'conceptIn', conceptIn)
            const localVarPath = `/v1/teams/{team_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (overwriteExisting !== undefined) {
                localVarQueryParameter['overwrite_existing'] = overwriteExisting;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(conceptIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId 
         * @param {DashboardIn} dashboardIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost: async (teamId: string, dashboardIn: DashboardIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createDashboardPostV1TeamsTeamIdDashboardsPost', 'teamId', teamId)
            // verify required parameter 'dashboardIn' is not null or undefined
            assertParamExists('createDashboardPostV1TeamsTeamIdDashboardsPost', 'dashboardIn', dashboardIn)
            const localVarPath = `/v1/teams/{team_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dashboardIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost: async (teamId: string, datasetIn: DatasetIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createDatasetV1TeamsTeamIdDatasetsPost', 'teamId', teamId)
            // verify required parameter 'datasetIn' is not null or undefined
            assertParamExists('createDatasetV1TeamsTeamIdDatasetsPost', 'datasetIn', datasetIn)
            const localVarPath = `/v1/teams/{team_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost: async (teamId: string, featureIn: FeatureIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createFeatureV1TeamsTeamIdFeaturesPost', 'teamId', teamId)
            // verify required parameter 'featureIn' is not null or undefined
            assertParamExists('createFeatureV1TeamsTeamIdFeaturesPost', 'featureIn', featureIn)
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {string} teamId 
         * @param {IntegrationIn} integrationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1TeamsTeamIdIntegrationsPost: async (teamId: string, integrationIn: IntegrationIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createIntegrationV1TeamsTeamIdIntegrationsPost', 'teamId', teamId)
            // verify required parameter 'integrationIn' is not null or undefined
            assertParamExists('createIntegrationV1TeamsTeamIdIntegrationsPost', 'integrationIn', integrationIn)
            const localVarPath = `/v1/teams/{team_id}/integrations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(integrationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {string} teamId 
         * @param {MessageIn} messageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1TeamsTeamIdMessagesPost: async (teamId: string, messageIn: MessageIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createMessageV1TeamsTeamIdMessagesPost', 'teamId', teamId)
            // verify required parameter 'messageIn' is not null or undefined
            assertParamExists('createMessageV1TeamsTeamIdMessagesPost', 'messageIn', messageIn)
            const localVarPath = `/v1/teams/{team_id}/messages`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost: async (teamId: string, studyId: string, modelIn: Array<ModelIn>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'studyId', studyId)
            // verify required parameter 'modelIn' is not null or undefined
            assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'modelIn', modelIn)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {string} teamId 
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost: async (teamId: string, arrayAuthorInAuthorIn: Array<AuthorIn> | AuthorIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost', 'teamId', teamId)
            // verify required parameter 'arrayAuthorInAuthorIn' is not null or undefined
            assertParamExists('createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost', 'arrayAuthorInAuthorIn', arrayAuthorInAuthorIn)
            const localVarPath = `/v1/teams/{team_id}/authors/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(arrayAuthorInAuthorIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId 
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost: async (teamId: string, arrayVariableInVariableIn: Array<VariableIn> | VariableIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createMultipleVariablesV1TeamsTeamIdVariablesBulkPost', 'teamId', teamId)
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            assertParamExists('createMultipleVariablesV1TeamsTeamIdVariablesBulkPost', 'arrayVariableInVariableIn', arrayVariableInVariableIn)
            const localVarPath = `/v1/teams/{team_id}/variables/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(arrayVariableInVariableIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete: async (teamId: string, modelId: string, associationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: async (teamId: string, modelId: string, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'modelId', modelId)
            // verify required parameter 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete' is not null or undefined
            assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete: async (teamId: string, authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete', 'teamId', teamId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete', 'authorId', authorId)
            const localVarPath = `/v1/teams/{team_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete: async (teamId: string, conceptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteConceptV1TeamsTeamIdConceptsConceptIdDelete', 'teamId', teamId)
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('deleteConceptV1TeamsTeamIdConceptsConceptIdDelete', 'conceptId', conceptId)
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete: async (teamId: string, dashboardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete', 'teamId', teamId)
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete', 'dashboardId', dashboardId)
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete: async (teamId: string, datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete: async (teamId: string, featureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete', 'teamId', teamId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete', 'featureId', featureId)
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: async (teamId: string, datasetId: string, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId)
            // verify required parameter 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete' is not null or undefined
            assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete: async (teamId: string, modelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteModelV1TeamsTeamIdModelsModelIdDelete', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteModelV1TeamsTeamIdModelsModelIdDelete', 'modelId', modelId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete: async (teamId: string, studyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteStudyV1TeamsTeamIdStudiesStudyIdDelete', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('deleteStudyV1TeamsTeamIdStudiesStudyIdDelete', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete: async (teamId: string, variableId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteVariableV1TeamsTeamIdVariablesVariableIdDelete', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('deleteVariableV1TeamsTeamIdVariablesVariableIdDelete', 'variableId', variableId)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet: async (teamId: string, datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost: async (teamId: string, associationId: string, resourceFlagIn: ResourceFlagIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost', 'associationId', associationId)
            // verify required parameter 'resourceFlagIn' is not null or undefined
            assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost', 'resourceFlagIn', resourceFlagIn)
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/flags`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceFlagIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet: async (teamId: string, associationId: string, modelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/teams`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId 
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet: async (teamId: string, includeAvatar?: boolean, trialExpireDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getAuthenticatedUserV1TeamsTeamIdUserGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }

            if (trialExpireDate !== undefined) {
                localVarQueryParameter['trial_expire_date'] = trialExpireDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet: async (teamId: string, authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getAuthorV1TeamsTeamIdAuthorsAuthorIdGet', 'teamId', teamId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('getAuthorV1TeamsTeamIdAuthorsAuthorIdGet', 'authorId', authorId)
            const localVarPath = `/v1/teams/{team_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet: async (teamId: string, minRelationshipStrength?: number, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getConceptGraphV1TeamsTeamIdGraphConceptGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/concept_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet: async (teamId: string, conceptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getConceptV1TeamsTeamIdConceptsConceptIdGet', 'teamId', teamId)
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('getConceptV1TeamsTeamIdConceptsConceptIdGet', 'conceptId', conceptId)
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet: async (teamId: string, dashboardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getDashboardV1TeamsTeamIdDashboardsDashboardIdGet', 'teamId', teamId)
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('getDashboardV1TeamsTeamIdDashboardsDashboardIdGet', 'dashboardId', dashboardId)
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/dataset_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet: async (teamId: string, datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getDatasetV1TeamsTeamIdDatasetsDatasetIdGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('getDatasetV1TeamsTeamIdDatasetsDatasetIdGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get roles on a team.
         * @summary Get Existing Roles On A Team.
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExistingRolesOnATeamV1TeamsTeamIdRolesGet: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getExistingRolesOnATeamV1TeamsTeamIdRolesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/roles`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet: async (teamId: string, featureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getFeatureV1TeamsTeamIdFeaturesFeatureIdGet', 'teamId', teamId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('getFeatureV1TeamsTeamIdFeaturesFeatureIdGet', 'featureId', featureId)
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} teamId 
         * @param {string} integrationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet: async (teamId: string, integrationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet', 'teamId', teamId)
            // verify required parameter 'integrationId' is not null or undefined
            assertParamExists('getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet', 'integrationId', integrationId)
            const localVarPath = `/v1/teams/{team_id}/integrations/{integration_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1TeamsTeamIdIntegrationsGet: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getIntegrationsV1TeamsTeamIdIntegrationsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/integrations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} teamId 
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1TeamsTeamIdMessagesMessageIdGet: async (teamId: string, messageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getMessageV1TeamsTeamIdMessagesMessageIdGet', 'teamId', teamId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('getMessageV1TeamsTeamIdMessagesMessageIdGet', 'messageId', messageId)
            const localVarPath = `/v1/teams/{team_id}/messages/{message_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet: async (metricId: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metricId' is not null or undefined
            assertParamExists('getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet', 'metricId', metricId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/metrics/{metric_id}`
                .replace(`{${"metric_id"}}`, encodeURIComponent(String(metricId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1 
         * @param {string} metricId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get: async (metricId1: string, metricId2: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metricId1' is not null or undefined
            assertParamExists('getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get', 'metricId1', metricId1)
            // verify required parameter 'metricId2' is not null or undefined
            assertParamExists('getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get', 'metricId2', metricId2)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/metrics/{metric_id_1}/relationship/{metric_id_2}`
                .replace(`{${"metric_id_1"}}`, encodeURIComponent(String(metricId1)))
                .replace(`{${"metric_id_2"}}`, encodeURIComponent(String(metricId2)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet: async (teamId: string, modelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getModelV1TeamsTeamIdModelsModelIdGet', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getModelV1TeamsTeamIdModelsModelIdGet', 'modelId', modelId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get pending invites of a team.
         * @summary Get Pending Invites Of A Team.
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/invites`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet: async (teamId: string, associationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet', 'associationId', associationId)
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/direction`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet: async (teamId: string, associationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet', 'associationId', associationId)
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/reproducibility`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet: async (teamId: string, associationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet', 'associationId', associationId)
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/strength`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId 
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet: async (teamId: string, topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, minStrength?: number, minCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/semantic_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (topic1 !== undefined) {
                localVarQueryParameter['topic_1'] = topic1;
            }

            if (topic2 !== undefined) {
                localVarQueryParameter['topic_2'] = topic2;
            }

            if (ids1) {
                localVarQueryParameter['ids_1'] = ids1;
            }

            if (ids2) {
                localVarQueryParameter['ids_2'] = ids2;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (minCount !== undefined) {
                localVarQueryParameter['min_count'] = minCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet: async (teamId: string, studyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getStudyV1TeamsTeamIdStudiesStudyIdGet', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('getStudyV1TeamsTeamIdStudiesStudyIdGet', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId 
         * @param {string} teamId 
         * @param {string} [directedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet: async (relationshipId: any, teamId: string, directedAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relationshipId' is not null or undefined
            assertParamExists('getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet', 'relationshipId', relationshipId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/relationships/{relationship_id}/synthesis`
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (directedAt !== undefined) {
                localVarQueryParameter['directed_at'] = directedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Graph
         * @param {string} teamId 
         * @param {boolean} [randomSubset] Flag for getting a random subset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1TeamsTeamIdGraphTopicGraphGet: async (teamId: string, randomSubset?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTopicGraphV1TeamsTeamIdGraphTopicGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/topic_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (randomSubset !== undefined) {
                localVarQueryParameter['random_subset'] = randomSubset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet: async (topicId: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicId' is not null or undefined
            assertParamExists('getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet', 'topicId', topicId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/topics/{topic_id}`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1 
         * @param {string} topicId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get: async (topicId1: string, topicId2: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicId1' is not null or undefined
            assertParamExists('getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get', 'topicId1', topicId1)
            // verify required parameter 'topicId2' is not null or undefined
            assertParamExists('getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get', 'topicId2', topicId2)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/graph/topics/{topic_id_1}/relationship/{topic_id_2}`
                .replace(`{${"topic_id_1"}}`, encodeURIComponent(String(topicId1)))
                .replace(`{${"topic_id_2"}}`, encodeURIComponent(String(topicId2)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId 
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet: async (teamId: string, userId: string, includeAvatar?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getUserV1TeamsTeamIdUsersUserIdGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserV1TeamsTeamIdUsersUserIdGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get users with role.
         * @summary Get Users Of A Role.
         * @param {string} roleName 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet: async (roleName: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet', 'roleName', roleName)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/roles/{role_name}/users`
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId 
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet: async (teamId: string, email?: string, includeAvatar?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getUsersV1TeamsTeamIdUsersGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/users`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet: async (teamId: string, variableId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getVariableV1TeamsTeamIdVariablesVariableIdGet', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('getVariableV1TeamsTeamIdVariablesVariableIdGet', 'variableId', variableId)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a user to a team by email.
         * @summary Invite An Email To The Team.
         * @param {string} teamId 
         * @param {UserInvite} userInvite 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost: async (teamId: string, userInvite: UserInvite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost', 'teamId', teamId)
            // verify required parameter 'userInvite' is not null or undefined
            assertParamExists('inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost', 'userInvite', userInvite)
            const localVarPath = `/v1/teams/{team_id}/invites`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userInvite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet: async (teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/user/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdAssociationsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }

            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet: async (teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet: async (teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet', 'modelId', modelId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet: async (teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet: async (teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet', 'variableId', variableId)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthorsV1TeamsTeamIdAuthorsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet: async (teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet: async (teamId: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listConceptsV1TeamsTeamIdConceptsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet: async (teamId: string, dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet', 'teamId', teamId)
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet', 'dashboardId', dashboardId)
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDashboardsV1TeamsTeamIdDashboardsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet: async (teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet', 'variableId', variableId)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet: async (teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet: async (teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDatasetsV1TeamsTeamIdDatasetsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listFeaturesV1TeamsTeamIdFeaturesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet: async (teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet', 'modelId', modelId)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet: async (teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet: async (teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listModelsV1TeamsTeamIdModelsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1TeamsTeamIdRelationshipsGet: async (teamId: string, query?: string, includeHidden?: boolean, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, sortBy?: string, directionality?: number, originQuery?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listRelationshipsV1TeamsTeamIdRelationshipsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/relationships`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (directionality !== undefined) {
                localVarQueryParameter['directionality'] = directionality;
            }

            if (originQuery !== undefined) {
                localVarQueryParameter['origin_query'] = originQuery;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listStudiesV1TeamsTeamIdStudiesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserModelsV1TeamsTeamIdUsersUserIdModelsGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserModelsV1TeamsTeamIdUsersUserIdModelsGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listVariablesV1TeamsTeamIdVariablesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost} bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost: async (teamId: string, variableId: string, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost: BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', 'variableId', variableId)
            // verify required parameter 'bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost' is not null or undefined
            assertParamExists('mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', 'bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/merge`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch: async (teamId: string, modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'modelId', modelId)
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1TeamsTeamIdConceptsConceptIdPatch: async (teamId: string, conceptId: string, patchConceptOpArrayPatchConceptOp: PatchConceptOp | Array<PatchConceptOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchConceptV1TeamsTeamIdConceptsConceptIdPatch', 'teamId', teamId)
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('patchConceptV1TeamsTeamIdConceptsConceptIdPatch', 'conceptId', conceptId)
            // verify required parameter 'patchConceptOpArrayPatchConceptOp' is not null or undefined
            assertParamExists('patchConceptV1TeamsTeamIdConceptsConceptIdPatch', 'patchConceptOpArrayPatchConceptOp', patchConceptOpArrayPatchConceptOp)
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchConceptOpArrayPatchConceptOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch: async (teamId: string, datasetId: string, patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch', 'datasetId', datasetId)
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            assertParamExists('patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch', 'patchDatasetOpArrayPatchDatasetOp', patchDatasetOpArrayPatchDatasetOp)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchDatasetOpArrayPatchDatasetOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch: async (teamId: string, featureId: string, patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch', 'teamId', teamId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch', 'featureId', featureId)
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            assertParamExists('patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch', 'patchFeatureOpArrayPatchFeatureOp', patchFeatureOpArrayPatchFeatureOp)
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchFeatureOpArrayPatchFeatureOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch: async (teamId: string, modelId: string, patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchModelV1TeamsTeamIdModelsModelIdPatch', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('patchModelV1TeamsTeamIdModelsModelIdPatch', 'modelId', modelId)
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            assertParamExists('patchModelV1TeamsTeamIdModelsModelIdPatch', 'patchModelOpArrayPatchModelOp', patchModelOpArrayPatchModelOp)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchModelOpArrayPatchModelOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId 
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch: async (teamId: string, bulkPatchFeatureOp: Array<BulkPatchFeatureOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch', 'teamId', teamId)
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            assertParamExists('patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch', 'bulkPatchFeatureOp', bulkPatchFeatureOp)
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkPatchFeatureOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch: async (teamId: string, studyId: string, patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch', 'studyId', studyId)
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            assertParamExists('patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch', 'patchStudyOpArrayPatchStudyOp', patchStudyOpArrayPatchStudyOp)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchStudyOpArrayPatchStudyOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch: async (teamId: string, variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchVariableV1TeamsTeamIdVariablesVariableIdPatch', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('patchVariableV1TeamsTeamIdVariablesVariableIdPatch', 'variableId', variableId)
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            assertParamExists('patchVariableV1TeamsTeamIdVariablesVariableIdPatch', 'patchVariableOpArrayPatchVariableOp', patchVariableOpArrayPatchVariableOp)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchVariableOpArrayPatchVariableOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost: async (teamId: string, associationId: string, modelId: string, directionIn: DirectionIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'teamId', teamId)
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'associationId', associationId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'modelId', modelId)
            // verify required parameter 'directionIn' is not null or undefined
            assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'directionIn', directionIn)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}/directed_at`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(directionIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamV1TeamsPost: async (teamIn: TeamIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamIn' is not null or undefined
            assertParamExists('postTeamV1TeamsPost', 'teamIn', teamIn)
            const localVarPath = `/v1/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost: async (teamId: string, studyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/publish`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a user from a team by user_id.
         * @summary Remove A User From A Team.
         * @param {string} userId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete: async (userId: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete', 'userId', userId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an email invite from a team by email.
         * @summary Remove An Email Invite From A Team.
         * @param {string} email 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete: async (email: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete', 'email', email)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/invites/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete: async (teamId: string, studyId: string, authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete: async (teamId: string, datasetId: string, featureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete: async (teamId: string, datasetId: string, tagObjectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'datasetId', datasetId)
            // verify required parameter 'tagObjectId' is not null or undefined
            assertParamExists('removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete: async (teamId: string, studyId: string, tagObjectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete', 'studyId', studyId)
            // verify required parameter 'tagObjectId' is not null or undefined
            assertParamExists('removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete: async (teamId: string, datasetId: string, parentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete', 'datasetId', datasetId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete', 'parentId', parentId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: async (teamId: string, datasetId: string, populationAttributeValueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId)
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove role from user.
         * @summary Remove Role From User
         * @param {string} userId 
         * @param {string} roleName 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete: async (userId: string, roleName: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete', 'userId', userId)
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete', 'roleName', roleName)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/roles/{role_name}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut: async (teamId: string, datasetId: string, datasetIn: DatasetIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut', 'datasetId', datasetId)
            // verify required parameter 'datasetIn' is not null or undefined
            assertParamExists('replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut', 'datasetIn', datasetIn)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut: async (teamId: string, featureId: string, featureIn: FeatureIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut', 'teamId', teamId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut', 'featureId', featureId)
            // verify required parameter 'featureIn' is not null or undefined
            assertParamExists('replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut', 'featureIn', featureIn)
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {ModelIn} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut: async (teamId: string, modelId: string, modelIn: ModelIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('replaceModelV1TeamsTeamIdModelsModelIdPut', 'teamId', teamId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('replaceModelV1TeamsTeamIdModelsModelIdPut', 'modelId', modelId)
            // verify required parameter 'modelIn' is not null or undefined
            assertParamExists('replaceModelV1TeamsTeamIdModelsModelIdPut', 'modelIn', modelIn)
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut: async (teamId: string, datasetId: string, tagObjectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut', 'teamId', teamId)
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut', 'datasetId', datasetId)
            // verify required parameter 'tagObjectId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId)
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut: async (teamId: string, studyId: string, tagObjectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut', 'studyId', studyId)
            // verify required parameter 'tagObjectId' is not null or undefined
            assertParamExists('tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId)
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId 
         * @param {string} teamId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1TeamsTeamIdUsersUserIdPatch: async (userId: string, teamId: string, updateProfileIn: UpdateProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateAUserByIdV1TeamsTeamIdUsersUserIdPatch', 'userId', userId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('updateAUserByIdV1TeamsTeamIdUsersUserIdPatch', 'teamId', teamId)
            // verify required parameter 'updateProfileIn' is not null or undefined
            assertParamExists('updateAUserByIdV1TeamsTeamIdUsersUserIdPatch', 'updateProfileIn', updateProfileIn)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId 
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut: async (teamId: string, userProfileIn: UserProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('updateAuthenticatedUserProfileV1TeamsTeamIdUserPut', 'teamId', teamId)
            // verify required parameter 'userProfileIn' is not null or undefined
            assertParamExists('updateAuthenticatedUserProfileV1TeamsTeamIdUserPut', 'userProfileIn', userProfileIn)
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} teamId 
         * @param {string} integrationId 
         * @param {IntegrationIn} integrationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch: async (teamId: string, integrationId: string, integrationIn: IntegrationIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch', 'teamId', teamId)
            // verify required parameter 'integrationId' is not null or undefined
            assertParamExists('updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch', 'integrationId', integrationId)
            // verify required parameter 'integrationIn' is not null or undefined
            assertParamExists('updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch', 'integrationIn', integrationIn)
            const localVarPath = `/v1/teams/{team_id}/integrations/{integration_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(integrationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} teamId 
         * @param {string} messageId 
         * @param {MessageIn} messageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1TeamsTeamIdMessagesMessageIdPatch: async (teamId: string, messageId: string, messageIn: MessageIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('updateMessageV1TeamsTeamIdMessagesMessageIdPatch', 'teamId', teamId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('updateMessageV1TeamsTeamIdMessagesMessageIdPatch', 'messageId', messageId)
            // verify required parameter 'messageIn' is not null or undefined
            assertParamExists('updateMessageV1TeamsTeamIdMessagesMessageIdPatch', 'messageIn', messageIn)
            const localVarPath = `/v1/teams/{team_id}/messages/{message_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a user to a team by user_id.
         * @summary Add A Role To A Team.
         * @param {string} teamId 
         * @param {RoleIn | Array<RoleIn>} roleInArrayRoleIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addARoleToATeamV1TeamsTeamIdRolesPost(teamId: string, roleInArrayRoleIn: RoleIn | Array<RoleIn>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addARoleToATeamV1TeamsTeamIdRolesPost(teamId, roleInArrayRoleIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a user to a team role.
         * @summary Add A User To A Role.
         * @param {string} userId 
         * @param {string} roleName 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut(userId: string, roleName: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut(userId, roleName, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a user to a team by user_id.
         * @summary Add A User To A Team.
         * @param {string} userId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAUserToATeamV1TeamsTeamIdUsersUserIdPut(userId: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAUserToATeamV1TeamsTeamIdUsersUserIdPut(userId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId: string, studyId: string, authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId: string, dashboardId: string, featureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId: string, datasetId: string, featureId: string, index?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {boolean} [reconcileFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId: string, datasetId: string, parentId: string, reconcileFeatures?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId: string, datasetId: string, populationAttributeValueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId: string, studyId: string, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId 
         * @param {StudyIn | DoiIn} studyInDoiIn 
         * @param {boolean} [updateExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAStudyV1TeamsTeamIdStudiesPost(teamId: string, studyInDoiIn: StudyIn | DoiIn, updateExisting?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAStudyV1TeamsTeamIdStudiesPost(teamId, studyInDoiIn, updateExisting, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} teamId 
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId: string, userId: string, updateProfileIn: UpdateProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId, userId, updateProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {string} teamId 
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId: string, userProfileIn: UserProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId, userProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId 
         * @param {VariableIn} variableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAVariableV1TeamsTeamIdVariablesPost(teamId: string, variableIn: VariableIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId: string, datasetId: string, featureIn: Array<FeatureIn>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId: string, datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId: string, modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId 
         * @param {AuthorIn} authorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthorV1TeamsTeamIdAuthorsPost(teamId: string, authorIn: AuthorIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId 
         * @param {ConceptIn} conceptIn 
         * @param {boolean} [overwriteExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConceptV1TeamsTeamIdConceptsPost(teamId: string, conceptIn: ConceptIn, overwriteExisting?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, overwriteExisting, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId 
         * @param {DashboardIn} dashboardIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDashboardPostV1TeamsTeamIdDashboardsPost(teamId: string, dashboardIn: DashboardIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDatasetV1TeamsTeamIdDatasetsPost(teamId: string, datasetIn: DatasetIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeatureV1TeamsTeamIdFeaturesPost(teamId: string, featureIn: FeatureIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {string} teamId 
         * @param {IntegrationIn} integrationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIntegrationV1TeamsTeamIdIntegrationsPost(teamId: string, integrationIn: IntegrationIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIntegrationV1TeamsTeamIdIntegrationsPost(teamId, integrationIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {string} teamId 
         * @param {MessageIn} messageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMessageV1TeamsTeamIdMessagesPost(teamId: string, messageIn: MessageIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMessageV1TeamsTeamIdMessagesPost(teamId, messageIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId: string, studyId: string, modelIn: Array<ModelIn>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {string} teamId 
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId: string, arrayAuthorInAuthorIn: Array<AuthorIn> | AuthorIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthorOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId, arrayAuthorInAuthorIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId 
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId: string, arrayVariableInVariableIn: Array<VariableIn> | VariableIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VariableOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId: string, modelId: string, associationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId: string, modelId: string, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId: string, authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId: string, conceptId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId: string, dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId: string, datasetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId: string, featureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId: string, datasetId: string, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId: string, modelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId: string, studyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId: string, variableId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId: string, datasetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId: string, associationId: string, resourceFlagIn: ResourceFlagIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId, associationId, resourceFlagIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId: string, associationId: string, modelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId 
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatedUserV1TeamsTeamIdUserGet(teamId: string, includeAvatar?: boolean, trialExpireDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, trialExpireDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId: string, authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId: string, minRelationshipStrength?: number, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId: string, conceptId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId: string, dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId: string, datasetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get roles on a team.
         * @summary Get Existing Roles On A Team.
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExistingRolesOnATeamV1TeamsTeamIdRolesGet(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExistingRolesOnATeamV1TeamsTeamIdRolesGet(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId: string, featureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} teamId 
         * @param {string} integrationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(teamId: string, integrationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(teamId, integrationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrationsV1TeamsTeamIdIntegrationsGet(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Integration>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrationsV1TeamsTeamIdIntegrationsGet(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} teamId 
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageV1TeamsTeamIdMessagesMessageIdGet(teamId: string, messageId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageV1TeamsTeamIdMessagesMessageIdGet(teamId, messageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1 
         * @param {string} metricId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1: string, metricId2: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelV1TeamsTeamIdModelsModelIdGet(teamId: string, modelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get pending invites of a team.
         * @summary Get Pending Invites Of A Team.
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserInvite>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId: string, associationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipDirection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId: string, associationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipReproducibility>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId: string, associationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipStrength>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId 
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId: string, topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, minStrength?: number, minCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId: string, studyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId 
         * @param {string} teamId 
         * @param {string} [directedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId: any, teamId: string, directedAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicRelationshipSynthesisOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId, teamId, directedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Graph
         * @param {string} teamId 
         * @param {boolean} [randomSubset] Flag for getting a random subset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId: string, randomSubset?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId, randomSubset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1 
         * @param {string} topicId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1: string, topicId2: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId 
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserV1TeamsTeamIdUsersUserIdGet(teamId: string, userId: string, includeAvatar?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPublicProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get users with role.
         * @summary Get Users Of A Role.
         * @param {string} roleName 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet(roleName: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet(roleName, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId 
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersV1TeamsTeamIdUsersGet(teamId: string, email?: string, includeAvatar?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserPublicProfileOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId: string, variableId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a user to a team by email.
         * @summary Invite An Email To The Team.
         * @param {string} teamId 
         * @param {UserInvite} userInvite 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(teamId: string, userInvite: UserInvite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(teamId, userInvite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdAssociationsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthorsV1TeamsTeamIdAuthorsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConceptsV1TeamsTeamIdConceptsGet(teamId: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConceptsV1TeamsTeamIdConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId: string, dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardsV1TeamsTeamIdDashboardsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetsV1TeamsTeamIdDatasetsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeaturesV1TeamsTeamIdFeaturesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsV1TeamsTeamIdModelsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId: string, query?: string, includeHidden?: boolean, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, sortBy?: string, directionality?: number, originQuery?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStudiesV1TeamsTeamIdStudiesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVariablesV1TeamsTeamIdVariablesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost} bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId: string, variableId: string, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost: BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId: string, modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId: string, conceptId: string, patchConceptOpArrayPatchConceptOp: PatchConceptOp | Array<PatchConceptOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId, conceptId, patchConceptOpArrayPatchConceptOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId: string, datasetId: string, patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId: string, featureId: string, patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchModelV1TeamsTeamIdModelsModelIdPatch(teamId: string, modelId: string, patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId 
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId: string, bulkPatchFeatureOp: Array<BulkPatchFeatureOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId: string, studyId: string, patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId: string, variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId: string, associationId: string, modelId: string, directionIn: DirectionIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTeamV1TeamsPost(teamIn: TeamIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTeamV1TeamsPost(teamIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId: string, studyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a user from a team by user_id.
         * @summary Remove A User From A Team.
         * @param {string} userId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(userId: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(userId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove an email invite from a team by email.
         * @summary Remove An Email Invite From A Team.
         * @param {string} email 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(email: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(email, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId: string, studyId: string, authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId: string, datasetId: string, featureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId: string, datasetId: string, tagObjectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId: string, studyId: string, tagObjectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId: string, datasetId: string, parentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId: string, datasetId: string, populationAttributeValueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove role from user.
         * @summary Remove Role From User
         * @param {string} userId 
         * @param {string} roleName 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete(userId: string, roleName: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete(userId, roleName, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId: string, datasetId: string, datasetIn: DatasetIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId: string, featureId: string, featureIn: FeatureIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {ModelIn} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceModelV1TeamsTeamIdModelsModelIdPut(teamId: string, modelId: string, modelIn: ModelIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId: string, datasetId: string, tagObjectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId: string, studyId: string, tagObjectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId 
         * @param {string} teamId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId: string, teamId: string, updateProfileIn: UpdateProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId, teamId, updateProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId 
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId: string, userProfileIn: UserProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} teamId 
         * @param {string} integrationId 
         * @param {IntegrationIn} integrationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(teamId: string, integrationId: string, integrationIn: IntegrationIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(teamId, integrationId, integrationIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} teamId 
         * @param {string} messageId 
         * @param {MessageIn} messageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMessageV1TeamsTeamIdMessagesMessageIdPatch(teamId: string, messageId: string, messageIn: MessageIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessageV1TeamsTeamIdMessagesMessageIdPatch(teamId, messageId, messageIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * Add a user to a team by user_id.
         * @summary Add A Role To A Team.
         * @param {string} teamId 
         * @param {RoleIn | Array<RoleIn>} roleInArrayRoleIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addARoleToATeamV1TeamsTeamIdRolesPost(teamId: string, roleInArrayRoleIn: RoleIn | Array<RoleIn>, options?: any): AxiosPromise<Array<RoleOut>> {
            return localVarFp.addARoleToATeamV1TeamsTeamIdRolesPost(teamId, roleInArrayRoleIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a user to a team role.
         * @summary Add A User To A Role.
         * @param {string} userId 
         * @param {string} roleName 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut(userId: string, roleName: string, teamId: string, options?: any): AxiosPromise<void> {
            return localVarFp.addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut(userId, roleName, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a user to a team by user_id.
         * @summary Add A User To A Team.
         * @param {string} userId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToATeamV1TeamsTeamIdUsersUserIdPut(userId: string, teamId: string, options?: any): AxiosPromise<void> {
            return localVarFp.addAUserToATeamV1TeamsTeamIdUsersUserIdPut(userId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId: string, studyId: string, authorId: string, options?: any): AxiosPromise<void> {
            return localVarFp.addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId: string, dashboardId: string, featureId: string, options?: any): AxiosPromise<void> {
            return localVarFp.addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId: string, datasetId: string, featureId: string, index?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {boolean} [reconcileFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId: string, datasetId: string, parentId: string, reconcileFeatures?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId: string, datasetId: string, populationAttributeValueId: string, options?: any): AxiosPromise<void> {
            return localVarFp.addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId: string, studyId: string, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options?: any): AxiosPromise<void> {
            return localVarFp.bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId 
         * @param {StudyIn | DoiIn} studyInDoiIn 
         * @param {boolean} [updateExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost(teamId: string, studyInDoiIn: StudyIn | DoiIn, updateExisting?: boolean, options?: any): AxiosPromise<StudyOut> {
            return localVarFp.createAStudyV1TeamsTeamIdStudiesPost(teamId, studyInDoiIn, updateExisting, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} teamId 
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId: string, userId: string, updateProfileIn: UpdateProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId, userId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {string} teamId 
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId: string, userProfileIn: UserProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId, userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId 
         * @param {VariableIn} variableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost(teamId: string, variableIn: VariableIn, options?: any): AxiosPromise<VariableOut> {
            return localVarFp.createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId: string, datasetId: string, featureIn: Array<FeatureIn>, options?: any): AxiosPromise<Array<FeatureOut>> {
            return localVarFp.createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId: string, datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options?: any): AxiosPromise<Array<AssociationOut>> {
            return localVarFp.createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId: string, modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options?: any): AxiosPromise<Array<AssociationOut>> {
            return localVarFp.createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId 
         * @param {AuthorIn} authorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost(teamId: string, authorIn: AuthorIn, options?: any): AxiosPromise<AuthorOut> {
            return localVarFp.createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId 
         * @param {ConceptIn} conceptIn 
         * @param {boolean} [overwriteExisting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost(teamId: string, conceptIn: ConceptIn, overwriteExisting?: boolean, options?: any): AxiosPromise<ConceptOut> {
            return localVarFp.createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, overwriteExisting, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId 
         * @param {DashboardIn} dashboardIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost(teamId: string, dashboardIn: DashboardIn, options?: any): AxiosPromise<DashboardOut> {
            return localVarFp.createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost(teamId: string, datasetIn: DatasetIn, options?: any): AxiosPromise<DatasetOut> {
            return localVarFp.createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost(teamId: string, featureIn: FeatureIn, options?: any): AxiosPromise<FeatureOut> {
            return localVarFp.createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {string} teamId 
         * @param {IntegrationIn} integrationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1TeamsTeamIdIntegrationsPost(teamId: string, integrationIn: IntegrationIn, options?: any): AxiosPromise<Integration> {
            return localVarFp.createIntegrationV1TeamsTeamIdIntegrationsPost(teamId, integrationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {string} teamId 
         * @param {MessageIn} messageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1TeamsTeamIdMessagesPost(teamId: string, messageIn: MessageIn, options?: any): AxiosPromise<MessageOut> {
            return localVarFp.createMessageV1TeamsTeamIdMessagesPost(teamId, messageIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId: string, studyId: string, modelIn: Array<ModelIn>, options?: any): AxiosPromise<Array<ModelOut>> {
            return localVarFp.createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {string} teamId 
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId: string, arrayAuthorInAuthorIn: Array<AuthorIn> | AuthorIn, options?: any): AxiosPromise<Array<AuthorOut>> {
            return localVarFp.createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId, arrayAuthorInAuthorIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId 
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId: string, arrayVariableInVariableIn: Array<VariableIn> | VariableIn, options?: any): AxiosPromise<Array<VariableOut>> {
            return localVarFp.createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId: string, modelId: string, associationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId: string, modelId: string, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId: string, authorId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId: string, conceptId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId: string, dashboardId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId: string, datasetId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId: string, featureId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId: string, datasetId: string, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options?: any): AxiosPromise<void> {
            return localVarFp.deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId: string, modelId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId: string, studyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId: string, variableId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId: string, datasetId: string, options?: any): AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>> {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId: string, associationId: string, resourceFlagIn: ResourceFlagIn, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId, associationId, resourceFlagIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId: string, associationId: string, modelId: string, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId: string, options?: any): AxiosPromise<Array<TeamOut>> {
            return localVarFp.getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId 
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet(teamId: string, includeAvatar?: boolean, trialExpireDate?: string, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, trialExpireDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId: string, authorId: string, options?: any): AxiosPromise<AuthorOut> {
            return localVarFp.getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId: string, minRelationshipStrength?: number, tags?: Array<string>, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId: string, conceptId: string, options?: any): AxiosPromise<ConceptOut> {
            return localVarFp.getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId: string, dashboardId: string, options?: any): AxiosPromise<DashboardOut> {
            return localVarFp.getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId: string, datasetId: string, options?: any): AxiosPromise<DatasetOut> {
            return localVarFp.getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get roles on a team.
         * @summary Get Existing Roles On A Team.
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExistingRolesOnATeamV1TeamsTeamIdRolesGet(teamId: string, options?: any): AxiosPromise<Array<RoleOut>> {
            return localVarFp.getExistingRolesOnATeamV1TeamsTeamIdRolesGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId: string, featureId: string, options?: any): AxiosPromise<FeatureOut> {
            return localVarFp.getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} teamId 
         * @param {string} integrationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(teamId: string, integrationId: string, options?: any): AxiosPromise<Integration> {
            return localVarFp.getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(teamId, integrationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1TeamsTeamIdIntegrationsGet(teamId: string, options?: any): AxiosPromise<Array<Integration>> {
            return localVarFp.getIntegrationsV1TeamsTeamIdIntegrationsGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} teamId 
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1TeamsTeamIdMessagesMessageIdGet(teamId: string, messageId: string, options?: any): AxiosPromise<MessageOut> {
            return localVarFp.getMessageV1TeamsTeamIdMessagesMessageIdGet(teamId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId: string, teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1 
         * @param {string} metricId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1: string, metricId2: string, teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet(teamId: string, modelId: string, options?: any): AxiosPromise<ModelOut> {
            return localVarFp.getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get pending invites of a team.
         * @summary Get Pending Invites Of A Team.
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(teamId: string, options?: any): AxiosPromise<Array<UserInvite>> {
            return localVarFp.getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId: string, associationId: string, options?: any): AxiosPromise<RelationshipDirection> {
            return localVarFp.getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId: string, associationId: string, options?: any): AxiosPromise<RelationshipReproducibility> {
            return localVarFp.getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId: string, associationId: string, options?: any): AxiosPromise<RelationshipStrength> {
            return localVarFp.getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId 
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId: string, topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, minStrength?: number, minCount?: number, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId: string, studyId: string, options?: any): AxiosPromise<StudyOut> {
            return localVarFp.getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId 
         * @param {string} teamId 
         * @param {string} [directedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId: any, teamId: string, directedAt?: string, options?: any): AxiosPromise<TopicRelationshipSynthesisOut> {
            return localVarFp.getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId, teamId, directedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Graph
         * @param {string} teamId 
         * @param {boolean} [randomSubset] Flag for getting a random subset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId: string, randomSubset?: boolean, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId, randomSubset, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId: string, teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1 
         * @param {string} topicId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1: string, topicId2: string, teamId: string, options?: any): AxiosPromise<GraphData> {
            return localVarFp.getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId 
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet(teamId: string, userId: string, includeAvatar?: boolean, options?: any): AxiosPromise<UserPublicProfileOut> {
            return localVarFp.getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Get users with role.
         * @summary Get Users Of A Role.
         * @param {string} roleName 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet(roleName: string, teamId: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet(roleName, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId 
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet(teamId: string, email?: string, includeAvatar?: boolean, options?: any): AxiosPromise<Array<UserPublicProfileOut>> {
            return localVarFp.getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId: string, variableId: string, options?: any): AxiosPromise<VariableOut> {
            return localVarFp.getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a user to a team by email.
         * @summary Invite An Email To The Team.
         * @param {string} teamId 
         * @param {UserInvite} userInvite 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(teamId: string, userInvite: UserInvite, options?: any): AxiosPromise<void> {
            return localVarFp.inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(teamId, userInvite, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<AuthorPaginationOut> {
            return localVarFp.listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<AuthorPaginationOut> {
            return localVarFp.listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet(teamId: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listConceptsV1TeamsTeamIdConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId 
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId: string, dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<DashboardPaginationOut> {
            return localVarFp.listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<DashboardPaginationOut> {
            return localVarFp.listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId: string, modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId: string, datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId: string, query?: string, includeHidden?: boolean, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, sortBy?: string, directionality?: number, originQuery?: string, options?: any): AxiosPromise<RelationshipPaginationOut> {
            return localVarFp.listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost} bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId: string, variableId: string, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost: BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options?: any): AxiosPromise<any> {
            return localVarFp.mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId: string, modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} teamId 
         * @param {string} conceptId 
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId: string, conceptId: string, patchConceptOpArrayPatchConceptOp: PatchConceptOp | Array<PatchConceptOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId, conceptId, patchConceptOpArrayPatchConceptOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId: string, datasetId: string, patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId: string, featureId: string, patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch(teamId: string, modelId: string, patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId 
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId: string, bulkPatchFeatureOp: Array<BulkPatchFeatureOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId: string, studyId: string, patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId: string, variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId 
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {DirectionIn} directionIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId: string, associationId: string, modelId: string, directionIn: DirectionIn, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamV1TeamsPost(teamIn: TeamIn, options?: any): AxiosPromise<TeamOut> {
            return localVarFp.postTeamV1TeamsPost(teamIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId: string, studyId: string, options?: any): AxiosPromise<StudyOut> {
            return localVarFp.publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a user from a team by user_id.
         * @summary Remove A User From A Team.
         * @param {string} userId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(userId: string, teamId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(userId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an email invite from a team by email.
         * @summary Remove An Email Invite From A Team.
         * @param {string} email 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(email: string, teamId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(email, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId: string, studyId: string, authorId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId: string, datasetId: string, featureId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId: string, datasetId: string, tagObjectId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId: string, studyId: string, tagObjectId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId: string, datasetId: string, parentId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId: string, datasetId: string, populationAttributeValueId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove role from user.
         * @summary Remove Role From User
         * @param {string} userId 
         * @param {string} roleName 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete(userId: string, roleName: string, teamId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete(userId, roleName, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId: string, datasetId: string, datasetIn: DatasetIn, options?: any): AxiosPromise<DatasetOut> {
            return localVarFp.replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId 
         * @param {string} featureId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId: string, featureId: string, featureIn: FeatureIn, options?: any): AxiosPromise<FeatureOut> {
            return localVarFp.replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId 
         * @param {string} modelId 
         * @param {ModelIn} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut(teamId: string, modelId: string, modelIn: ModelIn, options?: any): AxiosPromise<ModelOut> {
            return localVarFp.replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId 
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId: string, datasetId: string, tagObjectId: string, options?: any): AxiosPromise<void> {
            return localVarFp.tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId: string, studyId: string, tagObjectId: string, options?: any): AxiosPromise<void> {
            return localVarFp.tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId 
         * @param {string} teamId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId: string, teamId: string, updateProfileIn: UpdateProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId, teamId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId 
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId: string, userProfileIn: UserProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} teamId 
         * @param {string} integrationId 
         * @param {IntegrationIn} integrationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(teamId: string, integrationId: string, integrationIn: IntegrationIn, options?: any): AxiosPromise<Integration> {
            return localVarFp.updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(teamId, integrationId, integrationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} teamId 
         * @param {string} messageId 
         * @param {MessageIn} messageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1TeamsTeamIdMessagesMessageIdPatch(teamId: string, messageId: string, messageIn: MessageIn, options?: any): AxiosPromise<MessageOut> {
            return localVarFp.updateMessageV1TeamsTeamIdMessagesMessageIdPatch(teamId, messageId, messageIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addARoleToATeamV1TeamsTeamIdRolesPost operation in TeamsApi.
 * @export
 * @interface TeamsApiAddARoleToATeamV1TeamsTeamIdRolesPostRequest
 */
export interface TeamsApiAddARoleToATeamV1TeamsTeamIdRolesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddARoleToATeamV1TeamsTeamIdRolesPost
     */
    readonly teamId: string

    /**
     * 
     * @type {RoleIn | Array<RoleIn>}
     * @memberof TeamsApiAddARoleToATeamV1TeamsTeamIdRolesPost
     */
    readonly roleInArrayRoleIn: RoleIn | Array<RoleIn>
}

/**
 * Request parameters for addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut operation in TeamsApi.
 * @export
 * @interface TeamsApiAddAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPutRequest
 */
export interface TeamsApiAddAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut
     */
    readonly roleName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut
     */
    readonly teamId: string
}

/**
 * Request parameters for addAUserToATeamV1TeamsTeamIdUsersUserIdPut operation in TeamsApi.
 * @export
 * @interface TeamsApiAddAUserToATeamV1TeamsTeamIdUsersUserIdPutRequest
 */
export interface TeamsApiAddAUserToATeamV1TeamsTeamIdUsersUserIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddAUserToATeamV1TeamsTeamIdUsersUserIdPut
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddAUserToATeamV1TeamsTeamIdUsersUserIdPut
     */
    readonly teamId: string
}

/**
 * Request parameters for addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut operation in TeamsApi.
 * @export
 * @interface TeamsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest
 */
export interface TeamsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut
     */
    readonly authorId: string
}

/**
 * Request parameters for addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut operation in TeamsApi.
 * @export
 * @interface TeamsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest
 */
export interface TeamsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly dashboardId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly featureId: string
}

/**
 * Request parameters for addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut operation in TeamsApi.
 * @export
 * @interface TeamsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest
 */
export interface TeamsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * If true, then set the feature as the dataset index.
     * @type {boolean}
     * @memberof TeamsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly index?: boolean
}

/**
 * Request parameters for addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut operation in TeamsApi.
 * @export
 * @interface TeamsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPutRequest
 */
export interface TeamsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut
     */
    readonly parentId: string

    /**
     * 
     * @type {boolean}
     * @memberof TeamsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut
     */
    readonly reconcileFeatures?: boolean
}

/**
 * Request parameters for addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut operation in TeamsApi.
 * @export
 * @interface TeamsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest
 */
export interface TeamsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly populationAttributeValueId: string
}

/**
 * Request parameters for bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost operation in TeamsApi.
 * @export
 * @interface TeamsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest
 */
export interface TeamsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
     */
    readonly studyId: string

    /**
     * 
     * @type {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost}
     * @memberof TeamsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
     */
    readonly bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
}

/**
 * Request parameters for createAStudyV1TeamsTeamIdStudiesPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateAStudyV1TeamsTeamIdStudiesPostRequest
 */
export interface TeamsApiCreateAStudyV1TeamsTeamIdStudiesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateAStudyV1TeamsTeamIdStudiesPost
     */
    readonly teamId: string

    /**
     * 
     * @type {StudyIn | DoiIn}
     * @memberof TeamsApiCreateAStudyV1TeamsTeamIdStudiesPost
     */
    readonly studyInDoiIn: StudyIn | DoiIn

    /**
     * 
     * @type {boolean}
     * @memberof TeamsApiCreateAStudyV1TeamsTeamIdStudiesPost
     */
    readonly updateExisting?: boolean
}

/**
 * Request parameters for createAUserByCognitoIdV1TeamsTeamIdUsersPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPostRequest
 */
export interface TeamsApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPost
     */
    readonly userId: string

    /**
     * 
     * @type {UpdateProfileIn}
     * @memberof TeamsApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPost
     */
    readonly updateProfileIn: UpdateProfileIn
}

/**
 * Request parameters for createAUserFromCredentialsV1TeamsTeamIdUserPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateAUserFromCredentialsV1TeamsTeamIdUserPostRequest
 */
export interface TeamsApiCreateAUserFromCredentialsV1TeamsTeamIdUserPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateAUserFromCredentialsV1TeamsTeamIdUserPost
     */
    readonly teamId: string

    /**
     * 
     * @type {UserProfileIn}
     * @memberof TeamsApiCreateAUserFromCredentialsV1TeamsTeamIdUserPost
     */
    readonly userProfileIn: UserProfileIn
}

/**
 * Request parameters for createAVariableV1TeamsTeamIdVariablesPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateAVariableV1TeamsTeamIdVariablesPostRequest
 */
export interface TeamsApiCreateAVariableV1TeamsTeamIdVariablesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateAVariableV1TeamsTeamIdVariablesPost
     */
    readonly teamId: string

    /**
     * 
     * @type {VariableIn}
     * @memberof TeamsApiCreateAVariableV1TeamsTeamIdVariablesPost
     */
    readonly variableIn: VariableIn
}

/**
 * Request parameters for createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest
 */
export interface TeamsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {Array<FeatureIn>}
     * @memberof TeamsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost
     */
    readonly featureIn: Array<FeatureIn>
}

/**
 * Request parameters for createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest
 */
export interface TeamsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof TeamsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>
}

/**
 * Request parameters for createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest
 */
export interface TeamsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost
     */
    readonly modelId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof TeamsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>

    /**
     * 
     * @type {boolean}
     * @memberof TeamsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost
     */
    readonly mergeFeatures?: boolean
}

/**
 * Request parameters for createAuthorV1TeamsTeamIdAuthorsPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateAuthorV1TeamsTeamIdAuthorsPostRequest
 */
export interface TeamsApiCreateAuthorV1TeamsTeamIdAuthorsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateAuthorV1TeamsTeamIdAuthorsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {AuthorIn}
     * @memberof TeamsApiCreateAuthorV1TeamsTeamIdAuthorsPost
     */
    readonly authorIn: AuthorIn
}

/**
 * Request parameters for createConceptV1TeamsTeamIdConceptsPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateConceptV1TeamsTeamIdConceptsPostRequest
 */
export interface TeamsApiCreateConceptV1TeamsTeamIdConceptsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateConceptV1TeamsTeamIdConceptsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {ConceptIn}
     * @memberof TeamsApiCreateConceptV1TeamsTeamIdConceptsPost
     */
    readonly conceptIn: ConceptIn

    /**
     * 
     * @type {boolean}
     * @memberof TeamsApiCreateConceptV1TeamsTeamIdConceptsPost
     */
    readonly overwriteExisting?: boolean
}

/**
 * Request parameters for createDashboardPostV1TeamsTeamIdDashboardsPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateDashboardPostV1TeamsTeamIdDashboardsPostRequest
 */
export interface TeamsApiCreateDashboardPostV1TeamsTeamIdDashboardsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateDashboardPostV1TeamsTeamIdDashboardsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {DashboardIn}
     * @memberof TeamsApiCreateDashboardPostV1TeamsTeamIdDashboardsPost
     */
    readonly dashboardIn: DashboardIn
}

/**
 * Request parameters for createDatasetV1TeamsTeamIdDatasetsPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateDatasetV1TeamsTeamIdDatasetsPostRequest
 */
export interface TeamsApiCreateDatasetV1TeamsTeamIdDatasetsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateDatasetV1TeamsTeamIdDatasetsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {DatasetIn}
     * @memberof TeamsApiCreateDatasetV1TeamsTeamIdDatasetsPost
     */
    readonly datasetIn: DatasetIn
}

/**
 * Request parameters for createFeatureV1TeamsTeamIdFeaturesPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateFeatureV1TeamsTeamIdFeaturesPostRequest
 */
export interface TeamsApiCreateFeatureV1TeamsTeamIdFeaturesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateFeatureV1TeamsTeamIdFeaturesPost
     */
    readonly teamId: string

    /**
     * 
     * @type {FeatureIn}
     * @memberof TeamsApiCreateFeatureV1TeamsTeamIdFeaturesPost
     */
    readonly featureIn: FeatureIn
}

/**
 * Request parameters for createIntegrationV1TeamsTeamIdIntegrationsPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateIntegrationV1TeamsTeamIdIntegrationsPostRequest
 */
export interface TeamsApiCreateIntegrationV1TeamsTeamIdIntegrationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateIntegrationV1TeamsTeamIdIntegrationsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {IntegrationIn}
     * @memberof TeamsApiCreateIntegrationV1TeamsTeamIdIntegrationsPost
     */
    readonly integrationIn: IntegrationIn
}

/**
 * Request parameters for createMessageV1TeamsTeamIdMessagesPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateMessageV1TeamsTeamIdMessagesPostRequest
 */
export interface TeamsApiCreateMessageV1TeamsTeamIdMessagesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateMessageV1TeamsTeamIdMessagesPost
     */
    readonly teamId: string

    /**
     * 
     * @type {MessageIn}
     * @memberof TeamsApiCreateMessageV1TeamsTeamIdMessagesPost
     */
    readonly messageIn: MessageIn
}

/**
 * Request parameters for createModelsV1TeamsTeamIdStudiesStudyIdModelsPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest
 */
export interface TeamsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPost
     */
    readonly studyId: string

    /**
     * 
     * @type {Array<ModelIn>}
     * @memberof TeamsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPost
     */
    readonly modelIn: Array<ModelIn>
}

/**
 * Request parameters for createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPostRequest
 */
export interface TeamsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost
     */
    readonly teamId: string

    /**
     * 
     * @type {Array<AuthorIn> | AuthorIn}
     * @memberof TeamsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost
     */
    readonly arrayAuthorInAuthorIn: Array<AuthorIn> | AuthorIn
}

/**
 * Request parameters for createMultipleVariablesV1TeamsTeamIdVariablesBulkPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPostRequest
 */
export interface TeamsApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPost
     */
    readonly teamId: string

    /**
     * 
     * @type {Array<VariableIn> | VariableIn}
     * @memberof TeamsApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPost
     */
    readonly arrayVariableInVariableIn: Array<VariableIn> | VariableIn
}

/**
 * Request parameters for deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest
 */
export interface TeamsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete
     */
    readonly associationId: string
}

/**
 * Request parameters for deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest
 */
export interface TeamsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete}
     * @memberof TeamsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
     */
    readonly bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
}

/**
 * Request parameters for deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDeleteRequest
 */
export interface TeamsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete
     */
    readonly authorId: string
}

/**
 * Request parameters for deleteConceptV1TeamsTeamIdConceptsConceptIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDeleteRequest
 */
export interface TeamsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDelete
     */
    readonly conceptId: string
}

/**
 * Request parameters for deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDeleteRequest
 */
export interface TeamsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete
     */
    readonly dashboardId: string
}

/**
 * Request parameters for deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDeleteRequest
 */
export interface TeamsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete
     */
    readonly datasetId: string
}

/**
 * Request parameters for deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDeleteRequest
 */
export interface TeamsApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete
     */
    readonly featureId: string
}

/**
 * Request parameters for deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest
 */
export interface TeamsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete}
     * @memberof TeamsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
     */
    readonly bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
}

/**
 * Request parameters for deleteModelV1TeamsTeamIdModelsModelIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteModelV1TeamsTeamIdModelsModelIdDeleteRequest
 */
export interface TeamsApiDeleteModelV1TeamsTeamIdModelsModelIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteModelV1TeamsTeamIdModelsModelIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteModelV1TeamsTeamIdModelsModelIdDelete
     */
    readonly modelId: string
}

/**
 * Request parameters for deleteStudyV1TeamsTeamIdStudiesStudyIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDeleteRequest
 */
export interface TeamsApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDelete
     */
    readonly studyId: string
}

/**
 * Request parameters for deleteVariableV1TeamsTeamIdVariablesVariableIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDeleteRequest
 */
export interface TeamsApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDelete
     */
    readonly variableId: string
}

/**
 * Request parameters for fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest
 */
export interface TeamsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet
     */
    readonly datasetId: string
}

/**
 * Request parameters for flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost operation in TeamsApi.
 * @export
 * @interface TeamsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPostRequest
 */
export interface TeamsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost
     */
    readonly associationId: string

    /**
     * 
     * @type {ResourceFlagIn}
     * @memberof TeamsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost
     */
    readonly resourceFlagIn: ResourceFlagIn
}

/**
 * Request parameters for getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest
 */
export interface TeamsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet
     */
    readonly modelId: string
}

/**
 * Request parameters for getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGetRequest
 */
export interface TeamsApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getAuthenticatedUserV1TeamsTeamIdUserGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetAuthenticatedUserV1TeamsTeamIdUserGetRequest
 */
export interface TeamsApiGetAuthenticatedUserV1TeamsTeamIdUserGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetAuthenticatedUserV1TeamsTeamIdUserGet
     */
    readonly teamId: string

    /**
     * Include the user\&#39;s avatar.
     * @type {boolean}
     * @memberof TeamsApiGetAuthenticatedUserV1TeamsTeamIdUserGet
     */
    readonly includeAvatar?: boolean

    /**
     * Date the trial expires
     * @type {string}
     * @memberof TeamsApiGetAuthenticatedUserV1TeamsTeamIdUserGet
     */
    readonly trialExpireDate?: string
}

/**
 * Request parameters for getAuthorV1TeamsTeamIdAuthorsAuthorIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGetRequest
 */
export interface TeamsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGet
     */
    readonly authorId: string
}

/**
 * Request parameters for getConceptGraphV1TeamsTeamIdGraphConceptGraphGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGetRequest
 */
export interface TeamsApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGet
     */
    readonly teamId: string

    /**
     * Min strength
     * @type {number}
     * @memberof TeamsApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGet
     */
    readonly minRelationshipStrength?: number

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof TeamsApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGet
     */
    readonly tags?: Array<string>
}

/**
 * Request parameters for getConceptV1TeamsTeamIdConceptsConceptIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetConceptV1TeamsTeamIdConceptsConceptIdGetRequest
 */
export interface TeamsApiGetConceptV1TeamsTeamIdConceptsConceptIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetConceptV1TeamsTeamIdConceptsConceptIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetConceptV1TeamsTeamIdConceptsConceptIdGet
     */
    readonly conceptId: string
}

/**
 * Request parameters for getDashboardV1TeamsTeamIdDashboardsDashboardIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGetRequest
 */
export interface TeamsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGet
     */
    readonly dashboardId: string
}

/**
 * Request parameters for getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGetRequest
 */
export interface TeamsApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getDatasetV1TeamsTeamIdDatasetsDatasetIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGetRequest
 */
export interface TeamsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGet
     */
    readonly datasetId: string
}

/**
 * Request parameters for getExistingRolesOnATeamV1TeamsTeamIdRolesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetExistingRolesOnATeamV1TeamsTeamIdRolesGetRequest
 */
export interface TeamsApiGetExistingRolesOnATeamV1TeamsTeamIdRolesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetExistingRolesOnATeamV1TeamsTeamIdRolesGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getFeatureV1TeamsTeamIdFeaturesFeatureIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGetRequest
 */
export interface TeamsApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGet
     */
    readonly featureId: string
}

/**
 * Request parameters for getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGetRequest
 */
export interface TeamsApiGetIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet
     */
    readonly integrationId: string
}

/**
 * Request parameters for getIntegrationsV1TeamsTeamIdIntegrationsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetIntegrationsV1TeamsTeamIdIntegrationsGetRequest
 */
export interface TeamsApiGetIntegrationsV1TeamsTeamIdIntegrationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetIntegrationsV1TeamsTeamIdIntegrationsGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getMessageV1TeamsTeamIdMessagesMessageIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetMessageV1TeamsTeamIdMessagesMessageIdGetRequest
 */
export interface TeamsApiGetMessageV1TeamsTeamIdMessagesMessageIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetMessageV1TeamsTeamIdMessagesMessageIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetMessageV1TeamsTeamIdMessagesMessageIdGet
     */
    readonly messageId: string
}

/**
 * Request parameters for getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGetRequest
 */
export interface TeamsApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet
     */
    readonly metricId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get operation in TeamsApi.
 * @export
 * @interface TeamsApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2GetRequest
 */
export interface TeamsApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2GetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get
     */
    readonly metricId1: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get
     */
    readonly metricId2: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get
     */
    readonly teamId: string
}

/**
 * Request parameters for getModelV1TeamsTeamIdModelsModelIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetModelV1TeamsTeamIdModelsModelIdGetRequest
 */
export interface TeamsApiGetModelV1TeamsTeamIdModelsModelIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetModelV1TeamsTeamIdModelsModelIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetModelV1TeamsTeamIdModelsModelIdGet
     */
    readonly modelId: string
}

/**
 * Request parameters for getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetPendingInvitesOfATeamV1TeamsTeamIdInvitesGetRequest
 */
export interface TeamsApiGetPendingInvitesOfATeamV1TeamsTeamIdInvitesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetPendingInvitesOfATeamV1TeamsTeamIdInvitesGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGetRequest
 */
export interface TeamsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet
     */
    readonly associationId: string
}

/**
 * Request parameters for getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGetRequest
 */
export interface TeamsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet
     */
    readonly associationId: string
}

/**
 * Request parameters for getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGetRequest
 */
export interface TeamsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet
     */
    readonly associationId: string
}

/**
 * Request parameters for getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGetRequest
 */
export interface TeamsApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly teamId: string

    /**
     * Topic 1
     * @type {string}
     * @memberof TeamsApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly topic1?: string

    /**
     * Topic 2
     * @type {string}
     * @memberof TeamsApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly topic2?: string

    /**
     * Topic 1 ids
     * @type {Array<string>}
     * @memberof TeamsApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly ids1?: Array<string>

    /**
     * Topic 2 ids
     * @type {Array<string>}
     * @memberof TeamsApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly ids2?: Array<string>

    /**
     * Min strength
     * @type {number}
     * @memberof TeamsApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly minStrength?: number

    /**
     * Min count
     * @type {number}
     * @memberof TeamsApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet
     */
    readonly minCount?: number
}

/**
 * Request parameters for getStudyV1TeamsTeamIdStudiesStudyIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetStudyV1TeamsTeamIdStudiesStudyIdGetRequest
 */
export interface TeamsApiGetStudyV1TeamsTeamIdStudiesStudyIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetStudyV1TeamsTeamIdStudiesStudyIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetStudyV1TeamsTeamIdStudiesStudyIdGet
     */
    readonly studyId: string
}

/**
 * Request parameters for getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGetRequest
 */
export interface TeamsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGetRequest {
    /**
     * 
     * @type {any}
     * @memberof TeamsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet
     */
    readonly relationshipId: any

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet
     */
    readonly directedAt?: string
}

/**
 * Request parameters for getTopicGraphV1TeamsTeamIdGraphTopicGraphGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGetRequest
 */
export interface TeamsApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGet
     */
    readonly teamId: string

    /**
     * Flag for getting a random subset.
     * @type {boolean}
     * @memberof TeamsApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGet
     */
    readonly randomSubset?: boolean
}

/**
 * Request parameters for getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGetRequest
 */
export interface TeamsApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet
     */
    readonly topicId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get operation in TeamsApi.
 * @export
 * @interface TeamsApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2GetRequest
 */
export interface TeamsApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2GetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get
     */
    readonly topicId1: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get
     */
    readonly topicId2: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get
     */
    readonly teamId: string
}

/**
 * Request parameters for getUserV1TeamsTeamIdUsersUserIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetUserV1TeamsTeamIdUsersUserIdGetRequest
 */
export interface TeamsApiGetUserV1TeamsTeamIdUsersUserIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetUserV1TeamsTeamIdUsersUserIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetUserV1TeamsTeamIdUsersUserIdGet
     */
    readonly userId: string

    /**
     * 
     * @type {boolean}
     * @memberof TeamsApiGetUserV1TeamsTeamIdUsersUserIdGet
     */
    readonly includeAvatar?: boolean
}

/**
 * Request parameters for getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGetRequest
 */
export interface TeamsApiGetUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet
     */
    readonly roleName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getUsersV1TeamsTeamIdUsersGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetUsersV1TeamsTeamIdUsersGetRequest
 */
export interface TeamsApiGetUsersV1TeamsTeamIdUsersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetUsersV1TeamsTeamIdUsersGet
     */
    readonly teamId: string

    /**
     * Email address
     * @type {string}
     * @memberof TeamsApiGetUsersV1TeamsTeamIdUsersGet
     */
    readonly email?: string

    /**
     * Include avatar
     * @type {boolean}
     * @memberof TeamsApiGetUsersV1TeamsTeamIdUsersGet
     */
    readonly includeAvatar?: boolean
}

/**
 * Request parameters for getVariableV1TeamsTeamIdVariablesVariableIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetVariableV1TeamsTeamIdVariablesVariableIdGetRequest
 */
export interface TeamsApiGetVariableV1TeamsTeamIdVariablesVariableIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetVariableV1TeamsTeamIdVariablesVariableIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetVariableV1TeamsTeamIdVariablesVariableIdGet
     */
    readonly variableId: string
}

/**
 * Request parameters for inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost operation in TeamsApi.
 * @export
 * @interface TeamsApiInviteAnEmailToTheTeamV1TeamsTeamIdInvitesPostRequest
 */
export interface TeamsApiInviteAnEmailToTheTeamV1TeamsTeamIdInvitesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiInviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost
     */
    readonly teamId: string

    /**
     * 
     * @type {UserInvite}
     * @memberof TeamsApiInviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost
     */
    readonly userInvite: UserInvite
}

/**
 * Request parameters for listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest
 */
export interface TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdAssociationsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAssociationsV1TeamsTeamIdAssociationsGetRequest
 */
export interface TeamsApiListAssociationsV1TeamsTeamIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly featureRelationship?: string

    /**
     * Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdAssociationsGet
     */
    readonly conceptRelationship?: string
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest
 */
export interface TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest
 */
export interface TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly modelId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest
 */
export interface TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest
 */
export interface TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly variableId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest
 */
export interface TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest
 */
export interface TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest
 */
export interface TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest
 */
export interface TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest
 */
export interface TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest
 */
export interface TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly tags?: Array<string>
}

/**
 * Request parameters for listAuthorsV1TeamsTeamIdAuthorsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAuthorsV1TeamsTeamIdAuthorsGetRequest
 */
export interface TeamsApiListAuthorsV1TeamsTeamIdAuthorsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AuthorSortEnum}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly orderBy?: AuthorSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdAuthorsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGetRequest
 */
export interface TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AuthorSortEnum}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly orderBy?: AuthorSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listConceptsV1TeamsTeamIdConceptsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListConceptsV1TeamsTeamIdConceptsGetRequest
 */
export interface TeamsApiListConceptsV1TeamsTeamIdConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly teamId: string

    /**
     * Min strength
     * @type {number}
     * @memberof TeamsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly minRelationshipStrength?: number

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof TeamsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof TeamsApiListConceptsV1TeamsTeamIdConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest
 */
export interface TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly dashboardId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listDashboardsV1TeamsTeamIdDashboardsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListDashboardsV1TeamsTeamIdDashboardsGetRequest
 */
export interface TeamsApiListDashboardsV1TeamsTeamIdDashboardsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DashboardSortEnum}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly orderBy?: DashboardSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdDashboardsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest
 */
export interface TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly variableId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DashboardSortEnum}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly orderBy?: DashboardSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest
 */
export interface TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGetRequest
 */
export interface TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listDatasetsV1TeamsTeamIdDatasetsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListDatasetsV1TeamsTeamIdDatasetsGetRequest
 */
export interface TeamsApiListDatasetsV1TeamsTeamIdDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly conceptTag?: string

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof TeamsApiListDatasetsV1TeamsTeamIdDatasetsGet
     */
    readonly featureRelationship?: string
}

/**
 * Request parameters for listFeaturesV1TeamsTeamIdFeaturesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListFeaturesV1TeamsTeamIdFeaturesGetRequest
 */
export interface TeamsApiListFeaturesV1TeamsTeamIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof TeamsApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof TeamsApiListFeaturesV1TeamsTeamIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest
 */
export interface TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly modelId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest
 */
export interface TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGetRequest
 */
export interface TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listModelsV1TeamsTeamIdModelsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListModelsV1TeamsTeamIdModelsGetRequest
 */
export interface TeamsApiListModelsV1TeamsTeamIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof TeamsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof TeamsApiListModelsV1TeamsTeamIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listRelationshipsV1TeamsTeamIdRelationshipsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGetRequest
 */
export interface TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly includeHidden?: boolean

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly idsOnly?: boolean

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly sortBy?: string

    /**
     * Filter by directionality
     * @type {number}
     * @memberof TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly directionality?: number

    /**
     * Search query for the origin node.
     * @type {string}
     * @memberof TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGet
     */
    readonly originQuery?: string
}

/**
 * Request parameters for listStudiesV1TeamsTeamIdStudiesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListStudiesV1TeamsTeamIdStudiesGetRequest
 */
export interface TeamsApiListStudiesV1TeamsTeamIdStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly conceptTag?: string

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof TeamsApiListStudiesV1TeamsTeamIdStudiesGet
     */
    readonly featureRelationship?: string
}

/**
 * Request parameters for listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest
 */
export interface TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest
 */
export interface TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest
 */
export interface TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listUserModelsV1TeamsTeamIdUsersUserIdModelsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest
 */
export interface TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest
 */
export interface TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest
 */
export interface TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly tags?: Array<string>
}

/**
 * Request parameters for listVariablesV1TeamsTeamIdVariablesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListVariablesV1TeamsTeamIdVariablesGetRequest
 */
export interface TeamsApiListVariablesV1TeamsTeamIdVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof TeamsApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof TeamsApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof TeamsApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof TeamsApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly tags?: Array<string>
}

/**
 * Request parameters for mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost operation in TeamsApi.
 * @export
 * @interface TeamsApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePostRequest
 */
export interface TeamsApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
     */
    readonly variableId: string

    /**
     * 
     * @type {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost}
     * @memberof TeamsApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
     */
    readonly bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost: BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
}

/**
 * Request parameters for patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch operation in TeamsApi.
 * @export
 * @interface TeamsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest
 */
export interface TeamsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch
     */
    readonly modelId: string

    /**
     * 
     * @type {Array<BulkPatchAssociationOp>}
     * @memberof TeamsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch
     */
    readonly bulkPatchAssociationOp: Array<BulkPatchAssociationOp>
}

/**
 * Request parameters for patchConceptV1TeamsTeamIdConceptsConceptIdPatch operation in TeamsApi.
 * @export
 * @interface TeamsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatchRequest
 */
export interface TeamsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatch
     */
    readonly conceptId: string

    /**
     * 
     * @type {PatchConceptOp | Array<PatchConceptOp>}
     * @memberof TeamsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatch
     */
    readonly patchConceptOpArrayPatchConceptOp: PatchConceptOp | Array<PatchConceptOp>
}

/**
 * Request parameters for patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch operation in TeamsApi.
 * @export
 * @interface TeamsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatchRequest
 */
export interface TeamsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch
     */
    readonly datasetId: string

    /**
     * 
     * @type {PatchDatasetOp | Array<PatchDatasetOp>}
     * @memberof TeamsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch
     */
    readonly patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>
}

/**
 * Request parameters for patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch operation in TeamsApi.
 * @export
 * @interface TeamsApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatchRequest
 */
export interface TeamsApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch
     */
    readonly featureId: string

    /**
     * 
     * @type {PatchFeatureOp | Array<PatchFeatureOp>}
     * @memberof TeamsApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch
     */
    readonly patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>
}

/**
 * Request parameters for patchModelV1TeamsTeamIdModelsModelIdPatch operation in TeamsApi.
 * @export
 * @interface TeamsApiPatchModelV1TeamsTeamIdModelsModelIdPatchRequest
 */
export interface TeamsApiPatchModelV1TeamsTeamIdModelsModelIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchModelV1TeamsTeamIdModelsModelIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchModelV1TeamsTeamIdModelsModelIdPatch
     */
    readonly modelId: string

    /**
     * 
     * @type {PatchModelOp | Array<PatchModelOp>}
     * @memberof TeamsApiPatchModelV1TeamsTeamIdModelsModelIdPatch
     */
    readonly patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>
}

/**
 * Request parameters for patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch operation in TeamsApi.
 * @export
 * @interface TeamsApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatchRequest
 */
export interface TeamsApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {Array<BulkPatchFeatureOp>}
     * @memberof TeamsApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatch
     */
    readonly bulkPatchFeatureOp: Array<BulkPatchFeatureOp>
}

/**
 * Request parameters for patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch operation in TeamsApi.
 * @export
 * @interface TeamsApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatchRequest
 */
export interface TeamsApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch
     */
    readonly studyId: string

    /**
     * 
     * @type {PatchStudyOp | Array<PatchStudyOp>}
     * @memberof TeamsApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch
     */
    readonly patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>
}

/**
 * Request parameters for patchVariableV1TeamsTeamIdVariablesVariableIdPatch operation in TeamsApi.
 * @export
 * @interface TeamsApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatchRequest
 */
export interface TeamsApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatch
     */
    readonly variableId: string

    /**
     * 
     * @type {PatchVariableOp | Array<PatchVariableOp>}
     * @memberof TeamsApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatch
     */
    readonly patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>
}

/**
 * Request parameters for postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost operation in TeamsApi.
 * @export
 * @interface TeamsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest
 */
export interface TeamsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly modelId: string

    /**
     * 
     * @type {DirectionIn}
     * @memberof TeamsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost
     */
    readonly directionIn: DirectionIn
}

/**
 * Request parameters for postTeamV1TeamsPost operation in TeamsApi.
 * @export
 * @interface TeamsApiPostTeamV1TeamsPostRequest
 */
export interface TeamsApiPostTeamV1TeamsPostRequest {
    /**
     * 
     * @type {TeamIn}
     * @memberof TeamsApiPostTeamV1TeamsPost
     */
    readonly teamIn: TeamIn
}

/**
 * Request parameters for publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost operation in TeamsApi.
 * @export
 * @interface TeamsApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPostRequest
 */
export interface TeamsApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPost
     */
    readonly studyId: string
}

/**
 * Request parameters for removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiRemoveAUserFromATeamV1TeamsTeamIdUsersUserIdDeleteRequest
 */
export interface TeamsApiRemoveAUserFromATeamV1TeamsTeamIdUsersUserIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveAUserFromATeamV1TeamsTeamIdUsersUserIdDelete
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveAUserFromATeamV1TeamsTeamIdUsersUserIdDelete
     */
    readonly teamId: string
}

/**
 * Request parameters for removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiRemoveAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDeleteRequest
 */
export interface TeamsApiRemoveAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete
     */
    readonly email: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete
     */
    readonly teamId: string
}

/**
 * Request parameters for removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest
 */
export interface TeamsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly authorId: string
}

/**
 * Request parameters for removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest
 */
export interface TeamsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly featureId: string
}

/**
 * Request parameters for removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest
 */
export interface TeamsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete
     */
    readonly tagObjectId: string
}

/**
 * Request parameters for removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDeleteRequest
 */
export interface TeamsApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete
     */
    readonly tagObjectId: string
}

/**
 * Request parameters for removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDeleteRequest
 */
export interface TeamsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete
     */
    readonly parentId: string
}

/**
 * Request parameters for removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest
 */
export interface TeamsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly populationAttributeValueId: string
}

/**
 * Request parameters for removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiRemoveRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDeleteRequest
 */
export interface TeamsApiRemoveRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete
     */
    readonly roleName: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiRemoveRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete
     */
    readonly teamId: string
}

/**
 * Request parameters for replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut operation in TeamsApi.
 * @export
 * @interface TeamsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPutRequest
 */
export interface TeamsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {DatasetIn}
     * @memberof TeamsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut
     */
    readonly datasetIn: DatasetIn
}

/**
 * Request parameters for replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut operation in TeamsApi.
 * @export
 * @interface TeamsApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPutRequest
 */
export interface TeamsApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * 
     * @type {FeatureIn}
     * @memberof TeamsApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut
     */
    readonly featureIn: FeatureIn
}

/**
 * Request parameters for replaceModelV1TeamsTeamIdModelsModelIdPut operation in TeamsApi.
 * @export
 * @interface TeamsApiReplaceModelV1TeamsTeamIdModelsModelIdPutRequest
 */
export interface TeamsApiReplaceModelV1TeamsTeamIdModelsModelIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiReplaceModelV1TeamsTeamIdModelsModelIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiReplaceModelV1TeamsTeamIdModelsModelIdPut
     */
    readonly modelId: string

    /**
     * 
     * @type {ModelIn}
     * @memberof TeamsApiReplaceModelV1TeamsTeamIdModelsModelIdPut
     */
    readonly modelIn: ModelIn
}

/**
 * Request parameters for tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut operation in TeamsApi.
 * @export
 * @interface TeamsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPutRequest
 */
export interface TeamsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut
     */
    readonly tagObjectId: string
}

/**
 * Request parameters for tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut operation in TeamsApi.
 * @export
 * @interface TeamsApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPutRequest
 */
export interface TeamsApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut
     */
    readonly tagObjectId: string
}

/**
 * Request parameters for updateAUserByIdV1TeamsTeamIdUsersUserIdPatch operation in TeamsApi.
 * @export
 * @interface TeamsApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatchRequest
 */
export interface TeamsApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatch
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {UpdateProfileIn}
     * @memberof TeamsApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatch
     */
    readonly updateProfileIn: UpdateProfileIn
}

/**
 * Request parameters for updateAuthenticatedUserProfileV1TeamsTeamIdUserPut operation in TeamsApi.
 * @export
 * @interface TeamsApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPutRequest
 */
export interface TeamsApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPut
     */
    readonly teamId: string

    /**
     * 
     * @type {UserProfileIn}
     * @memberof TeamsApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPut
     */
    readonly userProfileIn: UserProfileIn
}

/**
 * Request parameters for updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch operation in TeamsApi.
 * @export
 * @interface TeamsApiUpdateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatchRequest
 */
export interface TeamsApiUpdateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpdateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpdateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch
     */
    readonly integrationId: string

    /**
     * 
     * @type {IntegrationIn}
     * @memberof TeamsApiUpdateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch
     */
    readonly integrationIn: IntegrationIn
}

/**
 * Request parameters for updateMessageV1TeamsTeamIdMessagesMessageIdPatch operation in TeamsApi.
 * @export
 * @interface TeamsApiUpdateMessageV1TeamsTeamIdMessagesMessageIdPatchRequest
 */
export interface TeamsApiUpdateMessageV1TeamsTeamIdMessagesMessageIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpdateMessageV1TeamsTeamIdMessagesMessageIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiUpdateMessageV1TeamsTeamIdMessagesMessageIdPatch
     */
    readonly messageId: string

    /**
     * 
     * @type {MessageIn}
     * @memberof TeamsApiUpdateMessageV1TeamsTeamIdMessagesMessageIdPatch
     */
    readonly messageIn: MessageIn
}

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * Add a user to a team by user_id.
     * @summary Add A Role To A Team.
     * @param {TeamsApiAddARoleToATeamV1TeamsTeamIdRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public addARoleToATeamV1TeamsTeamIdRolesPost(requestParameters: TeamsApiAddARoleToATeamV1TeamsTeamIdRolesPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).addARoleToATeamV1TeamsTeamIdRolesPost(requestParameters.teamId, requestParameters.roleInArrayRoleIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a user to a team role.
     * @summary Add A User To A Role.
     * @param {TeamsApiAddAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut(requestParameters: TeamsApiAddAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPutRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut(requestParameters.userId, requestParameters.roleName, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a user to a team by user_id.
     * @summary Add A User To A Team.
     * @param {TeamsApiAddAUserToATeamV1TeamsTeamIdUsersUserIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public addAUserToATeamV1TeamsTeamIdUsersUserIdPut(requestParameters: TeamsApiAddAUserToATeamV1TeamsTeamIdUsersUserIdPutRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).addAUserToATeamV1TeamsTeamIdUsersUserIdPut(requestParameters.userId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {TeamsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters: TeamsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {TeamsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters: TeamsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.dashboardId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {TeamsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters: TeamsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a parent dataset.
     * @summary Add Parent Dataset
     * @param {TeamsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(requestParameters: TeamsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPutRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.parentId, requestParameters.reconcileFeatures, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {TeamsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters: TeamsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an author to a study.
     * @summary Bulk Add Authors To Study
     * @param {TeamsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(requestParameters: TeamsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(requestParameters.teamId, requestParameters.studyId, requestParameters.bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Study.
     * @summary Create A Study.
     * @param {TeamsApiCreateAStudyV1TeamsTeamIdStudiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createAStudyV1TeamsTeamIdStudiesPost(requestParameters: TeamsApiCreateAStudyV1TeamsTeamIdStudiesPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createAStudyV1TeamsTeamIdStudiesPost(requestParameters.teamId, requestParameters.studyInDoiIn, requestParameters.updateExisting, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {TeamsApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createAUserByCognitoIdV1TeamsTeamIdUsersPost(requestParameters: TeamsApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createAUserByCognitoIdV1TeamsTeamIdUsersPost(requestParameters.teamId, requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {TeamsApiCreateAUserFromCredentialsV1TeamsTeamIdUserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createAUserFromCredentialsV1TeamsTeamIdUserPost(requestParameters: TeamsApiCreateAUserFromCredentialsV1TeamsTeamIdUserPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createAUserFromCredentialsV1TeamsTeamIdUserPost(requestParameters.teamId, requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {TeamsApiCreateAVariableV1TeamsTeamIdVariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createAVariableV1TeamsTeamIdVariablesPost(requestParameters: TeamsApiCreateAVariableV1TeamsTeamIdVariablesPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createAVariableV1TeamsTeamIdVariablesPost(requestParameters.teamId, requestParameters.variableIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {TeamsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters: TeamsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {TeamsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters: TeamsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {TeamsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters: TeamsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters.teamId, requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Author.
     * @summary Create Author
     * @param {TeamsApiCreateAuthorV1TeamsTeamIdAuthorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createAuthorV1TeamsTeamIdAuthorsPost(requestParameters: TeamsApiCreateAuthorV1TeamsTeamIdAuthorsPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createAuthorV1TeamsTeamIdAuthorsPost(requestParameters.teamId, requestParameters.authorIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Concept.
     * @summary Create Concept
     * @param {TeamsApiCreateConceptV1TeamsTeamIdConceptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createConceptV1TeamsTeamIdConceptsPost(requestParameters: TeamsApiCreateConceptV1TeamsTeamIdConceptsPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createConceptV1TeamsTeamIdConceptsPost(requestParameters.teamId, requestParameters.conceptIn, requestParameters.overwriteExisting, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Dashboard.
     * @summary Create Dashboard Post
     * @param {TeamsApiCreateDashboardPostV1TeamsTeamIdDashboardsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createDashboardPostV1TeamsTeamIdDashboardsPost(requestParameters: TeamsApiCreateDashboardPostV1TeamsTeamIdDashboardsPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createDashboardPostV1TeamsTeamIdDashboardsPost(requestParameters.teamId, requestParameters.dashboardIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {TeamsApiCreateDatasetV1TeamsTeamIdDatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createDatasetV1TeamsTeamIdDatasetsPost(requestParameters: TeamsApiCreateDatasetV1TeamsTeamIdDatasetsPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createDatasetV1TeamsTeamIdDatasetsPost(requestParameters.teamId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {TeamsApiCreateFeatureV1TeamsTeamIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createFeatureV1TeamsTeamIdFeaturesPost(requestParameters: TeamsApiCreateFeatureV1TeamsTeamIdFeaturesPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createFeatureV1TeamsTeamIdFeaturesPost(requestParameters.teamId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {TeamsApiCreateIntegrationV1TeamsTeamIdIntegrationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createIntegrationV1TeamsTeamIdIntegrationsPost(requestParameters: TeamsApiCreateIntegrationV1TeamsTeamIdIntegrationsPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createIntegrationV1TeamsTeamIdIntegrationsPost(requestParameters.teamId, requestParameters.integrationIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new message.
     * @summary Create Message
     * @param {TeamsApiCreateMessageV1TeamsTeamIdMessagesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createMessageV1TeamsTeamIdMessagesPost(requestParameters: TeamsApiCreateMessageV1TeamsTeamIdMessagesPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createMessageV1TeamsTeamIdMessagesPost(requestParameters.teamId, requestParameters.messageIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {TeamsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters: TeamsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters.teamId, requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create mulitple Authors.
     * @summary Create Multiple Authors.
     * @param {TeamsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(requestParameters: TeamsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(requestParameters.teamId, requestParameters.arrayAuthorInAuthorIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {TeamsApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(requestParameters: TeamsApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(requestParameters.teamId, requestParameters.arrayVariableInVariableIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {TeamsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters: TeamsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {TeamsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters: TeamsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Author.
     * @summary Delete Author
     * @param {TeamsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(requestParameters: TeamsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
     * @summary Delete Concept
     * @param {TeamsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(requestParameters: TeamsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(requestParameters.teamId, requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dashboard
     * @param {TeamsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(requestParameters: TeamsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(requestParameters.teamId, requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {TeamsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(requestParameters: TeamsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {TeamsApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(requestParameters: TeamsApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {TeamsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters: TeamsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {TeamsApiDeleteModelV1TeamsTeamIdModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteModelV1TeamsTeamIdModelsModelIdDelete(requestParameters: TeamsApiDeleteModelV1TeamsTeamIdModelsModelIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteModelV1TeamsTeamIdModelsModelIdDelete(requestParameters.teamId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {TeamsApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(requestParameters: TeamsApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {TeamsApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(requestParameters: TeamsApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(requestParameters.teamId, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {TeamsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters: TeamsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {TeamsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(requestParameters: TeamsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(requestParameters.teamId, requestParameters.associationId, requestParameters.resourceFlagIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Association.
     * @summary Get Association
     * @param {TeamsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters: TeamsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the authenticated user\'s team or default.
     * @summary Get Authenticated User\'S Teams
     * @param {TeamsApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(requestParameters: TeamsApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {TeamsApiGetAuthenticatedUserV1TeamsTeamIdUserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getAuthenticatedUserV1TeamsTeamIdUserGet(requestParameters: TeamsApiGetAuthenticatedUserV1TeamsTeamIdUserGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getAuthenticatedUserV1TeamsTeamIdUserGet(requestParameters.teamId, requestParameters.includeAvatar, requestParameters.trialExpireDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Author.
     * @summary Get Author
     * @param {TeamsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(requestParameters: TeamsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(requestParameters.teamId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch concept graph.
     * @summary Get Concept Graph
     * @param {TeamsApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(requestParameters: TeamsApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Concept.
     * @summary Get Concept
     * @param {TeamsApiGetConceptV1TeamsTeamIdConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getConceptV1TeamsTeamIdConceptsConceptIdGet(requestParameters: TeamsApiGetConceptV1TeamsTeamIdConceptsConceptIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getConceptV1TeamsTeamIdConceptsConceptIdGet(requestParameters.teamId, requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Dashboard.
     * @summary Get Dashboard
     * @param {TeamsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(requestParameters: TeamsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(requestParameters.teamId, requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Dataset Graph
     * @param {TeamsApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(requestParameters: TeamsApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {TeamsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(requestParameters: TeamsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get roles on a team.
     * @summary Get Existing Roles On A Team.
     * @param {TeamsApiGetExistingRolesOnATeamV1TeamsTeamIdRolesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getExistingRolesOnATeamV1TeamsTeamIdRolesGet(requestParameters: TeamsApiGetExistingRolesOnATeamV1TeamsTeamIdRolesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getExistingRolesOnATeamV1TeamsTeamIdRolesGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get feature.
     * @summary Get Feature
     * @param {TeamsApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(requestParameters: TeamsApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(requestParameters.teamId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {TeamsApiGetIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(requestParameters: TeamsApiGetIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(requestParameters.teamId, requestParameters.integrationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get team integrations.
     * @summary Get Integrations
     * @param {TeamsApiGetIntegrationsV1TeamsTeamIdIntegrationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getIntegrationsV1TeamsTeamIdIntegrationsGet(requestParameters: TeamsApiGetIntegrationsV1TeamsTeamIdIntegrationsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getIntegrationsV1TeamsTeamIdIntegrationsGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Message.
     * @summary Get Message
     * @param {TeamsApiGetMessageV1TeamsTeamIdMessagesMessageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getMessageV1TeamsTeamIdMessagesMessageIdGet(requestParameters: TeamsApiGetMessageV1TeamsTeamIdMessagesMessageIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMessageV1TeamsTeamIdMessagesMessageIdGet(requestParameters.teamId, requestParameters.messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Metric Node Graph
     * @param {TeamsApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(requestParameters: TeamsApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(requestParameters.metricId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Metric Relationship Graph
     * @param {TeamsApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(requestParameters: TeamsApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2GetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(requestParameters.metricId1, requestParameters.metricId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Model.
     * @summary Get Model
     * @param {TeamsApiGetModelV1TeamsTeamIdModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getModelV1TeamsTeamIdModelsModelIdGet(requestParameters: TeamsApiGetModelV1TeamsTeamIdModelsModelIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getModelV1TeamsTeamIdModelsModelIdGet(requestParameters.teamId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get pending invites of a team.
     * @summary Get Pending Invites Of A Team.
     * @param {TeamsApiGetPendingInvitesOfATeamV1TeamsTeamIdInvitesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(requestParameters: TeamsApiGetPendingInvitesOfATeamV1TeamsTeamIdInvitesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {TeamsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(requestParameters: TeamsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {TeamsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(requestParameters: TeamsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get strength of this association.
     * @summary Get Relationship Strength
     * @param {TeamsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(requestParameters: TeamsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph
     * @param {TeamsApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(requestParameters: TeamsApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(requestParameters.teamId, requestParameters.topic1, requestParameters.topic2, requestParameters.ids1, requestParameters.ids2, requestParameters.minStrength, requestParameters.minCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Study.
     * @summary Get Study
     * @param {TeamsApiGetStudyV1TeamsTeamIdStudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getStudyV1TeamsTeamIdStudiesStudyIdGet(requestParameters: TeamsApiGetStudyV1TeamsTeamIdStudiesStudyIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getStudyV1TeamsTeamIdStudiesStudyIdGet(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Topic Relationship Synthesis.
     * @summary Get Synthesis
     * @param {TeamsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(requestParameters: TeamsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(requestParameters.relationshipId, requestParameters.teamId, requestParameters.directedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Topic Graph
     * @param {TeamsApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(requestParameters: TeamsApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(requestParameters.teamId, requestParameters.randomSubset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Topic Node Graph
     * @param {TeamsApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(requestParameters: TeamsApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(requestParameters.topicId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Topic Relationship Graph
     * @param {TeamsApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(requestParameters: TeamsApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2GetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(requestParameters.topicId1, requestParameters.topicId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {TeamsApiGetUserV1TeamsTeamIdUsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getUserV1TeamsTeamIdUsersUserIdGet(requestParameters: TeamsApiGetUserV1TeamsTeamIdUsersUserIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getUserV1TeamsTeamIdUsersUserIdGet(requestParameters.teamId, requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get users with role.
     * @summary Get Users Of A Role.
     * @param {TeamsApiGetUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet(requestParameters: TeamsApiGetUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet(requestParameters.roleName, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List public profiles.
     * @summary Get Users
     * @param {TeamsApiGetUsersV1TeamsTeamIdUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getUsersV1TeamsTeamIdUsersGet(requestParameters: TeamsApiGetUsersV1TeamsTeamIdUsersGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getUsersV1TeamsTeamIdUsersGet(requestParameters.teamId, requestParameters.email, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Variable.
     * @summary Get Variable
     * @param {TeamsApiGetVariableV1TeamsTeamIdVariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getVariableV1TeamsTeamIdVariablesVariableIdGet(requestParameters: TeamsApiGetVariableV1TeamsTeamIdVariablesVariableIdGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getVariableV1TeamsTeamIdVariablesVariableIdGet(requestParameters.teamId, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a user to a team by email.
     * @summary Invite An Email To The Team.
     * @param {TeamsApiInviteAnEmailToTheTeamV1TeamsTeamIdInvitesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(requestParameters: TeamsApiInviteAnEmailToTheTeamV1TeamsTeamIdInvitesPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(requestParameters.teamId, requestParameters.userInvite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters: TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Associations.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAssociationsV1TeamsTeamIdAssociationsGet(requestParameters: TeamsApiListAssociationsV1TeamsTeamIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdAssociationsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters: TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in model.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters: TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters: TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters: TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters: TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters: TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters: TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters: TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters: TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters: TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {TeamsApiListAuthorsV1TeamsTeamIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAuthorsV1TeamsTeamIdAuthorsGet(requestParameters: TeamsApiListAuthorsV1TeamsTeamIdAuthorsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAuthorsV1TeamsTeamIdAuthorsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(requestParameters: TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Concepts.
     * @summary List Concepts
     * @param {TeamsApiListConceptsV1TeamsTeamIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listConceptsV1TeamsTeamIdConceptsGet(requestParameters: TeamsApiListConceptsV1TeamsTeamIdConceptsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listConceptsV1TeamsTeamIdConceptsGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters: TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters.teamId, requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Dashboards.  Paginated list of all Dashboards.
     * @summary List Dashboards
     * @param {TeamsApiListDashboardsV1TeamsTeamIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listDashboardsV1TeamsTeamIdDashboardsGet(requestParameters: TeamsApiListDashboardsV1TeamsTeamIdDashboardsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listDashboardsV1TeamsTeamIdDashboardsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get dashboards connected to the Variable.
     * @summary List Dashboards
     * @param {TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(requestParameters: TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters: TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(requestParameters: TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {TeamsApiListDatasetsV1TeamsTeamIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listDatasetsV1TeamsTeamIdDatasetsGet(requestParameters: TeamsApiListDatasetsV1TeamsTeamIdDatasetsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listDatasetsV1TeamsTeamIdDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Features.
     * @summary List Features
     * @param {TeamsApiListFeaturesV1TeamsTeamIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listFeaturesV1TeamsTeamIdFeaturesGet(requestParameters: TeamsApiListFeaturesV1TeamsTeamIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listFeaturesV1TeamsTeamIdFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get features in model.
     * @summary List Model Features
     * @param {TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(requestParameters: TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters: TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(requestParameters: TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Models.
     * @summary List Models
     * @param {TeamsApiListModelsV1TeamsTeamIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listModelsV1TeamsTeamIdModelsGet(requestParameters: TeamsApiListModelsV1TeamsTeamIdModelsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listModelsV1TeamsTeamIdModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List relationships.
     * @summary List Relationships
     * @param {TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listRelationshipsV1TeamsTeamIdRelationshipsGet(requestParameters: TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listRelationshipsV1TeamsTeamIdRelationshipsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.sortBy, requestParameters.directionality, requestParameters.originQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Studies.
     * @summary List Studies
     * @param {TeamsApiListStudiesV1TeamsTeamIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listStudiesV1TeamsTeamIdStudiesGet(requestParameters: TeamsApiListStudiesV1TeamsTeamIdStudiesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listStudiesV1TeamsTeamIdStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters: TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters: TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters: TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters: TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters: TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters: TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Variables.
     * @summary List Variables
     * @param {TeamsApiListVariablesV1TeamsTeamIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listVariablesV1TeamsTeamIdVariablesGet(requestParameters: TeamsApiListVariablesV1TeamsTeamIdVariablesGetRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listVariablesV1TeamsTeamIdVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Merge a variable with other ids.
     * @summary Merge Variable Post
     * @param {TeamsApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(requestParameters: TeamsApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(requestParameters.teamId, requestParameters.variableId, requestParameters.bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {TeamsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters: TeamsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Variable resource with partial update.
     * @summary Patch Concept
     * @param {TeamsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public patchConceptV1TeamsTeamIdConceptsConceptIdPatch(requestParameters: TeamsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatchRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).patchConceptV1TeamsTeamIdConceptsConceptIdPatch(requestParameters.teamId, requestParameters.conceptId, requestParameters.patchConceptOpArrayPatchConceptOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {TeamsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(requestParameters: TeamsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatchRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(requestParameters.teamId, requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
     * @summary Patch Feature
     * @param {TeamsApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(requestParameters: TeamsApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatchRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(requestParameters.teamId, requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {TeamsApiPatchModelV1TeamsTeamIdModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public patchModelV1TeamsTeamIdModelsModelIdPatch(requestParameters: TeamsApiPatchModelV1TeamsTeamIdModelsModelIdPatchRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).patchModelV1TeamsTeamIdModelsModelIdPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {TeamsApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(requestParameters: TeamsApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatchRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(requestParameters.teamId, requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Study resource with partial update.
     * @summary Patch Study Endpoint
     * @param {TeamsApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(requestParameters: TeamsApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatchRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(requestParameters.teamId, requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {TeamsApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public patchVariableV1TeamsTeamIdVariablesVariableIdPatch(requestParameters: TeamsApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatchRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).patchVariableV1TeamsTeamIdVariablesVariableIdPatch(requestParameters.teamId, requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Association.
     * @summary Post Association Direction
     * @param {TeamsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters: TeamsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, requestParameters.directionIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Team.
     * @summary Post Team
     * @param {TeamsApiPostTeamV1TeamsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public postTeamV1TeamsPost(requestParameters: TeamsApiPostTeamV1TeamsPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).postTeamV1TeamsPost(requestParameters.teamIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish the study making it visible to other users.
     * @summary Publish Study
     * @param {TeamsApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(requestParameters: TeamsApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPostRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a user from a team by user_id.
     * @summary Remove A User From A Team.
     * @param {TeamsApiRemoveAUserFromATeamV1TeamsTeamIdUsersUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(requestParameters: TeamsApiRemoveAUserFromATeamV1TeamsTeamIdUsersUserIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(requestParameters.userId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an email invite from a team by email.
     * @summary Remove An Email Invite From A Team.
     * @param {TeamsApiRemoveAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(requestParameters: TeamsApiRemoveAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(requestParameters.email, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {TeamsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters: TeamsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {TeamsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters: TeamsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the dataset with object with provided id.
     * @summary Remove Object Tag From Dataset
     * @param {TeamsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters: TeamsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the study with object with provided id.
     * @summary Remove Object Tag From Study
     * @param {TeamsApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters: TeamsApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a parent dataset.
     * @summary Remove Parent Dataset
     * @param {TeamsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(requestParameters: TeamsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {TeamsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters: TeamsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove role from user.
     * @summary Remove Role From User
     * @param {TeamsApiRemoveRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete(requestParameters: TeamsApiRemoveRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete(requestParameters.userId, requestParameters.roleName, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {TeamsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(requestParameters: TeamsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPutRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {TeamsApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(requestParameters: TeamsApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.featureId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {TeamsApiReplaceModelV1TeamsTeamIdModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public replaceModelV1TeamsTeamIdModelsModelIdPut(requestParameters: TeamsApiReplaceModelV1TeamsTeamIdModelsModelIdPutRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).replaceModelV1TeamsTeamIdModelsModelIdPut(requestParameters.teamId, requestParameters.modelId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the dataset with object with provided id.
     * @summary Tag Study With Object
     * @param {TeamsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters: TeamsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPutRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the study with object with provided id.
     * @summary Tag Study With Object
     * @param {TeamsApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters: TeamsApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPutRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {TeamsApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(requestParameters: TeamsApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatchRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(requestParameters.userId, requestParameters.teamId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {TeamsApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(requestParameters: TeamsApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPutRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(requestParameters.teamId, requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Integration.
     * @summary Update Integration
     * @param {TeamsApiUpdateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(requestParameters: TeamsApiUpdateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatchRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(requestParameters.teamId, requestParameters.integrationId, requestParameters.integrationIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Message.
     * @summary Update Message
     * @param {TeamsApiUpdateMessageV1TeamsTeamIdMessagesMessageIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public updateMessageV1TeamsTeamIdMessagesMessageIdPatch(requestParameters: TeamsApiUpdateMessageV1TeamsTeamIdMessagesMessageIdPatchRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updateMessageV1TeamsTeamIdMessagesMessageIdPatch(requestParameters.teamId, requestParameters.messageId, requestParameters.messageIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TimelineApi - axios parameter creator
 * @export
 */
export const TimelineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<SystemObjectResources>} [types] 
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet: async (types?: Set<SystemObjectResources>, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/timeline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (types) {
                localVarQueryParameter['types'] = Array.from(types);
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimelineApi - functional programming interface
 * @export
 */
export const TimelineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimelineApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<SystemObjectResources>} [types] 
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGlobalTimelineV1TimelineGet(types?: Set<SystemObjectResources>, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimelinePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimelineApi - factory interface
 * @export
 */
export const TimelineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimelineApiFp(configuration)
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<SystemObjectResources>} [types] 
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet(types?: Set<SystemObjectResources>, cursor?: string, limit?: number, options?: any): AxiosPromise<TimelinePaginationOut> {
            return localVarFp.fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for fetchGlobalTimelineV1TimelineGet operation in TimelineApi.
 * @export
 * @interface TimelineApiFetchGlobalTimelineV1TimelineGetRequest
 */
export interface TimelineApiFetchGlobalTimelineV1TimelineGetRequest {
    /**
     * 
     * @type {Set<SystemObjectResources>}
     * @memberof TimelineApiFetchGlobalTimelineV1TimelineGet
     */
    readonly types?: Set<SystemObjectResources>

    /**
     * A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
     * @type {string}
     * @memberof TimelineApiFetchGlobalTimelineV1TimelineGet
     */
    readonly cursor?: string

    /**
     * 
     * @type {number}
     * @memberof TimelineApiFetchGlobalTimelineV1TimelineGet
     */
    readonly limit?: number
}

/**
 * TimelineApi - object-oriented interface
 * @export
 * @class TimelineApi
 * @extends {BaseAPI}
 */
export class TimelineApi extends BaseAPI {
    /**
     * Fetch resource creation timeline in reverse chronological order.
     * @summary Fetch Global Timeline
     * @param {TimelineApiFetchGlobalTimelineV1TimelineGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimelineApi
     */
    public fetchGlobalTimelineV1TimelineGet(requestParameters: TimelineApiFetchGlobalTimelineV1TimelineGetRequest = {}, options?: AxiosRequestConfig) {
        return TimelineApiFp(this.configuration).fetchGlobalTimelineV1TimelineGet(requestParameters.types, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} teamId 
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1TeamsTeamIdUsersPost: async (teamId: string, userId: string, updateProfileIn: UpdateProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAUserByCognitoIdV1TeamsTeamIdUsersPost', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createAUserByCognitoIdV1TeamsTeamIdUsersPost', 'userId', userId)
            // verify required parameter 'updateProfileIn' is not null or undefined
            assertParamExists('createAUserByCognitoIdV1TeamsTeamIdUsersPost', 'updateProfileIn', updateProfileIn)
            const localVarPath = `/v1/teams/{team_id}/users`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1UsersPost: async (userId: string, updateProfileIn: UpdateProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createAUserByCognitoIdV1UsersPost', 'userId', userId)
            // verify required parameter 'updateProfileIn' is not null or undefined
            assertParamExists('createAUserByCognitoIdV1UsersPost', 'updateProfileIn', updateProfileIn)
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {string} teamId 
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1TeamsTeamIdUserPost: async (teamId: string, userProfileIn: UserProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAUserFromCredentialsV1TeamsTeamIdUserPost', 'teamId', teamId)
            // verify required parameter 'userProfileIn' is not null or undefined
            assertParamExists('createAUserFromCredentialsV1TeamsTeamIdUserPost', 'userProfileIn', userProfileIn)
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1UserPost: async (userProfileIn: UserProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userProfileIn' is not null or undefined
            assertParamExists('createAUserFromCredentialsV1UserPost', 'userProfileIn', userProfileIn)
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/teams`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1UserTeamsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId 
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet: async (teamId: string, includeAvatar?: boolean, trialExpireDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getAuthenticatedUserV1TeamsTeamIdUserGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }

            if (trialExpireDate !== undefined) {
                localVarQueryParameter['trial_expire_date'] = trialExpireDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet: async (includeAvatar?: boolean, trialExpireDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }

            if (trialExpireDate !== undefined) {
                localVarQueryParameter['trial_expire_date'] = trialExpireDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId 
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet: async (teamId: string, userId: string, includeAvatar?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getUserV1TeamsTeamIdUsersUserIdGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserV1TeamsTeamIdUsersUserIdGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet: async (userId: string, includeAvatar?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserV1UsersUserIdGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId 
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet: async (teamId: string, email?: string, includeAvatar?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getUsersV1TeamsTeamIdUsersGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/users`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId] 
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UsersGet: async (teamId?: string, email?: string, includeAvatar?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet: async (teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/teams/{team_id}/user/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet: async (studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/user/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserConceptsV1UsersUserIdConceptsGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserDatasetsV1UsersUserIdDatasetsGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserFeaturesV1UsersUserIdFeaturesGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserModelsV1TeamsTeamIdUsersUserIdModelsGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserModelsV1TeamsTeamIdUsersUserIdModelsGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserModelsV1UsersUserIdModelsGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserStudiesV1UsersUserIdStudiesGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserVariablesV1UsersUserIdVariablesGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId 
         * @param {string} teamId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1TeamsTeamIdUsersUserIdPatch: async (userId: string, teamId: string, updateProfileIn: UpdateProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateAUserByIdV1TeamsTeamIdUsersUserIdPatch', 'userId', userId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('updateAUserByIdV1TeamsTeamIdUsersUserIdPatch', 'teamId', teamId)
            // verify required parameter 'updateProfileIn' is not null or undefined
            assertParamExists('updateAUserByIdV1TeamsTeamIdUsersUserIdPatch', 'updateProfileIn', updateProfileIn)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1UsersUserIdPatch: async (userId: string, updateProfileIn: UpdateProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateAUserByIdV1UsersUserIdPatch', 'userId', userId)
            // verify required parameter 'updateProfileIn' is not null or undefined
            assertParamExists('updateAUserByIdV1UsersUserIdPatch', 'updateProfileIn', updateProfileIn)
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId 
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut: async (teamId: string, userProfileIn: UserProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('updateAuthenticatedUserProfileV1TeamsTeamIdUserPut', 'teamId', teamId)
            // verify required parameter 'userProfileIn' is not null or undefined
            assertParamExists('updateAuthenticatedUserProfileV1TeamsTeamIdUserPut', 'userProfileIn', userProfileIn)
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut: async (userProfileIn: UserProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userProfileIn' is not null or undefined
            assertParamExists('updateAuthenticatedUserProfileV1UserPut', 'userProfileIn', userProfileIn)
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} teamId 
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId: string, userId: string, updateProfileIn: UpdateProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId, userId, updateProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAUserByCognitoIdV1UsersPost(userId: string, updateProfileIn: UpdateProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAUserByCognitoIdV1UsersPost(userId, updateProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {string} teamId 
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId: string, userProfileIn: UserProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId, userProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAUserFromCredentialsV1UserPost(userProfileIn: UserProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAUserFromCredentialsV1UserPost(userProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatedUserSTeamsV1UserTeamsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedUserSTeamsV1UserTeamsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId 
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatedUserV1TeamsTeamIdUserGet(teamId: string, includeAvatar?: boolean, trialExpireDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, trialExpireDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatedUserV1UserGet(includeAvatar?: boolean, trialExpireDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedUserV1UserGet(includeAvatar, trialExpireDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId 
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserV1TeamsTeamIdUsersUserIdGet(teamId: string, userId: string, includeAvatar?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPublicProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserV1UsersUserIdGet(userId: string, includeAvatar?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPublicProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserV1UsersUserIdGet(userId, includeAvatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId 
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersV1TeamsTeamIdUsersGet(teamId: string, email?: string, includeAvatar?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserPublicProfileOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId] 
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersV1UsersGet(teamId?: string, email?: string, includeAvatar?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserPublicProfileOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersV1UsersGet(teamId, email, includeAvatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserConceptsV1UserConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserDatasetsV1UserDatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserFeaturesV1UserFeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserModelsV1UserModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserStudiesV1UserStudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserVariablesV1UserVariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserConceptsV1UsersUserIdConceptsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserDatasetsV1UsersUserIdDatasetsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserFeaturesV1UsersUserIdFeaturesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserModelsV1UsersUserIdModelsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserStudiesV1UsersUserIdStudiesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserVariablesV1UsersUserIdVariablesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId 
         * @param {string} teamId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId: string, teamId: string, updateProfileIn: UpdateProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId, teamId, updateProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAUserByIdV1UsersUserIdPatch(userId: string, updateProfileIn: UpdateProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAUserByIdV1UsersUserIdPatch(userId, updateProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId 
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId: string, userProfileIn: UserProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthenticatedUserProfileV1UserPut(userProfileIn: UserProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthenticatedUserProfileV1UserPut(userProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} teamId 
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId: string, userId: string, updateProfileIn: UpdateProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId, userId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1UsersPost(userId: string, updateProfileIn: UpdateProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.createAUserByCognitoIdV1UsersPost(userId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {string} teamId 
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId: string, userProfileIn: UserProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId, userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1UserPost(userProfileIn: UserProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.createAUserFromCredentialsV1UserPost(userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId: string, options?: any): AxiosPromise<Array<TeamOut>> {
            return localVarFp.getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1UserTeamsGet(options?: any): AxiosPromise<Array<TeamOut>> {
            return localVarFp.getAuthenticatedUserSTeamsV1UserTeamsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId 
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet(teamId: string, includeAvatar?: boolean, trialExpireDate?: string, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, trialExpireDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet(includeAvatar?: boolean, trialExpireDate?: string, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.getAuthenticatedUserV1UserGet(includeAvatar, trialExpireDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId 
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet(teamId: string, userId: string, includeAvatar?: boolean, options?: any): AxiosPromise<UserPublicProfileOut> {
            return localVarFp.getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet(userId: string, includeAvatar?: boolean, options?: any): AxiosPromise<UserPublicProfileOut> {
            return localVarFp.getUserV1UsersUserIdGet(userId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId 
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet(teamId: string, email?: string, includeAvatar?: boolean, options?: any): AxiosPromise<Array<UserPublicProfileOut>> {
            return localVarFp.getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId] 
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UsersGet(teamId?: string, email?: string, includeAvatar?: boolean, options?: any): AxiosPromise<Array<UserPublicProfileOut>> {
            return localVarFp.getUsersV1UsersGet(teamId, email, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId 
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId: string, studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, teamId?: string, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId 
         * @param {string} teamId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId: string, teamId: string, updateProfileIn: UpdateProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId, teamId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1UsersUserIdPatch(userId: string, updateProfileIn: UpdateProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.updateAUserByIdV1UsersUserIdPatch(userId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId 
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId: string, userProfileIn: UserProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut(userProfileIn: UserProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.updateAuthenticatedUserProfileV1UserPut(userProfileIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAUserByCognitoIdV1TeamsTeamIdUsersPost operation in UsersApi.
 * @export
 * @interface UsersApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPostRequest
 */
export interface UsersApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPost
     */
    readonly userId: string

    /**
     * 
     * @type {UpdateProfileIn}
     * @memberof UsersApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPost
     */
    readonly updateProfileIn: UpdateProfileIn
}

/**
 * Request parameters for createAUserByCognitoIdV1UsersPost operation in UsersApi.
 * @export
 * @interface UsersApiCreateAUserByCognitoIdV1UsersPostRequest
 */
export interface UsersApiCreateAUserByCognitoIdV1UsersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiCreateAUserByCognitoIdV1UsersPost
     */
    readonly userId: string

    /**
     * 
     * @type {UpdateProfileIn}
     * @memberof UsersApiCreateAUserByCognitoIdV1UsersPost
     */
    readonly updateProfileIn: UpdateProfileIn
}

/**
 * Request parameters for createAUserFromCredentialsV1TeamsTeamIdUserPost operation in UsersApi.
 * @export
 * @interface UsersApiCreateAUserFromCredentialsV1TeamsTeamIdUserPostRequest
 */
export interface UsersApiCreateAUserFromCredentialsV1TeamsTeamIdUserPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiCreateAUserFromCredentialsV1TeamsTeamIdUserPost
     */
    readonly teamId: string

    /**
     * 
     * @type {UserProfileIn}
     * @memberof UsersApiCreateAUserFromCredentialsV1TeamsTeamIdUserPost
     */
    readonly userProfileIn: UserProfileIn
}

/**
 * Request parameters for createAUserFromCredentialsV1UserPost operation in UsersApi.
 * @export
 * @interface UsersApiCreateAUserFromCredentialsV1UserPostRequest
 */
export interface UsersApiCreateAUserFromCredentialsV1UserPostRequest {
    /**
     * 
     * @type {UserProfileIn}
     * @memberof UsersApiCreateAUserFromCredentialsV1UserPost
     */
    readonly userProfileIn: UserProfileIn
}

/**
 * Request parameters for getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet operation in UsersApi.
 * @export
 * @interface UsersApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGetRequest
 */
export interface UsersApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getAuthenticatedUserV1TeamsTeamIdUserGet operation in UsersApi.
 * @export
 * @interface UsersApiGetAuthenticatedUserV1TeamsTeamIdUserGetRequest
 */
export interface UsersApiGetAuthenticatedUserV1TeamsTeamIdUserGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiGetAuthenticatedUserV1TeamsTeamIdUserGet
     */
    readonly teamId: string

    /**
     * Include the user\&#39;s avatar.
     * @type {boolean}
     * @memberof UsersApiGetAuthenticatedUserV1TeamsTeamIdUserGet
     */
    readonly includeAvatar?: boolean

    /**
     * Date the trial expires
     * @type {string}
     * @memberof UsersApiGetAuthenticatedUserV1TeamsTeamIdUserGet
     */
    readonly trialExpireDate?: string
}

/**
 * Request parameters for getAuthenticatedUserV1UserGet operation in UsersApi.
 * @export
 * @interface UsersApiGetAuthenticatedUserV1UserGetRequest
 */
export interface UsersApiGetAuthenticatedUserV1UserGetRequest {
    /**
     * Include the user\&#39;s avatar.
     * @type {boolean}
     * @memberof UsersApiGetAuthenticatedUserV1UserGet
     */
    readonly includeAvatar?: boolean

    /**
     * Date the trial expires
     * @type {string}
     * @memberof UsersApiGetAuthenticatedUserV1UserGet
     */
    readonly trialExpireDate?: string
}

/**
 * Request parameters for getUserV1TeamsTeamIdUsersUserIdGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUserV1TeamsTeamIdUsersUserIdGetRequest
 */
export interface UsersApiGetUserV1TeamsTeamIdUsersUserIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUserV1TeamsTeamIdUsersUserIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUserV1TeamsTeamIdUsersUserIdGet
     */
    readonly userId: string

    /**
     * 
     * @type {boolean}
     * @memberof UsersApiGetUserV1TeamsTeamIdUsersUserIdGet
     */
    readonly includeAvatar?: boolean
}

/**
 * Request parameters for getUserV1UsersUserIdGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUserV1UsersUserIdGetRequest
 */
export interface UsersApiGetUserV1UsersUserIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUserV1UsersUserIdGet
     */
    readonly userId: string

    /**
     * 
     * @type {boolean}
     * @memberof UsersApiGetUserV1UsersUserIdGet
     */
    readonly includeAvatar?: boolean
}

/**
 * Request parameters for getUsersV1TeamsTeamIdUsersGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUsersV1TeamsTeamIdUsersGetRequest
 */
export interface UsersApiGetUsersV1TeamsTeamIdUsersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUsersV1TeamsTeamIdUsersGet
     */
    readonly teamId: string

    /**
     * Email address
     * @type {string}
     * @memberof UsersApiGetUsersV1TeamsTeamIdUsersGet
     */
    readonly email?: string

    /**
     * Include avatar
     * @type {boolean}
     * @memberof UsersApiGetUsersV1TeamsTeamIdUsersGet
     */
    readonly includeAvatar?: boolean
}

/**
 * Request parameters for getUsersV1UsersGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUsersV1UsersGetRequest
 */
export interface UsersApiGetUsersV1UsersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUsersV1UsersGet
     */
    readonly teamId?: string

    /**
     * Email address
     * @type {string}
     * @memberof UsersApiGetUsersV1UsersGet
     */
    readonly email?: string

    /**
     * Include avatar
     * @type {boolean}
     * @memberof UsersApiGetUsersV1UsersGet
     */
    readonly includeAvatar?: boolean
}

/**
 * Request parameters for listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest
 */
export interface UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest
 */
export interface UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest
 */
export interface UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listAuthenticatedUserConceptsV1UserConceptsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest
 */
export interface UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly inConceptGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest
 */
export interface UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listAuthenticatedUserDatasetsV1UserDatasetsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest
 */
export interface UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest
 */
export interface UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listAuthenticatedUserFeaturesV1UserFeaturesGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest
 */
export interface UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest
 */
export interface UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listAuthenticatedUserModelsV1UserModelsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest
 */
export interface UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly containsVariableId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest
 */
export interface UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listAuthenticatedUserStudiesV1UserStudiesGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest
 */
export interface UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest
 */
export interface UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly tags?: Array<string>
}

/**
 * Request parameters for listAuthenticatedUserVariablesV1UserVariablesGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest
 */
export interface UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly tags?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest
 */
export interface UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listUserConceptsV1UsersUserIdConceptsGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest
 */
export interface UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly inConceptGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest
 */
export interface UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listUserDatasetsV1UsersUserIdDatasetsGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest
 */
export interface UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest
 */
export interface UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listUserFeaturesV1UsersUserIdFeaturesGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest
 */
export interface UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserModelsV1TeamsTeamIdUsersUserIdModelsGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest
 */
export interface UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listUserModelsV1UsersUserIdModelsGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserModelsV1UsersUserIdModelsGetRequest
 */
export interface UsersApiListUserModelsV1UsersUserIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly containsVariableId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest
 */
export interface UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listUserStudiesV1UsersUserIdStudiesGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest
 */
export interface UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest
 */
export interface UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly tags?: Array<string>
}

/**
 * Request parameters for listUserVariablesV1UsersUserIdVariablesGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest
 */
export interface UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly tags?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for updateAUserByIdV1TeamsTeamIdUsersUserIdPatch operation in UsersApi.
 * @export
 * @interface UsersApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatchRequest
 */
export interface UsersApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatch
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {UpdateProfileIn}
     * @memberof UsersApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatch
     */
    readonly updateProfileIn: UpdateProfileIn
}

/**
 * Request parameters for updateAUserByIdV1UsersUserIdPatch operation in UsersApi.
 * @export
 * @interface UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest
 */
export interface UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUpdateAUserByIdV1UsersUserIdPatch
     */
    readonly userId: string

    /**
     * 
     * @type {UpdateProfileIn}
     * @memberof UsersApiUpdateAUserByIdV1UsersUserIdPatch
     */
    readonly updateProfileIn: UpdateProfileIn
}

/**
 * Request parameters for updateAuthenticatedUserProfileV1TeamsTeamIdUserPut operation in UsersApi.
 * @export
 * @interface UsersApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPutRequest
 */
export interface UsersApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPutRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPut
     */
    readonly teamId: string

    /**
     * 
     * @type {UserProfileIn}
     * @memberof UsersApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPut
     */
    readonly userProfileIn: UserProfileIn
}

/**
 * Request parameters for updateAuthenticatedUserProfileV1UserPut operation in UsersApi.
 * @export
 * @interface UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest
 */
export interface UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest {
    /**
     * 
     * @type {UserProfileIn}
     * @memberof UsersApiUpdateAuthenticatedUserProfileV1UserPut
     */
    readonly userProfileIn: UserProfileIn
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {UsersApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createAUserByCognitoIdV1TeamsTeamIdUsersPost(requestParameters: UsersApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPostRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createAUserByCognitoIdV1TeamsTeamIdUsersPost(requestParameters.teamId, requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {UsersApiCreateAUserByCognitoIdV1UsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createAUserByCognitoIdV1UsersPost(requestParameters: UsersApiCreateAUserByCognitoIdV1UsersPostRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createAUserByCognitoIdV1UsersPost(requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UsersApiCreateAUserFromCredentialsV1TeamsTeamIdUserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createAUserFromCredentialsV1TeamsTeamIdUserPost(requestParameters: UsersApiCreateAUserFromCredentialsV1TeamsTeamIdUserPostRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createAUserFromCredentialsV1TeamsTeamIdUserPost(requestParameters.teamId, requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UsersApiCreateAUserFromCredentialsV1UserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createAUserFromCredentialsV1UserPost(requestParameters: UsersApiCreateAUserFromCredentialsV1UserPostRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createAUserFromCredentialsV1UserPost(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the authenticated user\'s team or default.
     * @summary Get Authenticated User\'S Teams
     * @param {UsersApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(requestParameters: UsersApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the authenticated user\'s team or default.
     * @summary Get Authenticated User\'S Teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getAuthenticatedUserSTeamsV1UserTeamsGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getAuthenticatedUserSTeamsV1UserTeamsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1TeamsTeamIdUserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getAuthenticatedUserV1TeamsTeamIdUserGet(requestParameters: UsersApiGetAuthenticatedUserV1TeamsTeamIdUserGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getAuthenticatedUserV1TeamsTeamIdUserGet(requestParameters.teamId, requestParameters.includeAvatar, requestParameters.trialExpireDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getAuthenticatedUserV1UserGet(requestParameters: UsersApiGetAuthenticatedUserV1UserGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getAuthenticatedUserV1UserGet(requestParameters.includeAvatar, requestParameters.trialExpireDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1TeamsTeamIdUsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserV1TeamsTeamIdUsersUserIdGet(requestParameters: UsersApiGetUserV1TeamsTeamIdUsersUserIdGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserV1TeamsTeamIdUsersUserIdGet(requestParameters.teamId, requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1UsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserV1UsersUserIdGet(requestParameters: UsersApiGetUserV1UsersUserIdGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserV1UsersUserIdGet(requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List public profiles.
     * @summary Get Users
     * @param {UsersApiGetUsersV1TeamsTeamIdUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersV1TeamsTeamIdUsersGet(requestParameters: UsersApiGetUsersV1TeamsTeamIdUsersGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersV1TeamsTeamIdUsersGet(requestParameters.teamId, requestParameters.email, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List public profiles.
     * @summary Get Users
     * @param {UsersApiGetUsersV1UsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersV1UsersGet(requestParameters: UsersApiGetUsersV1UsersGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersV1UsersGet(requestParameters.teamId, requestParameters.email, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters: UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters: UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters: UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters: UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters: UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters: UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters: UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters: UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters: UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserModelsV1UserModelsGet(requestParameters: UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters: UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters: UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters: UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters: UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters: UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserConceptsV1UsersUserIdConceptsGet(requestParameters: UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters: UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters: UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters: UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters: UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters: UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {UsersApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserModelsV1UsersUserIdModelsGet(requestParameters: UsersApiListUserModelsV1UsersUserIdModelsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters: UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserStudiesV1UsersUserIdStudiesGet(requestParameters: UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters: UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserVariablesV1UsersUserIdVariablesGet(requestParameters: UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {UsersApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(requestParameters: UsersApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatchRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(requestParameters.userId, requestParameters.teamId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateAUserByIdV1UsersUserIdPatch(requestParameters: UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateAUserByIdV1UsersUserIdPatch(requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UsersApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(requestParameters: UsersApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPutRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(requestParameters.teamId, requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateAuthenticatedUserProfileV1UserPut(requestParameters: UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateAuthenticatedUserProfileV1UserPut(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VariablesApi - axios parameter creator
 * @export
 */
export const VariablesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId 
         * @param {VariableIn} variableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost: async (teamId: string, variableIn: VariableIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createAVariableV1TeamsTeamIdVariablesPost', 'teamId', teamId)
            // verify required parameter 'variableIn' is not null or undefined
            assertParamExists('createAVariableV1TeamsTeamIdVariablesPost', 'variableIn', variableIn)
            const localVarPath = `/v1/teams/{team_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(variableIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost: async (variableIn: VariableIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableIn' is not null or undefined
            assertParamExists('createAVariableV1VariablesPost', 'variableIn', variableIn)
            const localVarPath = `/v1/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(variableIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId 
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost: async (teamId: string, arrayVariableInVariableIn: Array<VariableIn> | VariableIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createMultipleVariablesV1TeamsTeamIdVariablesBulkPost', 'teamId', teamId)
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            assertParamExists('createMultipleVariablesV1TeamsTeamIdVariablesBulkPost', 'arrayVariableInVariableIn', arrayVariableInVariableIn)
            const localVarPath = `/v1/teams/{team_id}/variables/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(arrayVariableInVariableIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1VariablesBulkPost: async (arrayVariableInVariableIn: Array<VariableIn> | VariableIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            assertParamExists('createMultipleVariablesV1VariablesBulkPost', 'arrayVariableInVariableIn', arrayVariableInVariableIn)
            const localVarPath = `/v1/variables/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(arrayVariableInVariableIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete: async (teamId: string, variableId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteVariableV1TeamsTeamIdVariablesVariableIdDelete', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('deleteVariableV1TeamsTeamIdVariablesVariableIdDelete', 'variableId', variableId)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete: async (variableId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('deleteVariableV1VariablesVariableIdDelete', 'variableId', variableId)
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet: async (teamId: string, variableId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getVariableV1TeamsTeamIdVariablesVariableIdGet', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('getVariableV1TeamsTeamIdVariablesVariableIdGet', 'variableId', variableId)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet: async (variableId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('getVariableV1VariablesVariableIdGet', 'variableId', variableId)
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet: async (teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet', 'variableId', variableId)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: async (variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listAssociationsV1VariablesVariableIdAssociationsGet', 'variableId', variableId)
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/user/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet: async (teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet', 'variableId', variableId)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet: async (variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listDashboardsV1VariablesVariableIdDashboardsGet', 'variableId', variableId)
            const localVarPath = `/v1/variables/{variable_id}/dashboards`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet: async (teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet', 'userId', userId)
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserVariablesV1UsersUserIdVariablesGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet: async (teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listVariablesV1TeamsTeamIdVariablesGet', 'teamId', teamId)
            const localVarPath = `/v1/teams/{team_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost} bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost: async (teamId: string, variableId: string, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost: BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', 'variableId', variableId)
            // verify required parameter 'bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost' is not null or undefined
            assertParamExists('mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', 'bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/merge`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} variableId 
         * @param {BodyMergeVariablePostV1VariablesVariableIdMergePost} bodyMergeVariablePostV1VariablesVariableIdMergePost 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1VariablesVariableIdMergePost: async (variableId: string, bodyMergeVariablePostV1VariablesVariableIdMergePost: BodyMergeVariablePostV1VariablesVariableIdMergePost, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('mergeVariablePostV1VariablesVariableIdMergePost', 'variableId', variableId)
            // verify required parameter 'bodyMergeVariablePostV1VariablesVariableIdMergePost' is not null or undefined
            assertParamExists('mergeVariablePostV1VariablesVariableIdMergePost', 'bodyMergeVariablePostV1VariablesVariableIdMergePost', bodyMergeVariablePostV1VariablesVariableIdMergePost)
            const localVarPath = `/v1/variables/{variable_id}/merge`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyMergeVariablePostV1VariablesVariableIdMergePost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch: async (teamId: string, variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchVariableV1TeamsTeamIdVariablesVariableIdPatch', 'teamId', teamId)
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('patchVariableV1TeamsTeamIdVariablesVariableIdPatch', 'variableId', variableId)
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            assertParamExists('patchVariableV1TeamsTeamIdVariablesVariableIdPatch', 'patchVariableOpArrayPatchVariableOp', patchVariableOpArrayPatchVariableOp)
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchVariableOpArrayPatchVariableOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch: async (variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('patchVariableV1VariablesVariableIdPatch', 'variableId', variableId)
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            assertParamExists('patchVariableV1VariablesVariableIdPatch', 'patchVariableOpArrayPatchVariableOp', patchVariableOpArrayPatchVariableOp)
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchVariableOpArrayPatchVariableOp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VariablesApi - functional programming interface
 * @export
 */
export const VariablesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VariablesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId 
         * @param {VariableIn} variableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAVariableV1TeamsTeamIdVariablesPost(teamId: string, variableIn: VariableIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAVariableV1VariablesPost(variableIn: VariableIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAVariableV1VariablesPost(variableIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId 
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId: string, arrayVariableInVariableIn: Array<VariableIn> | VariableIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VariableOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn: Array<VariableIn> | VariableIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VariableOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId: string, variableId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVariableV1VariablesVariableIdDelete(variableId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVariableV1VariablesVariableIdDelete(variableId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId: string, variableId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableV1VariablesVariableIdGet(variableId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVariableV1VariablesVariableIdGet(variableId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1VariablesVariableIdAssociationsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserVariablesV1UserVariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardsV1VariablesVariableIdDashboardsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserVariablesV1UsersUserIdVariablesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVariablesV1TeamsTeamIdVariablesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVariablesV1VariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost} bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId: string, variableId: string, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost: BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} variableId 
         * @param {BodyMergeVariablePostV1VariablesVariableIdMergePost} bodyMergeVariablePostV1VariablesVariableIdMergePost 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergeVariablePostV1VariablesVariableIdMergePost(variableId: string, bodyMergeVariablePostV1VariablesVariableIdMergePost: BodyMergeVariablePostV1VariablesVariableIdMergePost, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergeVariablePostV1VariablesVariableIdMergePost(variableId, bodyMergeVariablePostV1VariablesVariableIdMergePost, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId: string, variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchVariableV1VariablesVariableIdPatch(variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VariablesApi - factory interface
 * @export
 */
export const VariablesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VariablesApiFp(configuration)
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId 
         * @param {VariableIn} variableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost(teamId: string, variableIn: VariableIn, options?: any): AxiosPromise<VariableOut> {
            return localVarFp.createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost(variableIn: VariableIn, teamId?: string, options?: any): AxiosPromise<VariableOut> {
            return localVarFp.createAVariableV1VariablesPost(variableIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId 
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId: string, arrayVariableInVariableIn: Array<VariableIn> | VariableIn, options?: any): AxiosPromise<Array<VariableOut>> {
            return localVarFp.createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn: Array<VariableIn> | VariableIn, teamId?: string, options?: any): AxiosPromise<Array<VariableOut>> {
            return localVarFp.createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId: string, variableId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete(variableId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteVariableV1VariablesVariableIdDelete(variableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId: string, variableId: string, options?: any): AxiosPromise<VariableOut> {
            return localVarFp.getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet(variableId: string, teamId?: string, options?: any): AxiosPromise<VariableOut> {
            return localVarFp.getVariableV1VariablesVariableIdGet(variableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<DashboardPaginationOut> {
            return localVarFp.listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<DashboardPaginationOut> {
            return localVarFp.listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId 
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId: string, userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet(teamId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost} bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId: string, variableId: string, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost: BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options?: any): AxiosPromise<any> {
            return localVarFp.mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options).then((request) => request(axios, basePath));
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} variableId 
         * @param {BodyMergeVariablePostV1VariablesVariableIdMergePost} bodyMergeVariablePostV1VariablesVariableIdMergePost 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1VariablesVariableIdMergePost(variableId: string, bodyMergeVariablePostV1VariablesVariableIdMergePost: BodyMergeVariablePostV1VariablesVariableIdMergePost, teamId?: string, options?: any): AxiosPromise<any> {
            return localVarFp.mergeVariablePostV1VariablesVariableIdMergePost(variableId, bodyMergeVariablePostV1VariablesVariableIdMergePost, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId 
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId: string, variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options?: any): AxiosPromise<void> {
            return localVarFp.patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch(variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, teamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAVariableV1TeamsTeamIdVariablesPost operation in VariablesApi.
 * @export
 * @interface VariablesApiCreateAVariableV1TeamsTeamIdVariablesPostRequest
 */
export interface VariablesApiCreateAVariableV1TeamsTeamIdVariablesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiCreateAVariableV1TeamsTeamIdVariablesPost
     */
    readonly teamId: string

    /**
     * 
     * @type {VariableIn}
     * @memberof VariablesApiCreateAVariableV1TeamsTeamIdVariablesPost
     */
    readonly variableIn: VariableIn
}

/**
 * Request parameters for createAVariableV1VariablesPost operation in VariablesApi.
 * @export
 * @interface VariablesApiCreateAVariableV1VariablesPostRequest
 */
export interface VariablesApiCreateAVariableV1VariablesPostRequest {
    /**
     * 
     * @type {VariableIn}
     * @memberof VariablesApiCreateAVariableV1VariablesPost
     */
    readonly variableIn: VariableIn

    /**
     * 
     * @type {string}
     * @memberof VariablesApiCreateAVariableV1VariablesPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createMultipleVariablesV1TeamsTeamIdVariablesBulkPost operation in VariablesApi.
 * @export
 * @interface VariablesApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPostRequest
 */
export interface VariablesApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPost
     */
    readonly teamId: string

    /**
     * 
     * @type {Array<VariableIn> | VariableIn}
     * @memberof VariablesApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPost
     */
    readonly arrayVariableInVariableIn: Array<VariableIn> | VariableIn
}

/**
 * Request parameters for createMultipleVariablesV1VariablesBulkPost operation in VariablesApi.
 * @export
 * @interface VariablesApiCreateMultipleVariablesV1VariablesBulkPostRequest
 */
export interface VariablesApiCreateMultipleVariablesV1VariablesBulkPostRequest {
    /**
     * 
     * @type {Array<VariableIn> | VariableIn}
     * @memberof VariablesApiCreateMultipleVariablesV1VariablesBulkPost
     */
    readonly arrayVariableInVariableIn: Array<VariableIn> | VariableIn

    /**
     * 
     * @type {string}
     * @memberof VariablesApiCreateMultipleVariablesV1VariablesBulkPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for deleteVariableV1TeamsTeamIdVariablesVariableIdDelete operation in VariablesApi.
 * @export
 * @interface VariablesApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDeleteRequest
 */
export interface VariablesApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDelete
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDelete
     */
    readonly variableId: string
}

/**
 * Request parameters for deleteVariableV1VariablesVariableIdDelete operation in VariablesApi.
 * @export
 * @interface VariablesApiDeleteVariableV1VariablesVariableIdDeleteRequest
 */
export interface VariablesApiDeleteVariableV1VariablesVariableIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiDeleteVariableV1VariablesVariableIdDelete
     */
    readonly variableId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiDeleteVariableV1VariablesVariableIdDelete
     */
    readonly teamId?: string
}

/**
 * Request parameters for getVariableV1TeamsTeamIdVariablesVariableIdGet operation in VariablesApi.
 * @export
 * @interface VariablesApiGetVariableV1TeamsTeamIdVariablesVariableIdGetRequest
 */
export interface VariablesApiGetVariableV1TeamsTeamIdVariablesVariableIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiGetVariableV1TeamsTeamIdVariablesVariableIdGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiGetVariableV1TeamsTeamIdVariablesVariableIdGet
     */
    readonly variableId: string
}

/**
 * Request parameters for getVariableV1VariablesVariableIdGet operation in VariablesApi.
 * @export
 * @interface VariablesApiGetVariableV1VariablesVariableIdGetRequest
 */
export interface VariablesApiGetVariableV1VariablesVariableIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiGetVariableV1VariablesVariableIdGet
     */
    readonly variableId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiGetVariableV1VariablesVariableIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest
 */
export interface VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly variableId: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1VariablesVariableIdAssociationsGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest
 */
export interface VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly variableId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest
 */
export interface VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet
     */
    readonly tags?: Array<string>
}

/**
 * Request parameters for listAuthenticatedUserVariablesV1UserVariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest
 */
export interface VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly tags?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest
 */
export interface VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly variableId: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DashboardSortEnum}
     * @memberof VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly orderBy?: DashboardSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listDashboardsV1VariablesVariableIdDashboardsGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListDashboardsV1VariablesVariableIdDashboardsGetRequest
 */
export interface VariablesApiListDashboardsV1VariablesVariableIdDashboardsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly variableId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DashboardSortEnum}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly orderBy?: DashboardSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest
 */
export interface VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet
     */
    readonly tags?: Array<string>
}

/**
 * Request parameters for listUserVariablesV1UsersUserIdVariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest
 */
export interface VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly tags?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listVariablesV1TeamsTeamIdVariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListVariablesV1TeamsTeamIdVariablesGetRequest
 */
export interface VariablesApiListVariablesV1TeamsTeamIdVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly teamId: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof VariablesApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof VariablesApiListVariablesV1TeamsTeamIdVariablesGet
     */
    readonly tags?: Array<string>
}

/**
 * Request parameters for listVariablesV1VariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListVariablesV1VariablesGetRequest
 */
export interface VariablesApiListVariablesV1VariablesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly tags?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost operation in VariablesApi.
 * @export
 * @interface VariablesApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePostRequest
 */
export interface VariablesApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePostRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
     */
    readonly variableId: string

    /**
     * 
     * @type {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost}
     * @memberof VariablesApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
     */
    readonly bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost: BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
}

/**
 * Request parameters for mergeVariablePostV1VariablesVariableIdMergePost operation in VariablesApi.
 * @export
 * @interface VariablesApiMergeVariablePostV1VariablesVariableIdMergePostRequest
 */
export interface VariablesApiMergeVariablePostV1VariablesVariableIdMergePostRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiMergeVariablePostV1VariablesVariableIdMergePost
     */
    readonly variableId: string

    /**
     * 
     * @type {BodyMergeVariablePostV1VariablesVariableIdMergePost}
     * @memberof VariablesApiMergeVariablePostV1VariablesVariableIdMergePost
     */
    readonly bodyMergeVariablePostV1VariablesVariableIdMergePost: BodyMergeVariablePostV1VariablesVariableIdMergePost

    /**
     * 
     * @type {string}
     * @memberof VariablesApiMergeVariablePostV1VariablesVariableIdMergePost
     */
    readonly teamId?: string
}

/**
 * Request parameters for patchVariableV1TeamsTeamIdVariablesVariableIdPatch operation in VariablesApi.
 * @export
 * @interface VariablesApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatchRequest
 */
export interface VariablesApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatch
     */
    readonly teamId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatch
     */
    readonly variableId: string

    /**
     * 
     * @type {PatchVariableOp | Array<PatchVariableOp>}
     * @memberof VariablesApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatch
     */
    readonly patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>
}

/**
 * Request parameters for patchVariableV1VariablesVariableIdPatch operation in VariablesApi.
 * @export
 * @interface VariablesApiPatchVariableV1VariablesVariableIdPatchRequest
 */
export interface VariablesApiPatchVariableV1VariablesVariableIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiPatchVariableV1VariablesVariableIdPatch
     */
    readonly variableId: string

    /**
     * 
     * @type {PatchVariableOp | Array<PatchVariableOp>}
     * @memberof VariablesApiPatchVariableV1VariablesVariableIdPatch
     */
    readonly patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>

    /**
     * 
     * @type {string}
     * @memberof VariablesApiPatchVariableV1VariablesVariableIdPatch
     */
    readonly teamId?: string
}

/**
 * VariablesApi - object-oriented interface
 * @export
 * @class VariablesApi
 * @extends {BaseAPI}
 */
export class VariablesApi extends BaseAPI {
    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {VariablesApiCreateAVariableV1TeamsTeamIdVariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public createAVariableV1TeamsTeamIdVariablesPost(requestParameters: VariablesApiCreateAVariableV1TeamsTeamIdVariablesPostRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).createAVariableV1TeamsTeamIdVariablesPost(requestParameters.teamId, requestParameters.variableIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {VariablesApiCreateAVariableV1VariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public createAVariableV1VariablesPost(requestParameters: VariablesApiCreateAVariableV1VariablesPostRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).createAVariableV1VariablesPost(requestParameters.variableIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {VariablesApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(requestParameters: VariablesApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPostRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(requestParameters.teamId, requestParameters.arrayVariableInVariableIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {VariablesApiCreateMultipleVariablesV1VariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public createMultipleVariablesV1VariablesBulkPost(requestParameters: VariablesApiCreateMultipleVariablesV1VariablesBulkPostRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).createMultipleVariablesV1VariablesBulkPost(requestParameters.arrayVariableInVariableIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {VariablesApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(requestParameters: VariablesApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDeleteRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(requestParameters.teamId, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {VariablesApiDeleteVariableV1VariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public deleteVariableV1VariablesVariableIdDelete(requestParameters: VariablesApiDeleteVariableV1VariablesVariableIdDeleteRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).deleteVariableV1VariablesVariableIdDelete(requestParameters.variableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Variable.
     * @summary Get Variable
     * @param {VariablesApiGetVariableV1TeamsTeamIdVariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public getVariableV1TeamsTeamIdVariablesVariableIdGet(requestParameters: VariablesApiGetVariableV1TeamsTeamIdVariablesVariableIdGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).getVariableV1TeamsTeamIdVariablesVariableIdGet(requestParameters.teamId, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Variable.
     * @summary Get Variable
     * @param {VariablesApiGetVariableV1VariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public getVariableV1VariablesVariableIdGet(requestParameters: VariablesApiGetVariableV1VariablesVariableIdGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).getVariableV1VariablesVariableIdGet(requestParameters.variableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters: VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters: VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters: VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters: VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest = {}, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get dashboards connected to the Variable.
     * @summary List Dashboards
     * @param {VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(requestParameters: VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get dashboards connected to the Variable.
     * @summary List Dashboards
     * @param {VariablesApiListDashboardsV1VariablesVariableIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listDashboardsV1VariablesVariableIdDashboardsGet(requestParameters: VariablesApiListDashboardsV1VariablesVariableIdDashboardsGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listDashboardsV1VariablesVariableIdDashboardsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters: VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listUserVariablesV1UsersUserIdVariablesGet(requestParameters: VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Variables.
     * @summary List Variables
     * @param {VariablesApiListVariablesV1TeamsTeamIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listVariablesV1TeamsTeamIdVariablesGet(requestParameters: VariablesApiListVariablesV1TeamsTeamIdVariablesGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listVariablesV1TeamsTeamIdVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Variables.
     * @summary List Variables
     * @param {VariablesApiListVariablesV1VariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listVariablesV1VariablesGet(requestParameters: VariablesApiListVariablesV1VariablesGetRequest = {}, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listVariablesV1VariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Merge a variable with other ids.
     * @summary Merge Variable Post
     * @param {VariablesApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(requestParameters: VariablesApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePostRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(requestParameters.teamId, requestParameters.variableId, requestParameters.bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Merge a variable with other ids.
     * @summary Merge Variable Post
     * @param {VariablesApiMergeVariablePostV1VariablesVariableIdMergePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public mergeVariablePostV1VariablesVariableIdMergePost(requestParameters: VariablesApiMergeVariablePostV1VariablesVariableIdMergePostRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).mergeVariablePostV1VariablesVariableIdMergePost(requestParameters.variableId, requestParameters.bodyMergeVariablePostV1VariablesVariableIdMergePost, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {VariablesApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public patchVariableV1TeamsTeamIdVariablesVariableIdPatch(requestParameters: VariablesApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatchRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).patchVariableV1TeamsTeamIdVariablesVariableIdPatch(requestParameters.teamId, requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {VariablesApiPatchVariableV1VariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public patchVariableV1VariablesVariableIdPatch(requestParameters: VariablesApiPatchVariableV1VariablesVariableIdPatchRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).patchVariableV1VariablesVariableIdPatch(requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}


