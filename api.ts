/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 * This is a REST API through which clients can interact with System - an **open**, **collaborative**, and **ever-growing knowledge base** of all the world\'s systems. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * List of algorithms model.
 * @export
 * @interface AlgorithmListResult
 */
export interface AlgorithmListResult {
    /**
     * 
     * @type {Array<AlgorithmOut>}
     * @memberof AlgorithmListResult
     */
    items: Array<AlgorithmOut>;
}
/**
 * Algorithm output model.
 * @export
 * @interface AlgorithmOut
 */
export interface AlgorithmOut {
    /**
     * 
     * @type {string}
     * @memberof AlgorithmOut
     */
    algorithm_id: string;
    /**
     * 
     * @type {string}
     * @memberof AlgorithmOut
     */
    display_name: string;
    /**
     * 
     * @type {string}
     * @memberof AlgorithmOut
     */
    description: string;
}
/**
 * Object tag model.
 * @export
 * @interface AppSchemaDatasetsObjectTags
 */
export interface AppSchemaDatasetsObjectTags {
    /**
     * 
     * @type {Array<ConceptOut>}
     * @memberof AppSchemaDatasetsObjectTags
     */
    concepts?: Array<ConceptOut>;
    /**
     * 
     * @type {Array<VariableOut>}
     * @memberof AppSchemaDatasetsObjectTags
     */
    variables?: Array<VariableOut>;
}
/**
 * Object tag model.
 * @export
 * @interface AppSchemaStudiesObjectTags
 */
export interface AppSchemaStudiesObjectTags {
    /**
     * 
     * @type {Array<ConceptOut>}
     * @memberof AppSchemaStudiesObjectTags
     */
    concepts?: Array<ConceptOut>;
    /**
     * 
     * @type {Array<VariableOut>}
     * @memberof AppSchemaStudiesObjectTags
     */
    variables?: Array<VariableOut>;
}
/**
 * Values available for filtering associations.
 * @export
 * @interface AssociationFilters
 */
export interface AssociationFilters {
    /**
     * 
     * @type {Array<FeatureContributionMethodFilterCounts>}
     * @memberof AssociationFilters
     */
    association_values_feature_contribution_method?: Array<FeatureContributionMethodFilterCounts>;
}
/**
 * A statistical association between two features.
 * @export
 * @interface AssociationIn
 */
export interface AssociationIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AssociationIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof AssociationIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AssociationIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AssociationIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * The id of the features of the association. Use this for normal association.
     * @type {Array<string>}
     * @memberof AssociationIn
     */
    feature_ids?: Array<string>;
    /**
     * The id of the variables for a variable/variable association.
     * @type {Array<string>}
     * @memberof AssociationIn
     */
    variable_ids?: Array<string>;
    /**
     * Values of the association.
     * @type {Array<AssociationValueIn>}
     * @memberof AssociationIn
     */
    association_values?: Array<AssociationValueIn>;
    /**
     * The partial dependence plot information.
     * @type {Array<PartialDependencePlotIn>}
     * @memberof AssociationIn
     */
    pdps?: Array<PartialDependencePlotIn>;
}
/**
 * Association resource links.
 * @export
 * @interface AssociationLinks
 */
export interface AssociationLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof AssociationLinks
     */
    self: string;
    /**
     * Link to the Model the Association is derived from.
     * @type {string}
     * @memberof AssociationLinks
     */
    model: string;
    /**
     * Links to the Features of the Association
     * @type {Array<string>}
     * @memberof AssociationLinks
     */
    features: Array<string>;
}
/**
 * Association output model.
 * @export
 * @interface AssociationOut
 */
export interface AssociationOut {
    /**
     * 
     * @type {string}
     * @memberof AssociationOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof AssociationOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof AssociationOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof AssociationOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof AssociationOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    _permissions?: Array<AssociationOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof AssociationOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AssociationOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AssociationOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * The id of the features of the association. Use this for normal association.
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    feature_ids?: Array<string>;
    /**
     * The id of the variables for a variable/variable association.
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    variable_ids?: Array<string>;
    /**
     * Values of the association.
     * @type {Array<AssociationValueOut>}
     * @memberof AssociationOut
     */
    association_values?: Array<AssociationValueOut>;
    /**
     * The partial dependence plot information.
     * @type {Array<PartialDependencePlotIn>}
     * @memberof AssociationOut
     */
    pdps?: Array<PartialDependencePlotIn>;
    /**
     * Collection of links to related resources.
     * @type {AssociationLinks}
     * @memberof AssociationOut
     */
    _links?: AssociationLinks;
    /**
     * Model system id the Association belongs to.
     * @type {string}
     * @memberof AssociationOut
     */
    model_id: string;
    /**
     * The feature data.
     * @type {Array<FeatureOut>}
     * @memberof AssociationOut
     */
    features?: Array<FeatureOut>;
}

/**
    * @export
    * @enum {string}
    */
export enum AssociationOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}

/**
 * Association pagination out.
 * @export
 * @interface AssociationPaginationOut
 */
export interface AssociationPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof AssociationPaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<AssociationOut>}
     * @memberof AssociationPaginationOut
     */
    items?: Array<AssociationOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof AssociationPaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof AssociationPaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof AssociationPaginationOut
     */
    _sorts?: Array<string>;
    /**
     * Collection of filter values that can be applied.
     * @type {AssociationFilters}
     * @memberof AssociationPaginationOut
     */
    _filters?: AssociationFilters;
}
/**
 * Association value input class.
 * @export
 * @interface AssociationValueIn
 */
export interface AssociationValueIn {
    /**
     * The strength value of the association.
     * @type {number}
     * @memberof AssociationValueIn
     */
    value?: number;
    /**
     * Unit of the association value.
     * @type {string}
     * @memberof AssociationValueIn
     */
    unit?: string;
    /**
     * The feature rank based on feature importance
     * @type {number}
     * @memberof AssociationValueIn
     */
    feature_rank?: number;
    /**
     * The total number of features in the parent model.
     * @type {number}
     * @memberof AssociationValueIn
     */
    feature_count?: number;
    /**
     * Whether one can sum up the feature importance values.
     * @type {boolean}
     * @memberof AssociationValueIn
     */
    importance_summation?: boolean;
    /**
     * When using a permutation test for association value, which score type was used to calculate the value.
     * @type {string}
     * @memberof AssociationValueIn
     */
    permutation_score_type?: AssociationValueInPermutationScoreTypeEnum;
    /**
     * Who generated this value.
     * @type {string}
     * @memberof AssociationValueIn
     */
    generated_by?: AssociationValueInGeneratedByEnum;
    /**
     * Statistical significance value of the association.
     * @type {SignificanceValueIn}
     * @memberof AssociationValueIn
     */
    significance_value?: SignificanceValueIn;
    /**
     * Standard error of the Association value.
     * @type {number}
     * @memberof AssociationValueIn
     */
    standard_error?: number;
    /**
     * The method by which the feature importance has been measured.
     * @type {string}
     * @memberof AssociationValueIn
     */
    feature_contribution_method: AssociationValueInFeatureContributionMethodEnum;
    /**
     * Historical values.
     * @type {{ [key: string]: AssociationValueInBase; }}
     * @memberof AssociationValueIn
     */
    history?: { [key: string]: AssociationValueInBase; };
}

/**
    * @export
    * @enum {string}
    */
export enum AssociationValueInPermutationScoreTypeEnum {
    AccuracyScore = 'accuracy_score',
    AveragePrecisionScore = 'average_precision_score',
    BalancedAccuracyScore = 'balanced_accuracy_score',
    BrierScoreLoss = 'brier_score_loss',
    CohenKappaScore = 'cohen_kappa_score',
    F1Score = 'f1_score',
    HammingLoss = 'hamming_loss',
    HingeLoss = 'hinge_loss',
    JaccardScore = 'jaccard_score',
    LogLoss = 'log_loss',
    MatthewsCorrCoef = 'matthews_corr_coef',
    PrecisionScore = 'precision_score',
    RecallScore = 'recall_score',
    RocAucScore = 'roc_auc_score',
    ZeroOneLoss = 'zero_one_loss',
    ExplainedVarianceScore = 'explained_variance_score',
    MaxError = 'max_error',
    MeanAbsoluteError = 'mean_absolute_error',
    MeanAbsolutePercentageError = 'mean_absolute_percentage_error',
    MeanSquaredError = 'mean_squared_error',
    MeanSquaredLogError = 'mean_squared_log_error',
    MedianAbsoluteError = 'median_absolute_error',
    R2Score = 'r2_score',
    CoverageError = 'coverage_error',
    LabelRankingAveragePrecisionScore = 'label_ranking_average_precision_score',
    LabelRankingLoss = 'label_ranking_loss',
    AdjustedR2Score = 'adjusted_r2_score',
    MutualInformationScore = 'mutual_information_score',
    AdjMutualInformationScore = 'adj_mutual_information_score',
    NormalizedMutualInformationScore = 'normalized_mutual_information_score',
    AdjRandScore = 'adj_rand_score',
    CompletenessScore = 'completeness_score',
    FowlkesMallowsScore = 'fowlkes_mallows_score',
    HomogeneityScore = 'homogeneity_score',
    VMeasureScore = 'v_measure_score',
    NegMeanAbsoluteError = 'neg_mean_absolute_error',
    NegMeanSquaredError = 'neg_mean_squared_error',
    RootMeanSquaredError = 'root_mean_squared_error',
    NegRootMeanSquaredError = 'neg_root_mean_squared_error',
    RootMeanSquaredLogError = 'root_mean_squared_log_error',
    NegMedianAbsoluteError = 'neg_median_absolute_error',
    CosineProximity = 'cosine_proximity',
    KullbackLeiblerDivergence = 'kullback_leibler_divergence',
    PoissonMetric = 'poisson_metric',
    MulticlassLogLoss = 'multiclass_log_loss',
    NormalizedDiscountedCumulativeGain = 'normalized_discounted_cumulative_gain',
    GammaDeviance = 'gamma_deviance',
    HuberMetric = 'huber_metric',
    FBetaScore = 'f_beta_score',
    EuclideanDistance = 'euclidean_distance',
    HaversineDistance = 'haversine_distance',
    MeanSquaredPredictioneRror = 'mean_squared_predictione_rror',
    PseudoR2Mcfadden = 'pseudo_r2_mcfadden',
    AdjustedPseudoR2Mcfadden = 'adjusted_pseudo_r2_mcfadden',
    PseudoR2Nagelkerke = 'pseudo_r2_nagelkerke',
    PseudoR2CoxSnell = 'pseudo_r2_cox_snell',
    PseudoR2Effron = 'pseudo_r2_effron',
    Bic = 'bic',
    Aic = 'aic',
    CorrelationActualForecast = 'correlation_actual_forecast',
    ForecastVsActual = 'forecast_vs_actual',
    MeanSquaredPercentageError = 'mean_squared_percentage_error',
    ConfusionMatrix = 'confusion_matrix',
    MulticlassConfusionMatrix = 'multiclass_confusion_matrix',
    RocCurve = 'roc_curve'
}
/**
    * @export
    * @enum {string}
    */
export enum AssociationValueInGeneratedByEnum {
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user'
}
/**
    * @export
    * @enum {string}
    */
export enum AssociationValueInFeatureContributionMethodEnum {
    Gini = 'gini',
    Gain = 'gain',
    Shap = 'shap',
    Coefficient = 'coefficient',
    Lime = 'lime',
    Permutation = 'permutation',
    PearsonR = 'pearson_r',
    KendallTau = 'kendall_tau',
    CramerV = 'cramer_v',
    KruskalWallisHTest = 'kruskal_wallis_h_test',
    ControlVariable = 'control_variable',
    ProductMomentR = 'product_moment_r',
    FrequencyScore = 'frequency_score',
    OddsRatio = 'odds_ratio',
    RelativeRiskRatio = 'relative_risk_ratio',
    HazardRatio = 'hazard_ratio',
    MeanGainUnstandardized = 'mean_gain_unstandardized',
    MeanGainStandardized = 'mean_gain_standardized',
    MeanDifferenceUnstandardized = 'mean_difference_unstandardized',
    MeanDifferenceStandardized = 'mean_difference_standardized',
    ProportionDifference = 'proportion_difference',
    LogOddsRatio = 'log_odds_ratio',
    PearsonChiSquaredTest = 'pearson_chi_squared_test',
    Forecast = 'forecast'
}

/**
 * Association value class.
 * @export
 * @interface AssociationValueInBase
 */
export interface AssociationValueInBase {
    /**
     * The strength value of the association.
     * @type {number}
     * @memberof AssociationValueInBase
     */
    value?: number;
    /**
     * Unit of the association value.
     * @type {string}
     * @memberof AssociationValueInBase
     */
    unit?: string;
    /**
     * The feature rank based on feature importance
     * @type {number}
     * @memberof AssociationValueInBase
     */
    feature_rank?: number;
    /**
     * The total number of features in the parent model.
     * @type {number}
     * @memberof AssociationValueInBase
     */
    feature_count?: number;
    /**
     * Whether one can sum up the feature importance values.
     * @type {boolean}
     * @memberof AssociationValueInBase
     */
    importance_summation?: boolean;
    /**
     * When using a permutation test for association value, which score type was used to calculate the value.
     * @type {string}
     * @memberof AssociationValueInBase
     */
    permutation_score_type?: AssociationValueInBasePermutationScoreTypeEnum;
    /**
     * Who generated this value.
     * @type {string}
     * @memberof AssociationValueInBase
     */
    generated_by?: AssociationValueInBaseGeneratedByEnum;
    /**
     * Statistical significance value of the association.
     * @type {SignificanceValueIn}
     * @memberof AssociationValueInBase
     */
    significance_value?: SignificanceValueIn;
    /**
     * Standard error of the Association value.
     * @type {number}
     * @memberof AssociationValueInBase
     */
    standard_error?: number;
    /**
     * The method by which the feature importance has been measured.
     * @type {string}
     * @memberof AssociationValueInBase
     */
    feature_contribution_method: AssociationValueInBaseFeatureContributionMethodEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AssociationValueInBasePermutationScoreTypeEnum {
    AccuracyScore = 'accuracy_score',
    AveragePrecisionScore = 'average_precision_score',
    BalancedAccuracyScore = 'balanced_accuracy_score',
    BrierScoreLoss = 'brier_score_loss',
    CohenKappaScore = 'cohen_kappa_score',
    F1Score = 'f1_score',
    HammingLoss = 'hamming_loss',
    HingeLoss = 'hinge_loss',
    JaccardScore = 'jaccard_score',
    LogLoss = 'log_loss',
    MatthewsCorrCoef = 'matthews_corr_coef',
    PrecisionScore = 'precision_score',
    RecallScore = 'recall_score',
    RocAucScore = 'roc_auc_score',
    ZeroOneLoss = 'zero_one_loss',
    ExplainedVarianceScore = 'explained_variance_score',
    MaxError = 'max_error',
    MeanAbsoluteError = 'mean_absolute_error',
    MeanAbsolutePercentageError = 'mean_absolute_percentage_error',
    MeanSquaredError = 'mean_squared_error',
    MeanSquaredLogError = 'mean_squared_log_error',
    MedianAbsoluteError = 'median_absolute_error',
    R2Score = 'r2_score',
    CoverageError = 'coverage_error',
    LabelRankingAveragePrecisionScore = 'label_ranking_average_precision_score',
    LabelRankingLoss = 'label_ranking_loss',
    AdjustedR2Score = 'adjusted_r2_score',
    MutualInformationScore = 'mutual_information_score',
    AdjMutualInformationScore = 'adj_mutual_information_score',
    NormalizedMutualInformationScore = 'normalized_mutual_information_score',
    AdjRandScore = 'adj_rand_score',
    CompletenessScore = 'completeness_score',
    FowlkesMallowsScore = 'fowlkes_mallows_score',
    HomogeneityScore = 'homogeneity_score',
    VMeasureScore = 'v_measure_score',
    NegMeanAbsoluteError = 'neg_mean_absolute_error',
    NegMeanSquaredError = 'neg_mean_squared_error',
    RootMeanSquaredError = 'root_mean_squared_error',
    NegRootMeanSquaredError = 'neg_root_mean_squared_error',
    RootMeanSquaredLogError = 'root_mean_squared_log_error',
    NegMedianAbsoluteError = 'neg_median_absolute_error',
    CosineProximity = 'cosine_proximity',
    KullbackLeiblerDivergence = 'kullback_leibler_divergence',
    PoissonMetric = 'poisson_metric',
    MulticlassLogLoss = 'multiclass_log_loss',
    NormalizedDiscountedCumulativeGain = 'normalized_discounted_cumulative_gain',
    GammaDeviance = 'gamma_deviance',
    HuberMetric = 'huber_metric',
    FBetaScore = 'f_beta_score',
    EuclideanDistance = 'euclidean_distance',
    HaversineDistance = 'haversine_distance',
    MeanSquaredPredictioneRror = 'mean_squared_predictione_rror',
    PseudoR2Mcfadden = 'pseudo_r2_mcfadden',
    AdjustedPseudoR2Mcfadden = 'adjusted_pseudo_r2_mcfadden',
    PseudoR2Nagelkerke = 'pseudo_r2_nagelkerke',
    PseudoR2CoxSnell = 'pseudo_r2_cox_snell',
    PseudoR2Effron = 'pseudo_r2_effron',
    Bic = 'bic',
    Aic = 'aic',
    CorrelationActualForecast = 'correlation_actual_forecast',
    ForecastVsActual = 'forecast_vs_actual',
    MeanSquaredPercentageError = 'mean_squared_percentage_error',
    ConfusionMatrix = 'confusion_matrix',
    MulticlassConfusionMatrix = 'multiclass_confusion_matrix',
    RocCurve = 'roc_curve'
}
/**
    * @export
    * @enum {string}
    */
export enum AssociationValueInBaseGeneratedByEnum {
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user'
}
/**
    * @export
    * @enum {string}
    */
export enum AssociationValueInBaseFeatureContributionMethodEnum {
    Gini = 'gini',
    Gain = 'gain',
    Shap = 'shap',
    Coefficient = 'coefficient',
    Lime = 'lime',
    Permutation = 'permutation',
    PearsonR = 'pearson_r',
    KendallTau = 'kendall_tau',
    CramerV = 'cramer_v',
    KruskalWallisHTest = 'kruskal_wallis_h_test',
    ControlVariable = 'control_variable',
    ProductMomentR = 'product_moment_r',
    FrequencyScore = 'frequency_score',
    OddsRatio = 'odds_ratio',
    RelativeRiskRatio = 'relative_risk_ratio',
    HazardRatio = 'hazard_ratio',
    MeanGainUnstandardized = 'mean_gain_unstandardized',
    MeanGainStandardized = 'mean_gain_standardized',
    MeanDifferenceUnstandardized = 'mean_difference_unstandardized',
    MeanDifferenceStandardized = 'mean_difference_standardized',
    ProportionDifference = 'proportion_difference',
    LogOddsRatio = 'log_odds_ratio',
    PearsonChiSquaredTest = 'pearson_chi_squared_test',
    Forecast = 'forecast'
}

/**
 * Association value output model.
 * @export
 * @interface AssociationValueOut
 */
export interface AssociationValueOut {
    /**
     * The strength value of the association.
     * @type {number}
     * @memberof AssociationValueOut
     */
    value?: number;
    /**
     * Unit of the association value.
     * @type {string}
     * @memberof AssociationValueOut
     */
    unit?: string;
    /**
     * The feature rank based on feature importance
     * @type {number}
     * @memberof AssociationValueOut
     */
    feature_rank?: number;
    /**
     * The total number of features in the parent model.
     * @type {number}
     * @memberof AssociationValueOut
     */
    feature_count?: number;
    /**
     * Whether one can sum up the feature importance values.
     * @type {boolean}
     * @memberof AssociationValueOut
     */
    importance_summation?: boolean;
    /**
     * When using a permutation test for association value, which score type was used to calculate the value.
     * @type {string}
     * @memberof AssociationValueOut
     */
    permutation_score_type?: AssociationValueOutPermutationScoreTypeEnum;
    /**
     * Who generated this value.
     * @type {string}
     * @memberof AssociationValueOut
     */
    generated_by?: AssociationValueOutGeneratedByEnum;
    /**
     * Statistical significance value of the association.
     * @type {SignificanceValueOut}
     * @memberof AssociationValueOut
     */
    significance_value?: SignificanceValueOut;
    /**
     * Standard error of the Association value.
     * @type {number}
     * @memberof AssociationValueOut
     */
    standard_error?: number;
    /**
     * The method by which the feature importance has been measured.
     * @type {string}
     * @memberof AssociationValueOut
     */
    feature_contribution_method?: AssociationValueOutFeatureContributionMethodEnum;
    /**
     * Historical values.
     * @type {{ [key: string]: AssociationValueInBase; }}
     * @memberof AssociationValueOut
     */
    history?: { [key: string]: AssociationValueInBase; };
    /**
     * Whether this is a primary association_value or not.
     * @type {boolean}
     * @memberof AssociationValueOut
     */
    primary_association_value?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum AssociationValueOutPermutationScoreTypeEnum {
    AccuracyScore = 'accuracy_score',
    AveragePrecisionScore = 'average_precision_score',
    BalancedAccuracyScore = 'balanced_accuracy_score',
    BrierScoreLoss = 'brier_score_loss',
    CohenKappaScore = 'cohen_kappa_score',
    F1Score = 'f1_score',
    HammingLoss = 'hamming_loss',
    HingeLoss = 'hinge_loss',
    JaccardScore = 'jaccard_score',
    LogLoss = 'log_loss',
    MatthewsCorrCoef = 'matthews_corr_coef',
    PrecisionScore = 'precision_score',
    RecallScore = 'recall_score',
    RocAucScore = 'roc_auc_score',
    ZeroOneLoss = 'zero_one_loss',
    ExplainedVarianceScore = 'explained_variance_score',
    MaxError = 'max_error',
    MeanAbsoluteError = 'mean_absolute_error',
    MeanAbsolutePercentageError = 'mean_absolute_percentage_error',
    MeanSquaredError = 'mean_squared_error',
    MeanSquaredLogError = 'mean_squared_log_error',
    MedianAbsoluteError = 'median_absolute_error',
    R2Score = 'r2_score',
    CoverageError = 'coverage_error',
    LabelRankingAveragePrecisionScore = 'label_ranking_average_precision_score',
    LabelRankingLoss = 'label_ranking_loss',
    AdjustedR2Score = 'adjusted_r2_score',
    MutualInformationScore = 'mutual_information_score',
    AdjMutualInformationScore = 'adj_mutual_information_score',
    NormalizedMutualInformationScore = 'normalized_mutual_information_score',
    AdjRandScore = 'adj_rand_score',
    CompletenessScore = 'completeness_score',
    FowlkesMallowsScore = 'fowlkes_mallows_score',
    HomogeneityScore = 'homogeneity_score',
    VMeasureScore = 'v_measure_score',
    NegMeanAbsoluteError = 'neg_mean_absolute_error',
    NegMeanSquaredError = 'neg_mean_squared_error',
    RootMeanSquaredError = 'root_mean_squared_error',
    NegRootMeanSquaredError = 'neg_root_mean_squared_error',
    RootMeanSquaredLogError = 'root_mean_squared_log_error',
    NegMedianAbsoluteError = 'neg_median_absolute_error',
    CosineProximity = 'cosine_proximity',
    KullbackLeiblerDivergence = 'kullback_leibler_divergence',
    PoissonMetric = 'poisson_metric',
    MulticlassLogLoss = 'multiclass_log_loss',
    NormalizedDiscountedCumulativeGain = 'normalized_discounted_cumulative_gain',
    GammaDeviance = 'gamma_deviance',
    HuberMetric = 'huber_metric',
    FBetaScore = 'f_beta_score',
    EuclideanDistance = 'euclidean_distance',
    HaversineDistance = 'haversine_distance',
    MeanSquaredPredictioneRror = 'mean_squared_predictione_rror',
    PseudoR2Mcfadden = 'pseudo_r2_mcfadden',
    AdjustedPseudoR2Mcfadden = 'adjusted_pseudo_r2_mcfadden',
    PseudoR2Nagelkerke = 'pseudo_r2_nagelkerke',
    PseudoR2CoxSnell = 'pseudo_r2_cox_snell',
    PseudoR2Effron = 'pseudo_r2_effron',
    Bic = 'bic',
    Aic = 'aic',
    CorrelationActualForecast = 'correlation_actual_forecast',
    ForecastVsActual = 'forecast_vs_actual',
    MeanSquaredPercentageError = 'mean_squared_percentage_error',
    ConfusionMatrix = 'confusion_matrix',
    MulticlassConfusionMatrix = 'multiclass_confusion_matrix',
    RocCurve = 'roc_curve'
}
/**
    * @export
    * @enum {string}
    */
export enum AssociationValueOutGeneratedByEnum {
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user'
}
/**
    * @export
    * @enum {string}
    */
export enum AssociationValueOutFeatureContributionMethodEnum {
    Gini = 'gini',
    Gain = 'gain',
    Shap = 'shap',
    Coefficient = 'coefficient',
    Lime = 'lime',
    Permutation = 'permutation',
    PearsonR = 'pearson_r',
    KendallTau = 'kendall_tau',
    CramerV = 'cramer_v',
    KruskalWallisHTest = 'kruskal_wallis_h_test',
    ControlVariable = 'control_variable',
    ProductMomentR = 'product_moment_r',
    FrequencyScore = 'frequency_score',
    OddsRatio = 'odds_ratio',
    RelativeRiskRatio = 'relative_risk_ratio',
    HazardRatio = 'hazard_ratio',
    MeanGainUnstandardized = 'mean_gain_unstandardized',
    MeanGainStandardized = 'mean_gain_standardized',
    MeanDifferenceUnstandardized = 'mean_difference_unstandardized',
    MeanDifferenceStandardized = 'mean_difference_standardized',
    ProportionDifference = 'proportion_difference',
    LogOddsRatio = 'log_odds_ratio',
    PearsonChiSquaredTest = 'pearson_chi_squared_test',
    Forecast = 'forecast',
    Invalid = 'invalid'
}

/**
 * An Author input data.
 * @export
 * @interface AuthorIn
 */
export interface AuthorIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AuthorIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof AuthorIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AuthorIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AuthorIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * Author\'s name.
     * @type {string}
     * @memberof AuthorIn
     */
    name: string;
    /**
     * Author\'s affiliation
     * @type {Array<string>}
     * @memberof AuthorIn
     */
    affiliation?: Array<string>;
    /**
     * Author\'s ORCID
     * @type {string}
     * @memberof AuthorIn
     */
    orcid?: string;
}
/**
 * Author resource links.
 * @export
 * @interface AuthorLinks
 */
export interface AuthorLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof AuthorLinks
     */
    self: string;
}
/**
 * Author output model.
 * @export
 * @interface AuthorOut
 */
export interface AuthorOut {
    /**
     * 
     * @type {string}
     * @memberof AuthorOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof AuthorOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof AuthorOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof AuthorOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof AuthorOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthorOut
     */
    _permissions?: Array<AuthorOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AuthorOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof AuthorOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AuthorOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AuthorOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * Author\'s name.
     * @type {string}
     * @memberof AuthorOut
     */
    name: string;
    /**
     * Author\'s affiliation
     * @type {Array<string>}
     * @memberof AuthorOut
     */
    affiliation?: Array<string>;
    /**
     * Author\'s ORCID
     * @type {string}
     * @memberof AuthorOut
     */
    orcid?: string;
    /**
     * Collection of links to related resources.
     * @type {AuthorLinks}
     * @memberof AuthorOut
     */
    _links?: AuthorLinks;
    /**
     * The System user id of this Author.
     * @type {string}
     * @memberof AuthorOut
     */
    user_id?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AuthorOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}

/**
 * Author pagination out.
 * @export
 * @interface AuthorPaginationOut
 */
export interface AuthorPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof AuthorPaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<AuthorOut>}
     * @memberof AuthorPaginationOut
     */
    items?: Array<AuthorOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof AuthorPaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof AuthorPaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof AuthorPaginationOut
     */
    _sorts?: Array<string>;
}
/**
 * Credentials for an integration without password.
 * @export
 * @interface BigQueryCredentials
 */
export interface BigQueryCredentials {
    /**
     * Integration location.
     * @type {string}
     * @memberof BigQueryCredentials
     */
    location: string;
    /**
     * Integration project.
     * @type {string}
     * @memberof BigQueryCredentials
     */
    project: string;
}
/**
 * Input credentials for a BigQuery integration.
 * @export
 * @interface BigQueryCredentialsIn
 */
export interface BigQueryCredentialsIn {
    /**
     * Integration location.
     * @type {string}
     * @memberof BigQueryCredentialsIn
     */
    location: string;
    /**
     * Integration project.
     * @type {string}
     * @memberof BigQueryCredentialsIn
     */
    project: string;
    /**
     * Integration credentials.
     * @type {string}
     * @memberof BigQueryCredentialsIn
     */
    raw_credentials: string;
}
/**
 * 
 * @export
 * @interface BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
 */
export interface BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete {
    /**
     * 
     * @type {Array<string>}
     * @memberof BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
     */
    ids: Array<string>;
}
/**
 * 
 * @export
 * @interface BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
 */
export interface BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete {
    /**
     * 
     * @type {Array<string>}
     * @memberof BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
     */
    ids: Array<string>;
}
/**
 * Patch a `Association` with provided data.
 * @export
 * @interface BulkPatchAssociationOp
 */
export interface BulkPatchAssociationOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof BulkPatchAssociationOp
     */
    field: string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof BulkPatchAssociationOp
     */
    value?: any | null;
    /**
     * Operation to perform on resource field.
     * @type {string}
     * @memberof BulkPatchAssociationOp
     */
    op: BulkPatchAssociationOpOpEnum;
    /**
     * The id of resource to apply this patch to.
     * @type {string}
     * @memberof BulkPatchAssociationOp
     */
    id: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BulkPatchAssociationOpOpEnum {
    Update = 'update',
    Append = 'append',
    Delete = 'delete'
}

/**
 * Patch a `Feature` with provided data.
 * @export
 * @interface BulkPatchFeatureOp
 */
export interface BulkPatchFeatureOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof BulkPatchFeatureOp
     */
    field: string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof BulkPatchFeatureOp
     */
    value?: any | null;
    /**
     * Operation to perform on resource field.
     * @type {string}
     * @memberof BulkPatchFeatureOp
     */
    op: BulkPatchFeatureOpOpEnum;
    /**
     * The id of resource to apply this patch to.
     * @type {string}
     * @memberof BulkPatchFeatureOp
     */
    id: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BulkPatchFeatureOpOpEnum {
    Update = 'update',
    Append = 'append',
    Delete = 'delete'
}

/**
 * Model to represent calibrator bucket params.
 * @export
 * @interface CalibratorBucketParams
 */
export interface CalibratorBucketParams {
    /**
     * Bucket edges for calibrators.
     * @type {Array<number>}
     * @memberof CalibratorBucketParams
     */
    buckets: Array<number>;
    /**
     * Max value of this relationship type.
     * @type {number}
     * @memberof CalibratorBucketParams
     */
    max_value: number;
    /**
     * Min value of this relationship type.
     * @type {number}
     * @memberof CalibratorBucketParams
     */
    min_value: number;
}
/**
 * Represent a structured statistics for a categorical (including binary) feature type.
 * @export
 * @interface CategoricalFeatureStatistics
 */
export interface CategoricalFeatureStatistics {
    /**
     * Number of distinct values in the feature.
     * @type {number}
     * @memberof CategoricalFeatureStatistics
     */
    distinct_count?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof CategoricalFeatureStatistics
     */
    percent_missing?: number;
    /**
     * Frequency of occurrence of each value.
     * @type {Frequency}
     * @memberof CategoricalFeatureStatistics
     */
    frequency?: Frequency;
    /**
     * Distinct Values that the categorical feature takes.
     * @type {Array<string>}
     * @memberof CategoricalFeatureStatistics
     */
    distinct_values?: Array<string>;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: CategoricalFeatureStatisticsSimpleBase; }}
     * @memberof CategoricalFeatureStatistics
     */
    history?: { [key: string]: CategoricalFeatureStatisticsSimpleBase; };
}
/**
 * Represent a structured statistics for a categorical (including binary) feature type.
 * @export
 * @interface CategoricalFeatureStatisticsSimpleBase
 */
export interface CategoricalFeatureStatisticsSimpleBase {
    /**
     * Number of distinct values in the feature.
     * @type {number}
     * @memberof CategoricalFeatureStatisticsSimpleBase
     */
    distinct_count?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof CategoricalFeatureStatisticsSimpleBase
     */
    percent_missing?: number;
}
/**
 * Category population attribute value input.
 * @export
 * @interface CategoryIn
 */
export interface CategoryIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof CategoryIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof CategoryIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof CategoryIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof CategoryIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof CategoryIn
     */
    xids?: { [key: string]: string; };
    /**
     * Category name
     * @type {string}
     * @memberof CategoryIn
     */
    category_name: string;
}
/**
 * Category population attribute value output model.
 * @export
 * @interface CategoryOut
 */
export interface CategoryOut {
    /**
     * 
     * @type {string}
     * @memberof CategoryOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof CategoryOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof CategoryOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof CategoryOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof CategoryOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CategoryOut
     */
    _permissions?: Array<CategoryOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof CategoryOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof CategoryOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof CategoryOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof CategoryOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof CategoryOut
     */
    xids?: { [key: string]: string; };
    /**
     * Collection of links to related resources.
     * @type {PopulationAttributeValueLinks}
     * @memberof CategoryOut
     */
    _links?: PopulationAttributeValueLinks;
    /**
     * The population attribute type of the value.
     * @type {string}
     * @memberof CategoryOut
     */
    attribute_type?: CategoryOutAttributeTypeEnum;
    /**
     * Category name
     * @type {string}
     * @memberof CategoryOut
     */
    category_name: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CategoryOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}
/**
    * @export
    * @enum {string}
    */
export enum CategoryOutAttributeTypeEnum {
    Invalid = 'invalid',
    Categorical = 'categorical',
    DateRange = 'date_range',
    NumberRange = 'number_range',
    FreeText = 'free_text',
    Location = 'location'
}

/**
 * Concept input resource model.
 * @export
 * @interface ConceptIn
 */
export interface ConceptIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ConceptIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof ConceptIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * The Concept\'s corresponding wikidata id.
     * @type {string}
     * @memberof ConceptIn
     */
    wikidata_id: string;
}
/**
 * Concept resource links.
 * @export
 * @interface ConceptLinks
 */
export interface ConceptLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof ConceptLinks
     */
    self: string;
}
/**
 * Concept output model.
 * @export
 * @interface ConceptOut
 */
export interface ConceptOut {
    /**
     * 
     * @type {string}
     * @memberof ConceptOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof ConceptOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof ConceptOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof ConceptOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof ConceptOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    _permissions?: Array<ConceptOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof ConceptOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * The Concept\'s corresponding wikidata id.
     * @type {string}
     * @memberof ConceptOut
     */
    wikidata_id: string;
    /**
     * The Concept\'s name.
     * @type {string}
     * @memberof ConceptOut
     */
    name?: string;
    /**
     * The Concept\'s aliases.
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    aliases?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ConceptOut
     */
    description?: string;
    /**
     * Collection of links to related resources.
     * @type {ConceptLinks}
     * @memberof ConceptOut
     */
    _links?: ConceptLinks;
}

/**
    * @export
    * @enum {string}
    */
export enum ConceptOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}

/**
 * Concept pagination out.
 * @export
 * @interface ConceptPaginationOut
 */
export interface ConceptPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof ConceptPaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<ConceptOut>}
     * @memberof ConceptPaginationOut
     */
    items?: Array<ConceptOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof ConceptPaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof ConceptPaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof ConceptPaginationOut
     */
    _sorts?: Array<string>;
}
/**
 * Confidence interval input model.
 * @export
 * @interface ConfidenceIntervalIn
 */
export interface ConfidenceIntervalIn {
    /**
     * Confidence level for interval.
     * @type {string}
     * @memberof ConfidenceIntervalIn
     */
    level?: ConfidenceIntervalInLevelEnum;
    /**
     * The lower bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalIn
     */
    ci_lower: number;
    /**
     * The upper bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalIn
     */
    ci_upper: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ConfidenceIntervalInLevelEnum {
    Five = 'ninety_five',
    Nine = 'ninety_nine',
    NinePointNine = 'ninety_nine_point_nine'
}

/**
 * Confidence interval output model.
 * @export
 * @interface ConfidenceIntervalOut
 */
export interface ConfidenceIntervalOut {
    /**
     * Confidence level for interval.
     * @type {string}
     * @memberof ConfidenceIntervalOut
     */
    level?: ConfidenceIntervalOutLevelEnum;
    /**
     * The lower bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalOut
     */
    ci_lower?: number;
    /**
     * The upper bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalOut
     */
    ci_upper?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ConfidenceIntervalOutLevelEnum {
    NinetyFive = 'ninety_five',
    NinetyNine = 'ninety_nine',
    NinetyNinePointNine = 'ninety_nine_point_nine',
    Invalid = 'invalid'
}

/**
 * A System Database Usage Object.
 * @export
 * @interface DatabaseUsage
 */
export interface DatabaseUsage {
    /**
     * Text of query run on database.
     * @type {string}
     * @memberof DatabaseUsage
     */
    query_text?: string;
    /**
     * List of database user IDs for users that have run this query.
     * @type {Array<string>}
     * @memberof DatabaseUsage
     */
    db_user_ids?: Array<string>;
    /**
     * Latest value for database query\'s label.
     * @type {string}
     * @memberof DatabaseUsage
     */
    latest_label?: string;
    /**
     * Latest start timestamp for query with this query_text.
     * @type {string}
     * @memberof DatabaseUsage
     */
    latest_timestamp?: string;
    /**
     * Number of times this query has been run over specified time span.
     * @type {number}
     * @memberof DatabaseUsage
     */
    run_count?: number;
    /**
     * Names of tables referenced in this query.
     * @type {Array<string>}
     * @memberof DatabaseUsage
     */
    tables_referenced?: Array<string>;
    /**
     * Names of features referenced in this query, indexed by table name.
     * @type {{ [key: string]: Array<string>; }}
     * @memberof DatabaseUsage
     */
    features_referenced?: { [key: string]: Array<string>; };
}
/**
 * A System Dataset Resource.
 * @export
 * @interface DatasetIn
 */
export interface DatasetIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DatasetIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DatasetIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DatasetIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DatasetIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * Dataset name.
     * @type {string}
     * @memberof DatasetIn
     */
    name: string;
    /**
     * The link for the download (*necessary for model to be “Reproducible”)
     * @type {string}
     * @memberof DatasetIn
     */
    url?: string;
    /**
     * The link for the API
     * @type {string}
     * @memberof DatasetIn
     */
    api_url?: string;
    /**
     * Location of a page describing the dataset.
     * @type {string}
     * @memberof DatasetIn
     */
    desc_url?: string;
    /**
     * An identifier, such as a DOI or a Compact Identifier. If the dataset has more than one identifier, repeat the identifier property. If using JSON-LD, this is represented using JSON list syntax.
     * @type {Array<string>}
     * @memberof DatasetIn
     */
    identifiers?: Array<string>;
    /**
     * The version number for the dataset.
     * @type {string}
     * @memberof DatasetIn
     */
    version?: string;
    /**
     * Dataset description.
     * @type {string}
     * @memberof DatasetIn
     */
    description?: string;
    /**
     * The individual or organization to whom this dataset belongs (e.g. holds copyright).
     * @type {string}
     * @memberof DatasetIn
     */
    owner?: string;
    /**
     * The file format of the dataset.
     * @type {string}
     * @memberof DatasetIn
     */
    format?: string;
    /**
     * Alternative name that have been used to refer to this dataset, such as alias or abbreviation.
     * @type {Array<string>}
     * @memberof DatasetIn
     */
    aliases?: Array<string>;
    /**
     * Catalogs to which the dataset belongs
     * @type {Array<string>}
     * @memberof DatasetIn
     */
    data_catalogs?: Array<string>;
    /**
     * Sample size of dataset if known and fixed.
     * @type {number}
     * @memberof DatasetIn
     */
    sample_size?: number;
    /**
     * Does the dataset contain personally identifiable information?
     * @type {boolean}
     * @memberof DatasetIn
     */
    has_pii?: boolean;
    /**
     * Does the dataset contain personally identifiable health information?
     * @type {boolean}
     * @memberof DatasetIn
     */
    has_phi?: boolean;
    /**
     * A license under which the dataset is distributed.
     * @type {string}
     * @memberof DatasetIn
     */
    license?: DatasetInLicenseEnum;
    /**
     * A database query that a user can execute to produce the dataset object.
     * @type {string}
     * @memberof DatasetIn
     */
    db_query?: string;
    /**
     * A database connection string to execute db_query. Might include free-text instructions.
     * @type {string}
     * @memberof DatasetIn
     */
    db_connection_string?: string;
    /**
     * The database language or protocol (e.g., Azure Storage, Postgres, MySQL, OpenOffice) used to produce the dataset object.
     * @type {string}
     * @memberof DatasetIn
     */
    db_language?: string;
    /**
     * Database Usage JSON object (stored as string) used to populate Usage tab.
     * @type {Array<DatabaseUsage>}
     * @memberof DatasetIn
     */
    db_usage?: Array<DatabaseUsage>;
}

/**
    * @export
    * @enum {string}
    */
export enum DatasetInLicenseEnum {
    PublicDomain = 'public_domain',
    CreativeCommonsPublicDomainDedication = 'creative_commons_public_domain_dedication',
    OpendataCommonsPublicDomainDedicationAndLicense = 'opendata_commons_public_domain_dedication_and_license',
    CreativeCommonsAttributionInternational = 'creative_commons_attribution_international',
    CommunityDataLicenseAgreementVersion1Permissive = 'community_data_license_agreement_version_1_permissive',
    OpenDataCommonsAttributionLicense = 'open_data_commons_attribution_license',
    CreativeCommonsAttributionShareAlike4International = 'creative_commons_attribution_share_alike_4_international',
    CommunityDataLicenseAgreementVersion1Sharing = 'community_data_license_agreement_version_1_sharing',
    OpenDataCommonsOpenDatabaseLicense = 'open_data_commons_open_database_license',
    CreativeCommonsAttributionNoncommercial4International = 'creative_commons_attribution_noncommercial_4_international',
    CreativeCommonsAttributionNoderivatives4International = 'creative_commons_attribution_noderivatives_4_international',
    CreativeCommonsAttributionNoncommercialShareAlike4International = 'creative_commons_attribution_noncommercial_share_alike_4_international',
    CreativeCommonsAttributionNoncommercialNoderivatives4International = 'creative_commons_attribution_noncommercial_noderivatives_4_international',
    Other = 'other'
}

/**
 * Dataset resource links.
 * @export
 * @interface DatasetLinks
 */
export interface DatasetLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof DatasetLinks
     */
    self: string;
    /**
     * Link to dataset\'s features.
     * @type {string}
     * @memberof DatasetLinks
     */
    features: string;
    /**
     * Link to dataset\'s index feature if it is set.
     * @type {string}
     * @memberof DatasetLinks
     */
    index?: string;
}
/**
 * Dataset output model.
 * @export
 * @interface DatasetOut
 */
export interface DatasetOut {
    /**
     * 
     * @type {string}
     * @memberof DatasetOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof DatasetOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof DatasetOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof DatasetOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof DatasetOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    _permissions?: Array<DatasetOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DatasetOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DatasetOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DatasetOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * Dataset name.
     * @type {string}
     * @memberof DatasetOut
     */
    name?: string;
    /**
     * The link for the download (*necessary for model to be “Reproducible”)
     * @type {string}
     * @memberof DatasetOut
     */
    url?: string;
    /**
     * The link for the API
     * @type {string}
     * @memberof DatasetOut
     */
    api_url?: string;
    /**
     * Location of a page describing the dataset.
     * @type {string}
     * @memberof DatasetOut
     */
    desc_url?: string;
    /**
     * An identifier, such as a DOI or a Compact Identifier. If the dataset has more than one identifier, repeat the identifier property. If using JSON-LD, this is represented using JSON list syntax.
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    identifiers?: Array<string>;
    /**
     * The version number for the dataset.
     * @type {string}
     * @memberof DatasetOut
     */
    version?: string;
    /**
     * Dataset description.
     * @type {string}
     * @memberof DatasetOut
     */
    description?: string;
    /**
     * The individual or organization to whom this dataset belongs (e.g. holds copyright).
     * @type {string}
     * @memberof DatasetOut
     */
    owner?: string;
    /**
     * The file format of the dataset.
     * @type {string}
     * @memberof DatasetOut
     */
    format?: string;
    /**
     * Alternative name that have been used to refer to this dataset, such as alias or abbreviation.
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    aliases?: Array<string>;
    /**
     * Catalogs to which the dataset belongs
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    data_catalogs?: Array<string>;
    /**
     * Sample size of dataset if known and fixed.
     * @type {number}
     * @memberof DatasetOut
     */
    sample_size?: number;
    /**
     * Does the dataset contain personally identifiable information?
     * @type {boolean}
     * @memberof DatasetOut
     */
    has_pii?: boolean;
    /**
     * Does the dataset contain personally identifiable health information?
     * @type {boolean}
     * @memberof DatasetOut
     */
    has_phi?: boolean;
    /**
     * A license under which the dataset is distributed.
     * @type {string}
     * @memberof DatasetOut
     */
    license?: DatasetOutLicenseEnum;
    /**
     * A database query that a user can execute to produce the dataset object.
     * @type {string}
     * @memberof DatasetOut
     */
    db_query?: string;
    /**
     * A database connection string to execute db_query. Might include free-text instructions.
     * @type {string}
     * @memberof DatasetOut
     */
    db_connection_string?: string;
    /**
     * The database language or protocol (e.g., Azure Storage, Postgres, MySQL, OpenOffice) used to produce the dataset object.
     * @type {string}
     * @memberof DatasetOut
     */
    db_language?: string;
    /**
     * Database Usage JSON object (stored as string) used to populate Usage tab.
     * @type {Array<DatabaseUsage>}
     * @memberof DatasetOut
     */
    db_usage?: Array<DatabaseUsage>;
    /**
     * Collection of links to related resources.
     * @type {DatasetLinks}
     * @memberof DatasetOut
     */
    _links?: DatasetLinks;
    /**
     * The index of the dataset is the column in the dataset used as row labels (mostly relevant for trainingset)
     * @type {FeatureOut}
     * @memberof DatasetOut
     */
    index?: FeatureOut;
    /**
     * Deprecated: The subgraph id of the resource.
     * @type {string}
     * @memberof DatasetOut
     */
    subgraph_id?: string;
    /**
     * Number of models using this dataset.
     * @type {number}
     * @memberof DatasetOut
     */
    model_count?: number;
    /**
     * Object\'s tagged to this study.
     * @type {AppSchemaDatasetsObjectTags}
     * @memberof DatasetOut
     */
    object_tags?: AppSchemaDatasetsObjectTags;
}

/**
    * @export
    * @enum {string}
    */
export enum DatasetOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}
/**
    * @export
    * @enum {string}
    */
export enum DatasetOutLicenseEnum {
    PublicDomain = 'public_domain',
    CreativeCommonsPublicDomainDedication = 'creative_commons_public_domain_dedication',
    OpendataCommonsPublicDomainDedicationAndLicense = 'opendata_commons_public_domain_dedication_and_license',
    CreativeCommonsAttributionInternational = 'creative_commons_attribution_international',
    CommunityDataLicenseAgreementVersion1Permissive = 'community_data_license_agreement_version_1_permissive',
    OpenDataCommonsAttributionLicense = 'open_data_commons_attribution_license',
    CreativeCommonsAttributionShareAlike4International = 'creative_commons_attribution_share_alike_4_international',
    CommunityDataLicenseAgreementVersion1Sharing = 'community_data_license_agreement_version_1_sharing',
    OpenDataCommonsOpenDatabaseLicense = 'open_data_commons_open_database_license',
    CreativeCommonsAttributionNoncommercial4International = 'creative_commons_attribution_noncommercial_4_international',
    CreativeCommonsAttributionNoderivatives4International = 'creative_commons_attribution_noderivatives_4_international',
    CreativeCommonsAttributionNoncommercialShareAlike4International = 'creative_commons_attribution_noncommercial_share_alike_4_international',
    CreativeCommonsAttributionNoncommercialNoderivatives4International = 'creative_commons_attribution_noncommercial_noderivatives_4_international',
    Other = 'other',
    Invalid = 'invalid'
}

/**
 * Dataset pagination out.
 * @export
 * @interface DatasetPaginationOut
 */
export interface DatasetPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof DatasetPaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<DatasetOut>}
     * @memberof DatasetPaginationOut
     */
    items?: Array<DatasetOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof DatasetPaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof DatasetPaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof DatasetPaginationOut
     */
    _sorts?: Array<string>;
}
/**
 * Date range population attribute value input.
 * @export
 * @interface DateRangeIn
 */
export interface DateRangeIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DateRangeIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DateRangeIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DateRangeIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DateRangeIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof DateRangeIn
     */
    xids?: { [key: string]: string; };
    /**
     * Start datetime.
     * @type {string}
     * @memberof DateRangeIn
     */
    date_start: string;
    /**
     * End datetime.
     * @type {string}
     * @memberof DateRangeIn
     */
    date_end: string;
    /**
     * Input date string for start date.
     * @type {string}
     * @memberof DateRangeIn
     */
    date_start_string?: string;
    /**
     * Input date string for end date.
     * @type {string}
     * @memberof DateRangeIn
     */
    date_end_string?: string;
}
/**
 * Date range population attribute value output model.
 * @export
 * @interface DateRangeOut
 */
export interface DateRangeOut {
    /**
     * 
     * @type {string}
     * @memberof DateRangeOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof DateRangeOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof DateRangeOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof DateRangeOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof DateRangeOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DateRangeOut
     */
    _permissions?: Array<DateRangeOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DateRangeOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DateRangeOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DateRangeOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DateRangeOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof DateRangeOut
     */
    xids?: { [key: string]: string; };
    /**
     * Collection of links to related resources.
     * @type {PopulationAttributeValueLinks}
     * @memberof DateRangeOut
     */
    _links?: PopulationAttributeValueLinks;
    /**
     * The population attribute type of the value.
     * @type {string}
     * @memberof DateRangeOut
     */
    attribute_type?: DateRangeOutAttributeTypeEnum;
    /**
     * Start datetime.
     * @type {string}
     * @memberof DateRangeOut
     */
    date_start: string;
    /**
     * End datetime.
     * @type {string}
     * @memberof DateRangeOut
     */
    date_end: string;
    /**
     * Input date string for start date.
     * @type {string}
     * @memberof DateRangeOut
     */
    date_start_string?: string;
    /**
     * Input date string for end date.
     * @type {string}
     * @memberof DateRangeOut
     */
    date_end_string?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DateRangeOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}
/**
    * @export
    * @enum {string}
    */
export enum DateRangeOutAttributeTypeEnum {
    Invalid = 'invalid',
    Categorical = 'categorical',
    DateRange = 'date_range',
    NumberRange = 'number_range',
    FreeText = 'free_text',
    Location = 'location'
}

/**
 * Model Deployment model.
 * @export
 * @interface Deployment
 */
export interface Deployment {
    /**
     * Model\'s deployment stage.
     * @type {string}
     * @memberof Deployment
     */
    stage?: DeploymentStageEnum;
    /**
     * Model\'s deployed artifact url. E.g. link to the object in S3.
     * @type {string}
     * @memberof Deployment
     */
    artifact_url?: string;
    /**
     * Model\'s deployed endpoint. E.g. the endpoint at which the deployed model is accessible.
     * @type {string}
     * @memberof Deployment
     */
    endpoint?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DeploymentStageEnum {
    Development = 'development',
    Testing = 'testing',
    Staging = 'staging',
    Production = 'production',
    Invalid = 'invalid'
}

/**
 * Represent dynamic series statistics for a dynamic feature type.
 * @export
 * @interface DynamicFeatureStatistics
 */
export interface DynamicFeatureStatistics {
    /**
     * Minimum series length.
     * @type {number}
     * @memberof DynamicFeatureStatistics
     */
    min_series_length?: number;
    /**
     * Maximum series length.
     * @type {number}
     * @memberof DynamicFeatureStatistics
     */
    max_series_length?: number;
    /**
     * Line Plot of percentile value at each index value for which there are observed values.
     * @type {{ [key: string]: LinePlot; }}
     * @memberof DynamicFeatureStatistics
     */
    percentile_series?: { [key: string]: LinePlot; };
    /**
     * Histogram depicting the distribution of series length in the dynamic feature.
     * @type {Histogram}
     * @memberof DynamicFeatureStatistics
     */
    series_length_distribution?: Histogram;
    /**
     * Line Plot of the mean value at each index value for which there are observed values.
     * @type {LinePlot}
     * @memberof DynamicFeatureStatistics
     */
    mean_series?: LinePlot;
    /**
     * Line Plot of the standard deviation at each index value for which there are observed values.
     * @type {LinePlot}
     * @memberof DynamicFeatureStatistics
     */
    std_series?: LinePlot;
    /**
     * A frequency object representing the relative frequency at each index value for which there are observed values for categorical-valued dynamic features.
     * @type {{ [key: string]: Frequency; }}
     * @memberof DynamicFeatureStatistics
     */
    frequency_series?: { [key: string]: Frequency; };
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: DynamicFeatureStatisticsSimpleBase; }}
     * @memberof DynamicFeatureStatistics
     */
    history?: { [key: string]: DynamicFeatureStatisticsSimpleBase; };
}
/**
 * Represent statistics for a dynamic feature type.  These fields will be included in the stats history.
 * @export
 * @interface DynamicFeatureStatisticsSimpleBase
 */
export interface DynamicFeatureStatisticsSimpleBase {
    /**
     * Minimum series length.
     * @type {number}
     * @memberof DynamicFeatureStatisticsSimpleBase
     */
    min_series_length?: number;
    /**
     * Maximum series length.
     * @type {number}
     * @memberof DynamicFeatureStatisticsSimpleBase
     */
    max_series_length?: number;
}
/**
 * Edge Typed Link model.
 * @export
 * @interface EdgeTypedLink
 */
export interface EdgeTypedLink {
    /**
     * 
     * @type {string}
     * @memberof EdgeTypedLink
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeTypedLink
     */
    target: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeTypedLink
     */
    edgeType: EdgeTypedLinkEdgeTypeEnum;
    /**
     * Query Count of a dataset relationship.
     * @type {number}
     * @memberof EdgeTypedLink
     */
    numQueries?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EdgeTypedLinkEdgeTypeEnum {
    DatasetRelationship = 'dataset_relationship',
    ConceptRelationship = 'concept_relationship',
    VariableRelationship = 'variable_relationship',
    FeatureRelationship = 'feature_relationship',
    FeatureVariable = 'feature_variable',
    Measures = 'measures'
}

/**
 * An Enterprise Resource.
 * @export
 * @interface Enterprise
 */
export interface Enterprise {
    /**
     * 
     * @type {number}
     * @memberof Enterprise
     */
    id: number;
    /**
     * Enterprise name.
     * @type {string}
     * @memberof Enterprise
     */
    name: string;
    /**
     * Enterprise Identity Provider.
     * @type {string}
     * @memberof Enterprise
     */
    identity_provider: string;
    /**
     * The list of integrations to retrieve
     * @type {Array<Integration>}
     * @memberof Enterprise
     */
    integrations?: Array<Integration>;
    /**
     * The enterprise messages
     * @type {Array<MessageOut>}
     * @memberof Enterprise
     */
    messages?: Array<MessageOut>;
    /**
     * The actions the requesting user is allowed to perform on this resource.
     * @type {Array<string>}
     * @memberof Enterprise
     */
    _permissions?: Array<EnterprisePermissionsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum EnterprisePermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}

/**
 * External asset model.
 * @export
 * @interface ExternalAsset
 */
export interface ExternalAsset {
    /**
     * Asset uri.
     * @type {string}
     * @memberof ExternalAsset
     */
    uri?: string;
    /**
     * External asset type.
     * @type {string}
     * @memberof ExternalAsset
     */
    external_asset_type?: ExternalAssetExternalAssetTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ExternalAssetExternalAssetTypeEnum {
    Invalid = 'invalid',
    Document = 'document',
    Notebook = 'notebook'
}

/**
 * Feature contribution filter count info.
 * @export
 * @interface FeatureContributionMethodFilterCounts
 */
export interface FeatureContributionMethodFilterCounts {
    /**
     * 
     * @type {string}
     * @memberof FeatureContributionMethodFilterCounts
     */
    method?: string;
    /**
     * 
     * @type {number}
     * @memberof FeatureContributionMethodFilterCounts
     */
    count?: number;
}
/**
 * A real-world machine learning or statistical feature.
 * @export
 * @interface FeatureIn
 */
export interface FeatureIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FeatureIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof FeatureIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FeatureIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FeatureIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * Features\'s name.
     * @type {string}
     * @memberof FeatureIn
     */
    name: string;
    /**
     * Descriptive statistics of the feature.
     * @type {Array<FeatureStatistics>}
     * @memberof FeatureIn
     */
    feature_statistics?: Array<FeatureStatistics>;
    /**
     * ID of Variable this Feature operationalizes.
     * @type {string}
     * @memberof FeatureIn
     */
    variable_id?: string;
    /**
     * Filtered by values.
     * @type {Array<FilterValue>}
     * @memberof FeatureIn
     */
    filtered_by_values?: Array<FilterValue>;
}
/**
 * Variable resource links.
 * @export
 * @interface FeatureLinks
 */
export interface FeatureLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof FeatureLinks
     */
    self: string;
    /**
     * Link to feature\'s variable.
     * @type {string}
     * @memberof FeatureLinks
     */
    variable?: string;
}
/**
 * Feature output model.
 * @export
 * @interface FeatureOut
 */
export interface FeatureOut {
    /**
     * 
     * @type {string}
     * @memberof FeatureOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof FeatureOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof FeatureOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof FeatureOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof FeatureOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FeatureOut
     */
    _permissions?: Array<FeatureOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FeatureOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof FeatureOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FeatureOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FeatureOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * Features\'s name.
     * @type {string}
     * @memberof FeatureOut
     */
    name: string;
    /**
     * Descriptive statistics of the feature.
     * @type {Array<FeatureStatistics>}
     * @memberof FeatureOut
     */
    feature_statistics?: Array<FeatureStatistics>;
    /**
     * ID of Variable this Feature operationalizes.
     * @type {string}
     * @memberof FeatureOut
     */
    variable_id?: string;
    /**
     * Filtered by values.
     * @type {Array<FilterValue>}
     * @memberof FeatureOut
     */
    filtered_by_values?: Array<FilterValue>;
    /**
     * Collection of links to related resources.
     * @type {FeatureLinks}
     * @memberof FeatureOut
     */
    _links?: FeatureLinks;
    /**
     * Number of models using this feature.
     * @type {number}
     * @memberof FeatureOut
     */
    model_count?: number;
    /**
     * The variable this feature operationalizes.
     * @type {VariableOut}
     * @memberof FeatureOut
     */
    variable?: VariableOut;
}

/**
    * @export
    * @enum {string}
    */
export enum FeatureOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}

/**
 * Feature pagination out.
 * @export
 * @interface FeaturePaginationOut
 */
export interface FeaturePaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof FeaturePaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<FeatureOut>}
     * @memberof FeaturePaginationOut
     */
    items?: Array<FeatureOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof FeaturePaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof FeaturePaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof FeaturePaginationOut
     */
    _sorts?: Array<string>;
}
/**
 * Represent statistics of a feature.  Note: exactly one of the `*_feature_statistics` fields must be non-null.
 * @export
 * @interface FeatureStatistics
 */
export interface FeatureStatistics {
    /**
     * Type of the feature.
     * @type {string}
     * @memberof FeatureStatistics
     */
    feature_type?: FeatureStatisticsFeatureTypeEnum;
    /**
     * Who generated the statistic object.
     * @type {string}
     * @memberof FeatureStatistics
     */
    generated_by?: FeatureStatisticsGeneratedByEnum;
    /**
     * Statistics for a numerical feature.
     * @type {NumericalFeatureStatistics}
     * @memberof FeatureStatistics
     */
    numerical_feature_statistics?: NumericalFeatureStatistics;
    /**
     * Statistics for a categorical feature.
     * @type {CategoricalFeatureStatistics}
     * @memberof FeatureStatistics
     */
    categorical_feature_statistics?: CategoricalFeatureStatistics;
    /**
     * Statistics for a time series feature.
     * @type {TimeSeriesFeatureStatistics}
     * @memberof FeatureStatistics
     */
    time_series_feature_statistics?: TimeSeriesFeatureStatistics;
    /**
     * Statistics for a dynamic feature.
     * @type {DynamicFeatureStatistics}
     * @memberof FeatureStatistics
     */
    dynamic_feature_statistics?: DynamicFeatureStatistics;
    /**
     * Statistics for a string feature.
     * @type {StringFeatureStatistics}
     * @memberof FeatureStatistics
     */
    string_feature_statistics?: StringFeatureStatistics;
}

/**
    * @export
    * @enum {string}
    */
export enum FeatureStatisticsFeatureTypeEnum {
    Invalid = 'invalid',
    Numerical = 'numerical',
    Categorical = 'categorical',
    Datetime = 'datetime',
    Text = 'text',
    Image = 'image',
    Audio = 'audio',
    Video = 'video',
    File = 'file',
    TimeSeries = 'time_series',
    Dynamic = 'dynamic',
    String = 'string'
}
/**
    * @export
    * @enum {string}
    */
export enum FeatureStatisticsGeneratedByEnum {
    Invalid = 'invalid',
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user'
}

/**
 * Feature system of features out.
 * @export
 * @interface FeatureSystemOfFeaturesPaginationOut
 */
export interface FeatureSystemOfFeaturesPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof FeatureSystemOfFeaturesPaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<FeatureOut>}
     * @memberof FeatureSystemOfFeaturesPaginationOut
     */
    items?: Array<FeatureOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof FeatureSystemOfFeaturesPaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof FeatureSystemOfFeaturesPaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof FeatureSystemOfFeaturesPaginationOut
     */
    _sorts?: Array<string>;
    /**
     * Available population ids for filtering along paths.
     * @type {Array<string>}
     * @memberof FeatureSystemOfFeaturesPaginationOut
     */
    path_pop_ids?: Array<string>;
    /**
     * Map from result system id to the number of paths found.
     * @type {{ [key: string]: number; }}
     * @memberof FeatureSystemOfFeaturesPaginationOut
     */
    path_count?: { [key: string]: number; };
    /**
     * Available dataset index ids for filtering
     * @type {Array<string>}
     * @memberof FeatureSystemOfFeaturesPaginationOut
     */
    index_ids?: Array<string>;
    /**
     * Available dataset population ids for filtering result features.
     * @type {Array<string>}
     * @memberof FeatureSystemOfFeaturesPaginationOut
     */
    ds_pop_ids?: Array<string>;
}
/**
 * A Filter value object model.
 * @export
 * @interface FilterValue
 */
export interface FilterValue {
    /**
     * Retrieval status.
     * @type {string}
     * @memberof FilterValue
     */
    filter_type?: FilterValueFilterTypeEnum;
    /**
     * Filter value.
     * @type {string}
     * @memberof FilterValue
     */
    value?: string;
    /**
     * User who filtered by this value.
     * @type {string}
     * @memberof FilterValue
     */
    added_by?: string;
    /**
     * Time this value was added.
     * @type {string}
     * @memberof FilterValue
     */
    added_on?: string;
    /**
     * Related filter values used in conjunction with this filter.
     * @type {Array<RelatedFilterValue>}
     * @memberof FilterValue
     */
    related_values?: Array<RelatedFilterValue>;
}

/**
    * @export
    * @enum {string}
    */
export enum FilterValueFilterTypeEnum {
    Filter = 'filter',
    Sort = 'sort'
}

/**
 * Next/prev Pagination links with first and last urls.
 * @export
 * @interface FirstLastPaginationLinks
 */
export interface FirstLastPaginationLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    self: string;
    /**
     * Link to next page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    next?: string;
    /**
     * Link to previous page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    prev?: string;
    /**
     * Link to first page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    first?: string;
    /**
     * Link to last page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    last?: string;
}
/**
 * Free text population attribute value input.
 * @export
 * @interface FreeTextIn
 */
export interface FreeTextIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FreeTextIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof FreeTextIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FreeTextIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FreeTextIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof FreeTextIn
     */
    xids?: { [key: string]: string; };
    /**
     * Free text
     * @type {string}
     * @memberof FreeTextIn
     */
    population_description: string;
}
/**
 * Free text population attribute value output model.
 * @export
 * @interface FreeTextOut
 */
export interface FreeTextOut {
    /**
     * 
     * @type {string}
     * @memberof FreeTextOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof FreeTextOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof FreeTextOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof FreeTextOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof FreeTextOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreeTextOut
     */
    _permissions?: Array<FreeTextOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FreeTextOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof FreeTextOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FreeTextOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FreeTextOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof FreeTextOut
     */
    xids?: { [key: string]: string; };
    /**
     * Collection of links to related resources.
     * @type {PopulationAttributeValueLinks}
     * @memberof FreeTextOut
     */
    _links?: PopulationAttributeValueLinks;
    /**
     * The population attribute type of the value.
     * @type {string}
     * @memberof FreeTextOut
     */
    attribute_type?: FreeTextOutAttributeTypeEnum;
    /**
     * Free text
     * @type {string}
     * @memberof FreeTextOut
     */
    population_description: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FreeTextOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}
/**
    * @export
    * @enum {string}
    */
export enum FreeTextOutAttributeTypeEnum {
    Invalid = 'invalid',
    Categorical = 'categorical',
    DateRange = 'date_range',
    NumberRange = 'number_range',
    FreeText = 'free_text',
    Location = 'location'
}

/**
 * A frequency object.
 * @export
 * @interface Frequency
 */
export interface Frequency {
    /**
     * The normalized count of each index
     * @type {Array<number>}
     * @memberof Frequency
     */
    normalized_counts?: Array<number>;
    /**
     * The index of frequency object
     * @type {Array<string>}
     * @memberof Frequency
     */
    index?: Array<string>;
}
/**
 * Graph Data model.
 * @export
 * @interface GraphData
 */
export interface GraphData {
    /**
     * Nodes of graph data.
     * @type {Array<OjbectTypedNode>}
     * @memberof GraphData
     */
    nodes: Array<OjbectTypedNode>;
    /**
     * Links of graph data.
     * @type {Array<EdgeTypedLink>}
     * @memberof GraphData
     */
    links: Array<EdgeTypedLink>;
}
/**
 * GraphQL query model.
 * @export
 * @interface GraphQLQuery
 */
export interface GraphQLQuery {
    /**
     * 
     * @type {string}
     * @memberof GraphQLQuery
     */
    query: string;
    /**
     * 
     * @type {string}
     * @memberof GraphQLQuery
     */
    operationName?: string;
    /**
     * 
     * @type {any}
     * @memberof GraphQLQuery
     */
    variables?: any | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * A histogram object.  See https://numpy.org/doc/1.18/reference/generated/numpy.histogram.html
 * @export
 * @interface Histogram
 */
export interface Histogram {
    /**
     * The density values of the histogram
     * @type {Array<number>}
     * @memberof Histogram
     */
    hist?: Array<number>;
    /**
     * The bin edges (length(hist)+1). All but the last (righthand-most) bin is half-open
     * @type {Array<number>}
     * @memberof Histogram
     */
    bin_edges?: Array<number>;
}
/**
 * An Enterprise Integration Resource.
 * @export
 * @interface Integration
 */
export interface Integration {
    /**
     * Integration name.
     * @type {string}
     * @memberof Integration
     */
    name?: string;
    /**
     * Integration state.
     * @type {string}
     * @memberof Integration
     */
    state?: IntegrationStateEnum;
    /**
     * The list of tables to retrieve
     * @type {Array<Table>}
     * @memberof Integration
     */
    tables?: Array<Table>;
    /**
     * The list of views to retrieve
     * @type {Array<Table>}
     * @memberof Integration
     */
    views?: Array<Table>;
    /**
     * The integration messages
     * @type {Array<MessageOut>}
     * @memberof Integration
     */
    messages?: Array<MessageOut>;
    /**
     * 
     * @type {number}
     * @memberof Integration
     */
    id: number;
    /**
     * The integration type.
     * @type {string}
     * @memberof Integration
     */
    service_type: IntegrationServiceTypeEnum;
    /**
     * Integration credentials.
     * @type {RedshiftCredentials | SnowflakeCredentials | BigQueryCredentials}
     * @memberof Integration
     */
    credentials: RedshiftCredentials | SnowflakeCredentials | BigQueryCredentials;
    /**
     * Enterprise link.
     * @type {string}
     * @memberof Integration
     */
    enterprise: string;
    /**
     * API Endpoint.
     * @type {string}
     * @memberof Integration
     */
    endpoint: string;
    /**
     * Integration IP address.
     * @type {string}
     * @memberof Integration
     */
    ip_address: string;
    /**
     * Integration lamdba names.
     * @type {string}
     * @memberof Integration
     */
    lambda_arn: string;
    /**
     * The actions the requesting user is allowed to perform on this resource.
     * @type {Array<string>}
     * @memberof Integration
     */
    _permissions?: Array<IntegrationPermissionsEnum>;
    /**
     * Is this integration deployed on enterprise\'s internal stack?
     * @type {boolean}
     * @memberof Integration
     */
    on_premise?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum IntegrationStateEnum {
    INITIAL = 'INITIAL',
    ACTIVE = 'ACTIVE',
    INACTIVE = 'INACTIVE'
}
/**
    * @export
    * @enum {string}
    */
export enum IntegrationServiceTypeEnum {
    REDSHIFT = 'REDSHIFT',
    SNOWFLAKE = 'SNOWFLAKE',
    BIGQUERY = 'BIGQUERY'
}
/**
    * @export
    * @enum {string}
    */
export enum IntegrationPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}

/**
 * Integration model for creation.
 * @export
 * @interface IntegrationCreate
 */
export interface IntegrationCreate {
    /**
     * Integration name.
     * @type {string}
     * @memberof IntegrationCreate
     */
    name?: string;
    /**
     * Integration state.
     * @type {string}
     * @memberof IntegrationCreate
     */
    state?: IntegrationCreateStateEnum;
    /**
     * The list of tables to retrieve
     * @type {Array<Table>}
     * @memberof IntegrationCreate
     */
    tables?: Array<Table>;
    /**
     * The list of views to retrieve
     * @type {Array<Table>}
     * @memberof IntegrationCreate
     */
    views?: Array<Table>;
    /**
     * The integration messages
     * @type {Array<MessageOut>}
     * @memberof IntegrationCreate
     */
    messages?: Array<MessageOut>;
    /**
     * The integration type.
     * @type {string}
     * @memberof IntegrationCreate
     */
    service_type: IntegrationCreateServiceTypeEnum;
    /**
     * Integration credentials.
     * @type {RedshiftCredentialsIn | SnowflakeCredentialsIn | BigQueryCredentialsIn}
     * @memberof IntegrationCreate
     */
    credentials: RedshiftCredentialsIn | SnowflakeCredentialsIn | BigQueryCredentialsIn;
    /**
     * Enterprise link.
     * @type {string}
     * @memberof IntegrationCreate
     */
    enterprise: string;
}

/**
    * @export
    * @enum {string}
    */
export enum IntegrationCreateStateEnum {
    INITIAL = 'INITIAL',
    ACTIVE = 'ACTIVE',
    INACTIVE = 'INACTIVE'
}
/**
    * @export
    * @enum {string}
    */
export enum IntegrationCreateServiceTypeEnum {
    REDSHIFT = 'REDSHIFT',
    SNOWFLAKE = 'SNOWFLAKE',
    BIGQUERY = 'BIGQUERY'
}

/**
 * Input Integration model for updates.
 * @export
 * @interface IntegrationUpdateIn
 */
export interface IntegrationUpdateIn {
    /**
     * Integration name.
     * @type {string}
     * @memberof IntegrationUpdateIn
     */
    name?: string;
    /**
     * Integration state.
     * @type {string}
     * @memberof IntegrationUpdateIn
     */
    state?: IntegrationUpdateInStateEnum;
    /**
     * The list of tables to retrieve
     * @type {Array<Table>}
     * @memberof IntegrationUpdateIn
     */
    tables?: Array<Table>;
    /**
     * The list of views to retrieve
     * @type {Array<Table>}
     * @memberof IntegrationUpdateIn
     */
    views?: Array<Table>;
    /**
     * The integration messages
     * @type {Array<MessageOut>}
     * @memberof IntegrationUpdateIn
     */
    messages?: Array<MessageOut>;
    /**
     * API Endpoint.
     * @type {string}
     * @memberof IntegrationUpdateIn
     */
    endpoint?: string;
    /**
     * Integration IP address.
     * @type {string}
     * @memberof IntegrationUpdateIn
     */
    ip_address?: string;
    /**
     * Integration lamdba names.
     * @type {string}
     * @memberof IntegrationUpdateIn
     */
    lambda_arn?: string;
    /**
     * Integration credentials.
     * @type {RedshiftCredentialsIn | SnowflakeCredentialsIn | BigQueryCredentialsIn}
     * @memberof IntegrationUpdateIn
     */
    credentials?: RedshiftCredentialsIn | SnowflakeCredentialsIn | BigQueryCredentialsIn;
}

/**
    * @export
    * @enum {string}
    */
export enum IntegrationUpdateInStateEnum {
    INITIAL = 'INITIAL',
    ACTIVE = 'ACTIVE',
    INACTIVE = 'INACTIVE'
}

/**
 * Represent a line plot.
 * @export
 * @interface LinePlot
 */
export interface LinePlot {
    /**
     * The value of the series at each value of the (ordered) index.
     * @type {Array<number>}
     * @memberof LinePlot
     */
    values?: Array<number>;
    /**
     * The index for the values. Ordered - can be units of time or dates.
     * @type {Array<string>}
     * @memberof LinePlot
     */
    index?: Array<string>;
}
/**
 * Location population attribute value input.
 * @export
 * @interface LocationIn
 */
export interface LocationIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof LocationIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof LocationIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof LocationIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof LocationIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof LocationIn
     */
    xids?: { [key: string]: string; };
    /**
     * Location name.
     * @type {string}
     * @memberof LocationIn
     */
    location_name: string;
    /**
     * Type of location (eg. City, State, Country)
     * @type {string}
     * @memberof LocationIn
     */
    location_type: string;
}
/**
 * Location population attribute value output model.
 * @export
 * @interface LocationOut
 */
export interface LocationOut {
    /**
     * 
     * @type {string}
     * @memberof LocationOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof LocationOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof LocationOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof LocationOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof LocationOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LocationOut
     */
    _permissions?: Array<LocationOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof LocationOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof LocationOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof LocationOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof LocationOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof LocationOut
     */
    xids?: { [key: string]: string; };
    /**
     * Collection of links to related resources.
     * @type {PopulationAttributeValueLinks}
     * @memberof LocationOut
     */
    _links?: PopulationAttributeValueLinks;
    /**
     * The population attribute type of the value.
     * @type {string}
     * @memberof LocationOut
     */
    attribute_type?: LocationOutAttributeTypeEnum;
    /**
     * Location name.
     * @type {string}
     * @memberof LocationOut
     */
    location_name: string;
    /**
     * Type of location (eg. City, State, Country)
     * @type {string}
     * @memberof LocationOut
     */
    location_type: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LocationOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}
/**
    * @export
    * @enum {string}
    */
export enum LocationOutAttributeTypeEnum {
    Invalid = 'invalid',
    Categorical = 'categorical',
    DateRange = 'date_range',
    NumberRange = 'number_range',
    FreeText = 'free_text',
    Location = 'location'
}

/**
 * A Message object.
 * @export
 * @interface MessageIn
 */
export interface MessageIn {
    /**
     * 
     * @type {string}
     * @memberof MessageIn
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof MessageIn
     */
    message_type?: MessageInMessageTypeEnum;
    /**
     * The message attributes
     * @type {any}
     * @memberof MessageIn
     */
    attributes?: any | null;
    /**
     * Integration link.
     * @type {string}
     * @memberof MessageIn
     */
    integration: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MessageInMessageTypeEnum {
    ERROR = 'ERROR',
    DATASETCREATED = 'DATASET_CREATED'
}

/**
 * A Message object.
 * @export
 * @interface MessageOut
 */
export interface MessageOut {
    /**
     * 
     * @type {string}
     * @memberof MessageOut
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof MessageOut
     */
    message_type?: MessageOutMessageTypeEnum;
    /**
     * The message attributes
     * @type {any}
     * @memberof MessageOut
     */
    attributes?: any | null;
    /**
     * Integration link.
     * @type {string}
     * @memberof MessageOut
     */
    integration: string;
    /**
     * 
     * @type {number}
     * @memberof MessageOut
     */
    id?: number;
    /**
     * Creation date
     * @type {string}
     * @memberof MessageOut
     */
    created?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MessageOutMessageTypeEnum {
    ERROR = 'ERROR',
    DATASETCREATED = 'DATASET_CREATED'
}

/**
 * Values available for filtering models.
 * @export
 * @interface ModelFilters
 */
export interface ModelFilters {
    /**
     * Available performance types for filtering models and their counts. Inner arrays will be of length 2. The first value will be the score type and thesecond the count.
     * @type {Array<Array<number | string>>}
     * @memberof ModelFilters
     */
    performance?: Array<Array<number | string>>;
}
/**
 * A real-world machine learning or statistical model input data.
 * @export
 * @interface ModelIn
 */
export interface ModelIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ModelIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof ModelIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ModelIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ModelIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * Model algorithm.
     * @type {string}
     * @memberof ModelIn
     */
    algorithm?: string;
    /**
     * Standardized ModelDB algorithm id.
     * @type {number}
     * @memberof ModelIn
     */
    standardized_algorithm_id: number;
    /**
     * Number of observations or nobs..
     * @type {number}
     * @memberof ModelIn
     */
    number_of_observations?: number;
    /**
     * Model\'s hyper parameters.
     * @type {ModelParams}
     * @memberof ModelIn
     */
    model_params?: ModelParams;
    /**
     * Model label.
     * @type {string}
     * @memberof ModelIn
     */
    name?: string;
    /**
     * Description of the model.
     * @type {string}
     * @memberof ModelIn
     */
    description?: string;
    /**
     * Location of the source code.
     * @type {string}
     * @memberof ModelIn
     */
    source?: string;
    /**
     * System ID of training dataset.
     * @type {string}
     * @memberof ModelIn
     */
    training_dataset_id: string;
    /**
     * System Evaluator specific field.
     * @type {string}
     * @memberof ModelIn
     */
    stub_id?: string;
    /**
     * The performance of the model.
     * @type {Array<ModelPerformanceIn>}
     * @memberof ModelIn
     */
    performance?: Array<ModelPerformanceIn>;
    /**
     * System ID of target of the model.
     * @type {string}
     * @memberof ModelIn
     */
    target_feature_id?: string;
    /**
     * Model\'s deployment information.
     * @type {Deployment}
     * @memberof ModelIn
     */
    deployment?: Deployment;
    /**
     * Model\'s module and class
     * @type {string}
     * @memberof ModelIn
     */
    library?: string;
}
/**
 * Model resource links.
 * @export
 * @interface ModelLinks
 */
export interface ModelLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof ModelLinks
     */
    self: string;
    /**
     * Link to model\'s target feature.
     * @type {string}
     * @memberof ModelLinks
     */
    target_feature?: string;
    /**
     * Link to model\'s training dataset.
     * @type {string}
     * @memberof ModelLinks
     */
    training_dataset?: string;
    /**
     * Link to model\'s study.
     * @type {string}
     * @memberof ModelLinks
     */
    study?: string;
}
/**
 * Model output model.
 * @export
 * @interface ModelOut
 */
export interface ModelOut {
    /**
     * 
     * @type {string}
     * @memberof ModelOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof ModelOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof ModelOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof ModelOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof ModelOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelOut
     */
    _permissions?: Array<ModelOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ModelOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof ModelOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ModelOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ModelOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * Model algorithm.
     * @type {string}
     * @memberof ModelOut
     */
    algorithm?: string;
    /**
     * Standardized ModelDB algorithm id.
     * @type {number}
     * @memberof ModelOut
     */
    standardized_algorithm_id: number;
    /**
     * Number of observations or nobs..
     * @type {number}
     * @memberof ModelOut
     */
    number_of_observations?: number;
    /**
     * Model\'s hyper parameters.
     * @type {ModelParams}
     * @memberof ModelOut
     */
    model_params?: ModelParams;
    /**
     * Model label.
     * @type {string}
     * @memberof ModelOut
     */
    name?: string;
    /**
     * Description of the model.
     * @type {string}
     * @memberof ModelOut
     */
    description?: string;
    /**
     * Location of the source code.
     * @type {string}
     * @memberof ModelOut
     */
    source?: string;
    /**
     * System ID of training dataset.
     * @type {string}
     * @memberof ModelOut
     */
    training_dataset_id: string;
    /**
     * System Evaluator specific field.
     * @type {string}
     * @memberof ModelOut
     */
    stub_id?: string;
    /**
     * The performance of the model.
     * @type {Array<ModelPerformanceOut>}
     * @memberof ModelOut
     */
    performance?: Array<ModelPerformanceOut>;
    /**
     * System ID of target of the model.
     * @type {string}
     * @memberof ModelOut
     */
    target_feature_id?: string;
    /**
     * Model\'s deployment information.
     * @type {Deployment}
     * @memberof ModelOut
     */
    deployment?: Deployment;
    /**
     * Model\'s module and class
     * @type {string}
     * @memberof ModelOut
     */
    library?: string;
    /**
     * Collection of links to related resources.
     * @type {ModelLinks}
     * @memberof ModelOut
     */
    _links?: ModelLinks;
    /**
     * The experiment/project id containing the model.
     * @type {string}
     * @memberof ModelOut
     */
    experiment_id?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ModelOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}

/**
 * Model pagination out.
 * @export
 * @interface ModelPaginationOut
 */
export interface ModelPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof ModelPaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<ModelOut>}
     * @memberof ModelPaginationOut
     */
    items?: Array<ModelOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof ModelPaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof ModelPaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof ModelPaginationOut
     */
    _sorts?: Array<string>;
    /**
     * Collection of filter values that can be applied.
     * @type {ModelFilters}
     * @memberof ModelPaginationOut
     */
    _filters?: ModelFilters;
}
/**
 * Model params model.
 * @export
 * @interface ModelParams
 */
export interface ModelParams {
    /**
     * Model\'s hyper parameters. E.g. for a linear regression, `normalize`, `fit_intercept`, etc.
     * @type {object}
     * @memberof ModelParams
     */
    params?: object;
}
/**
 * Base model performance input class.
 * @export
 * @interface ModelPerformanceBaseIn
 */
export interface ModelPerformanceBaseIn {
    /**
     * Who generated this model performance.
     * @type {string}
     * @memberof ModelPerformanceBaseIn
     */
    generated_by?: ModelPerformanceBaseInGeneratedByEnum;
    /**
     * Standard error of the Performance Value.
     * @type {number}
     * @memberof ModelPerformanceBaseIn
     */
    standard_error?: number;
    /**
     * The test dataset of this performance.
     * @type {TestDataset}
     * @memberof ModelPerformanceBaseIn
     */
    test_dataset?: TestDataset;
    /**
     * 
     * @type {string}
     * @memberof ModelPerformanceBaseIn
     */
    score_type?: ModelPerformanceBaseInScoreTypeEnum;
    /**
     * Model performance value.
     * @type {number}
     * @memberof ModelPerformanceBaseIn
     */
    value?: number;
    /**
     * Complex model performance value.
     * @type {Array<any>}
     * @memberof ModelPerformanceBaseIn
     */
    complex_value?: Array<any>;
}

/**
    * @export
    * @enum {string}
    */
export enum ModelPerformanceBaseInGeneratedByEnum {
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user'
}
/**
    * @export
    * @enum {string}
    */
export enum ModelPerformanceBaseInScoreTypeEnum {
    AccuracyScore = 'accuracy_score',
    AveragePrecisionScore = 'average_precision_score',
    BalancedAccuracyScore = 'balanced_accuracy_score',
    BrierScoreLoss = 'brier_score_loss',
    CohenKappaScore = 'cohen_kappa_score',
    F1Score = 'f1_score',
    HammingLoss = 'hamming_loss',
    HingeLoss = 'hinge_loss',
    JaccardScore = 'jaccard_score',
    LogLoss = 'log_loss',
    MatthewsCorrCoef = 'matthews_corr_coef',
    PrecisionScore = 'precision_score',
    RecallScore = 'recall_score',
    RocAucScore = 'roc_auc_score',
    ZeroOneLoss = 'zero_one_loss',
    ExplainedVarianceScore = 'explained_variance_score',
    MaxError = 'max_error',
    MeanAbsoluteError = 'mean_absolute_error',
    MeanAbsolutePercentageError = 'mean_absolute_percentage_error',
    MeanSquaredError = 'mean_squared_error',
    MeanSquaredLogError = 'mean_squared_log_error',
    MedianAbsoluteError = 'median_absolute_error',
    R2Score = 'r2_score',
    CoverageError = 'coverage_error',
    LabelRankingAveragePrecisionScore = 'label_ranking_average_precision_score',
    LabelRankingLoss = 'label_ranking_loss',
    AdjustedR2Score = 'adjusted_r2_score',
    MutualInformationScore = 'mutual_information_score',
    AdjMutualInformationScore = 'adj_mutual_information_score',
    NormalizedMutualInformationScore = 'normalized_mutual_information_score',
    AdjRandScore = 'adj_rand_score',
    CompletenessScore = 'completeness_score',
    FowlkesMallowsScore = 'fowlkes_mallows_score',
    HomogeneityScore = 'homogeneity_score',
    VMeasureScore = 'v_measure_score',
    NegMeanAbsoluteError = 'neg_mean_absolute_error',
    NegMeanSquaredError = 'neg_mean_squared_error',
    RootMeanSquaredError = 'root_mean_squared_error',
    NegRootMeanSquaredError = 'neg_root_mean_squared_error',
    RootMeanSquaredLogError = 'root_mean_squared_log_error',
    NegMedianAbsoluteError = 'neg_median_absolute_error',
    CosineProximity = 'cosine_proximity',
    KullbackLeiblerDivergence = 'kullback_leibler_divergence',
    PoissonMetric = 'poisson_metric',
    MulticlassLogLoss = 'multiclass_log_loss',
    NormalizedDiscountedCumulativeGain = 'normalized_discounted_cumulative_gain',
    GammaDeviance = 'gamma_deviance',
    HuberMetric = 'huber_metric',
    FBetaScore = 'f_beta_score',
    EuclideanDistance = 'euclidean_distance',
    HaversineDistance = 'haversine_distance',
    MeanSquaredPredictioneRror = 'mean_squared_predictione_rror',
    PseudoR2Mcfadden = 'pseudo_r2_mcfadden',
    AdjustedPseudoR2Mcfadden = 'adjusted_pseudo_r2_mcfadden',
    PseudoR2Nagelkerke = 'pseudo_r2_nagelkerke',
    PseudoR2CoxSnell = 'pseudo_r2_cox_snell',
    PseudoR2Effron = 'pseudo_r2_effron',
    Bic = 'bic',
    Aic = 'aic',
    CorrelationActualForecast = 'correlation_actual_forecast',
    ForecastVsActual = 'forecast_vs_actual',
    MeanSquaredPercentageError = 'mean_squared_percentage_error',
    ConfusionMatrix = 'confusion_matrix',
    MulticlassConfusionMatrix = 'multiclass_confusion_matrix',
    RocCurve = 'roc_curve',
    Invalid = 'invalid'
}

/**
 * Model performance input.
 * @export
 * @interface ModelPerformanceIn
 */
export interface ModelPerformanceIn {
    /**
     * Who generated this model performance.
     * @type {string}
     * @memberof ModelPerformanceIn
     */
    generated_by?: ModelPerformanceInGeneratedByEnum;
    /**
     * Standard error of the Performance Value.
     * @type {number}
     * @memberof ModelPerformanceIn
     */
    standard_error?: number;
    /**
     * The test dataset of this performance.
     * @type {TestDataset}
     * @memberof ModelPerformanceIn
     */
    test_dataset?: TestDataset;
    /**
     * Model performance score type.
     * @type {string}
     * @memberof ModelPerformanceIn
     */
    score_type: ModelPerformanceInScoreTypeEnum;
    /**
     * Model performance value.
     * @type {number}
     * @memberof ModelPerformanceIn
     */
    value?: number;
    /**
     * Complex model performance value.
     * @type {Array<any>}
     * @memberof ModelPerformanceIn
     */
    complex_value?: Array<any>;
    /**
     * History of this model performance value.
     * @type {{ [key: string]: ModelPerformanceBaseIn; }}
     * @memberof ModelPerformanceIn
     */
    history?: { [key: string]: ModelPerformanceBaseIn; };
}

/**
    * @export
    * @enum {string}
    */
export enum ModelPerformanceInGeneratedByEnum {
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user'
}
/**
    * @export
    * @enum {string}
    */
export enum ModelPerformanceInScoreTypeEnum {
    AccuracyScore = 'accuracy_score',
    AveragePrecisionScore = 'average_precision_score',
    BalancedAccuracyScore = 'balanced_accuracy_score',
    BrierScoreLoss = 'brier_score_loss',
    CohenKappaScore = 'cohen_kappa_score',
    F1Score = 'f1_score',
    HammingLoss = 'hamming_loss',
    HingeLoss = 'hinge_loss',
    JaccardScore = 'jaccard_score',
    LogLoss = 'log_loss',
    MatthewsCorrCoef = 'matthews_corr_coef',
    PrecisionScore = 'precision_score',
    RecallScore = 'recall_score',
    RocAucScore = 'roc_auc_score',
    ZeroOneLoss = 'zero_one_loss',
    ExplainedVarianceScore = 'explained_variance_score',
    MaxError = 'max_error',
    MeanAbsoluteError = 'mean_absolute_error',
    MeanAbsolutePercentageError = 'mean_absolute_percentage_error',
    MeanSquaredError = 'mean_squared_error',
    MeanSquaredLogError = 'mean_squared_log_error',
    MedianAbsoluteError = 'median_absolute_error',
    R2Score = 'r2_score',
    CoverageError = 'coverage_error',
    LabelRankingAveragePrecisionScore = 'label_ranking_average_precision_score',
    LabelRankingLoss = 'label_ranking_loss',
    AdjustedR2Score = 'adjusted_r2_score',
    MutualInformationScore = 'mutual_information_score',
    AdjMutualInformationScore = 'adj_mutual_information_score',
    NormalizedMutualInformationScore = 'normalized_mutual_information_score',
    AdjRandScore = 'adj_rand_score',
    CompletenessScore = 'completeness_score',
    FowlkesMallowsScore = 'fowlkes_mallows_score',
    HomogeneityScore = 'homogeneity_score',
    VMeasureScore = 'v_measure_score',
    NegMeanAbsoluteError = 'neg_mean_absolute_error',
    NegMeanSquaredError = 'neg_mean_squared_error',
    RootMeanSquaredError = 'root_mean_squared_error',
    NegRootMeanSquaredError = 'neg_root_mean_squared_error',
    RootMeanSquaredLogError = 'root_mean_squared_log_error',
    NegMedianAbsoluteError = 'neg_median_absolute_error',
    CosineProximity = 'cosine_proximity',
    KullbackLeiblerDivergence = 'kullback_leibler_divergence',
    PoissonMetric = 'poisson_metric',
    MulticlassLogLoss = 'multiclass_log_loss',
    NormalizedDiscountedCumulativeGain = 'normalized_discounted_cumulative_gain',
    GammaDeviance = 'gamma_deviance',
    HuberMetric = 'huber_metric',
    FBetaScore = 'f_beta_score',
    EuclideanDistance = 'euclidean_distance',
    HaversineDistance = 'haversine_distance',
    MeanSquaredPredictioneRror = 'mean_squared_predictione_rror',
    PseudoR2Mcfadden = 'pseudo_r2_mcfadden',
    AdjustedPseudoR2Mcfadden = 'adjusted_pseudo_r2_mcfadden',
    PseudoR2Nagelkerke = 'pseudo_r2_nagelkerke',
    PseudoR2CoxSnell = 'pseudo_r2_cox_snell',
    PseudoR2Effron = 'pseudo_r2_effron',
    Bic = 'bic',
    Aic = 'aic',
    CorrelationActualForecast = 'correlation_actual_forecast',
    ForecastVsActual = 'forecast_vs_actual',
    MeanSquaredPercentageError = 'mean_squared_percentage_error',
    ConfusionMatrix = 'confusion_matrix',
    MulticlassConfusionMatrix = 'multiclass_confusion_matrix',
    RocCurve = 'roc_curve'
}

/**
 * Model performance input.
 * @export
 * @interface ModelPerformanceOut
 */
export interface ModelPerformanceOut {
    /**
     * Who generated this model performance.
     * @type {string}
     * @memberof ModelPerformanceOut
     */
    generated_by?: ModelPerformanceOutGeneratedByEnum;
    /**
     * Standard error of the Performance Value.
     * @type {number}
     * @memberof ModelPerformanceOut
     */
    standard_error?: number;
    /**
     * The test dataset of this performance.
     * @type {TestDataset}
     * @memberof ModelPerformanceOut
     */
    test_dataset?: TestDataset;
    /**
     * Model performance score type.
     * @type {string}
     * @memberof ModelPerformanceOut
     */
    score_type: ModelPerformanceOutScoreTypeEnum;
    /**
     * Model performance value.
     * @type {number}
     * @memberof ModelPerformanceOut
     */
    value?: number;
    /**
     * Complex model performance value.
     * @type {Array<any>}
     * @memberof ModelPerformanceOut
     */
    complex_value?: Array<any>;
    /**
     * History of this model performance value.
     * @type {{ [key: string]: ModelPerformanceBaseIn; }}
     * @memberof ModelPerformanceOut
     */
    history?: { [key: string]: ModelPerformanceBaseIn; };
    /**
     * 
     * @type {boolean}
     * @memberof ModelPerformanceOut
     */
    primary_performance?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum ModelPerformanceOutGeneratedByEnum {
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user'
}
/**
    * @export
    * @enum {string}
    */
export enum ModelPerformanceOutScoreTypeEnum {
    AccuracyScore = 'accuracy_score',
    AveragePrecisionScore = 'average_precision_score',
    BalancedAccuracyScore = 'balanced_accuracy_score',
    BrierScoreLoss = 'brier_score_loss',
    CohenKappaScore = 'cohen_kappa_score',
    F1Score = 'f1_score',
    HammingLoss = 'hamming_loss',
    HingeLoss = 'hinge_loss',
    JaccardScore = 'jaccard_score',
    LogLoss = 'log_loss',
    MatthewsCorrCoef = 'matthews_corr_coef',
    PrecisionScore = 'precision_score',
    RecallScore = 'recall_score',
    RocAucScore = 'roc_auc_score',
    ZeroOneLoss = 'zero_one_loss',
    ExplainedVarianceScore = 'explained_variance_score',
    MaxError = 'max_error',
    MeanAbsoluteError = 'mean_absolute_error',
    MeanAbsolutePercentageError = 'mean_absolute_percentage_error',
    MeanSquaredError = 'mean_squared_error',
    MeanSquaredLogError = 'mean_squared_log_error',
    MedianAbsoluteError = 'median_absolute_error',
    R2Score = 'r2_score',
    CoverageError = 'coverage_error',
    LabelRankingAveragePrecisionScore = 'label_ranking_average_precision_score',
    LabelRankingLoss = 'label_ranking_loss',
    AdjustedR2Score = 'adjusted_r2_score',
    MutualInformationScore = 'mutual_information_score',
    AdjMutualInformationScore = 'adj_mutual_information_score',
    NormalizedMutualInformationScore = 'normalized_mutual_information_score',
    AdjRandScore = 'adj_rand_score',
    CompletenessScore = 'completeness_score',
    FowlkesMallowsScore = 'fowlkes_mallows_score',
    HomogeneityScore = 'homogeneity_score',
    VMeasureScore = 'v_measure_score',
    NegMeanAbsoluteError = 'neg_mean_absolute_error',
    NegMeanSquaredError = 'neg_mean_squared_error',
    RootMeanSquaredError = 'root_mean_squared_error',
    NegRootMeanSquaredError = 'neg_root_mean_squared_error',
    RootMeanSquaredLogError = 'root_mean_squared_log_error',
    NegMedianAbsoluteError = 'neg_median_absolute_error',
    CosineProximity = 'cosine_proximity',
    KullbackLeiblerDivergence = 'kullback_leibler_divergence',
    PoissonMetric = 'poisson_metric',
    MulticlassLogLoss = 'multiclass_log_loss',
    NormalizedDiscountedCumulativeGain = 'normalized_discounted_cumulative_gain',
    GammaDeviance = 'gamma_deviance',
    HuberMetric = 'huber_metric',
    FBetaScore = 'f_beta_score',
    EuclideanDistance = 'euclidean_distance',
    HaversineDistance = 'haversine_distance',
    MeanSquaredPredictioneRror = 'mean_squared_predictione_rror',
    PseudoR2Mcfadden = 'pseudo_r2_mcfadden',
    AdjustedPseudoR2Mcfadden = 'adjusted_pseudo_r2_mcfadden',
    PseudoR2Nagelkerke = 'pseudo_r2_nagelkerke',
    PseudoR2CoxSnell = 'pseudo_r2_cox_snell',
    PseudoR2Effron = 'pseudo_r2_effron',
    Bic = 'bic',
    Aic = 'aic',
    CorrelationActualForecast = 'correlation_actual_forecast',
    ForecastVsActual = 'forecast_vs_actual',
    MeanSquaredPercentageError = 'mean_squared_percentage_error',
    ConfusionMatrix = 'confusion_matrix',
    MulticlassConfusionMatrix = 'multiclass_confusion_matrix',
    RocCurve = 'roc_curve'
}

/**
 * Pagination links with next and prev urls.
 * @export
 * @interface NextPrevPaginationLinks
 */
export interface NextPrevPaginationLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof NextPrevPaginationLinks
     */
    self: string;
    /**
     * Link to next page.
     * @type {string}
     * @memberof NextPrevPaginationLinks
     */
    next?: string;
    /**
     * Link to previous page.
     * @type {string}
     * @memberof NextPrevPaginationLinks
     */
    prev?: string;
}
/**
 * Null hypothesis input model.
 * @export
 * @interface NullHypothesisIn
 */
export interface NullHypothesisIn {
    /**
     * Statistical test type.
     * @type {string}
     * @memberof NullHypothesisIn
     */
    test_type?: NullHypothesisInTestTypeEnum;
    /**
     * Significance level used for the test
     * @type {string}
     * @memberof NullHypothesisIn
     */
    level?: NullHypothesisInLevelEnum;
    /**
     * Null hypothesis value.
     * @type {number}
     * @memberof NullHypothesisIn
     */
    h0_value?: number;
    /**
     * p-value of the test, used with significance_level to determine significance.
     * @type {number}
     * @memberof NullHypothesisIn
     */
    p?: number;
    /**
     * Manual flag to directly indicate test is significant without using p-value.
     * @type {boolean}
     * @memberof NullHypothesisIn
     */
    is_significant?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum NullHypothesisInTestTypeEnum {
    Ttest = 'ttest',
    Ztest = 'ztest',
    Anova = 'anova',
    Chisquared = 'chisquared',
    Htest = 'htest'
}
/**
    * @export
    * @enum {string}
    */
export enum NullHypothesisInLevelEnum {
    Five = 'ninety_five',
    Nine = 'ninety_nine',
    NinePointNine = 'ninety_nine_point_nine'
}

/**
 * Null hypothesis output model.
 * @export
 * @interface NullHypothesisOut
 */
export interface NullHypothesisOut {
    /**
     * Statistical test type.
     * @type {string}
     * @memberof NullHypothesisOut
     */
    test_type?: NullHypothesisOutTestTypeEnum;
    /**
     * Significance level used for the test
     * @type {string}
     * @memberof NullHypothesisOut
     */
    level?: NullHypothesisOutLevelEnum;
    /**
     * Null hypothesis value.
     * @type {number}
     * @memberof NullHypothesisOut
     */
    h0_value?: number;
    /**
     * p-value of the test, used with significance_level to determine significance.
     * @type {number}
     * @memberof NullHypothesisOut
     */
    p?: number;
    /**
     * Manual flag to directly indicate test is significant without using p-value.
     * @type {boolean}
     * @memberof NullHypothesisOut
     */
    is_significant?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum NullHypothesisOutTestTypeEnum {
    Ttest = 'ttest',
    Ztest = 'ztest',
    Anova = 'anova',
    Chisquared = 'chisquared',
    Htest = 'htest',
    Invalid = 'invalid'
}
/**
    * @export
    * @enum {string}
    */
export enum NullHypothesisOutLevelEnum {
    NinetyFive = 'ninety_five',
    NinetyNine = 'ninety_nine',
    NinetyNinePointNine = 'ninety_nine_point_nine',
    Invalid = 'invalid'
}

/**
 * Number range population attribute value input.
 * @export
 * @interface NumberRangeIn
 */
export interface NumberRangeIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof NumberRangeIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof NumberRangeIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof NumberRangeIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof NumberRangeIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof NumberRangeIn
     */
    xids?: { [key: string]: string; };
    /**
     * Start number.
     * @type {number}
     * @memberof NumberRangeIn
     */
    number_start: number;
    /**
     * End number.
     * @type {number}
     * @memberof NumberRangeIn
     */
    number_end: number;
}
/**
 * Number range population attribute value output model.
 * @export
 * @interface NumberRangeOut
 */
export interface NumberRangeOut {
    /**
     * 
     * @type {string}
     * @memberof NumberRangeOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof NumberRangeOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof NumberRangeOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof NumberRangeOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof NumberRangeOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NumberRangeOut
     */
    _permissions?: Array<NumberRangeOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof NumberRangeOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof NumberRangeOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof NumberRangeOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof NumberRangeOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof NumberRangeOut
     */
    xids?: { [key: string]: string; };
    /**
     * Collection of links to related resources.
     * @type {PopulationAttributeValueLinks}
     * @memberof NumberRangeOut
     */
    _links?: PopulationAttributeValueLinks;
    /**
     * The population attribute type of the value.
     * @type {string}
     * @memberof NumberRangeOut
     */
    attribute_type?: NumberRangeOutAttributeTypeEnum;
    /**
     * Start number.
     * @type {number}
     * @memberof NumberRangeOut
     */
    number_start?: number;
    /**
     * End number.
     * @type {number}
     * @memberof NumberRangeOut
     */
    number_end?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum NumberRangeOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}
/**
    * @export
    * @enum {string}
    */
export enum NumberRangeOutAttributeTypeEnum {
    Invalid = 'invalid',
    Categorical = 'categorical',
    DateRange = 'date_range',
    NumberRange = 'number_range',
    FreeText = 'free_text',
    Location = 'location'
}

/**
 * Represent a structured statistics for a numerical feature type.
 * @export
 * @interface NumericalFeatureStatistics
 */
export interface NumericalFeatureStatistics {
    /**
     * The value below which a given percentage of observations in a group of observations falls.
     * @type {{ [key: string]: number; }}
     * @memberof NumericalFeatureStatistics
     */
    percentiles?: { [key: string]: number; };
    /**
     * Minimum value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    min?: number;
    /**
     * Maximum value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    max?: number;
    /**
     * Median value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    median?: number;
    /**
     * Mean value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    mean?: number;
    /**
     * Standard deviation of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    std?: number;
    /**
     * Interquartile range of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    iqr?: number;
    /**
     * Kurtosis of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    kurtosis?: number;
    /**
     * Skewness of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    skewness?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    percent_missing?: number;
    /**
     * Histogram of the feature
     * @type {Histogram}
     * @memberof NumericalFeatureStatistics
     */
    histogram?: Histogram;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: NumericalFeatureStatisticsSimpleBase; }}
     * @memberof NumericalFeatureStatistics
     */
    history?: { [key: string]: NumericalFeatureStatisticsSimpleBase; };
}
/**
 * Represent a structured statistics for a numerical feature type.  These fields will be included in the stats history.
 * @export
 * @interface NumericalFeatureStatisticsSimpleBase
 */
export interface NumericalFeatureStatisticsSimpleBase {
    /**
     * The value below which a given percentage of observations in a group of observations falls.
     * @type {{ [key: string]: number; }}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    percentiles?: { [key: string]: number; };
    /**
     * Minimum value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    min?: number;
    /**
     * Maximum value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    max?: number;
    /**
     * Median value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    median?: number;
    /**
     * Mean value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    mean?: number;
    /**
     * Standard deviation of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    std?: number;
    /**
     * Interquartile range of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    iqr?: number;
    /**
     * Kurtosis of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    kurtosis?: number;
    /**
     * Skewness of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    skewness?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    percent_missing?: number;
}
/**
 * Object Typed Node model.
 * @export
 * @interface OjbectTypedNode
 */
export interface OjbectTypedNode {
    /**
     * 
     * @type {string}
     * @memberof OjbectTypedNode
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof OjbectTypedNode
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof OjbectTypedNode
     */
    objectType: OjbectTypedNodeObjectTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OjbectTypedNodeObjectTypeEnum {
    Dataset = 'dataset',
    Concept = 'concept',
    Variable = 'variable',
    Feature = 'feature'
}

/**
 * Partial dependence plot input.
 * @export
 * @interface PartialDependencePlotIn
 */
export interface PartialDependencePlotIn {
    /**
     * The partial dependence values or x-axis of PDP.
     * @type {Array<number>}
     * @memberof PartialDependencePlotIn
     */
    pdp_value: Array<number>;
    /**
     * The partial dependence effect or y-axis of PDP.
     * @type {Array<number>}
     * @memberof PartialDependencePlotIn
     */
    pdp_effect: Array<number>;
    /**
     * Who generated this object.
     * @type {string}
     * @memberof PartialDependencePlotIn
     */
    generated_by?: PartialDependencePlotInGeneratedByEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PartialDependencePlotInGeneratedByEnum {
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user'
}

/**
 * Patch a `Dataset` with provided data.
 * @export
 * @interface PatchDatasetOp
 */
export interface PatchDatasetOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof PatchDatasetOp
     */
    field: string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof PatchDatasetOp
     */
    value?: any | null;
    /**
     * Operation to perform on resource field.
     * @type {string}
     * @memberof PatchDatasetOp
     */
    op: PatchDatasetOpOpEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PatchDatasetOpOpEnum {
    Update = 'update',
    Append = 'append',
    Delete = 'delete'
}

/**
 * Patch a `Feature` with provided data.
 * @export
 * @interface PatchFeatureOp
 */
export interface PatchFeatureOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof PatchFeatureOp
     */
    field: string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof PatchFeatureOp
     */
    value?: any | null;
    /**
     * Operation to perform on resource field.
     * @type {string}
     * @memberof PatchFeatureOp
     */
    op: PatchFeatureOpOpEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PatchFeatureOpOpEnum {
    Update = 'update',
    Append = 'append',
    Delete = 'delete'
}

/**
 * Patch a `Model` with provided data.
 * @export
 * @interface PatchModelOp
 */
export interface PatchModelOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof PatchModelOp
     */
    field: string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof PatchModelOp
     */
    value?: any | null;
    /**
     * Operation to perform on resource field.
     * @type {string}
     * @memberof PatchModelOp
     */
    op: PatchModelOpOpEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PatchModelOpOpEnum {
    Update = 'update',
    Append = 'append',
    Delete = 'delete'
}

/**
 * Patch a `Study` with provided data.
 * @export
 * @interface PatchStudyOp
 */
export interface PatchStudyOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof PatchStudyOp
     */
    field: string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof PatchStudyOp
     */
    value?: any | null;
    /**
     * Operation to perform on resource field.
     * @type {string}
     * @memberof PatchStudyOp
     */
    op: PatchStudyOpOpEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PatchStudyOpOpEnum {
    Update = 'update',
    Append = 'append',
    Delete = 'delete'
}

/**
 * Patch a `Variable` with provided data.
 * @export
 * @interface PatchVariableOp
 */
export interface PatchVariableOp {
    /**
     * Name of field in resource to modify.
     * @type {string}
     * @memberof PatchVariableOp
     */
    field: string;
    /**
     * Value to set resource field if not deleting.
     * @type {any}
     * @memberof PatchVariableOp
     */
    value?: any | null;
    /**
     * Operation to perform on resource field.
     * @type {string}
     * @memberof PatchVariableOp
     */
    op: PatchVariableOpOpEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PatchVariableOpOpEnum {
    Update = 'update',
    Append = 'append',
    Delete = 'delete'
}

/**
 * A real-world population attribute.
 * @export
 * @interface PopulationAttributeIn
 */
export interface PopulationAttributeIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof PopulationAttributeIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof PopulationAttributeIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof PopulationAttributeIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof PopulationAttributeIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * Population attribute\'s name.
     * @type {string}
     * @memberof PopulationAttributeIn
     */
    name: string;
    /**
     * A valid population attribute type.
     * @type {string}
     * @memberof PopulationAttributeIn
     */
    attribute_type: PopulationAttributeInAttributeTypeEnum;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof PopulationAttributeIn
     */
    xids?: { [key: string]: string; };
    /**
     * Marks attribute as standard. Only administrators can set this to true.
     * @type {boolean}
     * @memberof PopulationAttributeIn
     */
    is_standard?: boolean;
    /**
     * Source of truth for this attribute (e.g. wikidata, ACS)
     * @type {string}
     * @memberof PopulationAttributeIn
     */
    attribute_source?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PopulationAttributeInAttributeTypeEnum {
    Invalid = 'invalid',
    Categorical = 'categorical',
    DateRange = 'date_range',
    NumberRange = 'number_range',
    FreeText = 'free_text',
    Location = 'location'
}

/**
 * Population attribute resource links.
 * @export
 * @interface PopulationAttributeLinks
 */
export interface PopulationAttributeLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof PopulationAttributeLinks
     */
    self: string;
}
/**
 * Population attribute output model.
 * @export
 * @interface PopulationAttributeOut
 */
export interface PopulationAttributeOut {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PopulationAttributeOut
     */
    _permissions?: Array<PopulationAttributeOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof PopulationAttributeOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof PopulationAttributeOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof PopulationAttributeOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof PopulationAttributeOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * Population attribute\'s name.
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    name: string;
    /**
     * A valid population attribute type.
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    attribute_type: PopulationAttributeOutAttributeTypeEnum;
    /**
     * External ids map from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof PopulationAttributeOut
     */
    xids?: { [key: string]: string; };
    /**
     * Marks attribute as standard. Only administrators can set this to true.
     * @type {boolean}
     * @memberof PopulationAttributeOut
     */
    is_standard?: boolean;
    /**
     * Source of truth for this attribute (e.g. wikidata, ACS)
     * @type {string}
     * @memberof PopulationAttributeOut
     */
    attribute_source?: string;
    /**
     * Collection of links to related resources.
     * @type {PopulationAttributeLinks}
     * @memberof PopulationAttributeOut
     */
    _links?: PopulationAttributeLinks;
}

/**
    * @export
    * @enum {string}
    */
export enum PopulationAttributeOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}
/**
    * @export
    * @enum {string}
    */
export enum PopulationAttributeOutAttributeTypeEnum {
    Invalid = 'invalid',
    Categorical = 'categorical',
    DateRange = 'date_range',
    NumberRange = 'number_range',
    FreeText = 'free_text',
    Location = 'location'
}

/**
 * Population attribute pagination out.
 * @export
 * @interface PopulationAttributePaginationOut
 */
export interface PopulationAttributePaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof PopulationAttributePaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<PopulationAttributeOut>}
     * @memberof PopulationAttributePaginationOut
     */
    items?: Array<PopulationAttributeOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof PopulationAttributePaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof PopulationAttributePaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof PopulationAttributePaginationOut
     */
    _sorts?: Array<string>;
}
/**
 * Population attribute value resource links.
 * @export
 * @interface PopulationAttributeValueLinks
 */
export interface PopulationAttributeValueLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof PopulationAttributeValueLinks
     */
    self: string;
    /**
     * Link to this resource\'s population attribute.
     * @type {string}
     * @memberof PopulationAttributeValueLinks
     */
    attribute: string;
}
/**
 * Population attribute value pagination out.
 * @export
 * @interface PopulationAttributeValuePaginationOut
 */
export interface PopulationAttributeValuePaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof PopulationAttributeValuePaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>}
     * @memberof PopulationAttributeValuePaginationOut
     */
    items?: Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof PopulationAttributeValuePaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof PopulationAttributeValuePaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof PopulationAttributeValuePaginationOut
     */
    _sorts?: Array<string>;
}
/**
 * Credentials for a Redshift integration without password.
 * @export
 * @interface RedshiftCredentials
 */
export interface RedshiftCredentials {
    /**
     * Integration database name.
     * @type {string}
     * @memberof RedshiftCredentials
     */
    db_name: string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof RedshiftCredentials
     */
    db_user: string;
    /**
     * Integration host (Required for Redshift).
     * @type {string}
     * @memberof RedshiftCredentials
     */
    db_host: string;
    /**
     * Integration port (Required for Redshift).
     * @type {number}
     * @memberof RedshiftCredentials
     */
    db_port: number;
}
/**
 * Input credentials for a Redshift integration.
 * @export
 * @interface RedshiftCredentialsIn
 */
export interface RedshiftCredentialsIn {
    /**
     * Integration database name.
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    db_name: string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    db_user: string;
    /**
     * Integration host (Required for Redshift).
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    db_host: string;
    /**
     * Integration port (Required for Redshift).
     * @type {number}
     * @memberof RedshiftCredentialsIn
     */
    db_port: number;
    /**
     * Integration password.
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    db_password: string;
}
/**
 * A related filter value object model.
 * @export
 * @interface RelatedFilterValue
 */
export interface RelatedFilterValue {
    /**
     * Retrieval status.
     * @type {string}
     * @memberof RelatedFilterValue
     */
    filter_type?: RelatedFilterValueFilterTypeEnum;
    /**
     * Filter value.
     * @type {string}
     * @memberof RelatedFilterValue
     */
    value?: string;
    /**
     * User who filtered by this value.
     * @type {string}
     * @memberof RelatedFilterValue
     */
    added_by?: string;
    /**
     * Time this value was added.
     * @type {string}
     * @memberof RelatedFilterValue
     */
    added_on?: string;
    /**
     * Feature.
     * @type {string}
     * @memberof RelatedFilterValue
     */
    feature_id?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum RelatedFilterValueFilterTypeEnum {
    Filter = 'filter',
    Sort = 'sort'
}

/**
 * Model to represent directionality of an Association.
 * @export
 * @interface RelationshipDirection
 */
export interface RelationshipDirection {
    /**
     * Relationship value.
     * @type {number}
     * @memberof RelationshipDirection
     */
    relationship_value: number;
    /**
     * Direction of the association.
     * @type {string}
     * @memberof RelationshipDirection
     */
    level: RelationshipDirectionLevelEnum;
    /**
     * Type of relationship.
     * @type {string}
     * @memberof RelationshipDirection
     */
    relationship_type: RelationshipDirectionRelationshipTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum RelationshipDirectionLevelEnum {
    Positive = 'positive',
    Negative = 'negative',
    Zero = 'zero',
    Invalid = 'invalid'
}
/**
    * @export
    * @enum {string}
    */
export enum RelationshipDirectionRelationshipTypeEnum {
    Invalid = 'invalid',
    SiPearsonR = 'si_pearson_r',
    SiKendallTau = 'si_kendall_tau',
    SiCramerV = 'si_cramer_v',
    MlPermutationF1 = 'ml_permutation_f1',
    MlPermutationR2 = 'ml_permutation_r2',
    SiEffectSizeR = 'si_effect_size_r',
    SiEffectSizeD = 'si_effect_size_d'
}

/**
 * Model to represent reproducibility of an Association.
 * @export
 * @interface RelationshipReproducibility
 */
export interface RelationshipReproducibility {
    /**
     * Type of study.
     * @type {string}
     * @memberof RelationshipReproducibility
     */
    study_type: RelationshipReproducibilityStudyTypeEnum;
    /**
     * Reproducibility of the association.
     * @type {string}
     * @memberof RelationshipReproducibility
     */
    level: RelationshipReproducibilityLevelEnum;
    /**
     * Has experiment description.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    has_experiment_description: boolean;
    /**
     * Has experiment source.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    has_experiment_source: boolean;
    /**
     * Has experiment doi.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    has_experiment_doi: boolean;
    /**
     * Has experiment control.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    has_experiment_control: boolean;
    /**
     * Has model hyperparams.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    has_model_hyperparams: boolean;
    /**
     * Has training dataset url.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    has_training_ds_url: boolean;
    /**
     * Has training dataset description url.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    has_training_ds_desc_url: boolean;
    /**
     * Has source dataset.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    has_source_ds: boolean;
    /**
     * Has pdp.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    has_pdp: boolean;
    /**
     * Has significance.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    has_significance: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum RelationshipReproducibilityStudyTypeEnum {
    Invalid = 'invalid',
    SupervisedMl = 'supervised_ml',
    UnsupervisedMl = 'unsupervised_ml',
    StatisticalInference = 'statistical_inference',
    RandomizedControlTrial = 'randomized_control_trial'
}
/**
    * @export
    * @enum {string}
    */
export enum RelationshipReproducibilityLevelEnum {
    Invalid = 'invalid',
    Low = 'low',
    Medium = 'medium',
    High = 'high'
}

/**
 * Model to represent strength of an Association.
 * @export
 * @interface RelationshipStrength
 */
export interface RelationshipStrength {
    /**
     * Strength of the association.
     * @type {string}
     * @memberof RelationshipStrength
     */
    level: RelationshipStrengthLevelEnum;
    /**
     * Relationship value.
     * @type {number}
     * @memberof RelationshipStrength
     */
    relationship_value: number;
    /**
     * Type of relationship.
     * @type {string}
     * @memberof RelationshipStrength
     */
    relationship_type: RelationshipStrengthRelationshipTypeEnum;
    /**
     * Relationship model performance value.
     * @type {number}
     * @memberof RelationshipStrength
     */
    relationship_model_performance?: number;
    /**
     * Max values map.
     * @type {{ [key: string]: CalibratorBucketParams; }}
     * @memberof RelationshipStrength
     */
    all_max_values: { [key: string]: CalibratorBucketParams; };
}

/**
    * @export
    * @enum {string}
    */
export enum RelationshipStrengthLevelEnum {
    Invalid = 'invalid',
    VeryWeak = 'very_weak',
    Weak = 'weak',
    Moderate = 'moderate',
    Strong = 'strong',
    VeryStrong = 'very_strong'
}
/**
    * @export
    * @enum {string}
    */
export enum RelationshipStrengthRelationshipTypeEnum {
    Invalid = 'invalid',
    SiPearsonR = 'si_pearson_r',
    SiKendallTau = 'si_kendall_tau',
    SiCramerV = 'si_cramer_v',
    MlPermutationF1 = 'ml_permutation_f1',
    MlPermutationR2 = 'ml_permutation_r2',
    SiEffectSizeR = 'si_effect_size_r',
    SiEffectSizeD = 'si_effect_size_d'
}

/**
 * Generic resource collection element.
 * @export
 * @interface ResourceCollectionElement
 */
export interface ResourceCollectionElement {
    /**
     * The System resource type.
     * @type {string}
     * @memberof ResourceCollectionElement
     */
    type: ResourceCollectionElementTypeEnum;
    /**
     * The output model for resource.
     * @type {any}
     * @memberof ResourceCollectionElement
     */
    elem: any | null;
}

/**
    * @export
    * @enum {string}
    */
export enum ResourceCollectionElementTypeEnum {
    Variable = 'variable',
    Dataset = 'dataset',
    Feature = 'feature',
    Study = 'study',
    Model = 'model',
    Author = 'author',
    Concept = 'concept',
    PopulationAttribute = 'population_attribute',
    PopulationAttributeValue = 'population_attribute_value',
    Association = 'association',
    Team = 'team'
}

/**
 * Statistical significance input information.
 * @export
 * @interface SignificanceValueIn
 */
export interface SignificanceValueIn {
    /**
     * Confidence interval data.
     * @type {ConfidenceIntervalIn}
     * @memberof SignificanceValueIn
     */
    confidence_interval?: ConfidenceIntervalIn;
    /**
     * Statistical test null hypothesis data.
     * @type {NullHypothesisIn}
     * @memberof SignificanceValueIn
     */
    null_hypothesis?: NullHypothesisIn;
    /**
     * Who generated this object.
     * @type {string}
     * @memberof SignificanceValueIn
     */
    generated_by?: SignificanceValueInGeneratedByEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SignificanceValueInGeneratedByEnum {
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user'
}

/**
 * Statistical significance input information.
 * @export
 * @interface SignificanceValueOut
 */
export interface SignificanceValueOut {
    /**
     * Confidence interval data.
     * @type {ConfidenceIntervalOut}
     * @memberof SignificanceValueOut
     */
    confidence_interval?: ConfidenceIntervalOut;
    /**
     * Statistical test null hypothesis data.
     * @type {NullHypothesisOut}
     * @memberof SignificanceValueOut
     */
    null_hypothesis?: NullHypothesisOut;
    /**
     * Who generated this object.
     * @type {string}
     * @memberof SignificanceValueOut
     */
    generated_by?: SignificanceValueOutGeneratedByEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SignificanceValueOutGeneratedByEnum {
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user',
    Invalid = 'invalid'
}

/**
 * Credentials for a Snowflake integration without password.
 * @export
 * @interface SnowflakeCredentials
 */
export interface SnowflakeCredentials {
    /**
     * Integration database name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    db_name: string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    db_user: string;
    /**
     * Integration account name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    db_account: string;
    /**
     * Integration warehouse name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    db_warehouse: string;
}
/**
 * Input credentials for a Snowflake integration.
 * @export
 * @interface SnowflakeCredentialsIn
 */
export interface SnowflakeCredentialsIn {
    /**
     * Integration database name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    db_name: string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    db_user: string;
    /**
     * Integration account name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    db_account: string;
    /**
     * Integration warehouse name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    db_warehouse: string;
    /**
     * Integration password.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    db_password: string;
}
/**
 * Represent statistics for a string feature.
 * @export
 * @interface StringFeatureStatistics
 */
export interface StringFeatureStatistics {
    /**
     * Percentage of column values that are missing or zero-length.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    percent_missing_or_empty?: number;
    /**
     * Minimum of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    min_string_length?: number;
    /**
     * Maximum of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    max_string_length?: number;
    /**
     * Mean of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    mean_string_length?: number;
    /**
     * Number of distinct non-missing values of the column.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    distinct_values?: number;
    /**
     * Histogram depicting the distribution of string length in the feature.
     * @type {Histogram}
     * @memberof StringFeatureStatistics
     */
    character_length_distribution?: Histogram;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: StringFeatureStatisticsSimpleBase; }}
     * @memberof StringFeatureStatistics
     */
    history?: { [key: string]: StringFeatureStatisticsSimpleBase; };
}
/**
 * Represent statistics for string feature.  These fields will be included in the stats history.
 * @export
 * @interface StringFeatureStatisticsSimpleBase
 */
export interface StringFeatureStatisticsSimpleBase {
    /**
     * Percentage of column values that are missing or zero-length.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    percent_missing_or_empty?: number;
    /**
     * Minimum of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    min_string_length?: number;
    /**
     * Maximum of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    max_string_length?: number;
    /**
     * Mean of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    mean_string_length?: number;
    /**
     * Number of distinct non-missing values of the column.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    distinct_values?: number;
}
/**
 * A real world study.
 * @export
 * @interface StudyIn
 */
export interface StudyIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof StudyIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof StudyIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof StudyIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof StudyIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * Study\'s name.
     * @type {string}
     * @memberof StudyIn
     */
    name: string;
    /**
     * Study\'s description.
     * @type {string}
     * @memberof StudyIn
     */
    description?: string;
    /**
     * The source (e.g. github link) of the study.
     * @type {string}
     * @memberof StudyIn
     */
    source?: string;
    /**
     * The type of study.
     * @type {string}
     * @memberof StudyIn
     */
    study_type?: StudyInStudyTypeEnum;
    /**
     * The DOI of the study.
     * @type {string}
     * @memberof StudyIn
     */
    doi?: string;
    /**
     * The lede of the study.
     * @type {string}
     * @memberof StudyIn
     */
    lede?: string;
    /**
     * External assets data.
     * @type {Array<ExternalAsset>}
     * @memberof StudyIn
     */
    external_assets?: Array<ExternalAsset>;
    /**
     * Optional add flow context flag.
     * @type {string}
     * @memberof StudyIn
     */
    add_context?: StudyInAddContextEnum;
    /**
     * Insights generated by this study.
     * @type {Array<string>}
     * @memberof StudyIn
     */
    insights?: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum StudyInStudyTypeEnum {
    Invalid = 'invalid',
    SupervisedMl = 'supervised_ml',
    UnsupervisedMl = 'unsupervised_ml',
    StatisticalInference = 'statistical_inference',
    RandomizedControlTrial = 'randomized_control_trial'
}
/**
    * @export
    * @enum {string}
    */
export enum StudyInAddContextEnum {
    Relationship = 'relationship',
    QuickProject = 'quick_project'
}

/**
 * Study resource links.
 * @export
 * @interface StudyLinks
 */
export interface StudyLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof StudyLinks
     */
    self: string;
    /**
     * Link to study\'s authors.
     * @type {string}
     * @memberof StudyLinks
     */
    authors: string;
    /**
     * Link to study\'s models.
     * @type {string}
     * @memberof StudyLinks
     */
    models: string;
}
/**
 * A real world study.
 * @export
 * @interface StudyOut
 */
export interface StudyOut {
    /**
     * 
     * @type {string}
     * @memberof StudyOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof StudyOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof StudyOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof StudyOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof StudyOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof StudyOut
     */
    _permissions?: Array<StudyOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof StudyOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof StudyOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof StudyOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof StudyOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * Study\'s name.
     * @type {string}
     * @memberof StudyOut
     */
    name?: string;
    /**
     * Study\'s description.
     * @type {string}
     * @memberof StudyOut
     */
    description?: string;
    /**
     * The source (e.g. github link) of the study.
     * @type {string}
     * @memberof StudyOut
     */
    source?: string;
    /**
     * The type of study.
     * @type {string}
     * @memberof StudyOut
     */
    study_type?: StudyOutStudyTypeEnum;
    /**
     * The DOI of the study.
     * @type {string}
     * @memberof StudyOut
     */
    doi?: string;
    /**
     * The lede of the study.
     * @type {string}
     * @memberof StudyOut
     */
    lede?: string;
    /**
     * External assets data.
     * @type {Array<ExternalAsset>}
     * @memberof StudyOut
     */
    external_assets?: Array<ExternalAsset>;
    /**
     * Optional add flow context flag.
     * @type {string}
     * @memberof StudyOut
     */
    add_context?: StudyOutAddContextEnum;
    /**
     * Insights generated by this study.
     * @type {Array<string>}
     * @memberof StudyOut
     */
    insights?: Array<string>;
    /**
     * Collection of links to related resources.
     * @type {StudyLinks}
     * @memberof StudyOut
     */
    _links?: StudyLinks;
    /**
     * Deprecated: The subgraph id of the resource.
     * @type {string}
     * @memberof StudyOut
     */
    subgraph_id?: string;
    /**
     * Object\'s tagged to this study.
     * @type {AppSchemaStudiesObjectTags}
     * @memberof StudyOut
     */
    object_tags?: AppSchemaStudiesObjectTags;
    /**
     * Authors of the study.
     * @type {Array<AuthorOut>}
     * @memberof StudyOut
     */
    authors?: Array<AuthorOut>;
}

/**
    * @export
    * @enum {string}
    */
export enum StudyOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}
/**
    * @export
    * @enum {string}
    */
export enum StudyOutStudyTypeEnum {
    Invalid = 'invalid',
    SupervisedMl = 'supervised_ml',
    UnsupervisedMl = 'unsupervised_ml',
    StatisticalInference = 'statistical_inference',
    RandomizedControlTrial = 'randomized_control_trial'
}
/**
    * @export
    * @enum {string}
    */
export enum StudyOutAddContextEnum {
    Relationship = 'relationship',
    QuickProject = 'quick_project'
}

/**
 * Study pagination out.
 * @export
 * @interface StudyPaginationOut
 */
export interface StudyPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof StudyPaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<StudyOut>}
     * @memberof StudyPaginationOut
     */
    items?: Array<StudyOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof StudyPaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof StudyPaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof StudyPaginationOut
     */
    _sorts?: Array<string>;
}
/**
 * System of concepts pagination out.
 * @export
 * @interface SystemOfConceptsPaginationOut
 */
export interface SystemOfConceptsPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof SystemOfConceptsPaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<ConceptOut>}
     * @memberof SystemOfConceptsPaginationOut
     */
    items?: Array<ConceptOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof SystemOfConceptsPaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof SystemOfConceptsPaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof SystemOfConceptsPaginationOut
     */
    _sorts?: Array<string>;
    /**
     * Available population ids for filtering along paths.
     * @type {Array<string>}
     * @memberof SystemOfConceptsPaginationOut
     */
    path_pop_ids?: Array<string>;
    /**
     * Map from result system id to the number of paths found.
     * @type {{ [key: string]: number; }}
     * @memberof SystemOfConceptsPaginationOut
     */
    path_count?: { [key: string]: number; };
}
/**
 * A table object.
 * @export
 * @interface Table
 */
export interface Table {
    /**
     * 
     * @type {number}
     * @memberof Table
     */
    id?: number;
    /**
     * Table name.
     * @type {string}
     * @memberof Table
     */
    name?: string;
    /**
     * Active status.
     * @type {boolean}
     * @memberof Table
     */
    active?: boolean;
    /**
     * Schema name.
     * @type {string}
     * @memberof Table
     */
    schema_name?: string;
    /**
     * System ID of dataset this table corresponds to.
     * @type {string}
     * @memberof Table
     */
    dataset_id?: string;
    /**
     * Retrieval status.
     * @type {string}
     * @memberof Table
     */
    status?: TableStatusEnum;
    /**
     * Time when table was last retrieved.
     * @type {string}
     * @memberof Table
     */
    last_retrieval?: string;
    /**
     * Time when interactions were last computed.
     * @type {string}
     * @memberof Table
     */
    last_interactions_on?: string;
    /**
     * Integration link.
     * @type {string}
     * @memberof Table
     */
    integration: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TableStatusEnum {
    Pending = 'pending',
    Success = 'success',
    Failure = 'failure'
}

/**
 * An Team input data.
 * @export
 * @interface TeamIn
 */
export interface TeamIn {
    /**
     * Team\'s name.
     * @type {string}
     * @memberof TeamIn
     */
    name: string;
    /**
     * Identifier of the team.
     * @type {string}
     * @memberof TeamIn
     */
    slug: string;
    /**
     * Team\'s logo
     * @type {Array<string>}
     * @memberof TeamIn
     */
    logo?: Array<string>;
}
/**
 * Team resource links.
 * @export
 * @interface TeamLinks
 */
export interface TeamLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof TeamLinks
     */
    self: string;
}
/**
 * Team output model.
 * @export
 * @interface TeamOut
 */
export interface TeamOut {
    /**
     * 
     * @type {string}
     * @memberof TeamOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof TeamOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof TeamOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof TeamOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof TeamOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeamOut
     */
    _permissions?: Array<TeamOutPermissionsEnum>;
    /**
     * Team\'s name.
     * @type {string}
     * @memberof TeamOut
     */
    name: string;
    /**
     * Identifier of the team.
     * @type {string}
     * @memberof TeamOut
     */
    slug: string;
    /**
     * Team\'s logo
     * @type {Array<string>}
     * @memberof TeamOut
     */
    logo?: Array<string>;
    /**
     * Collection of links to related resources.
     * @type {TeamLinks}
     * @memberof TeamOut
     */
    _links?: TeamLinks;
}

/**
    * @export
    * @enum {string}
    */
export enum TeamOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}

/**
 * User input for adding to a team.
 * @export
 * @interface TeamUserIn
 */
export interface TeamUserIn {
    /**
     * User email address.
     * @type {string}
     * @memberof TeamUserIn
     */
    email: string;
    /**
     * User role
     * @type {string}
     * @memberof TeamUserIn
     */
    role: TeamUserInRoleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TeamUserInRoleEnum {
    Reader = 'reader',
    Writer = 'writer',
    Admin = 'admin'
}

/**
 * Represent a test dataset.
 * @export
 * @interface TestDataset
 */
export interface TestDataset {
    /**
     * Source dataset transformation was applied to.
     * @type {string}
     * @memberof TestDataset
     */
    dataset_id: string;
    /**
     * 
     * @type {string}
     * @memberof TestDataset
     */
    transformation_type?: TestDatasetTransformationTypeEnum;
    /**
     * Details of transformation.
     * @type {object}
     * @memberof TestDataset
     */
    details?: object;
}

/**
    * @export
    * @enum {string}
    */
export enum TestDatasetTransformationTypeEnum {
    NoTransformation = 'no_transformation',
    Kfold = 'kfold',
    LeavePOut = 'leave_p_out',
    Holdout = 'holdout',
    Independent = 'independent'
}

/**
 * Represent time series statistics for a time series feature type.
 * @export
 * @interface TimeSeriesFeatureStatistics
 */
export interface TimeSeriesFeatureStatistics {
    /**
     * Number of (time) periods for which the feature exists.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    length?: number;
    /**
     * Minimum value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    min?: number;
    /**
     * Maximum value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    max?: number;
    /**
     * Median value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    median?: number;
    /**
     * Mean value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    mean?: number;
    /**
     * Standard deviation of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    std?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    percent_missing?: number;
    /**
     * Time frequency for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatistics
     */
    time_frequency?: string;
    /**
     * First time period (string, ISO format) for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatistics
     */
    time_start?: string;
    /**
     * Last time period (string, ISO format) for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatistics
     */
    time_end?: string;
    /**
     * Line plot of the time series feature.
     * @type {LinePlot}
     * @memberof TimeSeriesFeatureStatistics
     */
    lineplot?: LinePlot;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: TimeSeriesFeatureStatisticsSimpleBase; }}
     * @memberof TimeSeriesFeatureStatistics
     */
    history?: { [key: string]: TimeSeriesFeatureStatisticsSimpleBase; };
}
/**
 * Represent time series statistics for a time series feature type.  These fields will be included in the stats history.
 * @export
 * @interface TimeSeriesFeatureStatisticsSimpleBase
 */
export interface TimeSeriesFeatureStatisticsSimpleBase {
    /**
     * Number of (time) periods for which the feature exists.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    length?: number;
    /**
     * Minimum value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    min?: number;
    /**
     * Maximum value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    max?: number;
    /**
     * Median value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    median?: number;
    /**
     * Mean value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    mean?: number;
    /**
     * Standard deviation of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    std?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    percent_missing?: number;
    /**
     * Time frequency for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    time_frequency?: string;
    /**
     * First time period (string, ISO format) for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    time_start?: string;
    /**
     * Last time period (string, ISO format) for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    time_end?: string;
}
/**
 * Timeline pagination out.
 * @export
 * @interface TimelinePaginationOut
 */
export interface TimelinePaginationOut {
    /**
     * Collection of links to related resources.
     * @type {NextPrevPaginationLinks}
     * @memberof TimelinePaginationOut
     */
    _links?: NextPrevPaginationLinks;
    /**
     * List of results.
     * @type {Array<ResourceCollectionElement>}
     * @memberof TimelinePaginationOut
     */
    items?: Array<ResourceCollectionElement>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof TimelinePaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof TimelinePaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof TimelinePaginationOut
     */
    _sorts?: Array<string>;
}
/**
 * Private user profile out.
 * @export
 * @interface UserPrivateProfileOut
 */
export interface UserPrivateProfileOut {
    /**
     * The user\'s System ID.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    id: string;
    /**
     * Time when the user\'s profile was created.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    created_at: string;
    /**
     * The Author ID corresponding to this user.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    author_id: string;
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    display_name: string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    orcid?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    avatar?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    email: string;
    /**
     * User roles.
     * @type {Array<string>}
     * @memberof UserPrivateProfileOut
     */
    roles?: Array<string>;
}
/**
 * User profile data input.
 * @export
 * @interface UserProfileIn
 */
export interface UserProfileIn {
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserProfileIn
     */
    display_name: string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserProfileIn
     */
    orcid?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserProfileIn
     */
    avatar?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UserProfileIn
     */
    email: string;
}
/**
 * Public user profile out.
 * @export
 * @interface UserPublicProfileOut
 */
export interface UserPublicProfileOut {
    /**
     * The user\'s System ID.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    id: string;
    /**
     * Time when the user\'s profile was created.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    created_at: string;
    /**
     * The Author ID corresponding to this user.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    author_id: string;
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    display_name: string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    orcid?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    avatar?: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 * A real-world variable that is measured on a concept.
 * @export
 * @interface VariableIn
 */
export interface VariableIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof VariableIn
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof VariableIn
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof VariableIn
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof VariableIn
     * @deprecated
     */
    _private?: boolean;
    /**
     * Variable\'s name.
     * @type {string}
     * @memberof VariableIn
     */
    name: string;
    /**
     * A short description of the variable.
     * @type {string}
     * @memberof VariableIn
     */
    description?: string;
    /**
     * Other names for the variable.
     * @type {Array<string>}
     * @memberof VariableIn
     */
    aliases?: Array<string>;
    /**
     * External identifier mapping from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof VariableIn
     */
    xid?: { [key: string]: string; };
    /**
     * Type of the variable.
     * @type {VariableType}
     * @memberof VariableIn
     */
    variable_type?: VariableType;
    /**
     * The id of the Variable\'s Concept.
     * @type {string}
     * @memberof VariableIn
     */
    concept_id?: string;
}
/**
 * Variable resource links.
 * @export
 * @interface VariableLinks
 */
export interface VariableLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof VariableLinks
     */
    self: string;
    /**
     * Link to Variable\'s Concept.
     * @type {string}
     * @memberof VariableLinks
     */
    concept?: string;
}
/**
 * Variable output model.
 * @export
 * @interface VariableOut
 */
export interface VariableOut {
    /**
     * 
     * @type {string}
     * @memberof VariableOut
     */
    id: string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof VariableOut
     */
    created_by?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof VariableOut
     */
    created_at?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof VariableOut
     */
    last_updated_by?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof VariableOut
     */
    last_updated_at?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof VariableOut
     */
    _permissions?: Array<VariableOutPermissionsEnum>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof VariableOut
     */
    tags?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof VariableOut
     */
    is_hidden?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof VariableOut
     */
    is_private?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof VariableOut
     * @deprecated
     */
    _private?: boolean;
    /**
     * Variable\'s name.
     * @type {string}
     * @memberof VariableOut
     */
    name: string;
    /**
     * A short description of the variable.
     * @type {string}
     * @memberof VariableOut
     */
    description?: string;
    /**
     * Other names for the variable.
     * @type {Array<string>}
     * @memberof VariableOut
     */
    aliases?: Array<string>;
    /**
     * External identifier mapping from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof VariableOut
     */
    xid?: { [key: string]: string; };
    /**
     * Type of the variable.
     * @type {VariableType}
     * @memberof VariableOut
     */
    variable_type?: VariableType;
    /**
     * The id of the Variable\'s Concept.
     * @type {string}
     * @memberof VariableOut
     */
    concept_id?: string;
    /**
     * Collection of links to related resources.
     * @type {VariableLinks}
     * @memberof VariableOut
     */
    _links?: VariableLinks;
    /**
     * Number of models using this variable.
     * @type {number}
     * @memberof VariableOut
     */
    model_count?: number;
    /**
     * Number of models predicting this variable.
     * @type {number}
     * @memberof VariableOut
     */
    model_predict_count?: number;
    /**
     * Number of datasets using this variable.
     * @type {number}
     * @memberof VariableOut
     */
    dataset_count?: number;
    /**
     * Number of associations using this variable.
     * @type {number}
     * @memberof VariableOut
     */
    association_count?: number;
    /**
     * Number of features operationalizing this variable.
     * @type {number}
     * @memberof VariableOut
     */
    feature_count?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum VariableOutPermissionsEnum {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}

/**
 * Variable pagination out.
 * @export
 * @interface VariablePaginationOut
 */
export interface VariablePaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof VariablePaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<VariableOut>}
     * @memberof VariablePaginationOut
     */
    items?: Array<VariableOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof VariablePaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof VariablePaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof VariablePaginationOut
     */
    _sorts?: Array<string>;
}
/**
 * Variable system of features pagination out.
 * @export
 * @interface VariableSystemOfFeaturesPaginationOut
 */
export interface VariableSystemOfFeaturesPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof VariableSystemOfFeaturesPaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<FeatureOut>}
     * @memberof VariableSystemOfFeaturesPaginationOut
     */
    items?: Array<FeatureOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof VariableSystemOfFeaturesPaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof VariableSystemOfFeaturesPaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof VariableSystemOfFeaturesPaginationOut
     */
    _sorts?: Array<string>;
    /**
     * Available population ids for filtering along paths.
     * @type {Array<string>}
     * @memberof VariableSystemOfFeaturesPaginationOut
     */
    path_pop_ids?: Array<string>;
    /**
     * Map from result system id to the number of paths found.
     * @type {{ [key: string]: number; }}
     * @memberof VariableSystemOfFeaturesPaginationOut
     */
    path_count?: { [key: string]: number; };
    /**
     * Available dataset index ids for filtering
     * @type {Array<string>}
     * @memberof VariableSystemOfFeaturesPaginationOut
     */
    index_ids?: Array<string>;
    /**
     * Available dataset population ids for filtering result features.
     * @type {Array<string>}
     * @memberof VariableSystemOfFeaturesPaginationOut
     */
    ds_pop_ids?: Array<string>;
}
/**
 * Variable system of variables pagination out.
 * @export
 * @interface VariableSystemOfVariablesPaginationOut
 */
export interface VariableSystemOfVariablesPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof VariableSystemOfVariablesPaginationOut
     */
    _links?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<VariableOut>}
     * @memberof VariableSystemOfVariablesPaginationOut
     */
    items?: Array<VariableOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof VariableSystemOfVariablesPaginationOut
     */
    ids?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof VariableSystemOfVariablesPaginationOut
     */
    total?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof VariableSystemOfVariablesPaginationOut
     */
    _sorts?: Array<string>;
    /**
     * Available population ids for filtering along paths.
     * @type {Array<string>}
     * @memberof VariableSystemOfVariablesPaginationOut
     */
    path_pop_ids?: Array<string>;
    /**
     * Map from result system id to the number of paths found.
     * @type {{ [key: string]: number; }}
     * @memberof VariableSystemOfVariablesPaginationOut
     */
    path_count?: { [key: string]: number; };
}
/**
 * Variable type model.
 * @export
 * @interface VariableType
 */
export interface VariableType {
    /**
     * 
     * @type {string}
     * @memberof VariableType
     */
    type?: VariableTypeTypeEnum;
    /**
     * Optional description only when valid when type=unknown
     * @type {string}
     * @memberof VariableType
     */
    description?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum VariableTypeTypeEnum {
    Unknown = 'unknown',
    CategoricalNominal = 'categorical_nominal',
    CategoricalOrdinal = 'categorical_ordinal',
    CategoricalBinary = 'categorical_binary',
    NumericalDiscrete = 'numerical_discrete',
    NumericalContinuous = 'numerical_continuous'
}


/**
 * AssociationsApi - axios parameter creator
 * @export
 */
export const AssociationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost: async (datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling createAssociationsV1DatasetsDatasetIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new RequiredError('associationInArrayAssociationIn','Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1DatasetsDatasetIdAssociationsPost.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost: async (modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling createAssociationsV1ModelsModelIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new RequiredError('associationInArrayAssociationIn','Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1ModelsModelIdAssociationsPost.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete: async (modelId: string, associationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new RequiredError('associationId','Required parameter associationId was null or undefined when calling deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete.');
            }
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete: async (modelId: string, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling deleteAssociationsV1ModelsModelIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete' is not null or undefined
            if (bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete === null || bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete === undefined) {
                throw new RequiredError('bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete','Required parameter bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete was null or undefined when calling deleteAssociationsV1ModelsModelIdAssociationsDelete.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete !== undefined ? bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete : {}) : (bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: async (datasetId: string, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete' is not null or undefined
            if (bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete === null || bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete === undefined) {
                throw new RequiredError('bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete','Required parameter bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete was null or undefined when calling deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete !== undefined ? bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete : {}) : (bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: async (associationId: string, modelId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new RequiredError('associationId','Required parameter associationId was null or undefined when calling getAssociationV1ModelsModelIdAssociationsAssociationIdGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling getAssociationV1ModelsModelIdAssociationsAssociationIdGet.');
            }
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet: async (associationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new RequiredError('associationId','Required parameter associationId was null or undefined when calling getRelationshipDirectionV1AssociationsAssociationIdDirectionGet.');
            }
            const localVarPath = `/v1/associations/{association_id}/direction`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet: async (associationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new RequiredError('associationId','Required parameter associationId was null or undefined when calling getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet.');
            }
            const localVarPath = `/v1/associations/{association_id}/reproducibility`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1AssociationsAssociationIdStrengthGet: async (associationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new RequiredError('associationId','Required parameter associationId was null or undefined when calling getRelationshipStrengthV1AssociationsAssociationIdStrengthGet.');
            }
            const localVarPath = `/v1/associations/{association_id}/strength`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet: async (studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/user/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/associations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }

            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet: async (datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling listAssociationsV1DatasetsDatasetIdAssociationsGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: async (modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling listAssociationsV1ModelsModelIdAssociationsGet.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet: async (studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling listAssociationsV1StudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet: async (teamSlug: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: async (variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listAssociationsV1VariablesVariableIdAssociationsGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch: async (modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling patchAssociationsV1ModelsModelIdAssociationsPatch.');
            }
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            if (bulkPatchAssociationOp === null || bulkPatchAssociationOp === undefined) {
                throw new RequiredError('bulkPatchAssociationOp','Required parameter bulkPatchAssociationOp was null or undefined when calling patchAssociationsV1ModelsModelIdAssociationsPatch.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bulkPatchAssociationOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bulkPatchAssociationOp !== undefined ? bulkPatchAssociationOp : {}) : (bulkPatchAssociationOp || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssociationsApi - functional programming interface
 * @export
 */
export const AssociationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1ModelsModelIdAssociationsPost(modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId: string, associationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId: string, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId: string, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId: string, modelId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipDirection>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipReproducibility>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipStrength>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1AssociationsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1ModelsModelIdAssociationsGet(modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1StudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).listAssociationsV1StudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1VariablesVariableIdAssociationsGet(variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssociationsV1ModelsModelIdAssociationsPatch(modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AssociationsApiAxiosParamCreator(configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AssociationsApi - factory interface
 * @export
 */
export const AssociationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options?: any): AxiosPromise<Array<AssociationOut>> {
            return AssociationsApiFp(configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options?: any): AxiosPromise<Array<AssociationOut>> {
            return AssociationsApiFp(configuration).createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId: string, associationId: string, options?: any): AxiosPromise<void> {
            return AssociationsApiFp(configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId: string, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options?: any): AxiosPromise<void> {
            return AssociationsApiFp(configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId: string, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options?: any): AxiosPromise<void> {
            return AssociationsApiFp(configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId: string, modelId: string, options?: any): AxiosPromise<AssociationOut> {
            return AssociationsApiFp(configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId: string, options?: any): AxiosPromise<RelationshipDirection> {
            return AssociationsApiFp(configuration).getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId: string, options?: any): AxiosPromise<RelationshipReproducibility> {
            return AssociationsApiFp(configuration).getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId: string, options?: any): AxiosPromise<RelationshipStrength> {
            return AssociationsApiFp(configuration).getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return AssociationsApiFp(configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, options?: any): AxiosPromise<AssociationPaginationOut> {
            return AssociationsApiFp(configuration).listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return AssociationsApiFp(configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return AssociationsApiFp(configuration).listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return AssociationsApiFp(configuration).listAssociationsV1StudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return AssociationsApiFp(configuration).listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return AssociationsApiFp(configuration).listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options?: any): AxiosPromise<void> {
            return AssociationsApiFp(configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAssociationsV1DatasetsDatasetIdAssociationsPost operation in AssociationsApi.
 * @export
 * @interface AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest
 */
export interface AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>
}

/**
 * Request parameters for createAssociationsV1ModelsModelIdAssociationsPost operation in AssociationsApi.
 * @export
 * @interface AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest
 */
export interface AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly modelId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>

    /**
     * 
     * @type {boolean}
     * @memberof AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly mergeFeatures?: boolean
}

/**
 * Request parameters for deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete operation in AssociationsApi.
 * @export
 * @interface AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest
 */
export interface AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete
     */
    readonly associationId: string
}

/**
 * Request parameters for deleteAssociationsV1ModelsModelIdAssociationsDelete operation in AssociationsApi.
 * @export
 * @interface AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest
 */
export interface AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete}
     * @memberof AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDelete
     */
    readonly bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
}

/**
 * Request parameters for deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete operation in AssociationsApi.
 * @export
 * @interface AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest
 */
export interface AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete}
     * @memberof AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
     */
    readonly bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
}

/**
 * Request parameters for getAssociationV1ModelsModelIdAssociationsAssociationIdGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest
 */
export interface AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly modelId: string
}

/**
 * Request parameters for getRelationshipDirectionV1AssociationsAssociationIdDirectionGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest
 */
export interface AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGet
     */
    readonly associationId: string
}

/**
 * Request parameters for getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest
 */
export interface AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet
     */
    readonly associationId: string
}

/**
 * Request parameters for getRelationshipStrengthV1AssociationsAssociationIdStrengthGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGetRequest
 */
export interface AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGet
     */
    readonly associationId: string
}

/**
 * Request parameters for listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1AssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1AssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1AssociationsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly isVariableAssociation?: boolean

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly featureRelationship?: string

    /**
     * Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly conceptRelationship?: string
}

/**
 * Request parameters for listAssociationsV1DatasetsDatasetIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1ModelsModelIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly modelId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1StudiesStudyIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly variableId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1VariablesVariableIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly variableId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for patchAssociationsV1ModelsModelIdAssociationsPatch operation in AssociationsApi.
 * @export
 * @interface AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest
 */
export interface AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatch
     */
    readonly modelId: string

    /**
     * 
     * @type {Array<BulkPatchAssociationOp>}
     * @memberof AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatch
     */
    readonly bulkPatchAssociationOp: Array<BulkPatchAssociationOp>
}

/**
 * AssociationsApi - object-oriented interface
 * @export
 * @class AssociationsApi
 * @extends {BaseAPI}
 */
export class AssociationsApi extends BaseAPI {
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters: AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest, options?: any) {
        return AssociationsApiFp(this.configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public createAssociationsV1ModelsModelIdAssociationsPost(requestParameters: AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest, options?: any) {
        return AssociationsApiFp(this.configuration).createAssociationsV1ModelsModelIdAssociationsPost(requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters: AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest, options?: any) {
        return AssociationsApiFp(this.configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters: AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest, options?: any) {
        return AssociationsApiFp(this.configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters: AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest, options?: any) {
        return AssociationsApiFp(this.configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Association.
     * @summary Get Association
     * @param {AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters: AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest, options?: any) {
        return AssociationsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(requestParameters: AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest, options?: any) {
        return AssociationsApiFp(this.configuration).getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(requestParameters: AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest, options?: any) {
        return AssociationsApiFp(this.configuration).getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get strength of this association.
     * @summary Get Relationship Strength
     * @param {AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(requestParameters: AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGetRequest, options?: any) {
        return AssociationsApiFp(this.configuration).getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters: AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest, options?: any) {
        return AssociationsApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Associations.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1AssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1AssociationsGet(requestParameters: AssociationsApiListAssociationsV1AssociationsGetRequest = {}, options?: any) {
        return AssociationsApiFp(this.configuration).listAssociationsV1AssociationsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest, options?: any) {
        return AssociationsApiFp(this.configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in model.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1ModelsModelIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest, options?: any) {
        return AssociationsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest, options?: any) {
        return AssociationsApiFp(this.configuration).listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest, options?: any) {
        return AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest, options?: any) {
        return AssociationsApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters: AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest, options?: any) {
        return AssociationsApiFp(this.configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthorsApi - axios parameter creator
 * @export
 */
export const AuthorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut: async (studyId: string, authorId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new RequiredError('authorId','Required parameter authorId was null or undefined when calling addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut.');
            }
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1AuthorsPost: async (authorIn: AuthorIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorIn' is not null or undefined
            if (authorIn === null || authorIn === undefined) {
                throw new RequiredError('authorIn','Required parameter authorIn was null or undefined when calling createAuthorV1AuthorsPost.');
            }
            const localVarPath = `/v1/authors`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof authorIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authorIn !== undefined ? authorIn : {}) : (authorIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1AuthorsAuthorIdDelete: async (authorId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new RequiredError('authorId','Required parameter authorId was null or undefined when calling deleteAuthorV1AuthorsAuthorIdDelete.');
            }
            const localVarPath = `/v1/authors/{author_id}`
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet: async (authorId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new RequiredError('authorId','Required parameter authorId was null or undefined when calling getAuthorV1AuthorsAuthorIdGet.');
            }
            const localVarPath = `/v1/authors/{author_id}`
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/authors`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete: async (studyId: string, authorId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new RequiredError('authorId','Required parameter authorId was null or undefined when calling removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete.');
            }
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorsApi - functional programming interface
 * @export
 */
export const AuthorsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId: string, authorId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthorsApiAxiosParamCreator(configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthorV1AuthorsPost(authorIn: AuthorIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorOut>> {
            const localVarAxiosArgs = await AuthorsApiAxiosParamCreator(configuration).createAuthorV1AuthorsPost(authorIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthorV1AuthorsAuthorIdDelete(authorId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthorsApiAxiosParamCreator(configuration).deleteAuthorV1AuthorsAuthorIdDelete(authorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorV1AuthorsAuthorIdGet(authorId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorOut>> {
            const localVarAxiosArgs = await AuthorsApiAxiosParamCreator(configuration).getAuthorV1AuthorsAuthorIdGet(authorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthorsV1AuthorsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorPaginationOut>> {
            const localVarAxiosArgs = await AuthorsApiAxiosParamCreator(configuration).listAuthorsV1AuthorsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId: string, authorId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthorsApiAxiosParamCreator(configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthorsApi - factory interface
 * @export
 */
export const AuthorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId: string, authorId: string, options?: any): AxiosPromise<void> {
            return AuthorsApiFp(configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1AuthorsPost(authorIn: AuthorIn, options?: any): AxiosPromise<AuthorOut> {
            return AuthorsApiFp(configuration).createAuthorV1AuthorsPost(authorIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1AuthorsAuthorIdDelete(authorId: string, options?: any): AxiosPromise<void> {
            return AuthorsApiFp(configuration).deleteAuthorV1AuthorsAuthorIdDelete(authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet(authorId: string, options?: any): AxiosPromise<AuthorOut> {
            return AuthorsApiFp(configuration).getAuthorV1AuthorsAuthorIdGet(authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options?: any): AxiosPromise<AuthorPaginationOut> {
            return AuthorsApiFp(configuration).listAuthorsV1AuthorsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId: string, authorId: string, options?: any): AxiosPromise<void> {
            return AuthorsApiFp(configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut operation in AuthorsApi.
 * @export
 * @interface AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest
 */
export interface AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut
     */
    readonly authorId: string
}

/**
 * Request parameters for createAuthorV1AuthorsPost operation in AuthorsApi.
 * @export
 * @interface AuthorsApiCreateAuthorV1AuthorsPostRequest
 */
export interface AuthorsApiCreateAuthorV1AuthorsPostRequest {
    /**
     * 
     * @type {AuthorIn}
     * @memberof AuthorsApiCreateAuthorV1AuthorsPost
     */
    readonly authorIn: AuthorIn
}

/**
 * Request parameters for deleteAuthorV1AuthorsAuthorIdDelete operation in AuthorsApi.
 * @export
 * @interface AuthorsApiDeleteAuthorV1AuthorsAuthorIdDeleteRequest
 */
export interface AuthorsApiDeleteAuthorV1AuthorsAuthorIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiDeleteAuthorV1AuthorsAuthorIdDelete
     */
    readonly authorId: string
}

/**
 * Request parameters for getAuthorV1AuthorsAuthorIdGet operation in AuthorsApi.
 * @export
 * @interface AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest
 */
export interface AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiGetAuthorV1AuthorsAuthorIdGet
     */
    readonly authorId: string
}

/**
 * Request parameters for listAuthorsV1AuthorsGet operation in AuthorsApi.
 * @export
 * @interface AuthorsApiListAuthorsV1AuthorsGetRequest
 */
export interface AuthorsApiListAuthorsV1AuthorsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete operation in AuthorsApi.
 * @export
 * @interface AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest
 */
export interface AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly authorId: string
}

/**
 * AuthorsApi - object-oriented interface
 * @export
 * @class AuthorsApi
 * @extends {BaseAPI}
 */
export class AuthorsApi extends BaseAPI {
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters: AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest, options?: any) {
        return AuthorsApiFp(this.configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Author.
     * @summary Create Author
     * @param {AuthorsApiCreateAuthorV1AuthorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public createAuthorV1AuthorsPost(requestParameters: AuthorsApiCreateAuthorV1AuthorsPostRequest, options?: any) {
        return AuthorsApiFp(this.configuration).createAuthorV1AuthorsPost(requestParameters.authorIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Author.
     * @summary Delete Author
     * @param {AuthorsApiDeleteAuthorV1AuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public deleteAuthorV1AuthorsAuthorIdDelete(requestParameters: AuthorsApiDeleteAuthorV1AuthorsAuthorIdDeleteRequest, options?: any) {
        return AuthorsApiFp(this.configuration).deleteAuthorV1AuthorsAuthorIdDelete(requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Author.
     * @summary Get Author
     * @param {AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public getAuthorV1AuthorsAuthorIdGet(requestParameters: AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest, options?: any) {
        return AuthorsApiFp(this.configuration).getAuthorV1AuthorsAuthorIdGet(requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {AuthorsApiListAuthorsV1AuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public listAuthorsV1AuthorsGet(requestParameters: AuthorsApiListAuthorsV1AuthorsGetRequest = {}, options?: any) {
        return AuthorsApiFp(this.configuration).listAuthorsV1AuthorsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters: AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest, options?: any) {
        return AuthorsApiFp(this.configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConceptsApi - axios parameter creator
 * @export
 */
export const ConceptsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost: async (conceptIn: ConceptIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptIn' is not null or undefined
            if (conceptIn === null || conceptIn === undefined) {
                throw new RequiredError('conceptIn','Required parameter conceptIn was null or undefined when calling createConceptV1ConceptsPost.');
            }
            const localVarPath = `/v1/concepts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof conceptIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(conceptIn !== undefined ? conceptIn : {}) : (conceptIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete: async (conceptId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new RequiredError('conceptId','Required parameter conceptId was null or undefined when calling deleteConceptV1ConceptsConceptIdDelete.');
            }
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet: async (conceptId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new RequiredError('conceptId','Required parameter conceptId was null or undefined when calling getConceptV1ConceptsConceptIdGet.');
            }
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/concepts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/concepts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId 
         * @param {'path_count' | 'created_at'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet: async (conceptId: string, orderBy?: 'path_count' | 'created_at', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new RequiredError('conceptId','Required parameter conceptId was null or undefined when calling listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet.');
            }
            const localVarPath = `/v1/concepts/{concept_id}/system/concepts`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listUserConceptsV1UsersUserIdConceptsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConceptsApi - functional programming interface
 * @export
 */
export const ConceptsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConceptV1ConceptsPost(conceptIn: ConceptIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptOut>> {
            const localVarAxiosArgs = await ConceptsApiAxiosParamCreator(configuration).createConceptV1ConceptsPost(conceptIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConceptV1ConceptsConceptIdDelete(conceptId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ConceptsApiAxiosParamCreator(configuration).deleteConceptV1ConceptsConceptIdDelete(conceptId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConceptV1ConceptsConceptIdGet(conceptId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptOut>> {
            const localVarAxiosArgs = await ConceptsApiAxiosParamCreator(configuration).getConceptV1ConceptsConceptIdGet(conceptId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserConceptsV1UserConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await ConceptsApiAxiosParamCreator(configuration).listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConceptsV1ConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await ConceptsApiAxiosParamCreator(configuration).listConceptsV1ConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId 
         * @param {'path_count' | 'created_at'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId: string, orderBy?: 'path_count' | 'created_at', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemOfConceptsPaginationOut>> {
            const localVarAxiosArgs = await ConceptsApiAxiosParamCreator(configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserConceptsV1UsersUserIdConceptsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await ConceptsApiAxiosParamCreator(configuration).listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConceptsApi - factory interface
 * @export
 */
export const ConceptsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost(conceptIn: ConceptIn, options?: any): AxiosPromise<ConceptOut> {
            return ConceptsApiFp(configuration).createConceptV1ConceptsPost(conceptIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete(conceptId: string, options?: any): AxiosPromise<void> {
            return ConceptsApiFp(configuration).deleteConceptV1ConceptsConceptIdDelete(conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet(conceptId: string, options?: any): AxiosPromise<ConceptOut> {
            return ConceptsApiFp(configuration).getConceptV1ConceptsConceptIdGet(conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return ConceptsApiFp(configuration).listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return ConceptsApiFp(configuration).listConceptsV1ConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId 
         * @param {'path_count' | 'created_at'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId: string, orderBy?: 'path_count' | 'created_at', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<SystemOfConceptsPaginationOut> {
            return ConceptsApiFp(configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return ConceptsApiFp(configuration).listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createConceptV1ConceptsPost operation in ConceptsApi.
 * @export
 * @interface ConceptsApiCreateConceptV1ConceptsPostRequest
 */
export interface ConceptsApiCreateConceptV1ConceptsPostRequest {
    /**
     * 
     * @type {ConceptIn}
     * @memberof ConceptsApiCreateConceptV1ConceptsPost
     */
    readonly conceptIn: ConceptIn
}

/**
 * Request parameters for deleteConceptV1ConceptsConceptIdDelete operation in ConceptsApi.
 * @export
 * @interface ConceptsApiDeleteConceptV1ConceptsConceptIdDeleteRequest
 */
export interface ConceptsApiDeleteConceptV1ConceptsConceptIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiDeleteConceptV1ConceptsConceptIdDelete
     */
    readonly conceptId: string
}

/**
 * Request parameters for getConceptV1ConceptsConceptIdGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiGetConceptV1ConceptsConceptIdGetRequest
 */
export interface ConceptsApiGetConceptV1ConceptsConceptIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiGetConceptV1ConceptsConceptIdGet
     */
    readonly conceptId: string
}

/**
 * Request parameters for listAuthenticatedUserConceptsV1UserConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest
 */
export interface ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listConceptsV1ConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListConceptsV1ConceptsGetRequest
 */
export interface ConceptsApiListConceptsV1ConceptsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest
 */
export interface ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly conceptId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at'}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly orderBy?: 'path_count' | 'created_at'

    /**
     * Number of hops.
     * @type {number}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly idsOnly?: boolean
}

/**
 * Request parameters for listUserConceptsV1UsersUserIdConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest
 */
export interface ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * ConceptsApi - object-oriented interface
 * @export
 * @class ConceptsApi
 * @extends {BaseAPI}
 */
export class ConceptsApi extends BaseAPI {
    /**
     * Create a Concept.
     * @summary Create Concept
     * @param {ConceptsApiCreateConceptV1ConceptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public createConceptV1ConceptsPost(requestParameters: ConceptsApiCreateConceptV1ConceptsPostRequest, options?: any) {
        return ConceptsApiFp(this.configuration).createConceptV1ConceptsPost(requestParameters.conceptIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
     * @summary Delete Concept
     * @param {ConceptsApiDeleteConceptV1ConceptsConceptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public deleteConceptV1ConceptsConceptIdDelete(requestParameters: ConceptsApiDeleteConceptV1ConceptsConceptIdDeleteRequest, options?: any) {
        return ConceptsApiFp(this.configuration).deleteConceptV1ConceptsConceptIdDelete(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Concept.
     * @summary Get Concept
     * @param {ConceptsApiGetConceptV1ConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public getConceptV1ConceptsConceptIdGet(requestParameters: ConceptsApiGetConceptV1ConceptsConceptIdGetRequest, options?: any) {
        return ConceptsApiFp(this.configuration).getConceptV1ConceptsConceptIdGet(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters: ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest = {}, options?: any) {
        return ConceptsApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Concepts.
     * @summary List Concepts
     * @param {ConceptsApiListConceptsV1ConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public listConceptsV1ConceptsGet(requestParameters: ConceptsApiListConceptsV1ConceptsGetRequest = {}, options?: any) {
        return ConceptsApiFp(this.configuration).listConceptsV1ConceptsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the concepts in the requested concept\'s system.
     * @summary List System Of Concepts
     * @param {ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters: ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest, options?: any) {
        return ConceptsApiFp(this.configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters.conceptId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public listUserConceptsV1UsersUserIdConceptsGet(requestParameters: ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest, options?: any) {
        return ConceptsApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DatasetsApi - axios parameter creator
 * @export
 */
export const DatasetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut: async (datasetId: string, featureId: string, index?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new RequiredError('featureId','Required parameter featureId was null or undefined when calling addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {boolean} [reconcileFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1DatasetsDatasetIdParentsParentIdPut: async (datasetId: string, parentId: string, reconcileFeatures?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling addParentDatasetV1DatasetsDatasetIdParentsParentIdPut.');
            }
            // verify required parameter 'parentId' is not null or undefined
            if (parentId === null || parentId === undefined) {
                throw new RequiredError('parentId','Required parameter parentId was null or undefined when calling addParentDatasetV1DatasetsDatasetIdParentsParentIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (reconcileFeatures !== undefined) {
                localVarQueryParameter['reconcile_features'] = reconcileFeatures;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: async (datasetId: string, populationAttributeValueId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new RequiredError('populationAttributeValueId','Required parameter populationAttributeValueId was null or undefined when calling addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost: async (datasetId: string, featureIn: Array<FeatureIn>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new RequiredError('featureIn','Required parameter featureIn was null or undefined when calling createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost: async (datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling createAssociationsV1DatasetsDatasetIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new RequiredError('associationInArrayAssociationIn','Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1DatasetsDatasetIdAssociationsPost.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost: async (datasetIn: DatasetIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetIn' is not null or undefined
            if (datasetIn === null || datasetIn === undefined) {
                throw new RequiredError('datasetIn','Required parameter datasetIn was null or undefined when calling createDatasetV1DatasetsPost.');
            }
            const localVarPath = `/v1/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof datasetIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(datasetIn !== undefined ? datasetIn : {}) : (datasetIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete: async (datasetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling deleteDatasetV1DatasetsDatasetIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: async (datasetId: string, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete' is not null or undefined
            if (bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete === null || bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete === undefined) {
                throw new RequiredError('bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete','Required parameter bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete was null or undefined when calling deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete !== undefined ? bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete : {}) : (bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet: async (datasetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet: async (datasetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling getDatasetV1DatasetsDatasetIdGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet: async (datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling listAssociationsV1DatasetsDatasetIdAssociationsGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: async (datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet: async (datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling listDatasetParentsV1DatasetsDatasetIdParentsGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/parents`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet: async (datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling listModelsUsingDatasetV1DatasetsDatasetIdModelsGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/models`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listUserDatasetsV1UsersUserIdDatasetsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId 
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch: async (datasetId: string, patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling patchDatasetV1DatasetsDatasetIdPatch.');
            }
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            if (patchDatasetOpArrayPatchDatasetOp === null || patchDatasetOpArrayPatchDatasetOp === undefined) {
                throw new RequiredError('patchDatasetOpArrayPatchDatasetOp','Required parameter patchDatasetOpArrayPatchDatasetOp was null or undefined when calling patchDatasetV1DatasetsDatasetIdPatch.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof patchDatasetOpArrayPatchDatasetOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patchDatasetOpArrayPatchDatasetOp !== undefined ? patchDatasetOpArrayPatchDatasetOp : {}) : (patchDatasetOpArrayPatchDatasetOp || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete: async (datasetId: string, featureId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new RequiredError('featureId','Required parameter featureId was null or undefined when calling removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete: async (datasetId: string, tagObjectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new RequiredError('tagObjectId','Required parameter tagObjectId was null or undefined when calling removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete: async (datasetId: string, parentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete.');
            }
            // verify required parameter 'parentId' is not null or undefined
            if (parentId === null || parentId === undefined) {
                throw new RequiredError('parentId','Required parameter parentId was null or undefined when calling removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: async (datasetId: string, populationAttributeValueId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new RequiredError('populationAttributeValueId','Required parameter populationAttributeValueId was null or undefined when calling removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut: async (datasetId: string, datasetIn: DatasetIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling replaceDatasetV1DatasetsDatasetIdPut.');
            }
            // verify required parameter 'datasetIn' is not null or undefined
            if (datasetIn === null || datasetIn === undefined) {
                throw new RequiredError('datasetIn','Required parameter datasetIn was null or undefined when calling replaceDatasetV1DatasetsDatasetIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof datasetIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(datasetIn !== undefined ? datasetIn : {}) : (datasetIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut: async (datasetId: string, tagObjectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new RequiredError('tagObjectId','Required parameter tagObjectId was null or undefined when calling tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatasetsApi - functional programming interface
 * @export
 */
export const DatasetsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId: string, featureId: string, index?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {boolean} [reconcileFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId: string, parentId: string, reconcileFeatures?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId: string, populationAttributeValueId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId: string, featureIn: Array<FeatureIn>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureOut>>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDatasetV1DatasetsPost(datasetIn: DatasetIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetOut>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).createDatasetV1DatasetsPost(datasetIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDatasetV1DatasetsDatasetIdDelete(datasetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId: string, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetV1DatasetsDatasetIdGet(datasetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetOut>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).getDatasetV1DatasetsDatasetIdGet(datasetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserDatasetsV1UserDatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetsV1DatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserDatasetsV1UsersUserIdDatasetsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId 
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchDatasetV1DatasetsDatasetIdPatch(datasetId: string, patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId: string, featureId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId: string, tagObjectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId: string, parentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId: string, populationAttributeValueId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceDatasetV1DatasetsDatasetIdPut(datasetId: string, datasetIn: DatasetIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetOut>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId: string, tagObjectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(configuration).tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DatasetsApi - factory interface
 * @export
 */
export const DatasetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId: string, featureId: string, index?: boolean, options?: any): AxiosPromise<void> {
            return DatasetsApiFp(configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {boolean} [reconcileFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId: string, parentId: string, reconcileFeatures?: boolean, options?: any): AxiosPromise<void> {
            return DatasetsApiFp(configuration).addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId: string, populationAttributeValueId: string, options?: any): AxiosPromise<void> {
            return DatasetsApiFp(configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId: string, featureIn: Array<FeatureIn>, options?: any): AxiosPromise<Array<FeatureOut>> {
            return DatasetsApiFp(configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, options?: any): AxiosPromise<Array<AssociationOut>> {
            return DatasetsApiFp(configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost(datasetIn: DatasetIn, options?: any): AxiosPromise<DatasetOut> {
            return DatasetsApiFp(configuration).createDatasetV1DatasetsPost(datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete(datasetId: string, options?: any): AxiosPromise<void> {
            return DatasetsApiFp(configuration).deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId 
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId: string, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options?: any): AxiosPromise<void> {
            return DatasetsApiFp(configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId: string, options?: any): AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>> {
            return DatasetsApiFp(configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet(datasetId: string, options?: any): AxiosPromise<DatasetOut> {
            return DatasetsApiFp(configuration).getDatasetV1DatasetsDatasetIdGet(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return DatasetsApiFp(configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return DatasetsApiFp(configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return DatasetsApiFp(configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return DatasetsApiFp(configuration).listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return DatasetsApiFp(configuration).listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return DatasetsApiFp(configuration).listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return DatasetsApiFp(configuration).listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId 
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch(datasetId: string, patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>, options?: any): AxiosPromise<void> {
            return DatasetsApiFp(configuration).patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId: string, featureId: string, options?: any): AxiosPromise<void> {
            return DatasetsApiFp(configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId: string, tagObjectId: string, options?: any): AxiosPromise<void> {
            return DatasetsApiFp(configuration).removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId 
         * @param {string} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId: string, parentId: string, options?: any): AxiosPromise<void> {
            return DatasetsApiFp(configuration).removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId: string, populationAttributeValueId: string, options?: any): AxiosPromise<void> {
            return DatasetsApiFp(configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId 
         * @param {DatasetIn} datasetIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut(datasetId: string, datasetIn: DatasetIn, options?: any): AxiosPromise<DatasetOut> {
            return DatasetsApiFp(configuration).replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId: string, tagObjectId: string, options?: any): AxiosPromise<void> {
            return DatasetsApiFp(configuration).tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest
 */
export interface DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * If true, then set the feature as the dataset index.
     * @type {boolean}
     * @memberof DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly index?: boolean
}

/**
 * Request parameters for addParentDatasetV1DatasetsDatasetIdParentsParentIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPutRequest
 */
export interface DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPut
     */
    readonly parentId: string

    /**
     * 
     * @type {boolean}
     * @memberof DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPut
     */
    readonly reconcileFeatures?: boolean
}

/**
 * Request parameters for addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest
 */
export interface DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly populationAttributeValueId: string
}

/**
 * Request parameters for createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost operation in DatasetsApi.
 * @export
 * @interface DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest
 */
export interface DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {Array<FeatureIn>}
     * @memberof DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost
     */
    readonly featureIn: Array<FeatureIn>
}

/**
 * Request parameters for createAssociationsV1DatasetsDatasetIdAssociationsPost operation in DatasetsApi.
 * @export
 * @interface DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest
 */
export interface DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>
}

/**
 * Request parameters for createDatasetV1DatasetsPost operation in DatasetsApi.
 * @export
 * @interface DatasetsApiCreateDatasetV1DatasetsPostRequest
 */
export interface DatasetsApiCreateDatasetV1DatasetsPostRequest {
    /**
     * 
     * @type {DatasetIn}
     * @memberof DatasetsApiCreateDatasetV1DatasetsPost
     */
    readonly datasetIn: DatasetIn
}

/**
 * Request parameters for deleteDatasetV1DatasetsDatasetIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiDeleteDatasetV1DatasetsDatasetIdDeleteRequest
 */
export interface DatasetsApiDeleteDatasetV1DatasetsDatasetIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiDeleteDatasetV1DatasetsDatasetIdDelete
     */
    readonly datasetId: string
}

/**
 * Request parameters for deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest
 */
export interface DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete}
     * @memberof DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
     */
    readonly bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
}

/**
 * Request parameters for fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest
 */
export interface DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet
     */
    readonly datasetId: string
}

/**
 * Request parameters for getDatasetV1DatasetsDatasetIdGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest
 */
export interface DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiGetDatasetV1DatasetsDatasetIdGet
     */
    readonly datasetId: string
}

/**
 * Request parameters for listAssociationsV1DatasetsDatasetIdAssociationsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest
 */
export interface DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserDatasetsV1UserDatasetsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest
 */
export interface DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'popularity' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest
 */
export interface DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listDatasetParentsV1DatasetsDatasetIdParentsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest
 */
export interface DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'popularity' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listDatasetsV1DatasetsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListDatasetsV1DatasetsGetRequest
 */
export interface DatasetsApiListDatasetsV1DatasetsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'popularity' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly conceptTag?: string

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly featureRelationship?: string
}

/**
 * Request parameters for listModelsUsingDatasetV1DatasetsDatasetIdModelsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest
 */
export interface DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'target_name' | 'created_at' | 'last_updated_at'}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly orderBy?: 'target_name' | 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listUserDatasetsV1UsersUserIdDatasetsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest
 */
export interface DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'popularity' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for patchDatasetV1DatasetsDatasetIdPatch operation in DatasetsApi.
 * @export
 * @interface DatasetsApiPatchDatasetV1DatasetsDatasetIdPatchRequest
 */
export interface DatasetsApiPatchDatasetV1DatasetsDatasetIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiPatchDatasetV1DatasetsDatasetIdPatch
     */
    readonly datasetId: string

    /**
     * 
     * @type {PatchDatasetOp | Array<PatchDatasetOp>}
     * @memberof DatasetsApiPatchDatasetV1DatasetsDatasetIdPatch
     */
    readonly patchDatasetOpArrayPatchDatasetOp: PatchDatasetOp | Array<PatchDatasetOp>
}

/**
 * Request parameters for removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest
 */
export interface DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly featureId: string
}

/**
 * Request parameters for removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest
 */
export interface DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete
     */
    readonly tagObjectId: string
}

/**
 * Request parameters for removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDeleteRequest
 */
export interface DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDelete
     */
    readonly parentId: string
}

/**
 * Request parameters for removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete operation in DatasetsApi.
 * @export
 * @interface DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest
 */
export interface DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly populationAttributeValueId: string
}

/**
 * Request parameters for replaceDatasetV1DatasetsDatasetIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiReplaceDatasetV1DatasetsDatasetIdPutRequest
 */
export interface DatasetsApiReplaceDatasetV1DatasetsDatasetIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiReplaceDatasetV1DatasetsDatasetIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {DatasetIn}
     * @memberof DatasetsApiReplaceDatasetV1DatasetsDatasetIdPut
     */
    readonly datasetIn: DatasetIn
}

/**
 * Request parameters for tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut operation in DatasetsApi.
 * @export
 * @interface DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPutRequest
 */
export interface DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut
     */
    readonly tagObjectId: string
}

/**
 * DatasetsApi - object-oriented interface
 * @export
 * @class DatasetsApi
 * @extends {BaseAPI}
 */
export class DatasetsApi extends BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters: DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest, options?: any) {
        return DatasetsApiFp(this.configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a parent dataset.
     * @summary Add Parent Dataset
     * @param {DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(requestParameters: DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPutRequest, options?: any) {
        return DatasetsApiFp(this.configuration).addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(requestParameters.datasetId, requestParameters.parentId, requestParameters.reconcileFeatures, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters: DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest, options?: any) {
        return DatasetsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters: DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest, options?: any) {
        return DatasetsApiFp(this.configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters: DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest, options?: any) {
        return DatasetsApiFp(this.configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {DatasetsApiCreateDatasetV1DatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public createDatasetV1DatasetsPost(requestParameters: DatasetsApiCreateDatasetV1DatasetsPostRequest, options?: any) {
        return DatasetsApiFp(this.configuration).createDatasetV1DatasetsPost(requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {DatasetsApiDeleteDatasetV1DatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public deleteDatasetV1DatasetsDatasetIdDelete(requestParameters: DatasetsApiDeleteDatasetV1DatasetsDatasetIdDeleteRequest, options?: any) {
        return DatasetsApiFp(this.configuration).deleteDatasetV1DatasetsDatasetIdDelete(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters: DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest, options?: any) {
        return DatasetsApiFp(this.configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters: DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest, options?: any) {
        return DatasetsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public getDatasetV1DatasetsDatasetIdGet(requestParameters: DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest, options?: any) {
        return DatasetsApiFp(this.configuration).getDatasetV1DatasetsDatasetIdGet(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters: DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest, options?: any) {
        return DatasetsApiFp(this.configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters: DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest = {}, options?: any) {
        return DatasetsApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters: DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest, options?: any) {
        return DatasetsApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listDatasetParentsV1DatasetsDatasetIdParentsGet(requestParameters: DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest, options?: any) {
        return DatasetsApiFp(this.configuration).listDatasetParentsV1DatasetsDatasetIdParentsGet(requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {DatasetsApiListDatasetsV1DatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listDatasetsV1DatasetsGet(requestParameters: DatasetsApiListDatasetsV1DatasetsGetRequest = {}, options?: any) {
        return DatasetsApiFp(this.configuration).listDatasetsV1DatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters: DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest, options?: any) {
        return DatasetsApiFp(this.configuration).listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters: DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest, options?: any) {
        return DatasetsApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {DatasetsApiPatchDatasetV1DatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public patchDatasetV1DatasetsDatasetIdPatch(requestParameters: DatasetsApiPatchDatasetV1DatasetsDatasetIdPatchRequest, options?: any) {
        return DatasetsApiFp(this.configuration).patchDatasetV1DatasetsDatasetIdPatch(requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters: DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest, options?: any) {
        return DatasetsApiFp(this.configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the dataset with object with provided id.
     * @summary Remove Object Tag From Dataset
     * @param {DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters: DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest, options?: any) {
        return DatasetsApiFp(this.configuration).removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a parent dataset.
     * @summary Remove Parent Dataset
     * @param {DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(requestParameters: DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDeleteRequest, options?: any) {
        return DatasetsApiFp(this.configuration).removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(requestParameters.datasetId, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters: DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest, options?: any) {
        return DatasetsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {DatasetsApiReplaceDatasetV1DatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public replaceDatasetV1DatasetsDatasetIdPut(requestParameters: DatasetsApiReplaceDatasetV1DatasetsDatasetIdPutRequest, options?: any) {
        return DatasetsApiFp(this.configuration).replaceDatasetV1DatasetsDatasetIdPut(requestParameters.datasetId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the dataset with object with provided id.
     * @summary Tag Study With Object
     * @param {DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters: DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPutRequest, options?: any) {
        return DatasetsApiFp(this.configuration).tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnterpriseApi - axios parameter creator
 * @export
 */
export const EnterpriseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationCreate} integrationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost: async (integrationCreate: IntegrationCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationCreate' is not null or undefined
            if (integrationCreate === null || integrationCreate === undefined) {
                throw new RequiredError('integrationCreate','Required parameter integrationCreate was null or undefined when calling createIntegrationV1EnterpriseIntegrationsPost.');
            }
            const localVarPath = `/v1/enterprise/integrations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof integrationCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(integrationCreate !== undefined ? integrationCreate : {}) : (integrationCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost: async (messageIn: MessageIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageIn' is not null or undefined
            if (messageIn === null || messageIn === undefined) {
                throw new RequiredError('messageIn','Required parameter messageIn was null or undefined when calling createMessageV1EnterpriseMessagesPost.');
            }
            const localVarPath = `/v1/enterprise/messages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof messageIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(messageIn !== undefined ? messageIn : {}) : (messageIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/enterprise`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet: async (integrationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            if (integrationId === null || integrationId === undefined) {
                throw new RequiredError('integrationId','Required parameter integrationId was null or undefined when calling getIntegrationV1EnterpriseIntegrationsIntegrationIdGet.');
            }
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet: async (messageId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new RequiredError('messageId','Required parameter messageId was null or undefined when calling getMessageV1EnterpriseMessagesMessageIdGet.');
            }
            const localVarPath = `/v1/enterprise/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an Integration.
         * @summary Update Integration
         * @param {string} integrationId 
         * @param {IntegrationUpdateIn} integrationUpdateIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch: async (integrationId: string, integrationUpdateIn: IntegrationUpdateIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            if (integrationId === null || integrationId === undefined) {
                throw new RequiredError('integrationId','Required parameter integrationId was null or undefined when calling updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch.');
            }
            // verify required parameter 'integrationUpdateIn' is not null or undefined
            if (integrationUpdateIn === null || integrationUpdateIn === undefined) {
                throw new RequiredError('integrationUpdateIn','Required parameter integrationUpdateIn was null or undefined when calling updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch.');
            }
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof integrationUpdateIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(integrationUpdateIn !== undefined ? integrationUpdateIn : {}) : (integrationUpdateIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId 
         * @param {MessageIn} messageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch: async (messageId: string, messageIn: MessageIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new RequiredError('messageId','Required parameter messageId was null or undefined when calling updateMessageV1EnterpriseMessagesMessageIdPatch.');
            }
            // verify required parameter 'messageIn' is not null or undefined
            if (messageIn === null || messageIn === undefined) {
                throw new RequiredError('messageIn','Required parameter messageIn was null or undefined when calling updateMessageV1EnterpriseMessagesMessageIdPatch.');
            }
            const localVarPath = `/v1/enterprise/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof messageIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(messageIn !== undefined ? messageIn : {}) : (messageIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnterpriseApi - functional programming interface
 * @export
 */
export const EnterpriseApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationCreate} integrationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIntegrationV1EnterpriseIntegrationsPost(integrationCreate: IntegrationCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMessageV1EnterpriseMessagesPost(messageIn: MessageIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).createMessageV1EnterpriseMessagesPost(messageIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnterpriseV1EnterpriseGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Enterprise>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).getEnterpriseV1EnterpriseGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageV1EnterpriseMessagesMessageIdGet(messageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).getMessageV1EnterpriseMessagesMessageIdGet(messageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an Integration.
         * @summary Update Integration
         * @param {string} integrationId 
         * @param {IntegrationUpdateIn} integrationUpdateIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId: string, integrationUpdateIn: IntegrationUpdateIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId 
         * @param {MessageIn} messageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMessageV1EnterpriseMessagesMessageIdPatch(messageId: string, messageIn: MessageIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EnterpriseApi - factory interface
 * @export
 */
export const EnterpriseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationCreate} integrationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost(integrationCreate: IntegrationCreate, options?: any): AxiosPromise<Integration> {
            return EnterpriseApiFp(configuration).createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost(messageIn: MessageIn, options?: any): AxiosPromise<MessageOut> {
            return EnterpriseApiFp(configuration).createMessageV1EnterpriseMessagesPost(messageIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet(options?: any): AxiosPromise<Enterprise> {
            return EnterpriseApiFp(configuration).getEnterpriseV1EnterpriseGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId: string, options?: any): AxiosPromise<Integration> {
            return EnterpriseApiFp(configuration).getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet(messageId: string, options?: any): AxiosPromise<MessageOut> {
            return EnterpriseApiFp(configuration).getMessageV1EnterpriseMessagesMessageIdGet(messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an Integration.
         * @summary Update Integration
         * @param {string} integrationId 
         * @param {IntegrationUpdateIn} integrationUpdateIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId: string, integrationUpdateIn: IntegrationUpdateIn, options?: any): AxiosPromise<Integration> {
            return EnterpriseApiFp(configuration).updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId 
         * @param {MessageIn} messageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch(messageId: string, messageIn: MessageIn, options?: any): AxiosPromise<MessageOut> {
            return EnterpriseApiFp(configuration).updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createIntegrationV1EnterpriseIntegrationsPost operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest
 */
export interface EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest {
    /**
     * 
     * @type {IntegrationCreate}
     * @memberof EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPost
     */
    readonly integrationCreate: IntegrationCreate
}

/**
 * Request parameters for createMessageV1EnterpriseMessagesPost operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest
 */
export interface EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest {
    /**
     * 
     * @type {MessageIn}
     * @memberof EnterpriseApiCreateMessageV1EnterpriseMessagesPost
     */
    readonly messageIn: MessageIn
}

/**
 * Request parameters for getIntegrationV1EnterpriseIntegrationsIntegrationIdGet operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest
 */
export interface EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGet
     */
    readonly integrationId: string
}

/**
 * Request parameters for getMessageV1EnterpriseMessagesMessageIdGet operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest
 */
export interface EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGet
     */
    readonly messageId: string
}

/**
 * Request parameters for updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest
 */
export interface EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch
     */
    readonly integrationId: string

    /**
     * 
     * @type {IntegrationUpdateIn}
     * @memberof EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch
     */
    readonly integrationUpdateIn: IntegrationUpdateIn
}

/**
 * Request parameters for updateMessageV1EnterpriseMessagesMessageIdPatch operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest
 */
export interface EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatch
     */
    readonly messageId: string

    /**
     * 
     * @type {MessageIn}
     * @memberof EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatch
     */
    readonly messageIn: MessageIn
}

/**
 * EnterpriseApi - object-oriented interface
 * @export
 * @class EnterpriseApi
 * @extends {BaseAPI}
 */
export class EnterpriseApi extends BaseAPI {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public createIntegrationV1EnterpriseIntegrationsPost(requestParameters: EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest, options?: any) {
        return EnterpriseApiFp(this.configuration).createIntegrationV1EnterpriseIntegrationsPost(requestParameters.integrationCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new message.
     * @summary Create Message
     * @param {EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public createMessageV1EnterpriseMessagesPost(requestParameters: EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest, options?: any) {
        return EnterpriseApiFp(this.configuration).createMessageV1EnterpriseMessagesPost(requestParameters.messageIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the Enterprise.
     * @summary Get Enterprise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getEnterpriseV1EnterpriseGet(options?: any) {
        return EnterpriseApiFp(this.configuration).getEnterpriseV1EnterpriseGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters: EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest, options?: any) {
        return EnterpriseApiFp(this.configuration).getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters.integrationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Message.
     * @summary Get Message
     * @param {EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getMessageV1EnterpriseMessagesMessageIdGet(requestParameters: EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest, options?: any) {
        return EnterpriseApiFp(this.configuration).getMessageV1EnterpriseMessagesMessageIdGet(requestParameters.messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an Integration.
     * @summary Update Integration
     * @param {EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters: EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest, options?: any) {
        return EnterpriseApiFp(this.configuration).updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters.integrationId, requestParameters.integrationUpdateIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Message.
     * @summary Update Message
     * @param {EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public updateMessageV1EnterpriseMessagesMessageIdPatch(requestParameters: EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest, options?: any) {
        return EnterpriseApiFp(this.configuration).updateMessageV1EnterpriseMessagesMessageIdPatch(requestParameters.messageId, requestParameters.messageIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FeaturesApi - axios parameter creator
 * @export
 */
export const FeaturesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut: async (datasetId: string, featureId: string, index?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new RequiredError('featureId','Required parameter featureId was null or undefined when calling addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost: async (datasetId: string, featureIn: Array<FeatureIn>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new RequiredError('featureIn','Required parameter featureIn was null or undefined when calling createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost: async (featureIn: FeatureIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new RequiredError('featureIn','Required parameter featureIn was null or undefined when calling createFeatureV1FeaturesPost.');
            }
            const localVarPath = `/v1/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete: async (featureId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new RequiredError('featureId','Required parameter featureId was null or undefined when calling deleteFeatureV1FeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet: async (featureId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new RequiredError('featureId','Required parameter featureId was null or undefined when calling getFeatureV1FeaturesFeatureIdGet.');
            }
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: async (datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet: async (featureId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new RequiredError('featureId','Required parameter featureId was null or undefined when calling listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/features/{feature_id}/system/features`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (license) {
                localVarQueryParameter['license'] = license;
            }

            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }

            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }

            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }

            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listUserFeaturesV1UsersUserIdFeaturesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} featureId 
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch: async (featureId: string, patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new RequiredError('featureId','Required parameter featureId was null or undefined when calling patchFeatureV1FeaturesFeatureIdPatch.');
            }
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            if (patchFeatureOpArrayPatchFeatureOp === null || patchFeatureOpArrayPatchFeatureOp === undefined) {
                throw new RequiredError('patchFeatureOpArrayPatchFeatureOp','Required parameter patchFeatureOpArrayPatchFeatureOp was null or undefined when calling patchFeatureV1FeaturesFeatureIdPatch.');
            }
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof patchFeatureOpArrayPatchFeatureOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patchFeatureOpArrayPatchFeatureOp !== undefined ? patchFeatureOpArrayPatchFeatureOp : {}) : (patchFeatureOpArrayPatchFeatureOp || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch: async (bulkPatchFeatureOp: Array<BulkPatchFeatureOp>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            if (bulkPatchFeatureOp === null || bulkPatchFeatureOp === undefined) {
                throw new RequiredError('bulkPatchFeatureOp','Required parameter bulkPatchFeatureOp was null or undefined when calling patchMultipleFeaturesV1FeaturesPatch.');
            }
            const localVarPath = `/v1/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bulkPatchFeatureOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bulkPatchFeatureOp !== undefined ? bulkPatchFeatureOp : {}) : (bulkPatchFeatureOp || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete: async (datasetId: string, featureId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new RequiredError('featureId','Required parameter featureId was null or undefined when calling removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut: async (featureId: string, featureIn: FeatureIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new RequiredError('featureId','Required parameter featureId was null or undefined when calling replaceFeatureV1FeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new RequiredError('featureIn','Required parameter featureIn was null or undefined when calling replaceFeatureV1FeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeaturesApi - functional programming interface
 * @export
 */
export const FeaturesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId: string, featureId: string, index?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId: string, featureIn: Array<FeatureIn>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureOut>>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeatureV1FeaturesPost(featureIn: FeatureIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOut>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).createFeatureV1FeaturesPost(featureIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFeatureV1FeaturesFeatureIdDelete(featureId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).deleteFeatureV1FeaturesFeatureIdDelete(featureId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatureV1FeaturesFeatureIdGet(featureId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOut>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).getFeatureV1FeaturesFeatureIdGet(featureId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserFeaturesV1UserFeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeaturesV1FeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureSystemOfFeaturesPaginationOut>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserFeaturesV1UsersUserIdFeaturesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} featureId 
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchFeatureV1FeaturesFeatureIdPatch(featureId: string, patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp: Array<BulkPatchFeatureOp>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId: string, featureId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceFeatureV1FeaturesFeatureIdPut(featureId: string, featureIn: FeatureIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOut>> {
            const localVarAxiosArgs = await FeaturesApiAxiosParamCreator(configuration).replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FeaturesApi - factory interface
 * @export
 */
export const FeaturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId: string, featureId: string, index?: boolean, options?: any): AxiosPromise<void> {
            return FeaturesApiFp(configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId 
         * @param {Array<FeatureIn>} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId: string, featureIn: Array<FeatureIn>, options?: any): AxiosPromise<Array<FeatureOut>> {
            return FeaturesApiFp(configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost(featureIn: FeatureIn, options?: any): AxiosPromise<FeatureOut> {
            return FeaturesApiFp(configuration).createFeatureV1FeaturesPost(featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete(featureId: string, options?: any): AxiosPromise<void> {
            return FeaturesApiFp(configuration).deleteFeatureV1FeaturesFeatureIdDelete(featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet(featureId: string, options?: any): AxiosPromise<FeatureOut> {
            return FeaturesApiFp(configuration).getFeatureV1FeaturesFeatureIdGet(featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return FeaturesApiFp(configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return FeaturesApiFp(configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return FeaturesApiFp(configuration).listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<FeatureSystemOfFeaturesPaginationOut> {
            return FeaturesApiFp(configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return FeaturesApiFp(configuration).listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} featureId 
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch(featureId: string, patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>, options?: any): AxiosPromise<void> {
            return FeaturesApiFp(configuration).patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp: Array<BulkPatchFeatureOp>, options?: any): AxiosPromise<void> {
            return FeaturesApiFp(configuration).patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId: string, featureId: string, options?: any): AxiosPromise<void> {
            return FeaturesApiFp(configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId 
         * @param {FeatureIn} featureIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut(featureId: string, featureIn: FeatureIn, options?: any): AxiosPromise<FeatureOut> {
            return FeaturesApiFp(configuration).replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest
 */
export interface FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * If true, then set the feature as the dataset index.
     * @type {boolean}
     * @memberof FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut
     */
    readonly index?: boolean
}

/**
 * Request parameters for createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost operation in FeaturesApi.
 * @export
 * @interface FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest
 */
export interface FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost
     */
    readonly datasetId: string

    /**
     * 
     * @type {Array<FeatureIn>}
     * @memberof FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost
     */
    readonly featureIn: Array<FeatureIn>
}

/**
 * Request parameters for createFeatureV1FeaturesPost operation in FeaturesApi.
 * @export
 * @interface FeaturesApiCreateFeatureV1FeaturesPostRequest
 */
export interface FeaturesApiCreateFeatureV1FeaturesPostRequest {
    /**
     * 
     * @type {FeatureIn}
     * @memberof FeaturesApiCreateFeatureV1FeaturesPost
     */
    readonly featureIn: FeatureIn
}

/**
 * Request parameters for deleteFeatureV1FeaturesFeatureIdDelete operation in FeaturesApi.
 * @export
 * @interface FeaturesApiDeleteFeatureV1FeaturesFeatureIdDeleteRequest
 */
export interface FeaturesApiDeleteFeatureV1FeaturesFeatureIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiDeleteFeatureV1FeaturesFeatureIdDelete
     */
    readonly featureId: string
}

/**
 * Request parameters for getFeatureV1FeaturesFeatureIdGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest
 */
export interface FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiGetFeatureV1FeaturesFeatureIdGet
     */
    readonly featureId: string
}

/**
 * Request parameters for listAuthenticatedUserFeaturesV1UserFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest
 */
export interface FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest
 */
export interface FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly datasetId: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listFeaturesV1FeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListFeaturesV1FeaturesGetRequest
 */
export interface FeaturesApiListFeaturesV1FeaturesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest
 */
export interface FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly featureId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at' | 'model_count'}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly orderBy?: 'path_count' | 'created_at' | 'model_count'

    /**
     * Number of hops.
     * @type {number}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * Filter results by available dataset license.
     * @type {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>

    /**
     * Only include Features that are members of datasets with this index.
     * @type {Array<string>}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly dsIdx?: Array<string>

    /**
     * Include in response available dataset index ids for filtering.
     * @type {boolean}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly includeDatasetIndexIds?: boolean

    /**
     * Include in response available dataset population ids for filtering.
     * @type {boolean}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly includeDatasetPopIds?: boolean

    /**
     * Stringified list of lists of population id for dataset filtering.
     * @type {string}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly dsPopFilter?: string

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly idsOnly?: boolean
}

/**
 * Request parameters for listUserFeaturesV1UsersUserIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest
 */
export interface FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for patchFeatureV1FeaturesFeatureIdPatch operation in FeaturesApi.
 * @export
 * @interface FeaturesApiPatchFeatureV1FeaturesFeatureIdPatchRequest
 */
export interface FeaturesApiPatchFeatureV1FeaturesFeatureIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiPatchFeatureV1FeaturesFeatureIdPatch
     */
    readonly featureId: string

    /**
     * 
     * @type {PatchFeatureOp | Array<PatchFeatureOp>}
     * @memberof FeaturesApiPatchFeatureV1FeaturesFeatureIdPatch
     */
    readonly patchFeatureOpArrayPatchFeatureOp: PatchFeatureOp | Array<PatchFeatureOp>
}

/**
 * Request parameters for patchMultipleFeaturesV1FeaturesPatch operation in FeaturesApi.
 * @export
 * @interface FeaturesApiPatchMultipleFeaturesV1FeaturesPatchRequest
 */
export interface FeaturesApiPatchMultipleFeaturesV1FeaturesPatchRequest {
    /**
     * 
     * @type {Array<BulkPatchFeatureOp>}
     * @memberof FeaturesApiPatchMultipleFeaturesV1FeaturesPatch
     */
    readonly bulkPatchFeatureOp: Array<BulkPatchFeatureOp>
}

/**
 * Request parameters for removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete operation in FeaturesApi.
 * @export
 * @interface FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest
 */
export interface FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete
     */
    readonly featureId: string
}

/**
 * Request parameters for replaceFeatureV1FeaturesFeatureIdPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiReplaceFeatureV1FeaturesFeatureIdPutRequest
 */
export interface FeaturesApiReplaceFeatureV1FeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiReplaceFeatureV1FeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * 
     * @type {FeatureIn}
     * @memberof FeaturesApiReplaceFeatureV1FeaturesFeatureIdPut
     */
    readonly featureIn: FeatureIn
}

/**
 * FeaturesApi - object-oriented interface
 * @export
 * @class FeaturesApi
 * @extends {BaseAPI}
 */
export class FeaturesApi extends BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters: FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest, options?: any) {
        return FeaturesApiFp(this.configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters: FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest, options?: any) {
        return FeaturesApiFp(this.configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {FeaturesApiCreateFeatureV1FeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public createFeatureV1FeaturesPost(requestParameters: FeaturesApiCreateFeatureV1FeaturesPostRequest, options?: any) {
        return FeaturesApiFp(this.configuration).createFeatureV1FeaturesPost(requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {FeaturesApiDeleteFeatureV1FeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public deleteFeatureV1FeaturesFeatureIdDelete(requestParameters: FeaturesApiDeleteFeatureV1FeaturesFeatureIdDeleteRequest, options?: any) {
        return FeaturesApiFp(this.configuration).deleteFeatureV1FeaturesFeatureIdDelete(requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get feature.
     * @summary Get Feature
     * @param {FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public getFeatureV1FeaturesFeatureIdGet(requestParameters: FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest, options?: any) {
        return FeaturesApiFp(this.configuration).getFeatureV1FeaturesFeatureIdGet(requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters: FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest = {}, options?: any) {
        return FeaturesApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters: FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest, options?: any) {
        return FeaturesApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Features.
     * @summary List Features
     * @param {FeaturesApiListFeaturesV1FeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listFeaturesV1FeaturesGet(requestParameters: FeaturesApiListFeaturesV1FeaturesGetRequest = {}, options?: any) {
        return FeaturesApiFp(this.configuration).listFeaturesV1FeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters: FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest, options?: any) {
        return FeaturesApiFp(this.configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters: FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest, options?: any) {
        return FeaturesApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
     * @summary Patch Feature
     * @param {FeaturesApiPatchFeatureV1FeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public patchFeatureV1FeaturesFeatureIdPatch(requestParameters: FeaturesApiPatchFeatureV1FeaturesFeatureIdPatchRequest, options?: any) {
        return FeaturesApiFp(this.configuration).patchFeatureV1FeaturesFeatureIdPatch(requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {FeaturesApiPatchMultipleFeaturesV1FeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public patchMultipleFeaturesV1FeaturesPatch(requestParameters: FeaturesApiPatchMultipleFeaturesV1FeaturesPatchRequest, options?: any) {
        return FeaturesApiFp(this.configuration).patchMultipleFeaturesV1FeaturesPatch(requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters: FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest, options?: any) {
        return FeaturesApiFp(this.configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {FeaturesApiReplaceFeatureV1FeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public replaceFeatureV1FeaturesFeatureIdPut(requestParameters: FeaturesApiReplaceFeatureV1FeaturesFeatureIdPutRequest, options?: any) {
        return FeaturesApiFp(this.configuration).replaceFeatureV1FeaturesFeatureIdPut(requestParameters.featureId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GraphApi - axios parameter creator
 * @export
 */
export const GraphApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {number} [minRelationshipStrength] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet: async (minRelationshipStrength?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/graph/concept_graph`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/graph/dataset_graph`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GraphApi - functional programming interface
 * @export
 */
export const GraphApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {number} [minRelationshipStrength] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConceptGraphV1GraphConceptGraphGet(minRelationshipStrength?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await GraphApiAxiosParamCreator(configuration).getConceptGraphV1GraphConceptGraphGet(minRelationshipStrength, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetGraphV1GraphDatasetGraphGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>> {
            const localVarAxiosArgs = await GraphApiAxiosParamCreator(configuration).getDatasetGraphV1GraphDatasetGraphGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GraphApi - factory interface
 * @export
 */
export const GraphApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {number} [minRelationshipStrength] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet(minRelationshipStrength?: number, options?: any): AxiosPromise<GraphData> {
            return GraphApiFp(configuration).getConceptGraphV1GraphConceptGraphGet(minRelationshipStrength, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet(options?: any): AxiosPromise<GraphData> {
            return GraphApiFp(configuration).getDatasetGraphV1GraphDatasetGraphGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getConceptGraphV1GraphConceptGraphGet operation in GraphApi.
 * @export
 * @interface GraphApiGetConceptGraphV1GraphConceptGraphGetRequest
 */
export interface GraphApiGetConceptGraphV1GraphConceptGraphGetRequest {
    /**
     * 
     * @type {number}
     * @memberof GraphApiGetConceptGraphV1GraphConceptGraphGet
     */
    readonly minRelationshipStrength?: number
}

/**
 * GraphApi - object-oriented interface
 * @export
 * @class GraphApi
 * @extends {BaseAPI}
 */
export class GraphApi extends BaseAPI {
    /**
     * Fetch dataset graph.
     * @summary Get Concept Graph
     * @param {GraphApiGetConceptGraphV1GraphConceptGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getConceptGraphV1GraphConceptGraphGet(requestParameters: GraphApiGetConceptGraphV1GraphConceptGraphGetRequest = {}, options?: any) {
        return GraphApiFp(this.configuration).getConceptGraphV1GraphConceptGraphGet(requestParameters.minRelationshipStrength, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Dataset Graph
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getDatasetGraphV1GraphDatasetGraphGet(options?: any) {
        return GraphApiFp(this.configuration).getDatasetGraphV1GraphDatasetGraphGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GraphqlApi - axios parameter creator
 * @export
 */
export const GraphqlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost: async (graphQLQuery: GraphQLQuery, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphQLQuery' is not null or undefined
            if (graphQLQuery === null || graphQLQuery === undefined) {
                throw new RequiredError('graphQLQuery','Required parameter graphQLQuery was null or undefined when calling postGraphqlV1GraphqlPost.');
            }
            const localVarPath = `/v1/graphql`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof graphQLQuery !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(graphQLQuery !== undefined ? graphQLQuery : {}) : (graphQLQuery || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GraphqlApi - functional programming interface
 * @export
 */
export const GraphqlApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGraphqlV1GraphqlPost(graphQLQuery: GraphQLQuery, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await GraphqlApiAxiosParamCreator(configuration).postGraphqlV1GraphqlPost(graphQLQuery, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GraphqlApi - factory interface
 * @export
 */
export const GraphqlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost(graphQLQuery: GraphQLQuery, options?: any): AxiosPromise<any> {
            return GraphqlApiFp(configuration).postGraphqlV1GraphqlPost(graphQLQuery, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for postGraphqlV1GraphqlPost operation in GraphqlApi.
 * @export
 * @interface GraphqlApiPostGraphqlV1GraphqlPostRequest
 */
export interface GraphqlApiPostGraphqlV1GraphqlPostRequest {
    /**
     * 
     * @type {GraphQLQuery}
     * @memberof GraphqlApiPostGraphqlV1GraphqlPost
     */
    readonly graphQLQuery: GraphQLQuery
}

/**
 * GraphqlApi - object-oriented interface
 * @export
 * @class GraphqlApi
 * @extends {BaseAPI}
 */
export class GraphqlApi extends BaseAPI {
    /**
     * Forward GraphQL request to SystemDB.
     * @summary Post Graphql
     * @param {GraphqlApiPostGraphqlV1GraphqlPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    public postGraphqlV1GraphqlPost(requestParameters: GraphqlApiPostGraphqlV1GraphqlPostRequest, options?: any) {
        return GraphqlApiFp(this.configuration).postGraphqlV1GraphqlPost(requestParameters.graphQLQuery, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ModeldbApi - axios parameter creator
 * @export
 */
export const ModeldbApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet: async (algorithmId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'algorithmId' is not null or undefined
            if (algorithmId === null || algorithmId === undefined) {
                throw new RequiredError('algorithmId','Required parameter algorithmId was null or undefined when calling getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet.');
            }
            const localVarPath = `/v1/modeldb/algorithms/{algorithm_id}`
                .replace(`{${"algorithm_id"}}`, encodeURIComponent(String(algorithmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet: async (algorithmClass?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/modeldb/algorithms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (algorithmClass !== undefined) {
                localVarQueryParameter['algorithm_class'] = algorithmClass;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModeldbApi - functional programming interface
 * @export
 */
export const ModeldbApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgorithmOut>> {
            const localVarAxiosArgs = await ModeldbApiAxiosParamCreator(configuration).getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgorithmListResult>> {
            const localVarAxiosArgs = await ModeldbApiAxiosParamCreator(configuration).listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ModeldbApi - factory interface
 * @export
 */
export const ModeldbApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId: string, options?: any): AxiosPromise<AlgorithmOut> {
            return ModeldbApiFp(configuration).getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options).then((request) => request(axios, basePath));
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass?: string, options?: any): AxiosPromise<AlgorithmListResult> {
            return ModeldbApiFp(configuration).listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet operation in ModeldbApi.
 * @export
 * @interface ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest
 */
export interface ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet
     */
    readonly algorithmId: string
}

/**
 * Request parameters for listAlgorithmsV1ModeldbAlgorithmsGet operation in ModeldbApi.
 * @export
 * @interface ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest
 */
export interface ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGet
     */
    readonly algorithmClass?: string
}

/**
 * ModeldbApi - object-oriented interface
 * @export
 * @class ModeldbApi
 * @extends {BaseAPI}
 */
export class ModeldbApi extends BaseAPI {
    /**
     * Get algorithms by id.
     * @summary Get Algorithm
     * @param {ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    public getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(requestParameters: ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest, options?: any) {
        return ModeldbApiFp(this.configuration).getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(requestParameters.algorithmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List available algorithms in ModelDB. Search with algorithm class if passed.
     * @summary List Algorithms
     * @param {ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    public listAlgorithmsV1ModeldbAlgorithmsGet(requestParameters: ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest = {}, options?: any) {
        return ModeldbApiFp(this.configuration).listAlgorithmsV1ModeldbAlgorithmsGet(requestParameters.algorithmClass, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ModelsApi - axios parameter creator
 * @export
 */
export const ModelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost: async (modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling createAssociationsV1ModelsModelIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new RequiredError('associationInArrayAssociationIn','Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1ModelsModelIdAssociationsPost.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost: async (studyId: string, modelIn: Array<ModelIn>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling createModelsV1StudiesStudyIdModelsPost.');
            }
            // verify required parameter 'modelIn' is not null or undefined
            if (modelIn === null || modelIn === undefined) {
                throw new RequiredError('modelIn','Required parameter modelIn was null or undefined when calling createModelsV1StudiesStudyIdModelsPost.');
            }
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof modelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(modelIn !== undefined ? modelIn : {}) : (modelIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete: async (modelId: string, associationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new RequiredError('associationId','Required parameter associationId was null or undefined when calling deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete.');
            }
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete: async (modelId: string, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling deleteAssociationsV1ModelsModelIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete' is not null or undefined
            if (bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete === null || bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete === undefined) {
                throw new RequiredError('bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete','Required parameter bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete was null or undefined when calling deleteAssociationsV1ModelsModelIdAssociationsDelete.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete !== undefined ? bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete : {}) : (bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete: async (modelId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling deleteModelV1ModelsModelIdDelete.');
            }
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: async (associationId: string, modelId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new RequiredError('associationId','Required parameter associationId was null or undefined when calling getAssociationV1ModelsModelIdAssociationsAssociationIdGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling getAssociationV1ModelsModelIdAssociationsAssociationIdGet.');
            }
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet: async (modelId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling getModelV1ModelsModelIdGet.');
            }
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: async (modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling listAssociationsV1ModelsModelIdAssociationsGet.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/models`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet: async (studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling listModelsInStudyV1StudiesStudyIdModelsGet.');
            }
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/models`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listUserModelsV1UsersUserIdModelsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch: async (modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling patchAssociationsV1ModelsModelIdAssociationsPatch.');
            }
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            if (bulkPatchAssociationOp === null || bulkPatchAssociationOp === undefined) {
                throw new RequiredError('bulkPatchAssociationOp','Required parameter bulkPatchAssociationOp was null or undefined when calling patchAssociationsV1ModelsModelIdAssociationsPatch.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bulkPatchAssociationOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bulkPatchAssociationOp !== undefined ? bulkPatchAssociationOp : {}) : (bulkPatchAssociationOp || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId 
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch: async (modelId: string, patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling patchModelV1ModelsModelIdPatch.');
            }
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            if (patchModelOpArrayPatchModelOp === null || patchModelOpArrayPatchModelOp === undefined) {
                throw new RequiredError('patchModelOpArrayPatchModelOp','Required parameter patchModelOpArrayPatchModelOp was null or undefined when calling patchModelV1ModelsModelIdPatch.');
            }
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof patchModelOpArrayPatchModelOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patchModelOpArrayPatchModelOp !== undefined ? patchModelOpArrayPatchModelOp : {}) : (patchModelOpArrayPatchModelOp || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId 
         * @param {ModelIn} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut: async (modelId: string, modelIn: ModelIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new RequiredError('modelId','Required parameter modelId was null or undefined when calling replaceModelV1ModelsModelIdPut.');
            }
            // verify required parameter 'modelIn' is not null or undefined
            if (modelIn === null || modelIn === undefined) {
                throw new RequiredError('modelIn','Required parameter modelIn was null or undefined when calling replaceModelV1ModelsModelIdPut.');
            }
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof modelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(modelIn !== undefined ? modelIn : {}) : (modelIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelsApi - functional programming interface
 * @export
 */
export const ModelsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociationsV1ModelsModelIdAssociationsPost(modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationOut>>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModelsV1StudiesStudyIdModelsPost(studyId: string, modelIn: Array<ModelIn>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelOut>>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId: string, associationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId: string, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModelV1ModelsModelIdDelete(modelId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).deleteModelV1ModelsModelIdDelete(modelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId: string, modelId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelV1ModelsModelIdGet(modelId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOut>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).getModelV1ModelsModelIdGet(modelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1ModelsModelIdAssociationsGet(modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserModelsV1UserModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsInStudyV1StudiesStudyIdModelsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).listModelsInStudyV1StudiesStudyIdModelsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsV1ModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserModelsV1UsersUserIdModelsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssociationsV1ModelsModelIdAssociationsPatch(modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId 
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchModelV1ModelsModelIdPatch(modelId: string, patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId 
         * @param {ModelIn} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceModelV1ModelsModelIdPut(modelId: string, modelIn: ModelIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOut>> {
            const localVarAxiosArgs = await ModelsApiAxiosParamCreator(configuration).replaceModelV1ModelsModelIdPut(modelId, modelIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ModelsApi - factory interface
 * @export
 */
export const ModelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId 
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn 
         * @param {boolean} [mergeFeatures] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId: string, associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>, mergeFeatures?: boolean, options?: any): AxiosPromise<Array<AssociationOut>> {
            return ModelsApiFp(configuration).createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId: string, modelIn: Array<ModelIn>, options?: any): AxiosPromise<Array<ModelOut>> {
            return ModelsApiFp(configuration).createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId 
         * @param {string} associationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId: string, associationId: string, options?: any): AxiosPromise<void> {
            return ModelsApiFp(configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId 
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId: string, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options?: any): AxiosPromise<void> {
            return ModelsApiFp(configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete(modelId: string, options?: any): AxiosPromise<void> {
            return ModelsApiFp(configuration).deleteModelV1ModelsModelIdDelete(modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId: string, modelId: string, options?: any): AxiosPromise<AssociationOut> {
            return ModelsApiFp(configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet(modelId: string, options?: any): AxiosPromise<ModelOut> {
            return ModelsApiFp(configuration).getModelV1ModelsModelIdGet(modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return ModelsApiFp(configuration).listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return ModelsApiFp(configuration).listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return ModelsApiFp(configuration).listModelsInStudyV1StudiesStudyIdModelsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return ModelsApiFp(configuration).listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return ModelsApiFp(configuration).listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId 
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId: string, bulkPatchAssociationOp: Array<BulkPatchAssociationOp>, options?: any): AxiosPromise<void> {
            return ModelsApiFp(configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId 
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch(modelId: string, patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>, options?: any): AxiosPromise<void> {
            return ModelsApiFp(configuration).patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId 
         * @param {ModelIn} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut(modelId: string, modelIn: ModelIn, options?: any): AxiosPromise<ModelOut> {
            return ModelsApiFp(configuration).replaceModelV1ModelsModelIdPut(modelId, modelIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAssociationsV1ModelsModelIdAssociationsPost operation in ModelsApi.
 * @export
 * @interface ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest
 */
export interface ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly modelId: string

    /**
     * 
     * @type {AssociationIn | Array<AssociationIn>}
     * @memberof ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly associationInArrayAssociationIn: AssociationIn | Array<AssociationIn>

    /**
     * 
     * @type {boolean}
     * @memberof ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPost
     */
    readonly mergeFeatures?: boolean
}

/**
 * Request parameters for createModelsV1StudiesStudyIdModelsPost operation in ModelsApi.
 * @export
 * @interface ModelsApiCreateModelsV1StudiesStudyIdModelsPostRequest
 */
export interface ModelsApiCreateModelsV1StudiesStudyIdModelsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiCreateModelsV1StudiesStudyIdModelsPost
     */
    readonly studyId: string

    /**
     * 
     * @type {Array<ModelIn>}
     * @memberof ModelsApiCreateModelsV1StudiesStudyIdModelsPost
     */
    readonly modelIn: Array<ModelIn>
}

/**
 * Request parameters for deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete operation in ModelsApi.
 * @export
 * @interface ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest
 */
export interface ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete
     */
    readonly associationId: string
}

/**
 * Request parameters for deleteAssociationsV1ModelsModelIdAssociationsDelete operation in ModelsApi.
 * @export
 * @interface ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest
 */
export interface ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDelete
     */
    readonly modelId: string

    /**
     * 
     * @type {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete}
     * @memberof ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDelete
     */
    readonly bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete: BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
}

/**
 * Request parameters for deleteModelV1ModelsModelIdDelete operation in ModelsApi.
 * @export
 * @interface ModelsApiDeleteModelV1ModelsModelIdDeleteRequest
 */
export interface ModelsApiDeleteModelV1ModelsModelIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiDeleteModelV1ModelsModelIdDelete
     */
    readonly modelId: string
}

/**
 * Request parameters for getAssociationV1ModelsModelIdAssociationsAssociationIdGet operation in ModelsApi.
 * @export
 * @interface ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest
 */
export interface ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly modelId: string
}

/**
 * Request parameters for getModelV1ModelsModelIdGet operation in ModelsApi.
 * @export
 * @interface ModelsApiGetModelV1ModelsModelIdGetRequest
 */
export interface ModelsApiGetModelV1ModelsModelIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetModelV1ModelsModelIdGet
     */
    readonly modelId: string
}

/**
 * Request parameters for listAssociationsV1ModelsModelIdAssociationsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest
 */
export interface ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly modelId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserModelsV1UserModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest
 */
export interface ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'target_name' | 'created_at' | 'last_updated_at'}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly orderBy?: 'target_name' | 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listModelsInStudyV1StudiesStudyIdModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest
 */
export interface ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'target_name' | 'created_at' | 'last_updated_at'}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly orderBy?: 'target_name' | 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listModelsV1ModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListModelsV1ModelsGetRequest
 */
export interface ModelsApiListModelsV1ModelsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'target_name' | 'created_at' | 'last_updated_at'}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly orderBy?: 'target_name' | 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listUserModelsV1UsersUserIdModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListUserModelsV1UsersUserIdModelsGetRequest
 */
export interface ModelsApiListUserModelsV1UsersUserIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'target_name' | 'created_at' | 'last_updated_at'}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly orderBy?: 'target_name' | 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for patchAssociationsV1ModelsModelIdAssociationsPatch operation in ModelsApi.
 * @export
 * @interface ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest
 */
export interface ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatch
     */
    readonly modelId: string

    /**
     * 
     * @type {Array<BulkPatchAssociationOp>}
     * @memberof ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatch
     */
    readonly bulkPatchAssociationOp: Array<BulkPatchAssociationOp>
}

/**
 * Request parameters for patchModelV1ModelsModelIdPatch operation in ModelsApi.
 * @export
 * @interface ModelsApiPatchModelV1ModelsModelIdPatchRequest
 */
export interface ModelsApiPatchModelV1ModelsModelIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiPatchModelV1ModelsModelIdPatch
     */
    readonly modelId: string

    /**
     * 
     * @type {PatchModelOp | Array<PatchModelOp>}
     * @memberof ModelsApiPatchModelV1ModelsModelIdPatch
     */
    readonly patchModelOpArrayPatchModelOp: PatchModelOp | Array<PatchModelOp>
}

/**
 * Request parameters for replaceModelV1ModelsModelIdPut operation in ModelsApi.
 * @export
 * @interface ModelsApiReplaceModelV1ModelsModelIdPutRequest
 */
export interface ModelsApiReplaceModelV1ModelsModelIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiReplaceModelV1ModelsModelIdPut
     */
    readonly modelId: string

    /**
     * 
     * @type {ModelIn}
     * @memberof ModelsApiReplaceModelV1ModelsModelIdPut
     */
    readonly modelIn: ModelIn
}

/**
 * ModelsApi - object-oriented interface
 * @export
 * @class ModelsApi
 * @extends {BaseAPI}
 */
export class ModelsApi extends BaseAPI {
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public createAssociationsV1ModelsModelIdAssociationsPost(requestParameters: ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest, options?: any) {
        return ModelsApiFp(this.configuration).createAssociationsV1ModelsModelIdAssociationsPost(requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {ModelsApiCreateModelsV1StudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public createModelsV1StudiesStudyIdModelsPost(requestParameters: ModelsApiCreateModelsV1StudiesStudyIdModelsPostRequest, options?: any) {
        return ModelsApiFp(this.configuration).createModelsV1StudiesStudyIdModelsPost(requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters: ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest, options?: any) {
        return ModelsApiFp(this.configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters: ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest, options?: any) {
        return ModelsApiFp(this.configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {ModelsApiDeleteModelV1ModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public deleteModelV1ModelsModelIdDelete(requestParameters: ModelsApiDeleteModelV1ModelsModelIdDeleteRequest, options?: any) {
        return ModelsApiFp(this.configuration).deleteModelV1ModelsModelIdDelete(requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Association.
     * @summary Get Association
     * @param {ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters: ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest, options?: any) {
        return ModelsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Model.
     * @summary Get Model
     * @param {ModelsApiGetModelV1ModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public getModelV1ModelsModelIdGet(requestParameters: ModelsApiGetModelV1ModelsModelIdGetRequest, options?: any) {
        return ModelsApiFp(this.configuration).getModelV1ModelsModelIdGet(requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in model.
     * @summary List Associations
     * @param {ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listAssociationsV1ModelsModelIdAssociationsGet(requestParameters: ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest, options?: any) {
        return ModelsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listAuthenticatedUserModelsV1UserModelsGet(requestParameters: ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest = {}, options?: any) {
        return ModelsApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters: ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest, options?: any) {
        return ModelsApiFp(this.configuration).listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Models.
     * @summary List Models
     * @param {ModelsApiListModelsV1ModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listModelsV1ModelsGet(requestParameters: ModelsApiListModelsV1ModelsGetRequest = {}, options?: any) {
        return ModelsApiFp(this.configuration).listModelsV1ModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {ModelsApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listUserModelsV1UsersUserIdModelsGet(requestParameters: ModelsApiListUserModelsV1UsersUserIdModelsGetRequest, options?: any) {
        return ModelsApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters: ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest, options?: any) {
        return ModelsApiFp(this.configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {ModelsApiPatchModelV1ModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public patchModelV1ModelsModelIdPatch(requestParameters: ModelsApiPatchModelV1ModelsModelIdPatchRequest, options?: any) {
        return ModelsApiFp(this.configuration).patchModelV1ModelsModelIdPatch(requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {ModelsApiReplaceModelV1ModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public replaceModelV1ModelsModelIdPut(requestParameters: ModelsApiReplaceModelV1ModelsModelIdPutRequest, options?: any) {
        return ModelsApiFp(this.configuration).replaceModelV1ModelsModelIdPut(requestParameters.modelId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PopulationAttributeValuesApi - axios parameter creator
 * @export
 */
export const PopulationAttributeValuesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: async (datasetId: string, populationAttributeValueId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new RequiredError('populationAttributeValueId','Required parameter populationAttributeValueId was null or undefined when calling addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete: async (populationAttributeValueId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new RequiredError('populationAttributeValueId','Required parameter populationAttributeValueId was null or undefined when calling deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            const localVarPath = `/v1/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet: async (datasetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet: async (populationAttributeValueId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new RequiredError('populationAttributeValueId','Required parameter populationAttributeValueId was null or undefined when calling getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet.');
            }
            const localVarPath = `/v1/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/population_attribute_values`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: async (datasetId: string, populationAttributeValueId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new RequiredError('populationAttributeValueId','Required parameter populationAttributeValueId was null or undefined when calling removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PopulationAttributeValuesApi - functional programming interface
 * @export
 */
export const PopulationAttributeValuesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId: string, populationAttributeValueId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PopulationAttributeValuesApiAxiosParamCreator(configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PopulationAttributeValuesApiAxiosParamCreator(configuration).deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>>> {
            const localVarAxiosArgs = await PopulationAttributeValuesApiAxiosParamCreator(configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>> {
            const localVarAxiosArgs = await PopulationAttributeValuesApiAxiosParamCreator(configuration).getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPopulationAttributeValuesV1PopulationAttributeValuesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PopulationAttributeValuePaginationOut>> {
            const localVarAxiosArgs = await PopulationAttributeValuesApiAxiosParamCreator(configuration).listPopulationAttributeValuesV1PopulationAttributeValuesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId: string, populationAttributeValueId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PopulationAttributeValuesApiAxiosParamCreator(configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PopulationAttributeValuesApi - factory interface
 * @export
 */
export const PopulationAttributeValuesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId: string, populationAttributeValueId: string, options?: any): AxiosPromise<void> {
            return PopulationAttributeValuesApiFp(configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId: string, options?: any): AxiosPromise<void> {
            return PopulationAttributeValuesApiFp(configuration).deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId: string, options?: any): AxiosPromise<Array<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>> {
            return PopulationAttributeValuesApiFp(configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId: string, options?: any): AxiosPromise<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut> {
            return PopulationAttributeValuesApiFp(configuration).getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options?: any): AxiosPromise<PopulationAttributeValuePaginationOut> {
            return PopulationAttributeValuesApiFp(configuration).listPopulationAttributeValuesV1PopulationAttributeValuesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId 
         * @param {string} populationAttributeValueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId: string, populationAttributeValueId: string, options?: any): AxiosPromise<void> {
            return PopulationAttributeValuesApiFp(configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest
 */
export interface PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut
     */
    readonly populationAttributeValueId: string
}

/**
 * Request parameters for deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDeleteRequest
 */
export interface PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly populationAttributeValueId: string
}

/**
 * Request parameters for fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest
 */
export interface PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet
     */
    readonly datasetId: string
}

/**
 * Request parameters for getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGetRequest
 */
export interface PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet
     */
    readonly populationAttributeValueId: string
}

/**
 * Request parameters for listPopulationAttributeValuesV1PopulationAttributeValuesGet operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGetRequest
 */
export interface PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete operation in PopulationAttributeValuesApi.
 * @export
 * @interface PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest
 */
export interface PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete
     */
    readonly populationAttributeValueId: string
}

/**
 * PopulationAttributeValuesApi - object-oriented interface
 * @export
 * @class PopulationAttributeValuesApi
 * @extends {BaseAPI}
 */
export class PopulationAttributeValuesApi extends BaseAPI {
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters: PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest, options?: any) {
        return PopulationAttributeValuesApiFp(this.configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete population attribute value.
     * @summary Delete Population Attribute Value
     * @param {PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters: PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDeleteRequest, options?: any) {
        return PopulationAttributeValuesApiFp(this.configuration).deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters: PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest, options?: any) {
        return PopulationAttributeValuesApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get population attribute value.
     * @summary Get Population Attribute Value
     * @param {PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(requestParameters: PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGetRequest, options?: any) {
        return PopulationAttributeValuesApiFp(this.configuration).getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List population attribute values.
     * @summary List Population Attribute Values
     * @param {PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public listPopulationAttributeValuesV1PopulationAttributeValuesGet(requestParameters: PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGetRequest = {}, options?: any) {
        return PopulationAttributeValuesApiFp(this.configuration).listPopulationAttributeValuesV1PopulationAttributeValuesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    public removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters: PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest, options?: any) {
        return PopulationAttributeValuesApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PopulationAttributesApi - axios parameter creator
 * @export
 */
export const PopulationAttributesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost: async (populationAttributeIn: PopulationAttributeIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeIn' is not null or undefined
            if (populationAttributeIn === null || populationAttributeIn === undefined) {
                throw new RequiredError('populationAttributeIn','Required parameter populationAttributeIn was null or undefined when calling createPopulationAttributeV1PopulationAttributesPost.');
            }
            const localVarPath = `/v1/population_attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof populationAttributeIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(populationAttributeIn !== undefined ? populationAttributeIn : {}) : (populationAttributeIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId 
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost: async (populationAttributeId: string, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn: DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeId' is not null or undefined
            if (populationAttributeId === null || populationAttributeId === undefined) {
                throw new RequiredError('populationAttributeId','Required parameter populationAttributeId was null or undefined when calling createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost.');
            }
            // verify required parameter 'dateRangeInLocationInNumberRangeInCategoryInFreeTextIn' is not null or undefined
            if (dateRangeInLocationInNumberRangeInCategoryInFreeTextIn === null || dateRangeInLocationInNumberRangeInCategoryInFreeTextIn === undefined) {
                throw new RequiredError('dateRangeInLocationInNumberRangeInCategoryInFreeTextIn','Required parameter dateRangeInLocationInNumberRangeInCategoryInFreeTextIn was null or undefined when calling createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost.');
            }
            const localVarPath = `/v1/population_attributes/{population_attribute_id}/values`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dateRangeInLocationInNumberRangeInCategoryInFreeTextIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dateRangeInLocationInNumberRangeInCategoryInFreeTextIn !== undefined ? dateRangeInLocationInNumberRangeInCategoryInFreeTextIn : {}) : (dateRangeInLocationInNumberRangeInCategoryInFreeTextIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete: async (populationAttributeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeId' is not null or undefined
            if (populationAttributeId === null || populationAttributeId === undefined) {
                throw new RequiredError('populationAttributeId','Required parameter populationAttributeId was null or undefined when calling deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete.');
            }
            const localVarPath = `/v1/population_attributes/{population_attribute_id}`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet: async (populationAttributeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeId' is not null or undefined
            if (populationAttributeId === null || populationAttributeId === undefined) {
                throw new RequiredError('populationAttributeId','Required parameter populationAttributeId was null or undefined when calling getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet.');
            }
            const localVarPath = `/v1/population_attributes/{population_attribute_id}`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet: async (populationAttributeId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'populationAttributeId' is not null or undefined
            if (populationAttributeId === null || populationAttributeId === undefined) {
                throw new RequiredError('populationAttributeId','Required parameter populationAttributeId was null or undefined when calling listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet.');
            }
            const localVarPath = `/v1/population_attributes/{population_attribute_id}/values`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/population_attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PopulationAttributesApi - functional programming interface
 * @export
 */
export const PopulationAttributesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn: PopulationAttributeIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PopulationAttributeOut>> {
            const localVarAxiosArgs = await PopulationAttributesApiAxiosParamCreator(configuration).createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId 
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId: string, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn: DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut>> {
            const localVarAxiosArgs = await PopulationAttributesApiAxiosParamCreator(configuration).createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PopulationAttributesApiAxiosParamCreator(configuration).deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PopulationAttributeOut>> {
            const localVarAxiosArgs = await PopulationAttributesApiAxiosParamCreator(configuration).getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PopulationAttributeValuePaginationOut>> {
            const localVarAxiosArgs = await PopulationAttributesApiAxiosParamCreator(configuration).listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPopulationAttributesV1PopulationAttributesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PopulationAttributePaginationOut>> {
            const localVarAxiosArgs = await PopulationAttributesApiAxiosParamCreator(configuration).listPopulationAttributesV1PopulationAttributesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PopulationAttributesApi - factory interface
 * @export
 */
export const PopulationAttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn: PopulationAttributeIn, options?: any): AxiosPromise<PopulationAttributeOut> {
            return PopulationAttributesApiFp(configuration).createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId 
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId: string, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn: DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn, options?: any): AxiosPromise<DateRangeOut | LocationOut | NumberRangeOut | CategoryOut | FreeTextOut> {
            return PopulationAttributesApiFp(configuration).createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId: string, options?: any): AxiosPromise<void> {
            return PopulationAttributesApiFp(configuration).deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId: string, options?: any): AxiosPromise<PopulationAttributeOut> {
            return PopulationAttributesApiFp(configuration).getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options?: any): AxiosPromise<PopulationAttributeValuePaginationOut> {
            return PopulationAttributesApiFp(configuration).listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options?: any): AxiosPromise<PopulationAttributePaginationOut> {
            return PopulationAttributesApiFp(configuration).listPopulationAttributesV1PopulationAttributesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPopulationAttributeV1PopulationAttributesPost operation in PopulationAttributesApi.
 * @export
 * @interface PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPostRequest
 */
export interface PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPostRequest {
    /**
     * 
     * @type {PopulationAttributeIn}
     * @memberof PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPost
     */
    readonly populationAttributeIn: PopulationAttributeIn
}

/**
 * Request parameters for createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost operation in PopulationAttributesApi.
 * @export
 * @interface PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPostRequest
 */
export interface PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost
     */
    readonly populationAttributeId: string

    /**
     * 
     * @type {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn}
     * @memberof PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost
     */
    readonly dateRangeInLocationInNumberRangeInCategoryInFreeTextIn: DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn
}

/**
 * Request parameters for deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete operation in PopulationAttributesApi.
 * @export
 * @interface PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDeleteRequest
 */
export interface PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete
     */
    readonly populationAttributeId: string
}

/**
 * Request parameters for getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet operation in PopulationAttributesApi.
 * @export
 * @interface PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGetRequest
 */
export interface PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet
     */
    readonly populationAttributeId: string
}

/**
 * Request parameters for listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet operation in PopulationAttributesApi.
 * @export
 * @interface PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGetRequest
 */
export interface PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly populationAttributeId: string

    /**
     * Search query.
     * @type {string}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listPopulationAttributesV1PopulationAttributesGet operation in PopulationAttributesApi.
 * @export
 * @interface PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGetRequest
 */
export interface PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGet
     */
    readonly sortBy?: string
}

/**
 * PopulationAttributesApi - object-oriented interface
 * @export
 * @class PopulationAttributesApi
 * @extends {BaseAPI}
 */
export class PopulationAttributesApi extends BaseAPI {
    /**
     * Create a population attribute.
     * @summary Create Population Attribute
     * @param {PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    public createPopulationAttributeV1PopulationAttributesPost(requestParameters: PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPostRequest, options?: any) {
        return PopulationAttributesApiFp(this.configuration).createPopulationAttributeV1PopulationAttributesPost(requestParameters.populationAttributeIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a population attribute value.
     * @summary Create Population Attribute Value
     * @param {PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    public createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(requestParameters: PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPostRequest, options?: any) {
        return PopulationAttributesApiFp(this.configuration).createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(requestParameters.populationAttributeId, requestParameters.dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete population attribute.
     * @summary Delete Population Attribute
     * @param {PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    public deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(requestParameters: PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDeleteRequest, options?: any) {
        return PopulationAttributesApiFp(this.configuration).deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(requestParameters.populationAttributeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get population attribute.
     * @summary Get Population Attribute
     * @param {PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    public getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(requestParameters: PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGetRequest, options?: any) {
        return PopulationAttributesApiFp(this.configuration).getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(requestParameters.populationAttributeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a population attribute\'s values.
     * @summary List A Population Attributes Values
     * @param {PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    public listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(requestParameters: PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGetRequest, options?: any) {
        return PopulationAttributesApiFp(this.configuration).listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(requestParameters.populationAttributeId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List population attributes.
     * @summary List Population Attributes
     * @param {PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    public listPopulationAttributesV1PopulationAttributesGet(requestParameters: PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGetRequest = {}, options?: any) {
        return PopulationAttributesApiFp(this.configuration).listPopulationAttributesV1PopulationAttributesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudiesApi - axios parameter creator
 * @export
 */
export const StudiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut: async (studyId: string, authorId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new RequiredError('authorId','Required parameter authorId was null or undefined when calling addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut.');
            }
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn} studyIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1StudiesPost: async (studyIn: StudyIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyIn' is not null or undefined
            if (studyIn === null || studyIn === undefined) {
                throw new RequiredError('studyIn','Required parameter studyIn was null or undefined when calling createAStudyV1StudiesPost.');
            }
            const localVarPath = `/v1/studies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof studyIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(studyIn !== undefined ? studyIn : {}) : (studyIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost: async (studyId: string, modelIn: Array<ModelIn>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling createModelsV1StudiesStudyIdModelsPost.');
            }
            // verify required parameter 'modelIn' is not null or undefined
            if (modelIn === null || modelIn === undefined) {
                throw new RequiredError('modelIn','Required parameter modelIn was null or undefined when calling createModelsV1StudiesStudyIdModelsPost.');
            }
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof modelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(modelIn !== undefined ? modelIn : {}) : (modelIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete: async (studyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling deleteStudyV1StudiesStudyIdDelete.');
            }
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet: async (studyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling getStudyV1StudiesStudyIdGet.');
            }
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet: async (studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling listAssociationsV1StudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/studies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet: async (studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling listAuthorsV1StudiesStudyIdAuthorsGet.');
            }
            const localVarPath = `/v1/studies/{study_id}/authors`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet: async (studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling listModelsInStudyV1StudiesStudyIdModelsGet.');
            }
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/studies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listUserStudiesV1UsersUserIdStudiesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId 
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1StudiesStudyIdPatch: async (studyId: string, patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling patchStudyEndpointV1StudiesStudyIdPatch.');
            }
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            if (patchStudyOpArrayPatchStudyOp === null || patchStudyOpArrayPatchStudyOp === undefined) {
                throw new RequiredError('patchStudyOpArrayPatchStudyOp','Required parameter patchStudyOpArrayPatchStudyOp was null or undefined when calling patchStudyEndpointV1StudiesStudyIdPatch.');
            }
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof patchStudyOpArrayPatchStudyOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patchStudyOpArrayPatchStudyOp !== undefined ? patchStudyOpArrayPatchStudyOp : {}) : (patchStudyOpArrayPatchStudyOp || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1StudiesStudyIdPublishPost: async (studyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling publishStudyV1StudiesStudyIdPublishPost.');
            }
            const localVarPath = `/v1/studies/{study_id}/publish`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete: async (studyId: string, authorId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new RequiredError('authorId','Required parameter authorId was null or undefined when calling removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete.');
            }
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete: async (studyId: string, tagObjectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new RequiredError('tagObjectId','Required parameter tagObjectId was null or undefined when calling removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete.');
            }
            const localVarPath = `/v1/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut: async (studyId: string, tagObjectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new RequiredError('tagObjectId','Required parameter tagObjectId was null or undefined when calling tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut.');
            }
            const localVarPath = `/v1/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudiesApi - functional programming interface
 * @export
 */
export const StudiesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId: string, authorId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn} studyIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAStudyV1StudiesPost(studyIn: StudyIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyOut>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).createAStudyV1StudiesPost(studyIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModelsV1StudiesStudyIdModelsPost(studyId: string, modelIn: Array<ModelIn>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelOut>>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudyV1StudiesStudyIdDelete(studyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).deleteStudyV1StudiesStudyIdDelete(studyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudyV1StudiesStudyIdGet(studyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyOut>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).getStudyV1StudiesStudyIdGet(studyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1StudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).listAssociationsV1StudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserStudiesV1UserStudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthorsV1StudiesStudyIdAuthorsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorPaginationOut>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsInStudyV1StudiesStudyIdModelsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).listModelsInStudyV1StudiesStudyIdModelsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStudiesV1StudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserStudiesV1UsersUserIdStudiesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId 
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchStudyEndpointV1StudiesStudyIdPatch(studyId: string, patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishStudyV1StudiesStudyIdPublishPost(studyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyOut>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).publishStudyV1StudiesStudyIdPublishPost(studyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId: string, authorId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId: string, tagObjectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId: string, tagObjectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await StudiesApiAxiosParamCreator(configuration).tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StudiesApi - factory interface
 * @export
 */
export const StudiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId: string, authorId: string, options?: any): AxiosPromise<void> {
            return StudiesApiFp(configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn} studyIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1StudiesPost(studyIn: StudyIn, options?: any): AxiosPromise<StudyOut> {
            return StudiesApiFp(configuration).createAStudyV1StudiesPost(studyIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId 
         * @param {Array<ModelIn>} modelIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId: string, modelIn: Array<ModelIn>, options?: any): AxiosPromise<Array<ModelOut>> {
            return StudiesApiFp(configuration).createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete(studyId: string, options?: any): AxiosPromise<void> {
            return StudiesApiFp(configuration).deleteStudyV1StudiesStudyIdDelete(studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet(studyId: string, options?: any): AxiosPromise<StudyOut> {
            return StudiesApiFp(configuration).getStudyV1StudiesStudyIdGet(studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return StudiesApiFp(configuration).listAssociationsV1StudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return StudiesApiFp(configuration).listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, options?: any): AxiosPromise<AuthorPaginationOut> {
            return StudiesApiFp(configuration).listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return StudiesApiFp(configuration).listModelsInStudyV1StudiesStudyIdModelsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return StudiesApiFp(configuration).listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return StudiesApiFp(configuration).listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId 
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1StudiesStudyIdPatch(studyId: string, patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>, options?: any): AxiosPromise<void> {
            return StudiesApiFp(configuration).patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1StudiesStudyIdPublishPost(studyId: string, options?: any): AxiosPromise<StudyOut> {
            return StudiesApiFp(configuration).publishStudyV1StudiesStudyIdPublishPost(studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId: string, authorId: string, options?: any): AxiosPromise<void> {
            return StudiesApiFp(configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId: string, tagObjectId: string, options?: any): AxiosPromise<void> {
            return StudiesApiFp(configuration).removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId 
         * @param {string} tagObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId: string, tagObjectId: string, options?: any): AxiosPromise<void> {
            return StudiesApiFp(configuration).tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut operation in StudiesApi.
 * @export
 * @interface StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest
 */
export interface StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut
     */
    readonly authorId: string
}

/**
 * Request parameters for createAStudyV1StudiesPost operation in StudiesApi.
 * @export
 * @interface StudiesApiCreateAStudyV1StudiesPostRequest
 */
export interface StudiesApiCreateAStudyV1StudiesPostRequest {
    /**
     * 
     * @type {StudyIn}
     * @memberof StudiesApiCreateAStudyV1StudiesPost
     */
    readonly studyIn: StudyIn
}

/**
 * Request parameters for createModelsV1StudiesStudyIdModelsPost operation in StudiesApi.
 * @export
 * @interface StudiesApiCreateModelsV1StudiesStudyIdModelsPostRequest
 */
export interface StudiesApiCreateModelsV1StudiesStudyIdModelsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiCreateModelsV1StudiesStudyIdModelsPost
     */
    readonly studyId: string

    /**
     * 
     * @type {Array<ModelIn>}
     * @memberof StudiesApiCreateModelsV1StudiesStudyIdModelsPost
     */
    readonly modelIn: Array<ModelIn>
}

/**
 * Request parameters for deleteStudyV1StudiesStudyIdDelete operation in StudiesApi.
 * @export
 * @interface StudiesApiDeleteStudyV1StudiesStudyIdDeleteRequest
 */
export interface StudiesApiDeleteStudyV1StudiesStudyIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiDeleteStudyV1StudiesStudyIdDelete
     */
    readonly studyId: string
}

/**
 * Request parameters for getStudyV1StudiesStudyIdGet operation in StudiesApi.
 * @export
 * @interface StudiesApiGetStudyV1StudiesStudyIdGetRequest
 */
export interface StudiesApiGetStudyV1StudiesStudyIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiGetStudyV1StudiesStudyIdGet
     */
    readonly studyId: string
}

/**
 * Request parameters for listAssociationsV1StudiesStudyIdAssociationsGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest
 */
export interface StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserStudiesV1UserStudiesGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest
 */
export interface StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listAuthorsV1StudiesStudyIdAuthorsGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest
 */
export interface StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listModelsInStudyV1StudiesStudyIdModelsGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest
 */
export interface StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'target_name' | 'created_at' | 'last_updated_at'}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly orderBy?: 'target_name' | 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listStudiesV1StudiesGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListStudiesV1StudiesGetRequest
 */
export interface StudiesApiListStudiesV1StudiesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly conceptTag?: string

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly featureRelationship?: string
}

/**
 * Request parameters for listUserStudiesV1UsersUserIdStudiesGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest
 */
export interface StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for patchStudyEndpointV1StudiesStudyIdPatch operation in StudiesApi.
 * @export
 * @interface StudiesApiPatchStudyEndpointV1StudiesStudyIdPatchRequest
 */
export interface StudiesApiPatchStudyEndpointV1StudiesStudyIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiPatchStudyEndpointV1StudiesStudyIdPatch
     */
    readonly studyId: string

    /**
     * 
     * @type {PatchStudyOp | Array<PatchStudyOp>}
     * @memberof StudiesApiPatchStudyEndpointV1StudiesStudyIdPatch
     */
    readonly patchStudyOpArrayPatchStudyOp: PatchStudyOp | Array<PatchStudyOp>
}

/**
 * Request parameters for publishStudyV1StudiesStudyIdPublishPost operation in StudiesApi.
 * @export
 * @interface StudiesApiPublishStudyV1StudiesStudyIdPublishPostRequest
 */
export interface StudiesApiPublishStudyV1StudiesStudyIdPublishPostRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiPublishStudyV1StudiesStudyIdPublishPost
     */
    readonly studyId: string
}

/**
 * Request parameters for removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete operation in StudiesApi.
 * @export
 * @interface StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest
 */
export interface StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete
     */
    readonly authorId: string
}

/**
 * Request parameters for removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete operation in StudiesApi.
 * @export
 * @interface StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDeleteRequest
 */
export interface StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete
     */
    readonly tagObjectId: string
}

/**
 * Request parameters for tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut operation in StudiesApi.
 * @export
 * @interface StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPutRequest
 */
export interface StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut
     */
    readonly tagObjectId: string
}

/**
 * StudiesApi - object-oriented interface
 * @export
 * @class StudiesApi
 * @extends {BaseAPI}
 */
export class StudiesApi extends BaseAPI {
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters: StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest, options?: any) {
        return StudiesApiFp(this.configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Study.
     * @summary Create A Study.
     * @param {StudiesApiCreateAStudyV1StudiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public createAStudyV1StudiesPost(requestParameters: StudiesApiCreateAStudyV1StudiesPostRequest, options?: any) {
        return StudiesApiFp(this.configuration).createAStudyV1StudiesPost(requestParameters.studyIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {StudiesApiCreateModelsV1StudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public createModelsV1StudiesStudyIdModelsPost(requestParameters: StudiesApiCreateModelsV1StudiesStudyIdModelsPostRequest, options?: any) {
        return StudiesApiFp(this.configuration).createModelsV1StudiesStudyIdModelsPost(requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {StudiesApiDeleteStudyV1StudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public deleteStudyV1StudiesStudyIdDelete(requestParameters: StudiesApiDeleteStudyV1StudiesStudyIdDeleteRequest, options?: any) {
        return StudiesApiFp(this.configuration).deleteStudyV1StudiesStudyIdDelete(requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Study.
     * @summary Get Study
     * @param {StudiesApiGetStudyV1StudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public getStudyV1StudiesStudyIdGet(requestParameters: StudiesApiGetStudyV1StudiesStudyIdGetRequest, options?: any) {
        return StudiesApiFp(this.configuration).getStudyV1StudiesStudyIdGet(requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters: StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest, options?: any) {
        return StudiesApiFp(this.configuration).listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters: StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest = {}, options?: any) {
        return StudiesApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listAuthorsV1StudiesStudyIdAuthorsGet(requestParameters: StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest, options?: any) {
        return StudiesApiFp(this.configuration).listAuthorsV1StudiesStudyIdAuthorsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters: StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest, options?: any) {
        return StudiesApiFp(this.configuration).listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Studies.
     * @summary List Studies
     * @param {StudiesApiListStudiesV1StudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listStudiesV1StudiesGet(requestParameters: StudiesApiListStudiesV1StudiesGetRequest = {}, options?: any) {
        return StudiesApiFp(this.configuration).listStudiesV1StudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listUserStudiesV1UsersUserIdStudiesGet(requestParameters: StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest, options?: any) {
        return StudiesApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Study resource with partial update.
     * @summary Patch Study Endpoint
     * @param {StudiesApiPatchStudyEndpointV1StudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public patchStudyEndpointV1StudiesStudyIdPatch(requestParameters: StudiesApiPatchStudyEndpointV1StudiesStudyIdPatchRequest, options?: any) {
        return StudiesApiFp(this.configuration).patchStudyEndpointV1StudiesStudyIdPatch(requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish the study making it visible to other users.
     * @summary Publish Study
     * @param {StudiesApiPublishStudyV1StudiesStudyIdPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public publishStudyV1StudiesStudyIdPublishPost(requestParameters: StudiesApiPublishStudyV1StudiesStudyIdPublishPostRequest, options?: any) {
        return StudiesApiFp(this.configuration).publishStudyV1StudiesStudyIdPublishPost(requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters: StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest, options?: any) {
        return StudiesApiFp(this.configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the study with object with provided id.
     * @summary Remove Object Tag From Study
     * @param {StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters: StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDeleteRequest, options?: any) {
        return StudiesApiFp(this.configuration).removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag the study with object with provided id.
     * @summary Tag Study With Object
     * @param {StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(requestParameters: StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPutRequest, options?: any) {
        return StudiesApiFp(this.configuration).tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId 
         * @param {'path_count' | 'created_at'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet: async (conceptId: string, orderBy?: 'path_count' | 'created_at', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new RequiredError('conceptId','Required parameter conceptId was null or undefined when calling listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet.');
            }
            const localVarPath = `/v1/concepts/{concept_id}/system/concepts`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet: async (featureId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new RequiredError('featureId','Required parameter featureId was null or undefined when calling listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/features/{feature_id}/system/features`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (license) {
                localVarQueryParameter['license'] = license;
            }

            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }

            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }

            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }

            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet: async (teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/system/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (license) {
                localVarQueryParameter['license'] = license;
            }

            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }

            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }

            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }

            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet: async (variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/system/features`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (license) {
                localVarQueryParameter['license'] = license;
            }

            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }

            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }

            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }

            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet: async (teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/system/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet: async (variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/system/variables`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId 
         * @param {'path_count' | 'created_at'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId: string, orderBy?: 'path_count' | 'created_at', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemOfConceptsPaginationOut>> {
            const localVarAxiosArgs = await SystemApiAxiosParamCreator(configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureSystemOfFeaturesPaginationOut>> {
            const localVarAxiosArgs = await SystemApiAxiosParamCreator(configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableSystemOfFeaturesPaginationOut>> {
            const localVarAxiosArgs = await SystemApiAxiosParamCreator(configuration).listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableSystemOfFeaturesPaginationOut>> {
            const localVarAxiosArgs = await SystemApiAxiosParamCreator(configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableSystemOfVariablesPaginationOut>> {
            const localVarAxiosArgs = await SystemApiAxiosParamCreator(configuration).listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableSystemOfVariablesPaginationOut>> {
            const localVarAxiosArgs = await SystemApiAxiosParamCreator(configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId 
         * @param {'path_count' | 'created_at'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId: string, orderBy?: 'path_count' | 'created_at', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<SystemOfConceptsPaginationOut> {
            return SystemApiFp(configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<FeatureSystemOfFeaturesPaginationOut> {
            return SystemApiFp(configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<VariableSystemOfFeaturesPaginationOut> {
            return SystemApiFp(configuration).listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<VariableSystemOfFeaturesPaginationOut> {
            return SystemApiFp(configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<VariableSystemOfVariablesPaginationOut> {
            return SystemApiFp(configuration).listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<VariableSystemOfVariablesPaginationOut> {
            return SystemApiFp(configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet operation in SystemApi.
 * @export
 * @interface SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest
 */
export interface SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly conceptId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at'}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly orderBy?: 'path_count' | 'created_at'

    /**
     * Number of hops.
     * @type {number}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {number}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet
     */
    readonly idsOnly?: boolean
}

/**
 * Request parameters for listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet operation in SystemApi.
 * @export
 * @interface SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest
 */
export interface SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly featureId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at' | 'model_count'}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly orderBy?: 'path_count' | 'created_at' | 'model_count'

    /**
     * Number of hops.
     * @type {number}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * Filter results by available dataset license.
     * @type {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>

    /**
     * Only include Features that are members of datasets with this index.
     * @type {Array<string>}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly dsIdx?: Array<string>

    /**
     * Include in response available dataset index ids for filtering.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly includeDatasetIndexIds?: boolean

    /**
     * Include in response available dataset population ids for filtering.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly includeDatasetPopIds?: boolean

    /**
     * Stringified list of lists of population id for dataset filtering.
     * @type {string}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly dsPopFilter?: string

    /**
     * 
     * @type {number}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet
     */
    readonly idsOnly?: boolean
}

/**
 * Request parameters for listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet operation in SystemApi.
 * @export
 * @interface SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest
 */
export interface SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly variableId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at' | 'model_count'}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly orderBy?: 'path_count' | 'created_at' | 'model_count'

    /**
     * Number of hops.
     * @type {number}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * Filter results by available dataset license.
     * @type {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>

    /**
     * Only include Features that are members of datasets with this index.
     * @type {Array<string>}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly dsIdx?: Array<string>

    /**
     * Include in response available dataset index ids for filtering.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly includeDatasetIndexIds?: boolean

    /**
     * Include in response available dataset population ids for filtering.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly includeDatasetPopIds?: boolean

    /**
     * Stringified list of lists of population id for dataset filtering.
     * @type {string}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly dsPopFilter?: string

    /**
     * 
     * @type {number}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly idsOnly?: boolean
}

/**
 * Request parameters for listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet operation in SystemApi.
 * @export
 * @interface SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest
 */
export interface SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly variableId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at' | 'model_count'}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly orderBy?: 'path_count' | 'created_at' | 'model_count'

    /**
     * Number of hops.
     * @type {number}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * Filter results by available dataset license.
     * @type {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>

    /**
     * Only include Features that are members of datasets with this index.
     * @type {Array<string>}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly dsIdx?: Array<string>

    /**
     * Include in response available dataset index ids for filtering.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly includeDatasetIndexIds?: boolean

    /**
     * Include in response available dataset population ids for filtering.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly includeDatasetPopIds?: boolean

    /**
     * Stringified list of lists of population id for dataset filtering.
     * @type {string}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly dsPopFilter?: string

    /**
     * 
     * @type {number}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly idsOnly?: boolean
}

/**
 * Request parameters for listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet operation in SystemApi.
 * @export
 * @interface SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest
 */
export interface SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly variableId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at' | 'model_count'}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly orderBy?: 'path_count' | 'created_at' | 'model_count'

    /**
     * Number of hops.
     * @type {number}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {number}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly idsOnly?: boolean
}

/**
 * Request parameters for listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet operation in SystemApi.
 * @export
 * @interface SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest
 */
export interface SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly variableId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at' | 'model_count'}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly orderBy?: 'path_count' | 'created_at' | 'model_count'

    /**
     * Number of hops.
     * @type {number}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {number}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly idsOnly?: boolean
}

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * Get the concepts in the requested concept\'s system.
     * @summary List System Of Concepts
     * @param {SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters: SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest, options?: any) {
        return SystemApiFp(this.configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters.conceptId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters: SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest, options?: any) {
        return SystemApiFp(this.configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(requestParameters: SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest, options?: any) {
        return SystemApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters: SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest, options?: any) {
        return SystemApiFp(this.configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(requestParameters: SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest, options?: any) {
        return SystemApiFp(this.configuration).listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters: SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest, options?: any) {
        return SystemApiFp(this.configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a user to a team by email.
         * @summary Add A User To A Team.
         * @param {string} teamSlug 
         * @param {TeamUserIn} teamUserIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToATeamV1TeamsTeamSlugUsersPost: async (teamSlug: string, teamUserIn: TeamUserIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling addAUserToATeamV1TeamsTeamSlugUsersPost.');
            }
            // verify required parameter 'teamUserIn' is not null or undefined
            if (teamUserIn === null || teamUserIn === undefined) {
                throw new RequiredError('teamUserIn','Required parameter teamUserIn was null or undefined when calling addAUserToATeamV1TeamsTeamSlugUsersPost.');
            }
            const localVarPath = `/v1/teams/{team_slug}/users`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof teamUserIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teamUserIn !== undefined ? teamUserIn : {}) : (teamUserIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamSlug 
         * @param {VariableIn} variableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamSlugVariablesPost: async (teamSlug: string, variableIn: VariableIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling createAVariableV1TeamsTeamSlugVariablesPost.');
            }
            // verify required parameter 'variableIn' is not null or undefined
            if (variableIn === null || variableIn === undefined) {
                throw new RequiredError('variableIn','Required parameter variableIn was null or undefined when calling createAVariableV1TeamsTeamSlugVariablesPost.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof variableIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(variableIn !== undefined ? variableIn : {}) : (variableIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamSlug 
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost: async (teamSlug: string, arrayVariableInVariableIn: Array<VariableIn> | VariableIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost.');
            }
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            if (arrayVariableInVariableIn === null || arrayVariableInVariableIn === undefined) {
                throw new RequiredError('arrayVariableInVariableIn','Required parameter arrayVariableInVariableIn was null or undefined when calling createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/bulk`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof arrayVariableInVariableIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(arrayVariableInVariableIn !== undefined ? arrayVariableInVariableIn : {}) : (arrayVariableInVariableIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete: async (teamSlug: string, variableId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamSlugVariablesVariableIdGet: async (teamSlug: string, variableId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling getVariableV1TeamsTeamSlugVariablesVariableIdGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling getVariableV1TeamsTeamSlugVariablesVariableIdGet.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet: async (teamSlug: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet: async (teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/system/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (license) {
                localVarQueryParameter['license'] = license;
            }

            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }

            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }

            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }

            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet: async (teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/system/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamSlug 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamSlugVariablesGet: async (teamSlug: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling listVariablesV1TeamsTeamSlugVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamSlugVariablesVariableIdPatch: async (teamSlug: string, variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling patchVariableV1TeamsTeamSlugVariablesVariableIdPatch.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling patchVariableV1TeamsTeamSlugVariablesVariableIdPatch.');
            }
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            if (patchVariableOpArrayPatchVariableOp === null || patchVariableOpArrayPatchVariableOp === undefined) {
                throw new RequiredError('patchVariableOpArrayPatchVariableOp','Required parameter patchVariableOpArrayPatchVariableOp was null or undefined when calling patchVariableV1TeamsTeamSlugVariablesVariableIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof patchVariableOpArrayPatchVariableOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patchVariableOpArrayPatchVariableOp !== undefined ? patchVariableOpArrayPatchVariableOp : {}) : (patchVariableOpArrayPatchVariableOp || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamV1TeamsPost: async (teamIn: TeamIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamIn' is not null or undefined
            if (teamIn === null || teamIn === undefined) {
                throw new RequiredError('teamIn','Required parameter teamIn was null or undefined when calling postTeamV1TeamsPost.');
            }
            const localVarPath = `/v1/teams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof teamIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teamIn !== undefined ? teamIn : {}) : (teamIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add a user to a team by email.
         * @summary Add A User To A Team.
         * @param {string} teamSlug 
         * @param {TeamUserIn} teamUserIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAUserToATeamV1TeamsTeamSlugUsersPost(teamSlug: string, teamUserIn: TeamUserIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).addAUserToATeamV1TeamsTeamSlugUsersPost(teamSlug, teamUserIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamSlug 
         * @param {VariableIn} variableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAVariableV1TeamsTeamSlugVariablesPost(teamSlug: string, variableIn: VariableIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOut>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).createAVariableV1TeamsTeamSlugVariablesPost(teamSlug, variableIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamSlug 
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug: string, arrayVariableInVariableIn: Array<VariableIn> | VariableIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VariableOut>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug, arrayVariableInVariableIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug: string, variableId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug, variableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug: string, variableId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOut>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug, variableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableSystemOfFeaturesPaginationOut>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableSystemOfVariablesPaginationOut>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamSlug 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVariablesV1TeamsTeamSlugVariablesGet(teamSlug: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).listVariablesV1TeamsTeamSlugVariablesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug: string, variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTeamV1TeamsPost(teamIn: TeamIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamOut>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).postTeamV1TeamsPost(teamIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add a user to a team by email.
         * @summary Add A User To A Team.
         * @param {string} teamSlug 
         * @param {TeamUserIn} teamUserIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToATeamV1TeamsTeamSlugUsersPost(teamSlug: string, teamUserIn: TeamUserIn, options?: any): AxiosPromise<void> {
            return TeamsApiFp(configuration).addAUserToATeamV1TeamsTeamSlugUsersPost(teamSlug, teamUserIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamSlug 
         * @param {VariableIn} variableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamSlugVariablesPost(teamSlug: string, variableIn: VariableIn, options?: any): AxiosPromise<VariableOut> {
            return TeamsApiFp(configuration).createAVariableV1TeamsTeamSlugVariablesPost(teamSlug, variableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamSlug 
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug: string, arrayVariableInVariableIn: Array<VariableIn> | VariableIn, options?: any): AxiosPromise<Array<VariableOut>> {
            return TeamsApiFp(configuration).createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug, arrayVariableInVariableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug: string, variableId: string, options?: any): AxiosPromise<void> {
            return TeamsApiFp(configuration).deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug: string, variableId: string, options?: any): AxiosPromise<VariableOut> {
            return TeamsApiFp(configuration).getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return TeamsApiFp(configuration).listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<VariableSystemOfFeaturesPaginationOut> {
            return TeamsApiFp(configuration).listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<VariableSystemOfVariablesPaginationOut> {
            return TeamsApiFp(configuration).listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamSlug 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamSlugVariablesGet(teamSlug: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options?: any): AxiosPromise<VariablePaginationOut> {
            return TeamsApiFp(configuration).listVariablesV1TeamsTeamSlugVariablesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug: string, variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options?: any): AxiosPromise<void> {
            return TeamsApiFp(configuration).patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamV1TeamsPost(teamIn: TeamIn, options?: any): AxiosPromise<TeamOut> {
            return TeamsApiFp(configuration).postTeamV1TeamsPost(teamIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAUserToATeamV1TeamsTeamSlugUsersPost operation in TeamsApi.
 * @export
 * @interface TeamsApiAddAUserToATeamV1TeamsTeamSlugUsersPostRequest
 */
export interface TeamsApiAddAUserToATeamV1TeamsTeamSlugUsersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiAddAUserToATeamV1TeamsTeamSlugUsersPost
     */
    readonly teamSlug: string

    /**
     * 
     * @type {TeamUserIn}
     * @memberof TeamsApiAddAUserToATeamV1TeamsTeamSlugUsersPost
     */
    readonly teamUserIn: TeamUserIn
}

/**
 * Request parameters for createAVariableV1TeamsTeamSlugVariablesPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateAVariableV1TeamsTeamSlugVariablesPostRequest
 */
export interface TeamsApiCreateAVariableV1TeamsTeamSlugVariablesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateAVariableV1TeamsTeamSlugVariablesPost
     */
    readonly teamSlug: string

    /**
     * 
     * @type {VariableIn}
     * @memberof TeamsApiCreateAVariableV1TeamsTeamSlugVariablesPost
     */
    readonly variableIn: VariableIn
}

/**
 * Request parameters for createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPostRequest
 */
export interface TeamsApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPost
     */
    readonly teamSlug: string

    /**
     * 
     * @type {Array<VariableIn> | VariableIn}
     * @memberof TeamsApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPost
     */
    readonly arrayVariableInVariableIn: Array<VariableIn> | VariableIn
}

/**
 * Request parameters for deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete operation in TeamsApi.
 * @export
 * @interface TeamsApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDeleteRequest
 */
export interface TeamsApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDelete
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDelete
     */
    readonly variableId: string
}

/**
 * Request parameters for getVariableV1TeamsTeamSlugVariablesVariableIdGet operation in TeamsApi.
 * @export
 * @interface TeamsApiGetVariableV1TeamsTeamSlugVariablesVariableIdGetRequest
 */
export interface TeamsApiGetVariableV1TeamsTeamSlugVariablesVariableIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetVariableV1TeamsTeamSlugVariablesVariableIdGet
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiGetVariableV1TeamsTeamSlugVariablesVariableIdGet
     */
    readonly variableId: string
}

/**
 * Request parameters for listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest
 */
export interface TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly variableId: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest
 */
export interface TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly variableId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at' | 'model_count'}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly orderBy?: 'path_count' | 'created_at' | 'model_count'

    /**
     * Number of hops.
     * @type {number}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * Filter results by available dataset license.
     * @type {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>

    /**
     * Only include Features that are members of datasets with this index.
     * @type {Array<string>}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly dsIdx?: Array<string>

    /**
     * Include in response available dataset index ids for filtering.
     * @type {boolean}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly includeDatasetIndexIds?: boolean

    /**
     * Include in response available dataset population ids for filtering.
     * @type {boolean}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly includeDatasetPopIds?: boolean

    /**
     * Stringified list of lists of population id for dataset filtering.
     * @type {string}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly dsPopFilter?: string

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly idsOnly?: boolean
}

/**
 * Request parameters for listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest
 */
export interface TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly variableId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at' | 'model_count'}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly orderBy?: 'path_count' | 'created_at' | 'model_count'

    /**
     * Number of hops.
     * @type {number}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly idsOnly?: boolean
}

/**
 * Request parameters for listVariablesV1TeamsTeamSlugVariablesGet operation in TeamsApi.
 * @export
 * @interface TeamsApiListVariablesV1TeamsTeamSlugVariablesGetRequest
 */
export interface TeamsApiListVariablesV1TeamsTeamSlugVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly teamSlug: string

    /**
     * Search query.
     * @type {string}
     * @memberof TeamsApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof TeamsApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof TeamsApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TeamsApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof TeamsApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof TeamsApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof TeamsApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof TeamsApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof TeamsApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof TeamsApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly inVariableGraph?: boolean
}

/**
 * Request parameters for patchVariableV1TeamsTeamSlugVariablesVariableIdPatch operation in TeamsApi.
 * @export
 * @interface TeamsApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatchRequest
 */
export interface TeamsApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatch
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatch
     */
    readonly variableId: string

    /**
     * 
     * @type {PatchVariableOp | Array<PatchVariableOp>}
     * @memberof TeamsApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatch
     */
    readonly patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>
}

/**
 * Request parameters for postTeamV1TeamsPost operation in TeamsApi.
 * @export
 * @interface TeamsApiPostTeamV1TeamsPostRequest
 */
export interface TeamsApiPostTeamV1TeamsPostRequest {
    /**
     * 
     * @type {TeamIn}
     * @memberof TeamsApiPostTeamV1TeamsPost
     */
    readonly teamIn: TeamIn
}

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * Add a user to a team by email.
     * @summary Add A User To A Team.
     * @param {TeamsApiAddAUserToATeamV1TeamsTeamSlugUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public addAUserToATeamV1TeamsTeamSlugUsersPost(requestParameters: TeamsApiAddAUserToATeamV1TeamsTeamSlugUsersPostRequest, options?: any) {
        return TeamsApiFp(this.configuration).addAUserToATeamV1TeamsTeamSlugUsersPost(requestParameters.teamSlug, requestParameters.teamUserIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {TeamsApiCreateAVariableV1TeamsTeamSlugVariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createAVariableV1TeamsTeamSlugVariablesPost(requestParameters: TeamsApiCreateAVariableV1TeamsTeamSlugVariablesPostRequest, options?: any) {
        return TeamsApiFp(this.configuration).createAVariableV1TeamsTeamSlugVariablesPost(requestParameters.teamSlug, requestParameters.variableIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {TeamsApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(requestParameters: TeamsApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPostRequest, options?: any) {
        return TeamsApiFp(this.configuration).createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(requestParameters.teamSlug, requestParameters.arrayVariableInVariableIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {TeamsApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(requestParameters: TeamsApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDeleteRequest, options?: any) {
        return TeamsApiFp(this.configuration).deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(requestParameters.teamSlug, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Variable.
     * @summary Get Variable
     * @param {TeamsApiGetVariableV1TeamsTeamSlugVariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getVariableV1TeamsTeamSlugVariablesVariableIdGet(requestParameters: TeamsApiGetVariableV1TeamsTeamSlugVariablesVariableIdGetRequest, options?: any) {
        return TeamsApiFp(this.configuration).getVariableV1TeamsTeamSlugVariablesVariableIdGet(requestParameters.teamSlug, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(requestParameters: TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest, options?: any) {
        return TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(requestParameters: TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest, options?: any) {
        return TeamsApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(requestParameters: TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest, options?: any) {
        return TeamsApiFp(this.configuration).listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Variables.
     * @summary List Variables
     * @param {TeamsApiListVariablesV1TeamsTeamSlugVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listVariablesV1TeamsTeamSlugVariablesGet(requestParameters: TeamsApiListVariablesV1TeamsTeamSlugVariablesGetRequest, options?: any) {
        return TeamsApiFp(this.configuration).listVariablesV1TeamsTeamSlugVariablesGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {TeamsApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(requestParameters: TeamsApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatchRequest, options?: any) {
        return TeamsApiFp(this.configuration).patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(requestParameters.teamSlug, requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Team.
     * @summary Post Team
     * @param {TeamsApiPostTeamV1TeamsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public postTeamV1TeamsPost(requestParameters: TeamsApiPostTeamV1TeamsPostRequest, options?: any) {
        return TeamsApiFp(this.configuration).postTeamV1TeamsPost(requestParameters.teamIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TimelineApi - axios parameter creator
 * @export
 */
export const TimelineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<'variable' | 'dataset' | 'feature' | 'study' | 'model' | 'author' | 'concept' | 'population_attribute' | 'population_attribute_value' | 'association' | 'team'>} [types] 
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet: async (types?: Set<'variable' | 'dataset' | 'feature' | 'study' | 'model' | 'author' | 'concept' | 'population_attribute' | 'population_attribute_value' | 'association' | 'team'>, cursor?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/timeline`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (types) {
                localVarQueryParameter['types'] = types;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimelineApi - functional programming interface
 * @export
 */
export const TimelineApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<'variable' | 'dataset' | 'feature' | 'study' | 'model' | 'author' | 'concept' | 'population_attribute' | 'population_attribute_value' | 'association' | 'team'>} [types] 
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGlobalTimelineV1TimelineGet(types?: Set<'variable' | 'dataset' | 'feature' | 'study' | 'model' | 'author' | 'concept' | 'population_attribute' | 'population_attribute_value' | 'association' | 'team'>, cursor?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimelinePaginationOut>> {
            const localVarAxiosArgs = await TimelineApiAxiosParamCreator(configuration).fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TimelineApi - factory interface
 * @export
 */
export const TimelineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<'variable' | 'dataset' | 'feature' | 'study' | 'model' | 'author' | 'concept' | 'population_attribute' | 'population_attribute_value' | 'association' | 'team'>} [types] 
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet(types?: Set<'variable' | 'dataset' | 'feature' | 'study' | 'model' | 'author' | 'concept' | 'population_attribute' | 'population_attribute_value' | 'association' | 'team'>, cursor?: string, limit?: number, options?: any): AxiosPromise<TimelinePaginationOut> {
            return TimelineApiFp(configuration).fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for fetchGlobalTimelineV1TimelineGet operation in TimelineApi.
 * @export
 * @interface TimelineApiFetchGlobalTimelineV1TimelineGetRequest
 */
export interface TimelineApiFetchGlobalTimelineV1TimelineGetRequest {
    /**
     * 
     * @type {Set<'variable' | 'dataset' | 'feature' | 'study' | 'model' | 'author' | 'concept' | 'population_attribute' | 'population_attribute_value' | 'association' | 'team'>}
     * @memberof TimelineApiFetchGlobalTimelineV1TimelineGet
     */
    readonly types?: Set<'variable' | 'dataset' | 'feature' | 'study' | 'model' | 'author' | 'concept' | 'population_attribute' | 'population_attribute_value' | 'association' | 'team'>

    /**
     * A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
     * @type {string}
     * @memberof TimelineApiFetchGlobalTimelineV1TimelineGet
     */
    readonly cursor?: string

    /**
     * 
     * @type {number}
     * @memberof TimelineApiFetchGlobalTimelineV1TimelineGet
     */
    readonly limit?: number
}

/**
 * TimelineApi - object-oriented interface
 * @export
 * @class TimelineApi
 * @extends {BaseAPI}
 */
export class TimelineApi extends BaseAPI {
    /**
     * Fetch resource creation timeline in reverse chronological order.
     * @summary Fetch Global Timeline
     * @param {TimelineApiFetchGlobalTimelineV1TimelineGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimelineApi
     */
    public fetchGlobalTimelineV1TimelineGet(requestParameters: TimelineApiFetchGlobalTimelineV1TimelineGetRequest = {}, options?: any) {
        return TimelineApiFp(this.configuration).fetchGlobalTimelineV1TimelineGet(requestParameters.types, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1UserPost: async (userProfileIn: UserProfileIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userProfileIn' is not null or undefined
            if (userProfileIn === null || userProfileIn === undefined) {
                throw new RequiredError('userProfileIn','Required parameter userProfileIn was null or undefined when calling createAUserV1UserPost.');
            }
            const localVarPath = `/v1/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userProfileIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userProfileIn !== undefined ? userProfileIn : {}) : (userProfileIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet: async (includeAvatar?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet: async (userId: string, includeAvatar?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserV1UsersUserIdGet.');
            }
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet: async (studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new RequiredError('studyId','Required parameter studyId was null or undefined when calling listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/user/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/concepts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/models`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/studies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listUserConceptsV1UsersUserIdConceptsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listUserDatasetsV1UsersUserIdDatasetsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listUserFeaturesV1UsersUserIdFeaturesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listUserModelsV1UsersUserIdModelsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listUserStudiesV1UsersUserIdStudiesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listUserVariablesV1UsersUserIdVariablesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut: async (userProfileIn: UserProfileIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userProfileIn' is not null or undefined
            if (userProfileIn === null || userProfileIn === undefined) {
                throw new RequiredError('userProfileIn','Required parameter userProfileIn was null or undefined when calling updateAuthenticatedUserProfileV1UserPut.');
            }
            const localVarPath = `/v1/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userProfileIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userProfileIn !== undefined ? userProfileIn : {}) : (userProfileIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAUserV1UserPost(userProfileIn: UserProfileIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).createAUserV1UserPost(userProfileIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatedUserV1UserGet(includeAvatar?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getAuthenticatedUserV1UserGet(includeAvatar, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserV1UsersUserIdGet(userId: string, includeAvatar?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPublicProfileOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getUserV1UsersUserIdGet(userId, includeAvatar, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserConceptsV1UserConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserDatasetsV1UserDatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserFeaturesV1UserFeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserModelsV1UserModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserStudiesV1UserStudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserVariablesV1UserVariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserConceptsV1UsersUserIdConceptsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserDatasetsV1UsersUserIdDatasetsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserFeaturesV1UsersUserIdFeaturesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserModelsV1UsersUserIdModelsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserStudiesV1UsersUserIdStudiesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserVariablesV1UsersUserIdVariablesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthenticatedUserProfileV1UserPut(userProfileIn: UserProfileIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).updateAuthenticatedUserProfileV1UserPut(userProfileIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1UserPost(userProfileIn: UserProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return UsersApiFp(configuration).createAUserV1UserPost(userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet(includeAvatar?: boolean, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return UsersApiFp(configuration).getAuthenticatedUserV1UserGet(includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet(userId: string, includeAvatar?: boolean, options?: any): AxiosPromise<UserPublicProfileOut> {
            return UsersApiFp(configuration).getUserV1UsersUserIdGet(userId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return UsersApiFp(configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return UsersApiFp(configuration).listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return UsersApiFp(configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return UsersApiFp(configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return UsersApiFp(configuration).listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return UsersApiFp(configuration).listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options?: any): AxiosPromise<VariablePaginationOut> {
            return UsersApiFp(configuration).listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return UsersApiFp(configuration).listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'popularity' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return UsersApiFp(configuration).listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return UsersApiFp(configuration).listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'target_name' | 'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'target_name' | 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return UsersApiFp(configuration).listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return UsersApiFp(configuration).listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options?: any): AxiosPromise<VariablePaginationOut> {
            return UsersApiFp(configuration).listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut(userProfileIn: UserProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return UsersApiFp(configuration).updateAuthenticatedUserProfileV1UserPut(userProfileIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAUserV1UserPost operation in UsersApi.
 * @export
 * @interface UsersApiCreateAUserV1UserPostRequest
 */
export interface UsersApiCreateAUserV1UserPostRequest {
    /**
     * 
     * @type {UserProfileIn}
     * @memberof UsersApiCreateAUserV1UserPost
     */
    readonly userProfileIn: UserProfileIn
}

/**
 * Request parameters for getAuthenticatedUserV1UserGet operation in UsersApi.
 * @export
 * @interface UsersApiGetAuthenticatedUserV1UserGetRequest
 */
export interface UsersApiGetAuthenticatedUserV1UserGetRequest {
    /**
     * Include the user\&#39;s avatar.
     * @type {boolean}
     * @memberof UsersApiGetAuthenticatedUserV1UserGet
     */
    readonly includeAvatar?: boolean
}

/**
 * Request parameters for getUserV1UsersUserIdGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUserV1UsersUserIdGetRequest
 */
export interface UsersApiGetUserV1UsersUserIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUserV1UsersUserIdGet
     */
    readonly userId: string

    /**
     * 
     * @type {boolean}
     * @memberof UsersApiGetUserV1UsersUserIdGet
     */
    readonly includeAvatar?: boolean
}

/**
 * Request parameters for listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest
 */
export interface UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserConceptsV1UserConceptsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest
 */
export interface UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listAuthenticatedUserDatasetsV1UserDatasetsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest
 */
export interface UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'popularity' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listAuthenticatedUserFeaturesV1UserFeaturesGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest
 */
export interface UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listAuthenticatedUserModelsV1UserModelsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest
 */
export interface UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'target_name' | 'created_at' | 'last_updated_at'}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly orderBy?: 'target_name' | 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listAuthenticatedUserStudiesV1UserStudiesGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest
 */
export interface UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listAuthenticatedUserVariablesV1UserVariablesGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest
 */
export interface UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly inVariableGraph?: boolean
}

/**
 * Request parameters for listUserConceptsV1UsersUserIdConceptsGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest
 */
export interface UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listUserDatasetsV1UsersUserIdDatasetsGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest
 */
export interface UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'popularity' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly orderBy?: 'popularity' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listUserFeaturesV1UsersUserIdFeaturesGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest
 */
export interface UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listUserModelsV1UsersUserIdModelsGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserModelsV1UsersUserIdModelsGetRequest
 */
export interface UsersApiListUserModelsV1UsersUserIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'target_name' | 'created_at' | 'last_updated_at'}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly orderBy?: 'target_name' | 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listUserStudiesV1UsersUserIdStudiesGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest
 */
export interface UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at' | 'name'}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listUserVariablesV1UsersUserIdVariablesGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest
 */
export interface UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly inVariableGraph?: boolean
}

/**
 * Request parameters for updateAuthenticatedUserProfileV1UserPut operation in UsersApi.
 * @export
 * @interface UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest
 */
export interface UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest {
    /**
     * 
     * @type {UserProfileIn}
     * @memberof UsersApiUpdateAuthenticatedUserProfileV1UserPut
     */
    readonly userProfileIn: UserProfileIn
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Create a new user.
     * @summary Create A User.
     * @param {UsersApiCreateAUserV1UserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createAUserV1UserPost(requestParameters: UsersApiCreateAUserV1UserPostRequest, options?: any) {
        return UsersApiFp(this.configuration).createAUserV1UserPost(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getAuthenticatedUserV1UserGet(requestParameters: UsersApiGetAuthenticatedUserV1UserGetRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).getAuthenticatedUserV1UserGet(requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1UsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserV1UsersUserIdGet(requestParameters: UsersApiGetUserV1UsersUserIdGetRequest, options?: any) {
        return UsersApiFp(this.configuration).getUserV1UsersUserIdGet(requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters: UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest, options?: any) {
        return UsersApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters: UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters: UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters: UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserModelsV1UserModelsGet(requestParameters: UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters: UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters: UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserConceptsV1UsersUserIdConceptsGet(requestParameters: UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest, options?: any) {
        return UsersApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters: UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest, options?: any) {
        return UsersApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters: UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest, options?: any) {
        return UsersApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {UsersApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserModelsV1UsersUserIdModelsGet(requestParameters: UsersApiListUserModelsV1UsersUserIdModelsGetRequest, options?: any) {
        return UsersApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserStudiesV1UsersUserIdStudiesGet(requestParameters: UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest, options?: any) {
        return UsersApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserVariablesV1UsersUserIdVariablesGet(requestParameters: UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest, options?: any) {
        return UsersApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateAuthenticatedUserProfileV1UserPut(requestParameters: UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest, options?: any) {
        return UsersApiFp(this.configuration).updateAuthenticatedUserProfileV1UserPut(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VariablesApi - axios parameter creator
 * @export
 */
export const VariablesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamSlug 
         * @param {VariableIn} variableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamSlugVariablesPost: async (teamSlug: string, variableIn: VariableIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling createAVariableV1TeamsTeamSlugVariablesPost.');
            }
            // verify required parameter 'variableIn' is not null or undefined
            if (variableIn === null || variableIn === undefined) {
                throw new RequiredError('variableIn','Required parameter variableIn was null or undefined when calling createAVariableV1TeamsTeamSlugVariablesPost.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof variableIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(variableIn !== undefined ? variableIn : {}) : (variableIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn 
         * @param {string} [teamSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost: async (variableIn: VariableIn, teamSlug?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableIn' is not null or undefined
            if (variableIn === null || variableIn === undefined) {
                throw new RequiredError('variableIn','Required parameter variableIn was null or undefined when calling createAVariableV1VariablesPost.');
            }
            const localVarPath = `/v1/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof variableIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(variableIn !== undefined ? variableIn : {}) : (variableIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamSlug 
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost: async (teamSlug: string, arrayVariableInVariableIn: Array<VariableIn> | VariableIn, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost.');
            }
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            if (arrayVariableInVariableIn === null || arrayVariableInVariableIn === undefined) {
                throw new RequiredError('arrayVariableInVariableIn','Required parameter arrayVariableInVariableIn was null or undefined when calling createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/bulk`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof arrayVariableInVariableIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(arrayVariableInVariableIn !== undefined ? arrayVariableInVariableIn : {}) : (arrayVariableInVariableIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {string} [teamSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1VariablesBulkPost: async (arrayVariableInVariableIn: Array<VariableIn> | VariableIn, teamSlug?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            if (arrayVariableInVariableIn === null || arrayVariableInVariableIn === undefined) {
                throw new RequiredError('arrayVariableInVariableIn','Required parameter arrayVariableInVariableIn was null or undefined when calling createMultipleVariablesV1VariablesBulkPost.');
            }
            const localVarPath = `/v1/variables/bulk`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof arrayVariableInVariableIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(arrayVariableInVariableIn !== undefined ? arrayVariableInVariableIn : {}) : (arrayVariableInVariableIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete: async (teamSlug: string, variableId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete: async (variableId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling deleteVariableV1VariablesVariableIdDelete.');
            }
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamSlugVariablesVariableIdGet: async (teamSlug: string, variableId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling getVariableV1TeamsTeamSlugVariablesVariableIdGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling getVariableV1TeamsTeamSlugVariablesVariableIdGet.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet: async (variableId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling getVariableV1VariablesVariableIdGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet: async (teamSlug: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: async (variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listAssociationsV1VariablesVariableIdAssociationsGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet: async (teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/system/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (license) {
                localVarQueryParameter['license'] = license;
            }

            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }

            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }

            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }

            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet: async (variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/system/features`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (license) {
                localVarQueryParameter['license'] = license;
            }

            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }

            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }

            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }

            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet: async (teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/system/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet: async (variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/system/variables`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }

            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }

            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }

            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listUserVariablesV1UsersUserIdVariablesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamSlug 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamSlugVariablesGet: async (teamSlug: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling listVariablesV1TeamsTeamSlugVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {string} [teamSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, teamSlug?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamSlugVariablesVariableIdPatch: async (teamSlug: string, variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamSlug' is not null or undefined
            if (teamSlug === null || teamSlug === undefined) {
                throw new RequiredError('teamSlug','Required parameter teamSlug was null or undefined when calling patchVariableV1TeamsTeamSlugVariablesVariableIdPatch.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling patchVariableV1TeamsTeamSlugVariablesVariableIdPatch.');
            }
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            if (patchVariableOpArrayPatchVariableOp === null || patchVariableOpArrayPatchVariableOp === undefined) {
                throw new RequiredError('patchVariableOpArrayPatchVariableOp','Required parameter patchVariableOpArrayPatchVariableOp was null or undefined when calling patchVariableV1TeamsTeamSlugVariablesVariableIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof patchVariableOpArrayPatchVariableOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patchVariableOpArrayPatchVariableOp !== undefined ? patchVariableOpArrayPatchVariableOp : {}) : (patchVariableOpArrayPatchVariableOp || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch: async (variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new RequiredError('variableId','Required parameter variableId was null or undefined when calling patchVariableV1VariablesVariableIdPatch.');
            }
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            if (patchVariableOpArrayPatchVariableOp === null || patchVariableOpArrayPatchVariableOp === undefined) {
                throw new RequiredError('patchVariableOpArrayPatchVariableOp','Required parameter patchVariableOpArrayPatchVariableOp was null or undefined when calling patchVariableV1VariablesVariableIdPatch.');
            }
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof patchVariableOpArrayPatchVariableOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patchVariableOpArrayPatchVariableOp !== undefined ? patchVariableOpArrayPatchVariableOp : {}) : (patchVariableOpArrayPatchVariableOp || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VariablesApi - functional programming interface
 * @export
 */
export const VariablesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamSlug 
         * @param {VariableIn} variableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAVariableV1TeamsTeamSlugVariablesPost(teamSlug: string, variableIn: VariableIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).createAVariableV1TeamsTeamSlugVariablesPost(teamSlug, variableIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn 
         * @param {string} [teamSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAVariableV1VariablesPost(variableIn: VariableIn, teamSlug?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).createAVariableV1VariablesPost(variableIn, teamSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamSlug 
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug: string, arrayVariableInVariableIn: Array<VariableIn> | VariableIn, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VariableOut>>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug, arrayVariableInVariableIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {string} [teamSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn: Array<VariableIn> | VariableIn, teamSlug?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VariableOut>>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug: string, variableId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug, variableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVariableV1VariablesVariableIdDelete(variableId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).deleteVariableV1VariablesVariableIdDelete(variableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug: string, variableId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug, variableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableV1VariablesVariableIdGet(variableId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).getVariableV1VariablesVariableIdGet(variableId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1VariablesVariableIdAssociationsGet(variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserVariablesV1UserVariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableSystemOfFeaturesPaginationOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableSystemOfFeaturesPaginationOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableSystemOfVariablesPaginationOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableSystemOfVariablesPaginationOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserVariablesV1UsersUserIdVariablesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamSlug 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVariablesV1TeamsTeamSlugVariablesGet(teamSlug: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).listVariablesV1TeamsTeamSlugVariablesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {string} [teamSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVariablesV1VariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, teamSlug?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, teamSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug: string, variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchVariableV1VariablesVariableIdPatch(variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await VariablesApiAxiosParamCreator(configuration).patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VariablesApi - factory interface
 * @export
 */
export const VariablesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamSlug 
         * @param {VariableIn} variableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamSlugVariablesPost(teamSlug: string, variableIn: VariableIn, options?: any): AxiosPromise<VariableOut> {
            return VariablesApiFp(configuration).createAVariableV1TeamsTeamSlugVariablesPost(teamSlug, variableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn 
         * @param {string} [teamSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost(variableIn: VariableIn, teamSlug?: string, options?: any): AxiosPromise<VariableOut> {
            return VariablesApiFp(configuration).createAVariableV1VariablesPost(variableIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamSlug 
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug: string, arrayVariableInVariableIn: Array<VariableIn> | VariableIn, options?: any): AxiosPromise<Array<VariableOut>> {
            return VariablesApiFp(configuration).createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug, arrayVariableInVariableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn 
         * @param {string} [teamSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn: Array<VariableIn> | VariableIn, teamSlug?: string, options?: any): AxiosPromise<Array<VariableOut>> {
            return VariablesApiFp(configuration).createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug: string, variableId: string, options?: any): AxiosPromise<void> {
            return VariablesApiFp(configuration).deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete(variableId: string, options?: any): AxiosPromise<void> {
            return VariablesApiFp(configuration).deleteVariableV1VariablesVariableIdDelete(variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug: string, variableId: string, options?: any): AxiosPromise<VariableOut> {
            return VariablesApiFp(configuration).getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet(variableId: string, options?: any): AxiosPromise<VariableOut> {
            return VariablesApiFp(configuration).getVariableV1VariablesVariableIdGet(variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug: string, variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return VariablesApiFp(configuration).listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'created_at' | 'last_updated_at'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'created_at' | 'last_updated_at', ordering?: 'asc' | 'desc', sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return VariablesApiFp(configuration).listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options?: any): AxiosPromise<VariablePaginationOut> {
            return VariablesApiFp(configuration).listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<VariableSystemOfFeaturesPaginationOut> {
            return VariablesApiFp(configuration).listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>, dsIdx?: Array<string>, includeDatasetIndexIds?: boolean, includeDatasetPopIds?: boolean, dsPopFilter?: string, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<VariableSystemOfFeaturesPaginationOut> {
            return VariablesApiFp(configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug: string, variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<VariableSystemOfVariablesPaginationOut> {
            return VariablesApiFp(configuration).listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId 
         * @param {'path_count' | 'created_at' | 'model_count'} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [minStrength] 
         * @param {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'} [maxStrength] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [minReproducibility] 
         * @param {'invalid' | 'low' | 'medium' | 'high'} [maxReproducibility] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId: string, orderBy?: 'path_count' | 'created_at' | 'model_count', hops?: number, ordering?: 'asc' | 'desc', includePathPopIds?: boolean, pathPopFilter?: string, minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong', minReproducibility?: 'invalid' | 'low' | 'medium' | 'high', maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high', page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, options?: any): AxiosPromise<VariableSystemOfVariablesPaginationOut> {
            return VariablesApiFp(configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options?: any): AxiosPromise<VariablePaginationOut> {
            return VariablesApiFp(configuration).listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamSlug 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamSlugVariablesGet(teamSlug: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, options?: any): AxiosPromise<VariablePaginationOut> {
            return VariablesApiFp(configuration).listVariablesV1TeamsTeamSlugVariablesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {'model_count' | 'created_at' | 'last_updated_at' | 'name'} [orderBy] Order by this field.
         * @param {'asc' | 'desc'} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {string} [teamSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name', ordering?: 'asc' | 'desc', sortBy?: string, inVariableGraph?: boolean, teamSlug?: string, options?: any): AxiosPromise<VariablePaginationOut> {
            return VariablesApiFp(configuration).listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamSlug 
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug: string, variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options?: any): AxiosPromise<void> {
            return VariablesApiFp(configuration).patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId 
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch(variableId: string, patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>, options?: any): AxiosPromise<void> {
            return VariablesApiFp(configuration).patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAVariableV1TeamsTeamSlugVariablesPost operation in VariablesApi.
 * @export
 * @interface VariablesApiCreateAVariableV1TeamsTeamSlugVariablesPostRequest
 */
export interface VariablesApiCreateAVariableV1TeamsTeamSlugVariablesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiCreateAVariableV1TeamsTeamSlugVariablesPost
     */
    readonly teamSlug: string

    /**
     * 
     * @type {VariableIn}
     * @memberof VariablesApiCreateAVariableV1TeamsTeamSlugVariablesPost
     */
    readonly variableIn: VariableIn
}

/**
 * Request parameters for createAVariableV1VariablesPost operation in VariablesApi.
 * @export
 * @interface VariablesApiCreateAVariableV1VariablesPostRequest
 */
export interface VariablesApiCreateAVariableV1VariablesPostRequest {
    /**
     * 
     * @type {VariableIn}
     * @memberof VariablesApiCreateAVariableV1VariablesPost
     */
    readonly variableIn: VariableIn

    /**
     * 
     * @type {string}
     * @memberof VariablesApiCreateAVariableV1VariablesPost
     */
    readonly teamSlug?: string
}

/**
 * Request parameters for createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost operation in VariablesApi.
 * @export
 * @interface VariablesApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPostRequest
 */
export interface VariablesApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPost
     */
    readonly teamSlug: string

    /**
     * 
     * @type {Array<VariableIn> | VariableIn}
     * @memberof VariablesApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPost
     */
    readonly arrayVariableInVariableIn: Array<VariableIn> | VariableIn
}

/**
 * Request parameters for createMultipleVariablesV1VariablesBulkPost operation in VariablesApi.
 * @export
 * @interface VariablesApiCreateMultipleVariablesV1VariablesBulkPostRequest
 */
export interface VariablesApiCreateMultipleVariablesV1VariablesBulkPostRequest {
    /**
     * 
     * @type {Array<VariableIn> | VariableIn}
     * @memberof VariablesApiCreateMultipleVariablesV1VariablesBulkPost
     */
    readonly arrayVariableInVariableIn: Array<VariableIn> | VariableIn

    /**
     * 
     * @type {string}
     * @memberof VariablesApiCreateMultipleVariablesV1VariablesBulkPost
     */
    readonly teamSlug?: string
}

/**
 * Request parameters for deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete operation in VariablesApi.
 * @export
 * @interface VariablesApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDeleteRequest
 */
export interface VariablesApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDelete
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDelete
     */
    readonly variableId: string
}

/**
 * Request parameters for deleteVariableV1VariablesVariableIdDelete operation in VariablesApi.
 * @export
 * @interface VariablesApiDeleteVariableV1VariablesVariableIdDeleteRequest
 */
export interface VariablesApiDeleteVariableV1VariablesVariableIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiDeleteVariableV1VariablesVariableIdDelete
     */
    readonly variableId: string
}

/**
 * Request parameters for getVariableV1TeamsTeamSlugVariablesVariableIdGet operation in VariablesApi.
 * @export
 * @interface VariablesApiGetVariableV1TeamsTeamSlugVariablesVariableIdGetRequest
 */
export interface VariablesApiGetVariableV1TeamsTeamSlugVariablesVariableIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiGetVariableV1TeamsTeamSlugVariablesVariableIdGet
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiGetVariableV1TeamsTeamSlugVariablesVariableIdGet
     */
    readonly variableId: string
}

/**
 * Request parameters for getVariableV1VariablesVariableIdGet operation in VariablesApi.
 * @export
 * @interface VariablesApiGetVariableV1VariablesVariableIdGetRequest
 */
export interface VariablesApiGetVariableV1VariablesVariableIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiGetVariableV1VariablesVariableIdGet
     */
    readonly variableId: string
}

/**
 * Request parameters for listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest
 */
export interface VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly variableId: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1VariablesVariableIdAssociationsGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest
 */
export interface VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly variableId: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'created_at' | 'last_updated_at'}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly orderBy?: 'created_at' | 'last_updated_at'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserVariablesV1UserVariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest
 */
export interface VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly inVariableGraph?: boolean
}

/**
 * Request parameters for listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest
 */
export interface VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly variableId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at' | 'model_count'}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly orderBy?: 'path_count' | 'created_at' | 'model_count'

    /**
     * Number of hops.
     * @type {number}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * Filter results by available dataset license.
     * @type {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>

    /**
     * Only include Features that are members of datasets with this index.
     * @type {Array<string>}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly dsIdx?: Array<string>

    /**
     * Include in response available dataset index ids for filtering.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly includeDatasetIndexIds?: boolean

    /**
     * Include in response available dataset population ids for filtering.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly includeDatasetPopIds?: boolean

    /**
     * Stringified list of lists of population id for dataset filtering.
     * @type {string}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly dsPopFilter?: string

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet
     */
    readonly idsOnly?: boolean
}

/**
 * Request parameters for listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest
 */
export interface VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly variableId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at' | 'model_count'}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly orderBy?: 'path_count' | 'created_at' | 'model_count'

    /**
     * Number of hops.
     * @type {number}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * Filter results by available dataset license.
     * @type {Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly license?: Array<'public_domain' | 'creative_commons_public_domain_dedication' | 'opendata_commons_public_domain_dedication_and_license' | 'creative_commons_attribution_international' | 'community_data_license_agreement_version_1_permissive' | 'open_data_commons_attribution_license' | 'creative_commons_attribution_share_alike_4_international' | 'community_data_license_agreement_version_1_sharing' | 'open_data_commons_open_database_license' | 'creative_commons_attribution_noncommercial_4_international' | 'creative_commons_attribution_noderivatives_4_international' | 'creative_commons_attribution_noncommercial_share_alike_4_international' | 'creative_commons_attribution_noncommercial_noderivatives_4_international' | 'other'>

    /**
     * Only include Features that are members of datasets with this index.
     * @type {Array<string>}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly dsIdx?: Array<string>

    /**
     * Include in response available dataset index ids for filtering.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly includeDatasetIndexIds?: boolean

    /**
     * Include in response available dataset population ids for filtering.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly includeDatasetPopIds?: boolean

    /**
     * Stringified list of lists of population id for dataset filtering.
     * @type {string}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly dsPopFilter?: string

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet
     */
    readonly idsOnly?: boolean
}

/**
 * Request parameters for listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest
 */
export interface VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly variableId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at' | 'model_count'}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly orderBy?: 'path_count' | 'created_at' | 'model_count'

    /**
     * Number of hops.
     * @type {number}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet
     */
    readonly idsOnly?: boolean
}

/**
 * Request parameters for listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest
 */
export interface VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly variableId: string

    /**
     * Order by this field.
     * @type {'path_count' | 'created_at' | 'model_count'}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly orderBy?: 'path_count' | 'created_at' | 'model_count'

    /**
     * Number of hops.
     * @type {number}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly hops?: number

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Include in response available population ids for filtering.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly includePathPopIds?: boolean

    /**
     * Stringified list of lists of population id for path filtering.
     * @type {string}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly pathPopFilter?: string

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly minStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly maxStrength?: 'invalid' | 'very_weak' | 'weak' | 'moderate' | 'strong' | 'very_strong'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly minReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {'invalid' | 'low' | 'medium' | 'high'}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly maxReproducibility?: 'invalid' | 'low' | 'medium' | 'high'

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGet
     */
    readonly idsOnly?: boolean
}

/**
 * Request parameters for listUserVariablesV1UsersUserIdVariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest
 */
export interface VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly inVariableGraph?: boolean
}

/**
 * Request parameters for listVariablesV1TeamsTeamSlugVariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListVariablesV1TeamsTeamSlugVariablesGetRequest
 */
export interface VariablesApiListVariablesV1TeamsTeamSlugVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly teamSlug: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof VariablesApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof VariablesApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1TeamsTeamSlugVariablesGet
     */
    readonly inVariableGraph?: boolean
}

/**
 * Request parameters for listVariablesV1VariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListVariablesV1VariablesGetRequest
 */
export interface VariablesApiListVariablesV1VariablesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {'model_count' | 'created_at' | 'last_updated_at' | 'name'}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly orderBy?: 'model_count' | 'created_at' | 'last_updated_at' | 'name'

    /**
     * Order ascending or descending.
     * @type {'asc' | 'desc'}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly ordering?: 'asc' | 'desc'

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly teamSlug?: string
}

/**
 * Request parameters for patchVariableV1TeamsTeamSlugVariablesVariableIdPatch operation in VariablesApi.
 * @export
 * @interface VariablesApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatchRequest
 */
export interface VariablesApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatch
     */
    readonly teamSlug: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatch
     */
    readonly variableId: string

    /**
     * 
     * @type {PatchVariableOp | Array<PatchVariableOp>}
     * @memberof VariablesApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatch
     */
    readonly patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>
}

/**
 * Request parameters for patchVariableV1VariablesVariableIdPatch operation in VariablesApi.
 * @export
 * @interface VariablesApiPatchVariableV1VariablesVariableIdPatchRequest
 */
export interface VariablesApiPatchVariableV1VariablesVariableIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiPatchVariableV1VariablesVariableIdPatch
     */
    readonly variableId: string

    /**
     * 
     * @type {PatchVariableOp | Array<PatchVariableOp>}
     * @memberof VariablesApiPatchVariableV1VariablesVariableIdPatch
     */
    readonly patchVariableOpArrayPatchVariableOp: PatchVariableOp | Array<PatchVariableOp>
}

/**
 * VariablesApi - object-oriented interface
 * @export
 * @class VariablesApi
 * @extends {BaseAPI}
 */
export class VariablesApi extends BaseAPI {
    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {VariablesApiCreateAVariableV1TeamsTeamSlugVariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public createAVariableV1TeamsTeamSlugVariablesPost(requestParameters: VariablesApiCreateAVariableV1TeamsTeamSlugVariablesPostRequest, options?: any) {
        return VariablesApiFp(this.configuration).createAVariableV1TeamsTeamSlugVariablesPost(requestParameters.teamSlug, requestParameters.variableIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {VariablesApiCreateAVariableV1VariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public createAVariableV1VariablesPost(requestParameters: VariablesApiCreateAVariableV1VariablesPostRequest, options?: any) {
        return VariablesApiFp(this.configuration).createAVariableV1VariablesPost(requestParameters.variableIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {VariablesApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(requestParameters: VariablesApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPostRequest, options?: any) {
        return VariablesApiFp(this.configuration).createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(requestParameters.teamSlug, requestParameters.arrayVariableInVariableIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {VariablesApiCreateMultipleVariablesV1VariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public createMultipleVariablesV1VariablesBulkPost(requestParameters: VariablesApiCreateMultipleVariablesV1VariablesBulkPostRequest, options?: any) {
        return VariablesApiFp(this.configuration).createMultipleVariablesV1VariablesBulkPost(requestParameters.arrayVariableInVariableIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {VariablesApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(requestParameters: VariablesApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDeleteRequest, options?: any) {
        return VariablesApiFp(this.configuration).deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(requestParameters.teamSlug, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {VariablesApiDeleteVariableV1VariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public deleteVariableV1VariablesVariableIdDelete(requestParameters: VariablesApiDeleteVariableV1VariablesVariableIdDeleteRequest, options?: any) {
        return VariablesApiFp(this.configuration).deleteVariableV1VariablesVariableIdDelete(requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Variable.
     * @summary Get Variable
     * @param {VariablesApiGetVariableV1TeamsTeamSlugVariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public getVariableV1TeamsTeamSlugVariablesVariableIdGet(requestParameters: VariablesApiGetVariableV1TeamsTeamSlugVariablesVariableIdGetRequest, options?: any) {
        return VariablesApiFp(this.configuration).getVariableV1TeamsTeamSlugVariablesVariableIdGet(requestParameters.teamSlug, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Variable.
     * @summary Get Variable
     * @param {VariablesApiGetVariableV1VariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public getVariableV1VariablesVariableIdGet(requestParameters: VariablesApiGetVariableV1VariablesVariableIdGetRequest, options?: any) {
        return VariablesApiFp(this.configuration).getVariableV1VariablesVariableIdGet(requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(requestParameters: VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest, options?: any) {
        return VariablesApiFp(this.configuration).listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters: VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest, options?: any) {
        return VariablesApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters: VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest = {}, options?: any) {
        return VariablesApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(requestParameters: VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest, options?: any) {
        return VariablesApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters: VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest, options?: any) {
        return VariablesApiFp(this.configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(requestParameters: VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest, options?: any) {
        return VariablesApiFp(this.configuration).listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters: VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest, options?: any) {
        return VariablesApiFp(this.configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listUserVariablesV1UsersUserIdVariablesGet(requestParameters: VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest, options?: any) {
        return VariablesApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Variables.
     * @summary List Variables
     * @param {VariablesApiListVariablesV1TeamsTeamSlugVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listVariablesV1TeamsTeamSlugVariablesGet(requestParameters: VariablesApiListVariablesV1TeamsTeamSlugVariablesGetRequest, options?: any) {
        return VariablesApiFp(this.configuration).listVariablesV1TeamsTeamSlugVariablesGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Variables.
     * @summary List Variables
     * @param {VariablesApiListVariablesV1VariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listVariablesV1VariablesGet(requestParameters: VariablesApiListVariablesV1VariablesGetRequest = {}, options?: any) {
        return VariablesApiFp(this.configuration).listVariablesV1VariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {VariablesApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(requestParameters: VariablesApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatchRequest, options?: any) {
        return VariablesApiFp(this.configuration).patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(requestParameters.teamSlug, requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {VariablesApiPatchVariableV1VariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public patchVariableV1VariablesVariableIdPatch(requestParameters: VariablesApiPatchVariableV1VariablesVariableIdPatchRequest, options?: any) {
        return VariablesApiFp(this.configuration).patchVariableV1VariablesVariableIdPatch(requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }
}


