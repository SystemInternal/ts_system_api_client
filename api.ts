/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 * This is a REST API through which clients can interact with System - an **open**, **collaborative**, and **ever-growing knowledge base** of all the world\'s systems. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Add study flow context enum.
 * @export
 * @enum {string}
 */

export enum AddFlowContext {
    Relationship = 'relationship',
    QuickProject = 'quick_project'
}

/**
 * Add subscription seat input.
 * @export
 * @interface AddSubscriptionSeatIn
 */
export interface AddSubscriptionSeatIn {
    /**
     * 
     * @type {Array<string>}
     * @memberof AddSubscriptionSeatIn
     */
    'emails': Array<string>;
}
/**
 * Alert colors for metric monitoring.
 * @export
 * @enum {string}
 */

export enum AlertColor {
    Green = 'GREEN',
    Red = 'RED'
}

/**
 * List of algorithms model.
 * @export
 * @interface AlgorithmListResult
 */
export interface AlgorithmListResult {
    /**
     * 
     * @type {Array<AlgorithmOut>}
     * @memberof AlgorithmListResult
     */
    'items': Array<AlgorithmOut>;
}
/**
 * Algorithm output model.
 * @export
 * @interface AlgorithmOut
 */
export interface AlgorithmOut {
    /**
     * 
     * @type {string}
     * @memberof AlgorithmOut
     */
    'algorithm_id': string;
    /**
     * 
     * @type {string}
     * @memberof AlgorithmOut
     */
    'display_name': string;
    /**
     * 
     * @type {string}
     * @memberof AlgorithmOut
     */
    'description': string;
}
/**
 * Object tag model.
 * @export
 * @interface AppSchemaDatasetsObjectTags
 */
export interface AppSchemaDatasetsObjectTags {
    /**
     * 
     * @type {Array<ConceptOut>}
     * @memberof AppSchemaDatasetsObjectTags
     */
    'concepts'?: Array<ConceptOut>;
    /**
     * 
     * @type {Array<VariableOut>}
     * @memberof AppSchemaDatasetsObjectTags
     */
    'variables'?: Array<VariableOut>;
}
/**
 * Interface for Groundings for a specific namespace.
 * @export
 * @interface AppSchemaGroundingsGrounding
 */
export interface AppSchemaGroundingsGrounding {
    /**
     * 
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'namespace': string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'namespace_id_label'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'definition'?: string;
}
/**
 * Object tag model.
 * @export
 * @interface AppSchemaStudiesObjectTags
 */
export interface AppSchemaStudiesObjectTags {
    /**
     * 
     * @type {Array<ConceptOut>}
     * @memberof AppSchemaStudiesObjectTags
     */
    'concepts'?: Array<ConceptOut>;
    /**
     * 
     * @type {Array<VariableOut>}
     * @memberof AppSchemaStudiesObjectTags
     */
    'variables'?: Array<VariableOut>;
}
/**
 * Values available for filtering associations.
 * @export
 * @interface AssociationFilters
 */
export interface AssociationFilters {
    /**
     * 
     * @type {Array<FeatureContributionMethodFilterCounts>}
     * @memberof AssociationFilters
     */
    'association_values.feature_contribution_method'?: Array<FeatureContributionMethodFilterCounts>;
}
/**
 * Association resource links.
 * @export
 * @interface AssociationLinks
 */
export interface AssociationLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof AssociationLinks
     */
    'self': string;
    /**
     * Link to the Model the Association is derived from.
     * @type {string}
     * @memberof AssociationLinks
     */
    'model': string;
    /**
     * Links to the Features of the Association
     * @type {Array<string>}
     * @memberof AssociationLinks
     */
    'features': Array<string>;
}
/**
 * Association output model.
 * @export
 * @interface AssociationOut
 */
export interface AssociationOut {
    /**
     * 
     * @type {string}
     * @memberof AssociationOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof AssociationOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof AssociationOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof AssociationOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof AssociationOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof AssociationOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof AssociationOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof AssociationOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AssociationOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AssociationOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * The id of the features of the association. Use this for normal association.
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'feature_ids'?: Array<string>;
    /**
     * The id of the variables for a variable/variable association.
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'variable_ids'?: Array<string>;
    /**
     * The ids of the features that are being directed at.
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'directed_at_feature_ids'?: Array<string>;
    /**
     * Values of the association.
     * @type {Array<AssociationValueOut>}
     * @memberof AssociationOut
     */
    'association_values'?: Array<AssociationValueOut>;
    /**
     * The partial dependence plot information.
     * @type {Array<PartialDependencePlotIn>}
     * @memberof AssociationOut
     */
    'pdps'?: Array<PartialDependencePlotIn>;
    /**
     * Statistical controls of the association. (overrides model)
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'statistical_controls'?: Array<string>;
    /**
     * Populations of the association. (overrides dataset)
     * @type {Array<string>}
     * @memberof AssociationOut
     */
    'population_strings'?: Array<string>;
    /**
     * Collection of links to related resources.
     * @type {AssociationLinks}
     * @memberof AssociationOut
     */
    '_links'?: AssociationLinks;
    /**
     * Model system id the Association belongs to.
     * @type {string}
     * @memberof AssociationOut
     */
    'model_id': string;
    /**
     * The feature data.
     * @type {Array<FeatureOut>}
     * @memberof AssociationOut
     */
    'features'?: Array<FeatureOut>;
}
/**
 * Association pagination out.
 * @export
 * @interface AssociationPaginationOut
 */
export interface AssociationPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof AssociationPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<AssociationOut>}
     * @memberof AssociationPaginationOut
     */
    'items'?: Array<AssociationOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof AssociationPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof AssociationPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof AssociationPaginationOut
     */
    '_sorts'?: Array<string>;
    /**
     * Collection of filter values that can be applied.
     * @type {AssociationFilters}
     * @memberof AssociationPaginationOut
     */
    '_filters'?: AssociationFilters;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum AssociationSortEnum {
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at'
}

/**
 * Association value class.
 * @export
 * @interface AssociationValueInBase
 */
export interface AssociationValueInBase {
    /**
     * The strength value of the association.
     * @type {number}
     * @memberof AssociationValueInBase
     */
    'value'?: number;
    /**
     * Unit of the association value.
     * @type {string}
     * @memberof AssociationValueInBase
     */
    'unit'?: string;
    /**
     * The feature rank based on feature importance
     * @type {number}
     * @memberof AssociationValueInBase
     */
    'feature_rank'?: number;
    /**
     * The total number of features in the parent model.
     * @type {number}
     * @memberof AssociationValueInBase
     */
    'feature_count'?: number;
    /**
     * Whether one can sum up the feature importance values.
     * @type {boolean}
     * @memberof AssociationValueInBase
     */
    'importance_summation'?: boolean;
    /**
     * When using a permutation test for association value, which score type was used to calculate the value.
     * @type {ValidModelScoreEnum}
     * @memberof AssociationValueInBase
     */
    'permutation_score_type'?: ValidModelScoreEnum;
    /**
     * Who generated this value.
     * @type {ValidValueSource}
     * @memberof AssociationValueInBase
     */
    'generated_by'?: ValidValueSource;
    /**
     * Statistical significance value of the association.
     * @type {SignificanceValueIn}
     * @memberof AssociationValueInBase
     */
    'significance_value'?: SignificanceValueIn;
    /**
     * Standard error of the Association value.
     * @type {number}
     * @memberof AssociationValueInBase
     */
    'standard_error'?: number;
    /**
     * The method by which the feature importance has been measured.
     * @type {ValidFeatureContributionMethod}
     * @memberof AssociationValueInBase
     */
    'feature_contribution_method': ValidFeatureContributionMethod;
    /**
     * Association value properties. Use to prototype.
     * @type {object}
     * @memberof AssociationValueInBase
     */
    'properties'?: object;
}
/**
 * Association value output model.
 * @export
 * @interface AssociationValueOut
 */
export interface AssociationValueOut {
    /**
     * The strength value of the association.
     * @type {number}
     * @memberof AssociationValueOut
     */
    'value'?: number;
    /**
     * Unit of the association value.
     * @type {string}
     * @memberof AssociationValueOut
     */
    'unit'?: string;
    /**
     * The feature rank based on feature importance
     * @type {number}
     * @memberof AssociationValueOut
     */
    'feature_rank'?: number;
    /**
     * The total number of features in the parent model.
     * @type {number}
     * @memberof AssociationValueOut
     */
    'feature_count'?: number;
    /**
     * Whether one can sum up the feature importance values.
     * @type {boolean}
     * @memberof AssociationValueOut
     */
    'importance_summation'?: boolean;
    /**
     * When using a permutation test for association value, which score type was used to calculate the value.
     * @type {ValidModelScoreEnum}
     * @memberof AssociationValueOut
     */
    'permutation_score_type'?: ValidModelScoreEnum;
    /**
     * Who generated this value.
     * @type {ValidValueSource}
     * @memberof AssociationValueOut
     */
    'generated_by'?: ValidValueSource;
    /**
     * Statistical significance value of the association.
     * @type {SignificanceValueOut}
     * @memberof AssociationValueOut
     */
    'significance_value'?: SignificanceValueOut;
    /**
     * Standard error of the Association value.
     * @type {number}
     * @memberof AssociationValueOut
     */
    'standard_error'?: number;
    /**
     * The method by which the feature importance has been measured.
     * @type {FeatureContributionMethod}
     * @memberof AssociationValueOut
     */
    'feature_contribution_method'?: FeatureContributionMethod;
    /**
     * Association value properties. Use to prototype.
     * @type {object}
     * @memberof AssociationValueOut
     */
    'properties'?: object;
    /**
     * Historical values.
     * @type {{ [key: string]: AssociationValueInBase; }}
     * @memberof AssociationValueOut
     */
    'history'?: { [key: string]: AssociationValueInBase; };
    /**
     * Whether this is a primary association_value or not.
     * @type {boolean}
     * @memberof AssociationValueOut
     */
    'primary_association_value'?: boolean;
}
/**
 * Author resource links.
 * @export
 * @interface AuthorLinks
 */
export interface AuthorLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof AuthorLinks
     */
    'self': string;
}
/**
 * Author output model.
 * @export
 * @interface AuthorOut
 */
export interface AuthorOut {
    /**
     * 
     * @type {string}
     * @memberof AuthorOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof AuthorOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof AuthorOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof AuthorOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof AuthorOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof AuthorOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof AuthorOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AuthorOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof AuthorOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof AuthorOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AuthorOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof AuthorOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Author\'s name.
     * @type {string}
     * @memberof AuthorOut
     */
    'name': string;
    /**
     * Author\'s affiliation
     * @type {Array<string>}
     * @memberof AuthorOut
     */
    'affiliation'?: Array<string>;
    /**
     * Author\'s ORCID
     * @type {string}
     * @memberof AuthorOut
     */
    'orcid'?: string;
    /**
     * Collection of links to related resources.
     * @type {AuthorLinks}
     * @memberof AuthorOut
     */
    '_links'?: AuthorLinks;
    /**
     * The System user id of this Author.
     * @type {string}
     * @memberof AuthorOut
     */
    'user_id'?: string;
}
/**
 * Author pagination out.
 * @export
 * @interface AuthorPaginationOut
 */
export interface AuthorPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof AuthorPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<AuthorOut>}
     * @memberof AuthorPaginationOut
     */
    'items'?: Array<AuthorOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof AuthorPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof AuthorPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof AuthorPaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum AuthorSortEnum {
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Credentials for an integration without password.
 * @export
 * @interface BigQueryCredentials
 */
export interface BigQueryCredentials {
    /**
     * Integration location.
     * @type {string}
     * @memberof BigQueryCredentials
     */
    'location': string;
    /**
     * Integration project.
     * @type {string}
     * @memberof BigQueryCredentials
     */
    'project': string;
}
/**
 * Input credentials for a BigQuery integration.
 * @export
 * @interface BigQueryCredentialsIn
 */
export interface BigQueryCredentialsIn {
    /**
     * Integration location.
     * @type {string}
     * @memberof BigQueryCredentialsIn
     */
    'location': string;
    /**
     * Integration project.
     * @type {string}
     * @memberof BigQueryCredentialsIn
     */
    'project': string;
    /**
     * Integration credentials.
     * @type {string}
     * @memberof BigQueryCredentialsIn
     */
    'raw_credentials': string;
}
/**
 * Represent a structured statistics for a categorical (including binary) feature type.
 * @export
 * @interface CategoricalFeatureStatistics
 */
export interface CategoricalFeatureStatistics {
    /**
     * Number of distinct values in the feature.
     * @type {number}
     * @memberof CategoricalFeatureStatistics
     */
    'distinct_count'?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof CategoricalFeatureStatistics
     */
    'percent_missing'?: number;
    /**
     * Frequency of occurrence of each value.
     * @type {Frequency}
     * @memberof CategoricalFeatureStatistics
     */
    'frequency'?: Frequency;
    /**
     * Distinct Values that the categorical feature takes.
     * @type {Array<string>}
     * @memberof CategoricalFeatureStatistics
     */
    'distinct_values'?: Array<string>;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: CategoricalFeatureStatisticsSimpleBase; }}
     * @memberof CategoricalFeatureStatistics
     */
    'history'?: { [key: string]: CategoricalFeatureStatisticsSimpleBase; };
}
/**
 * Represent a structured statistics for a categorical (including binary) feature type.
 * @export
 * @interface CategoricalFeatureStatisticsSimpleBase
 */
export interface CategoricalFeatureStatisticsSimpleBase {
    /**
     * Number of distinct values in the feature.
     * @type {number}
     * @memberof CategoricalFeatureStatisticsSimpleBase
     */
    'distinct_count'?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof CategoricalFeatureStatisticsSimpleBase
     */
    'percent_missing'?: number;
}
/**
 * Cluster out model.
 * @export
 * @interface ClusterOut
 */
export interface ClusterOut {
    /**
     * 
     * @type {Array<ScoredCluster>}
     * @memberof ClusterOut
     */
    'clusters': Array<ScoredCluster>;
    /**
     * 
     * @type {Array<ClusteredRelationship>}
     * @memberof ClusterOut
     */
    'relationships': Array<ClusteredRelationship>;
    /**
     * 
     * @type {string}
     * @memberof ClusterOut
     */
    'cache_key'?: string;
}
/**
 * Cluster out status model.
 * @export
 * @interface ClusterOutStatus
 */
export interface ClusterOutStatus {
    /**
     * 
     * @type {FunctionStatus}
     * @memberof ClusterOutStatus
     */
    'status': FunctionStatus;
    /**
     * 
     * @type {ClusterOut}
     * @memberof ClusterOutStatus
     */
    'cluster_out'?: ClusterOut;
}
/**
 * Schema for clustered relationship response.
 * @export
 * @interface ClusteredRelationship
 */
export interface ClusteredRelationship {
    /**
     * 
     * @type {Array<FlexibleSimpleBaseObject>}
     * @memberof ClusteredRelationship
     */
    'variables': Array<FlexibleSimpleBaseObject>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClusteredRelationship
     */
    'cluster_ids': Array<string>;
    /**
     * 
     * @type {Array<FindingMeta>}
     * @memberof ClusteredRelationship
     */
    'finding_metas': Array<FindingMeta>;
    /**
     * 
     * @type {Array<StudyFindings>}
     * @memberof ClusteredRelationship
     */
    'findings'?: Array<StudyFindings>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum ClusteringMethods {
    Agglomerative = 'agglomerative',
    Dbscan = 'dbscan',
    Paraphrase = 'paraphrase'
}

/**
 * Concept resource links.
 * @export
 * @interface ConceptLinks
 */
export interface ConceptLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof ConceptLinks
     */
    'self': string;
}
/**
 * Concept output model.
 * @export
 * @interface ConceptOut
 */
export interface ConceptOut {
    /**
     * 
     * @type {string}
     * @memberof ConceptOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof ConceptOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof ConceptOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof ConceptOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof ConceptOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof ConceptOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof ConceptOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof ConceptOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * The Concept\'s corresponding wikidata id.
     * @type {string}
     * @memberof ConceptOut
     */
    'wikidata_id': string;
    /**
     * Preferred name if different from existing.
     * @type {string}
     * @memberof ConceptOut
     */
    'preferred_name'?: string;
    /**
     * The Concept\'s name.
     * @type {string}
     * @memberof ConceptOut
     */
    'name'?: string;
    /**
     * The Concept\'s aliases.
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    'aliases'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ConceptOut
     */
    'description'?: string;
    /**
     * Collection of links to related resources.
     * @type {ConceptLinks}
     * @memberof ConceptOut
     */
    '_links'?: ConceptLinks;
}
/**
 * Concept pagination out.
 * @export
 * @interface ConceptPaginationOut
 */
export interface ConceptPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof ConceptPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<ConceptOut>}
     * @memberof ConceptPaginationOut
     */
    'items'?: Array<ConceptOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof ConceptPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof ConceptPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof ConceptPaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * Node at end of concept relationship.
 * @export
 * @interface ConceptRelationshipNode
 */
export interface ConceptRelationshipNode {
    /**
     * 
     * @type {string}
     * @memberof ConceptRelationshipNode
     */
    'system_id': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptRelationshipNode
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptRelationshipNode
     */
    'wikidata_id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConceptRelationshipNode
     */
    'supporting_association_ids': Array<string>;
}
/**
 * Concept relationships model.
 * @export
 * @interface ConceptRelationshipsOut
 */
export interface ConceptRelationshipsOut {
    /**
     * 
     * @type {ConceptOut}
     * @memberof ConceptRelationshipsOut
     */
    'concept': ConceptOut;
    /**
     * 
     * @type {Array<ConceptRelationshipNode>}
     * @memberof ConceptRelationshipsOut
     */
    'upstream': Array<ConceptRelationshipNode>;
    /**
     * 
     * @type {Array<ConceptRelationshipNode>}
     * @memberof ConceptRelationshipsOut
     */
    'downstream': Array<ConceptRelationshipNode>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum ConceptSortEnum {
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Confidence interval input model.
 * @export
 * @interface ConfidenceIntervalIn
 */
export interface ConfidenceIntervalIn {
    /**
     * Confidence level for interval.
     * @type {ValidSignificanceLevel}
     * @memberof ConfidenceIntervalIn
     */
    'level'?: ValidSignificanceLevel;
    /**
     * The lower bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalIn
     */
    'ci_lower': number;
    /**
     * The upper bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalIn
     */
    'ci_upper': number;
}
/**
 * Confidence interval output model.
 * @export
 * @interface ConfidenceIntervalOut
 */
export interface ConfidenceIntervalOut {
    /**
     * Confidence level for interval.
     * @type {SignificanceLevel}
     * @memberof ConfidenceIntervalOut
     */
    'level'?: SignificanceLevel;
    /**
     * The lower bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalOut
     */
    'ci_lower'?: number;
    /**
     * The upper bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalOut
     */
    'ci_upper'?: number;
}
/**
 * A Dashboard input data.
 * @export
 * @interface DashboardIn
 */
export interface DashboardIn {
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DashboardIn
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DashboardIn
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DashboardIn
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DashboardIn
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DashboardIn
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Dashboard\'s name.
     * @type {string}
     * @memberof DashboardIn
     */
    'name': string;
    /**
     * Dashboard\'s description.
     * @type {string}
     * @memberof DashboardIn
     */
    'description'?: string;
    /**
     * Dashboard\'s source url.
     * @type {string}
     * @memberof DashboardIn
     */
    'url'?: string;
    /**
     * Dashboard\'s external tool.
     * @type {ExternalToolEnum}
     * @memberof DashboardIn
     */
    'external_tool'?: ExternalToolEnum;
    /**
     * Dashboard\'s external id.
     * @type {string}
     * @memberof DashboardIn
     */
    'external_id'?: string;
    /**
     * Dashboard\'s external author.
     * @type {string}
     * @memberof DashboardIn
     */
    'external_author'?: string;
    /**
     * Dashboard\'s number of elements.
     * @type {number}
     * @memberof DashboardIn
     */
    'element_count'?: number;
    /**
     * Dashboard\'s number of views.
     * @type {number}
     * @memberof DashboardIn
     */
    'view_count'?: number;
    /**
     * Dashboard\'s number of elements.
     * @type {number}
     * @memberof DashboardIn
     */
    'favorite_count'?: number;
    /**
     * The time this dashboard was created.
     * @type {string}
     * @memberof DashboardIn
     */
    'created_on'?: string;
    /**
     * Dashboard\'s filters used.
     * @type {Array<string>}
     * @memberof DashboardIn
     */
    'filters_used'?: Array<string>;
}
/**
 * Dashboard resource links.
 * @export
 * @interface DashboardLinks
 */
export interface DashboardLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof DashboardLinks
     */
    'self': string;
}
/**
 * Dashboard output model.
 * @export
 * @interface DashboardOut
 */
export interface DashboardOut {
    /**
     * 
     * @type {string}
     * @memberof DashboardOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof DashboardOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof DashboardOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof DashboardOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof DashboardOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof DashboardOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof DashboardOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DashboardOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DashboardOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DashboardOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DashboardOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DashboardOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Dashboard\'s name.
     * @type {string}
     * @memberof DashboardOut
     */
    'name': string;
    /**
     * Dashboard\'s description.
     * @type {string}
     * @memberof DashboardOut
     */
    'description'?: string;
    /**
     * Dashboard\'s source url.
     * @type {string}
     * @memberof DashboardOut
     */
    'url'?: string;
    /**
     * Dashboard\'s external tool.
     * @type {ExternalToolEnum}
     * @memberof DashboardOut
     */
    'external_tool'?: ExternalToolEnum;
    /**
     * Dashboard\'s external id.
     * @type {string}
     * @memberof DashboardOut
     */
    'external_id'?: string;
    /**
     * Dashboard\'s external author.
     * @type {string}
     * @memberof DashboardOut
     */
    'external_author'?: string;
    /**
     * Dashboard\'s number of elements.
     * @type {number}
     * @memberof DashboardOut
     */
    'element_count'?: number;
    /**
     * Dashboard\'s number of views.
     * @type {number}
     * @memberof DashboardOut
     */
    'view_count'?: number;
    /**
     * Dashboard\'s number of elements.
     * @type {number}
     * @memberof DashboardOut
     */
    'favorite_count'?: number;
    /**
     * The time this dashboard was created.
     * @type {string}
     * @memberof DashboardOut
     */
    'created_on'?: string;
    /**
     * Dashboard\'s filters used.
     * @type {Array<string>}
     * @memberof DashboardOut
     */
    'filters_used'?: Array<string>;
    /**
     * Collection of links to related resources.
     * @type {DashboardLinks}
     * @memberof DashboardOut
     */
    '_links'?: DashboardLinks;
    /**
     * Team.
     * @type {TeamOut}
     * @memberof DashboardOut
     */
    'team'?: TeamOut;
}
/**
 * Dashboard pagination out.
 * @export
 * @interface DashboardPaginationOut
 */
export interface DashboardPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof DashboardPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<DashboardOut>}
     * @memberof DashboardPaginationOut
     */
    'items'?: Array<DashboardOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof DashboardPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof DashboardPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof DashboardPaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum DashboardSortEnum {
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * A System Database Usage Object.
 * @export
 * @interface DatabaseUsage
 */
export interface DatabaseUsage {
    /**
     * Text of query run on database.
     * @type {string}
     * @memberof DatabaseUsage
     */
    'query_text'?: string;
    /**
     * List of database user IDs for users that have run this query.
     * @type {Array<string>}
     * @memberof DatabaseUsage
     */
    'db_user_ids'?: Array<string>;
    /**
     * Latest value for database query\'s label.
     * @type {string}
     * @memberof DatabaseUsage
     */
    'latest_label'?: string;
    /**
     * Latest start timestamp for query with this query_text.
     * @type {string}
     * @memberof DatabaseUsage
     */
    'latest_timestamp'?: string;
    /**
     * Number of times this query has been run over specified time span.
     * @type {number}
     * @memberof DatabaseUsage
     */
    'run_count'?: number;
    /**
     * Names of tables referenced in this query.
     * @type {Array<string>}
     * @memberof DatabaseUsage
     */
    'tables_referenced'?: Array<string>;
    /**
     * Names of features referenced in this query, indexed by table name.
     * @type {{ [key: string]: Array<string>; }}
     * @memberof DatabaseUsage
     */
    'features_referenced'?: { [key: string]: Array<string>; };
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum DatasetLicenseEnum {
    PublicDomain = 'public_domain',
    CreativeCommonsPublicDomainDedication = 'creative_commons_public_domain_dedication',
    OpendataCommonsPublicDomainDedicationAndLicense = 'opendata_commons_public_domain_dedication_and_license',
    CreativeCommonsAttributionInternational = 'creative_commons_attribution_international',
    CommunityDataLicenseAgreementVersion1Permissive = 'community_data_license_agreement_version_1_permissive',
    OpenDataCommonsAttributionLicense = 'open_data_commons_attribution_license',
    CreativeCommonsAttributionShareAlike4International = 'creative_commons_attribution_share_alike_4_international',
    CommunityDataLicenseAgreementVersion1Sharing = 'community_data_license_agreement_version_1_sharing',
    OpenDataCommonsOpenDatabaseLicense = 'open_data_commons_open_database_license',
    CreativeCommonsAttributionNoncommercial4International = 'creative_commons_attribution_noncommercial_4_international',
    CreativeCommonsAttributionNoderivatives4International = 'creative_commons_attribution_noderivatives_4_international',
    CreativeCommonsAttributionNoncommercialShareAlike4International = 'creative_commons_attribution_noncommercial_share_alike_4_international',
    CreativeCommonsAttributionNoncommercialNoderivatives4International = 'creative_commons_attribution_noncommercial_noderivatives_4_international',
    Other = 'other',
    Invalid = 'invalid'
}

/**
 * Dataset resource links.
 * @export
 * @interface DatasetLinks
 */
export interface DatasetLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof DatasetLinks
     */
    'self': string;
    /**
     * Link to dataset\'s features.
     * @type {string}
     * @memberof DatasetLinks
     */
    'features': string;
    /**
     * Link to dataset\'s index feature if it is set.
     * @type {string}
     * @memberof DatasetLinks
     */
    'index'?: string;
}
/**
 * Dataset output model.
 * @export
 * @interface DatasetOut
 */
export interface DatasetOut {
    /**
     * 
     * @type {string}
     * @memberof DatasetOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof DatasetOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof DatasetOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof DatasetOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof DatasetOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof DatasetOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof DatasetOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof DatasetOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DatasetOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof DatasetOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Dataset name.
     * @type {string}
     * @memberof DatasetOut
     */
    'name'?: string;
    /**
     * The link for the download (*necessary for model to be “Reproducible”)
     * @type {string}
     * @memberof DatasetOut
     */
    'url'?: string;
    /**
     * The link for the API
     * @type {string}
     * @memberof DatasetOut
     */
    'api_url'?: string;
    /**
     * Location of a page describing the dataset.
     * @type {string}
     * @memberof DatasetOut
     */
    'desc_url'?: string;
    /**
     * An identifier, such as a DOI or a Compact Identifier. If the dataset has more than one identifier, repeat the identifier property. If using JSON-LD, this is represented using JSON list syntax.
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    'identifiers'?: Array<string>;
    /**
     * The version number for the dataset.
     * @type {string}
     * @memberof DatasetOut
     */
    'version'?: string;
    /**
     * Dataset description.
     * @type {string}
     * @memberof DatasetOut
     */
    'description'?: string;
    /**
     * The individual or organization to whom this dataset belongs (e.g. holds copyright).
     * @type {string}
     * @memberof DatasetOut
     */
    'owner'?: string;
    /**
     * The file format of the dataset.
     * @type {string}
     * @memberof DatasetOut
     */
    'format'?: string;
    /**
     * Alternative name that have been used to refer to this dataset, such as alias or abbreviation.
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    'aliases'?: Array<string>;
    /**
     * Catalogs to which the dataset belongs
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    'data_catalogs'?: Array<string>;
    /**
     * Sample size of dataset if known and fixed.
     * @type {number}
     * @memberof DatasetOut
     */
    'sample_size'?: number;
    /**
     * Does the dataset contain personally identifiable information?
     * @type {boolean}
     * @memberof DatasetOut
     */
    'has_pii'?: boolean;
    /**
     * Does the dataset contain personally identifiable health information?
     * @type {boolean}
     * @memberof DatasetOut
     */
    'has_phi'?: boolean;
    /**
     * A license under which the dataset is distributed.
     * @type {DatasetLicenseEnum}
     * @memberof DatasetOut
     */
    'license'?: DatasetLicenseEnum;
    /**
     * A database query that a user can execute to produce the dataset object.
     * @type {string}
     * @memberof DatasetOut
     */
    'db_query'?: string;
    /**
     * A database connection string to execute db_query. Might include free-text instructions.
     * @type {string}
     * @memberof DatasetOut
     */
    'db_connection_string'?: string;
    /**
     * The database language or protocol (e.g., Azure Storage, Postgres, MySQL, OpenOffice) used to produce the dataset object.
     * @type {string}
     * @memberof DatasetOut
     */
    'db_language'?: string;
    /**
     * Database Usage JSON object (stored as string) used to populate Usage tab.
     * @type {Array<DatabaseUsage>}
     * @memberof DatasetOut
     */
    'db_usage'?: Array<DatabaseUsage>;
    /**
     * String descriptions of populations.
     * @type {Array<string>}
     * @memberof DatasetOut
     */
    'population_strings'?: Array<string>;
    /**
     * Collection of links to related resources.
     * @type {DatasetLinks}
     * @memberof DatasetOut
     */
    '_links'?: DatasetLinks;
    /**
     * The index of the dataset is the column in the dataset used as row labels (mostly relevant for trainingset)
     * @type {FeatureOut}
     * @memberof DatasetOut
     */
    'index'?: FeatureOut;
    /**
     * Deprecated: The subgraph id of the resource.
     * @type {string}
     * @memberof DatasetOut
     */
    'subgraph_id'?: string;
    /**
     * Number of models using this dataset.
     * @type {number}
     * @memberof DatasetOut
     */
    'model_count'?: number;
    /**
     * Object\'s tagged to this study.
     * @type {AppSchemaDatasetsObjectTags}
     * @memberof DatasetOut
     */
    'object_tags'?: AppSchemaDatasetsObjectTags;
}
/**
 * Dataset pagination out.
 * @export
 * @interface DatasetPaginationOut
 */
export interface DatasetPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof DatasetPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<DatasetOut>}
     * @memberof DatasetPaginationOut
     */
    'items'?: Array<DatasetOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof DatasetPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof DatasetPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof DatasetPaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum DatasetSortEnum {
    Popularity = 'popularity',
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Represent statistics for a datetime feature.
 * @export
 * @interface DatetimeFeatureStatistics
 */
export interface DatetimeFeatureStatistics {
    /**
     * Percentage of column values that are missing or zero-length.
     * @type {number}
     * @memberof DatetimeFeatureStatistics
     */
    'percent_missing'?: number;
    /**
     * Earliest time of datetime values.
     * @type {string}
     * @memberof DatetimeFeatureStatistics
     */
    'earliest_time'?: string;
    /**
     * Latest time of datetime values.
     * @type {string}
     * @memberof DatetimeFeatureStatistics
     */
    'latest_time'?: string;
    /**
     * Histogram depicting the distribution of datetime features.
     * @type {DatetimeHistogram}
     * @memberof DatetimeFeatureStatistics
     */
    'histogram'?: DatetimeHistogram;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: DatetimeFeatureStatisticsSimpleBase; }}
     * @memberof DatetimeFeatureStatistics
     */
    'history'?: { [key: string]: DatetimeFeatureStatisticsSimpleBase; };
}
/**
 * Represent statistics for datetime feature.  These fields will be included in the stats history.
 * @export
 * @interface DatetimeFeatureStatisticsSimpleBase
 */
export interface DatetimeFeatureStatisticsSimpleBase {
    /**
     * Percentage of column values that are missing or zero-length.
     * @type {number}
     * @memberof DatetimeFeatureStatisticsSimpleBase
     */
    'percent_missing'?: number;
    /**
     * Earliest time of datetime values.
     * @type {string}
     * @memberof DatetimeFeatureStatisticsSimpleBase
     */
    'earliest_time'?: string;
    /**
     * Latest time of datetime values.
     * @type {string}
     * @memberof DatetimeFeatureStatisticsSimpleBase
     */
    'latest_time'?: string;
}
/**
 * A datetime histogram object.  See https://numpy.org/doc/1.18/reference/generated/numpy.histogram.html
 * @export
 * @interface DatetimeHistogram
 */
export interface DatetimeHistogram {
    /**
     * The density values of the histogram
     * @type {Array<number>}
     * @memberof DatetimeHistogram
     */
    'hist'?: Array<number>;
    /**
     * The bin edges (length(hist)+1). All but the last (righthand-most) bin is half-open
     * @type {Array<string>}
     * @memberof DatetimeHistogram
     */
    'bin_edges_date_time'?: Array<string>;
}
/**
 * Model Deployment model.
 * @export
 * @interface Deployment
 */
export interface Deployment {
    /**
     * Model\'s deployment stage.
     * @type {DeploymentStageEnum}
     * @memberof Deployment
     */
    'stage'?: DeploymentStageEnum;
    /**
     * Model\'s deployed artifact url. E.g. link to the object in S3.
     * @type {string}
     * @memberof Deployment
     */
    'artifact_url'?: string;
    /**
     * Model\'s deployed endpoint. E.g. the endpoint at which the deployed model is accessible.
     * @type {string}
     * @memberof Deployment
     */
    'endpoint'?: string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum DeploymentStageEnum {
    Development = 'development',
    Testing = 'testing',
    Staging = 'staging',
    Production = 'production',
    Invalid = 'invalid'
}

/**
 * Represent dynamic series statistics for a dynamic feature type.
 * @export
 * @interface DynamicFeatureStatistics
 */
export interface DynamicFeatureStatistics {
    /**
     * Minimum series length.
     * @type {number}
     * @memberof DynamicFeatureStatistics
     */
    'min_series_length'?: number;
    /**
     * Maximum series length.
     * @type {number}
     * @memberof DynamicFeatureStatistics
     */
    'max_series_length'?: number;
    /**
     * Line Plot of percentile value at each index value for which there are observed values.
     * @type {{ [key: string]: LinePlot; }}
     * @memberof DynamicFeatureStatistics
     */
    'percentile_series'?: { [key: string]: LinePlot; };
    /**
     * Histogram depicting the distribution of series length in the dynamic feature.
     * @type {Histogram}
     * @memberof DynamicFeatureStatistics
     */
    'series_length_distribution'?: Histogram;
    /**
     * Line Plot of the mean value at each index value for which there are observed values.
     * @type {LinePlot}
     * @memberof DynamicFeatureStatistics
     */
    'mean_series'?: LinePlot;
    /**
     * Line Plot of the standard deviation at each index value for which there are observed values.
     * @type {LinePlot}
     * @memberof DynamicFeatureStatistics
     */
    'std_series'?: LinePlot;
    /**
     * A frequency object representing the relative frequency at each index value for which there are observed values for categorical-valued dynamic features.
     * @type {{ [key: string]: Frequency; }}
     * @memberof DynamicFeatureStatistics
     */
    'frequency_series'?: { [key: string]: Frequency; };
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: DynamicFeatureStatisticsSimpleBase; }}
     * @memberof DynamicFeatureStatistics
     */
    'history'?: { [key: string]: DynamicFeatureStatisticsSimpleBase; };
}
/**
 * Represent statistics for a dynamic feature type.  These fields will be included in the stats history.
 * @export
 * @interface DynamicFeatureStatisticsSimpleBase
 */
export interface DynamicFeatureStatisticsSimpleBase {
    /**
     * Minimum series length.
     * @type {number}
     * @memberof DynamicFeatureStatisticsSimpleBase
     */
    'min_series_length'?: number;
    /**
     * Maximum series length.
     * @type {number}
     * @memberof DynamicFeatureStatisticsSimpleBase
     */
    'max_series_length'?: number;
}
/**
 * An Enterprise Resource.
 * @export
 * @interface Enterprise
 */
export interface Enterprise {
    /**
     * Enterprise name.
     * @type {string}
     * @memberof Enterprise
     */
    'name': string;
    /**
     * Enterprise Identity Provider.
     * @type {string}
     * @memberof Enterprise
     */
    'identity_provider'?: string;
    /**
     * Enterprise SAML SSO entity id.
     * @type {string}
     * @memberof Enterprise
     */
    'entity_id'?: string;
    /**
     * Enterprise SAML SSO ACS url.
     * @type {string}
     * @memberof Enterprise
     */
    'acs_url'?: string;
    /**
     * Enterprise SAML SSO IDP metadata
     * @type {string}
     * @memberof Enterprise
     */
    'idp_metadata'?: string;
    /**
     * 
     * @type {number}
     * @memberof Enterprise
     */
    'id': number;
    /**
     * The list of integrations to retrieve
     * @type {Array<Integration>}
     * @memberof Enterprise
     */
    'integrations'?: Array<Integration>;
    /**
     * The enterprise messages
     * @type {Array<MessageOut>}
     * @memberof Enterprise
     */
    'messages'?: Array<MessageOut>;
    /**
     * The actions the requesting user is allowed to perform on this resource.
     * @type {Array<ResourceAction>}
     * @memberof Enterprise
     */
    '_permissions'?: Array<ResourceAction>;
}
/**
 * An Enterprise create/update Resource.
 * @export
 * @interface EnterpriseIn
 */
export interface EnterpriseIn {
    /**
     * Enterprise name.
     * @type {string}
     * @memberof EnterpriseIn
     */
    'name': string;
    /**
     * Enterprise Identity Provider.
     * @type {string}
     * @memberof EnterpriseIn
     */
    'identity_provider'?: string;
    /**
     * Enterprise SAML SSO entity id.
     * @type {string}
     * @memberof EnterpriseIn
     */
    'entity_id'?: string;
    /**
     * Enterprise SAML SSO ACS url.
     * @type {string}
     * @memberof EnterpriseIn
     */
    'acs_url'?: string;
    /**
     * Enterprise SAML SSO IDP metadata
     * @type {string}
     * @memberof EnterpriseIn
     */
    'idp_metadata'?: string;
}
/**
 * External asset model.
 * @export
 * @interface ExternalAsset
 */
export interface ExternalAsset {
    /**
     * Asset uri.
     * @type {string}
     * @memberof ExternalAsset
     */
    'uri'?: string;
    /**
     * External asset type.
     * @type {ExternalAssetTypeEnum}
     * @memberof ExternalAsset
     */
    'external_asset_type'?: ExternalAssetTypeEnum;
}
/**
 * External asset type enum.
 * @export
 * @enum {string}
 */

export enum ExternalAssetTypeEnum {
    Invalid = 'invalid',
    Document = 'document',
    Notebook = 'notebook'
}

/**
 * Enum for external tools.
 * @export
 * @enum {string}
 */

export enum ExternalToolEnum {
    Looker = 'LOOKER',
    Mode = 'MODE',
    Tableau = 'TABLEAU'
}

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum FeatureContributionMethod {
    Gini = 'gini',
    Gain = 'gain',
    Shap = 'shap',
    Coefficient = 'coefficient',
    Lime = 'lime',
    Permutation = 'permutation',
    PearsonR = 'pearson_r',
    KendallTau = 'kendall_tau',
    CramerV = 'cramer_v',
    KruskalWallisHTest = 'kruskal_wallis_h_test',
    ControlVariable = 'control_variable',
    ProductMomentR = 'product_moment_r',
    FrequencyScore = 'frequency_score',
    OddsRatio = 'odds_ratio',
    RelativeRiskRatio = 'relative_risk_ratio',
    HazardRatio = 'hazard_ratio',
    MeanGainUnstandardized = 'mean_gain_unstandardized',
    MeanGainStandardized = 'mean_gain_standardized',
    MeanDifferenceUnstandardized = 'mean_difference_unstandardized',
    MeanDifferenceStandardized = 'mean_difference_standardized',
    ProportionDifference = 'proportion_difference',
    LogOddsRatio = 'log_odds_ratio',
    PearsonChiSquaredTest = 'pearson_chi_squared_test',
    Forecast = 'forecast',
    PercentChangeDifference = 'percent_change_difference',
    AdjustedOddsRatio = 'adjusted_odds_ratio',
    AdjustedHazardRatio = 'adjusted_hazard_ratio',
    IncidentRateRatio = 'incident_rate_ratio',
    RiskDifference = 'risk_difference',
    InformationFlow = 'information_flow',
    StandardizedCoefficient = 'standardized_coefficient',
    CohensD = 'cohens_d',
    HedgesG = 'hedges_g',
    GlassSDelta = 'glass_s_delta',
    RootMeanSquareDifferencePsi = 'root_mean_square_difference_psi',
    MahalanobisDistance = 'mahalanobis_distance',
    CohensW = 'cohens_w',
    CohensH = 'cohens_h',
    CliffsDelta = 'cliffs_delta',
    RankBiserialCorrelation = 'rank_biserial_correlation',
    SpearmanCorrelation = 'spearman_correlation',
    Elasticity = 'elasticity',
    PrevalenceRatio = 'prevalence_ratio',
    Invalid = 'invalid'
}

/**
 * Feature contribution filter count info.
 * @export
 * @interface FeatureContributionMethodFilterCounts
 */
export interface FeatureContributionMethodFilterCounts {
    /**
     * 
     * @type {string}
     * @memberof FeatureContributionMethodFilterCounts
     */
    'method'?: string;
    /**
     * 
     * @type {number}
     * @memberof FeatureContributionMethodFilterCounts
     */
    'count'?: number;
}
/**
 * Variable resource links.
 * @export
 * @interface FeatureLinks
 */
export interface FeatureLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof FeatureLinks
     */
    'self': string;
    /**
     * Link to feature\'s variable.
     * @type {string}
     * @memberof FeatureLinks
     */
    'variable'?: string;
}
/**
 * Feature output model.
 * @export
 * @interface FeatureOut
 */
export interface FeatureOut {
    /**
     * 
     * @type {string}
     * @memberof FeatureOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof FeatureOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof FeatureOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof FeatureOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof FeatureOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof FeatureOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof FeatureOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FeatureOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof FeatureOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof FeatureOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FeatureOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof FeatureOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Features\'s name.
     * @type {string}
     * @memberof FeatureOut
     */
    'name': string;
    /**
     * Descriptive statistics of the feature.
     * @type {Array<FeatureStatistics>}
     * @memberof FeatureOut
     */
    'feature_statistics'?: Array<FeatureStatistics>;
    /**
     * ID of Variable this Feature operationalizes.
     * @type {string}
     * @memberof FeatureOut
     */
    'variable_id'?: string;
    /**
     * Filtered by values.
     * @type {Array<FilterValue>}
     * @memberof FeatureOut
     */
    'filtered_by_values'?: Array<FilterValue>;
    /**
     * Collection of links to related resources.
     * @type {FeatureLinks}
     * @memberof FeatureOut
     */
    '_links'?: FeatureLinks;
    /**
     * Number of models using this feature.
     * @type {number}
     * @memberof FeatureOut
     */
    'model_count'?: number;
    /**
     * The variable this feature operationalizes.
     * @type {VariableOut}
     * @memberof FeatureOut
     */
    'variable'?: VariableOut;
}
/**
 * Feature pagination out.
 * @export
 * @interface FeaturePaginationOut
 */
export interface FeaturePaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof FeaturePaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<FeatureOut>}
     * @memberof FeaturePaginationOut
     */
    'items'?: Array<FeatureOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof FeaturePaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof FeaturePaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof FeaturePaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum FeatureSortEnum {
    ModelCount = 'model_count',
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Enum for feature source.
 * @export
 * @enum {string}
 */

export enum FeatureSourceEnum {
    Invalid = 'invalid',
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user'
}

/**
 * Represent statistics of a feature.  Note: exactly one of the `*_feature_statistics` fields must be non-null.
 * @export
 * @interface FeatureStatistics
 */
export interface FeatureStatistics {
    /**
     * Type of the feature.
     * @type {FeatureTypeEnum}
     * @memberof FeatureStatistics
     */
    'feature_type'?: FeatureTypeEnum;
    /**
     * Who generated the statistic object.
     * @type {FeatureSourceEnum}
     * @memberof FeatureStatistics
     */
    'generated_by'?: FeatureSourceEnum;
    /**
     * Statistics for a numerical feature.
     * @type {NumericalFeatureStatistics}
     * @memberof FeatureStatistics
     */
    'numerical_feature_statistics'?: NumericalFeatureStatistics;
    /**
     * Statistics for a categorical feature.
     * @type {CategoricalFeatureStatistics}
     * @memberof FeatureStatistics
     */
    'categorical_feature_statistics'?: CategoricalFeatureStatistics;
    /**
     * Statistics for a time series feature.
     * @type {TimeSeriesFeatureStatistics}
     * @memberof FeatureStatistics
     */
    'time_series_feature_statistics'?: TimeSeriesFeatureStatistics;
    /**
     * Statistics for a dynamic feature.
     * @type {DynamicFeatureStatistics}
     * @memberof FeatureStatistics
     */
    'dynamic_feature_statistics'?: DynamicFeatureStatistics;
    /**
     * Statistics for a string feature.
     * @type {StringFeatureStatistics}
     * @memberof FeatureStatistics
     */
    'string_feature_statistics'?: StringFeatureStatistics;
    /**
     * Statistics for a datetime feature.
     * @type {DatetimeFeatureStatistics}
     * @memberof FeatureStatistics
     */
    'datetime_feature_statistics'?: DatetimeFeatureStatistics;
}
/**
 * Enum for feature types.
 * @export
 * @enum {string}
 */

export enum FeatureTypeEnum {
    Invalid = 'invalid',
    Numerical = 'numerical',
    Categorical = 'categorical',
    Datetime = 'datetime',
    Text = 'text',
    Image = 'image',
    Audio = 'audio',
    Video = 'video',
    File = 'file',
    TimeSeries = 'time_series',
    Dynamic = 'dynamic',
    String = 'string'
}

/**
 * A Filter value object model.
 * @export
 * @interface FilterValue
 */
export interface FilterValue {
    /**
     * Retrieval status.
     * @type {FilterValueType}
     * @memberof FilterValue
     */
    'filter_type'?: FilterValueType;
    /**
     * Filter value.
     * @type {string}
     * @memberof FilterValue
     */
    'value'?: string;
    /**
     * User who filtered by this value.
     * @type {string}
     * @memberof FilterValue
     */
    'added_by'?: string;
    /**
     * Time this value was added.
     * @type {string}
     * @memberof FilterValue
     */
    'added_on'?: string;
    /**
     * Related filter values used in conjunction with this filter.
     * @type {Array<RelatedFilterValue>}
     * @memberof FilterValue
     */
    'related_values'?: Array<RelatedFilterValue>;
}
/**
 * Filter value types.
 * @export
 * @enum {string}
 */

export enum FilterValueType {
    Filter = 'filter',
    Sort = 'sort'
}

/**
 * Interface for finding in study.
 * @export
 * @interface Finding
 */
export interface Finding {
    /**
     * 
     * @type {string}
     * @memberof Finding
     */
    'summary'?: string;
    /**
     * 
     * @type {RawFinding}
     * @memberof Finding
     */
    'data'?: RawFinding;
    /**
     * 
     * @type {Array<string>}
     * @memberof Finding
     */
    'labels'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof Finding
     */
    'mechanistic': boolean;
    /**
     * 
     * @type {string}
     * @memberof Finding
     */
    'mechanism_type'?: string;
}
/**
 * Schema for identifying finding.
 * @export
 * @interface FindingMeta
 */
export interface FindingMeta {
    /**
     * 
     * @type {string}
     * @memberof FindingMeta
     */
    'pmid'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindingMeta
     */
    'doi'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindingMeta
     */
    'association_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FindingMeta
     */
    'is_rct': boolean;
    /**
     * 
     * @type {string}
     * @memberof FindingMeta
     */
    'publish_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof FindingMeta
     */
    'article_score'?: number;
    /**
     * 
     * @type {number}
     * @memberof FindingMeta
     */
    'citation_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof FindingMeta
     */
    'name'?: string;
    /**
     * 
     * @type {Array<StudyAuthor>}
     * @memberof FindingMeta
     */
    'authorships'?: Array<StudyAuthor>;
    /**
     * 
     * @type {string}
     * @memberof FindingMeta
     */
    'journal'?: string;
}
/**
 * Next/prev Pagination links with first and last urls.
 * @export
 * @interface FirstLastPaginationLinks
 */
export interface FirstLastPaginationLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'self': string;
    /**
     * Link to next page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'next'?: string;
    /**
     * Link to previous page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'prev'?: string;
    /**
     * Link to first page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'first'?: string;
    /**
     * Link to last page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'last'?: string;
}
/**
 * Optional id base object.
 * @export
 * @interface FlexibleSimpleBaseObject
 */
export interface FlexibleSimpleBaseObject {
    /**
     * 
     * @type {string}
     * @memberof FlexibleSimpleBaseObject
     */
    'system_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof FlexibleSimpleBaseObject
     */
    'name': string;
}
/**
 * A frequency object.
 * @export
 * @interface Frequency
 */
export interface Frequency {
    /**
     * The normalized count of each index
     * @type {Array<number>}
     * @memberof Frequency
     */
    'normalized_counts'?: Array<number>;
    /**
     * The index of frequency object
     * @type {Array<string>}
     * @memberof Frequency
     */
    'index'?: Array<string>;
}
/**
 * Status for polling functions.
 * @export
 * @enum {string}
 */

export enum FunctionStatus {
    Pending = 'pending',
    Running = 'running',
    Finished = 'finished',
    Error = 'error'
}

/**
 * Graph metrics schema.
 * @export
 * @interface GraphMetrics
 */
export interface GraphMetrics {
    /**
     * 
     * @type {number}
     * @memberof GraphMetrics
     */
    'num_relationships': number;
    /**
     * 
     * @type {number}
     * @memberof GraphMetrics
     */
    'num_topics': number;
    /**
     * 
     * @type {number}
     * @memberof GraphMetrics
     */
    'num_sources': number;
    /**
     * 
     * @type {string}
     * @memberof GraphMetrics
     */
    'last_updated': string;
}
/**
 * GraphQL query model.
 * @export
 * @interface GraphQLQuery
 */
export interface GraphQLQuery {
    /**
     * 
     * @type {string}
     * @memberof GraphQLQuery
     */
    'query': string;
    /**
     * 
     * @type {string}
     * @memberof GraphQLQuery
     */
    'operationName'?: string;
    /**
     * 
     * @type {any}
     * @memberof GraphQLQuery
     */
    'variables'?: any;
}
/**
 * Single topic graph direction for enum.
 * @export
 * @enum {string}
 */

export enum GraphSearchDirection {
    In = 'in',
    Out = 'out'
}

/**
 * 
 * @export
 * @interface GroundedEntity
 */
export interface GroundedEntity {
    /**
     * 
     * @type {string}
     * @memberof GroundedEntity
     */
    'name': string;
    /**
     * 
     * @type {Array<QueryParserApiModelsPydanticGrounding>}
     * @memberof GroundedEntity
     */
    'groundings'?: Array<QueryParserApiModelsPydanticGrounding>;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * A histogram object.  See https://numpy.org/doc/1.18/reference/generated/numpy.histogram.html
 * @export
 * @interface Histogram
 */
export interface Histogram {
    /**
     * The density values of the histogram
     * @type {Array<number>}
     * @memberof Histogram
     */
    'hist'?: Array<number>;
    /**
     * The bin edges (length(hist)+1). All but the last (righthand-most) bin is half-open
     * @type {Array<number>}
     * @memberof Histogram
     */
    'bin_edges'?: Array<number>;
}
/**
 * SSO Identity Providers preconfigured in AWS Cognito user pool.
 * @export
 * @enum {string}
 */

export enum IdentityProvider {
    Google = 'Google',
    KeycloakGoogleDev = 'keycloak-google-dev'
}

/**
 * Get Identity Provider Name.
 * @export
 * @interface IdentityProviderNameOut
 */
export interface IdentityProviderNameOut {
    /**
     * Name of the identity provider for given email as configured in System
     * @type {IdentityProvider}
     * @memberof IdentityProviderNameOut
     */
    'idp'?: IdentityProvider;
}
/**
 * An Integration Resource.
 * @export
 * @interface Integration
 */
export interface Integration {
    /**
     * Integration name.
     * @type {string}
     * @memberof Integration
     */
    'name'?: string;
    /**
     * Integration state.
     * @type {IntegrationState}
     * @memberof Integration
     */
    'state'?: IntegrationState;
    /**
     * The integration type.
     * @type {IntegrationType}
     * @memberof Integration
     */
    'service_type': IntegrationType;
    /**
     * API Endpoint.
     * @type {string}
     * @memberof Integration
     */
    'endpoint': string;
    /**
     * Integration IP address.
     * @type {string}
     * @memberof Integration
     */
    'ip_address'?: string;
    /**
     * Integration lamdba names.
     * @type {string}
     * @memberof Integration
     */
    'lambda_arn'?: string;
    /**
     * Is this integration deployed on enterprise\'s internal stack?
     * @type {boolean}
     * @memberof Integration
     */
    'on_premise'?: boolean;
    /**
     * The list of tables to retrieve
     * @type {Array<Table>}
     * @memberof Integration
     */
    'tables'?: Array<Table>;
    /**
     * The list of views to retrieve
     * @type {Array<Table>}
     * @memberof Integration
     */
    'views'?: Array<Table>;
    /**
     * The integration messages
     * @type {Array<MessageOut>}
     * @memberof Integration
     */
    'messages'?: Array<MessageOut>;
    /**
     * 
     * @type {number}
     * @memberof Integration
     */
    'id': number;
    /**
     * Integration credentials.
     * @type {RedshiftCredentials | SnowflakeCredentials | BigQueryCredentials | LookerCredentials | ModeCredentials}
     * @memberof Integration
     */
    'credentials': RedshiftCredentials | SnowflakeCredentials | BigQueryCredentials | LookerCredentials | ModeCredentials;
    /**
     * Enterprise link.
     * @type {string}
     * @memberof Integration
     */
    'enterprise'?: string;
    /**
     * Team link.
     * @type {string}
     * @memberof Integration
     */
    'team'?: string;
    /**
     * The actions the requesting user is allowed to perform on this resource.
     * @type {Array<ResourceAction>}
     * @memberof Integration
     */
    '_permissions'?: Array<ResourceAction>;
}
/**
 * Integration model for create/update.
 * @export
 * @interface IntegrationIn
 */
export interface IntegrationIn {
    /**
     * Integration name.
     * @type {string}
     * @memberof IntegrationIn
     */
    'name'?: string;
    /**
     * Integration state.
     * @type {IntegrationState}
     * @memberof IntegrationIn
     */
    'state'?: IntegrationState;
    /**
     * The integration type.
     * @type {IntegrationType}
     * @memberof IntegrationIn
     */
    'service_type'?: IntegrationType;
    /**
     * API Endpoint.
     * @type {string}
     * @memberof IntegrationIn
     */
    'endpoint'?: string;
    /**
     * Integration IP address.
     * @type {string}
     * @memberof IntegrationIn
     */
    'ip_address'?: string;
    /**
     * Integration lamdba names.
     * @type {string}
     * @memberof IntegrationIn
     */
    'lambda_arn'?: string;
    /**
     * Is this integration deployed on enterprise\'s internal stack?
     * @type {boolean}
     * @memberof IntegrationIn
     */
    'on_premise'?: boolean;
    /**
     * The list of tables to retrieve
     * @type {Array<Table>}
     * @memberof IntegrationIn
     */
    'tables'?: Array<Table>;
    /**
     * The list of views to retrieve
     * @type {Array<Table>}
     * @memberof IntegrationIn
     */
    'views'?: Array<Table>;
    /**
     * The integration messages
     * @type {Array<MessageOut>}
     * @memberof IntegrationIn
     */
    'messages'?: Array<MessageOut>;
    /**
     * Integration credentials.
     * @type {RedshiftCredentialsIn | SnowflakeCredentialsIn | BigQueryCredentialsIn | LookerCredentialsIn | ModeCredentialsIn}
     * @memberof IntegrationIn
     */
    'credentials'?: RedshiftCredentialsIn | SnowflakeCredentialsIn | BigQueryCredentialsIn | LookerCredentialsIn | ModeCredentialsIn;
    /**
     * Team or Enterprise link
     * @type {string}
     * @memberof IntegrationIn
     */
    'owner'?: string;
}
/**
 * Integration service state.
 * @export
 * @enum {string}
 */

export enum IntegrationState {
    Initial = 'INITIAL',
    Active = 'ACTIVE',
    Inactive = 'INACTIVE'
}

/**
 * Integration retrieval types.
 * @export
 * @enum {string}
 */

export enum IntegrationType {
    Redshift = 'REDSHIFT',
    Snowflake = 'SNOWFLAKE',
    Bigquery = 'BIGQUERY',
    Looker = 'LOOKER',
    Mode = 'MODE'
}

/**
 * Represent a line plot.
 * @export
 * @interface LinePlot
 */
export interface LinePlot {
    /**
     * The value of the series at each value of the (ordered) index.
     * @type {Array<number>}
     * @memberof LinePlot
     */
    'values'?: Array<number>;
    /**
     * The index for the values. Ordered - can be units of time or dates.
     * @type {Array<string>}
     * @memberof LinePlot
     */
    'index'?: Array<string>;
}
/**
 * Credentials for a Looker integration without password.
 * @export
 * @interface LookerCredentials
 */
export interface LookerCredentials {
    /**
     * Integration verify ssl
     * @type {boolean}
     * @memberof LookerCredentials
     */
    'verify_ssl'?: boolean;
    /**
     * Integration base url
     * @type {string}
     * @memberof LookerCredentials
     */
    'base_url': string;
}
/**
 * Input credentials for a Looker integration.
 * @export
 * @interface LookerCredentialsIn
 */
export interface LookerCredentialsIn {
    /**
     * Integration verify ssl
     * @type {boolean}
     * @memberof LookerCredentialsIn
     */
    'verify_ssl'?: boolean;
    /**
     * Integration base url
     * @type {string}
     * @memberof LookerCredentialsIn
     */
    'base_url': string;
    /**
     * Integration client id.
     * @type {string}
     * @memberof LookerCredentialsIn
     */
    'client_id': string;
    /**
     * Integration client secret key.
     * @type {string}
     * @memberof LookerCredentialsIn
     */
    'client_secret': string;
}
/**
 * A Message object.
 * @export
 * @interface MessageIn
 */
export interface MessageIn {
    /**
     * 
     * @type {string}
     * @memberof MessageIn
     */
    'message': string;
    /**
     * 
     * @type {MessageType}
     * @memberof MessageIn
     */
    'message_type'?: MessageType;
    /**
     * The message attributes
     * @type {any}
     * @memberof MessageIn
     */
    'attributes'?: any;
    /**
     * Integration link.
     * @type {string}
     * @memberof MessageIn
     */
    'integration': string;
}
/**
 * A Message object.
 * @export
 * @interface MessageOut
 */
export interface MessageOut {
    /**
     * 
     * @type {string}
     * @memberof MessageOut
     */
    'message': string;
    /**
     * 
     * @type {MessageType}
     * @memberof MessageOut
     */
    'message_type'?: MessageType;
    /**
     * The message attributes
     * @type {any}
     * @memberof MessageOut
     */
    'attributes'?: any;
    /**
     * Integration link.
     * @type {string}
     * @memberof MessageOut
     */
    'integration': string;
    /**
     * 
     * @type {number}
     * @memberof MessageOut
     */
    'id'?: number;
    /**
     * Creation date
     * @type {string}
     * @memberof MessageOut
     */
    'created'?: string;
}
/**
 * Message type.
 * @export
 * @enum {string}
 */

export enum MessageType {
    Error = 'ERROR',
    DatasetCreated = 'DATASET_CREATED'
}

/**
 * A System Database Usage Object.
 * @export
 * @interface MetricMonitoring
 */
export interface MetricMonitoring {
    /**
     * Color of the alert when the rule is in violation.
     * @type {AlertColor}
     * @memberof MetricMonitoring
     */
    'alert_color': AlertColor;
    /**
     * Last time that the monitoring was enabled.
     * @type {string}
     * @memberof MetricMonitoring
     */
    'enabled': string;
    /**
     * The rule of which determines state of violation.
     * @type {MonitoringRuleSet}
     * @memberof MetricMonitoring
     */
    'rule': MonitoringRuleSet;
}
/**
 * Metrics name enum.
 * @export
 * @enum {string}
 */

export enum Metrics {
    SearchCreate = 'semantic_search.create',
    SearchClusterRead = 'semantic_search_cluster.read'
}

/**
 * Credentials for a Mode integration without the token and secret.
 * @export
 * @interface ModeCredentials
 */
export interface ModeCredentials {
    /**
     * Integration dashboard
     * @type {string}
     * @memberof ModeCredentials
     */
    'dashboard': string;
}
/**
 * Input credentials for a Mode integration.
 * @export
 * @interface ModeCredentialsIn
 */
export interface ModeCredentialsIn {
    /**
     * Integration dashboard
     * @type {string}
     * @memberof ModeCredentialsIn
     */
    'dashboard': string;
    /**
     * Integration api token.
     * @type {string}
     * @memberof ModeCredentialsIn
     */
    'api_token': string;
    /**
     * Integration api secret.
     * @type {string}
     * @memberof ModeCredentialsIn
     */
    'api_secret': string;
}
/**
 * Values available for filtering models.
 * @export
 * @interface ModelFilters
 */
export interface ModelFilters {
    /**
     * Available performance types for filtering models and their counts. Inner arrays will be of length 2. The first value will be the score type and thesecond the count.
     * @type {Array<Array<number | ModelScoreEnum>>}
     * @memberof ModelFilters
     */
    'performance'?: Array<Array<number | ModelScoreEnum>>;
}
/**
 * Model resource links.
 * @export
 * @interface ModelLinks
 */
export interface ModelLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof ModelLinks
     */
    'self': string;
    /**
     * Link to model\'s target feature.
     * @type {string}
     * @memberof ModelLinks
     */
    'target_feature'?: string;
    /**
     * Link to model\'s training dataset.
     * @type {string}
     * @memberof ModelLinks
     */
    'training_dataset'?: string;
    /**
     * Link to model\'s study.
     * @type {string}
     * @memberof ModelLinks
     */
    'study'?: string;
}
/**
 * Model output model.
 * @export
 * @interface ModelOut
 */
export interface ModelOut {
    /**
     * 
     * @type {string}
     * @memberof ModelOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof ModelOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof ModelOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof ModelOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof ModelOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof ModelOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof ModelOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ModelOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ModelOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof ModelOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ModelOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ModelOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Model algorithm.
     * @type {string}
     * @memberof ModelOut
     */
    'algorithm'?: string;
    /**
     * Standardized ModelDB algorithm id.
     * @type {number}
     * @memberof ModelOut
     */
    'standardized_algorithm_id': number;
    /**
     * Number of observations or nobs..
     * @type {number}
     * @memberof ModelOut
     */
    'number_of_observations'?: number;
    /**
     * Model\'s hyper parameters.
     * @type {ModelParams}
     * @memberof ModelOut
     */
    'model_params'?: ModelParams;
    /**
     * Model label.
     * @type {string}
     * @memberof ModelOut
     */
    'name'?: string;
    /**
     * Description of the model.
     * @type {string}
     * @memberof ModelOut
     */
    'description'?: string;
    /**
     * Statistical controls of the model.
     * @type {Array<string>}
     * @memberof ModelOut
     */
    'statistical_controls'?: Array<string>;
    /**
     * Location of the source code.
     * @type {string}
     * @memberof ModelOut
     */
    'source'?: string;
    /**
     * System ID of training dataset.
     * @type {string}
     * @memberof ModelOut
     */
    'training_dataset_id': string;
    /**
     * System Evaluator specific field.
     * @type {string}
     * @memberof ModelOut
     */
    'stub_id'?: string;
    /**
     * The performance of the model.
     * @type {Array<ModelPerformanceOut>}
     * @memberof ModelOut
     */
    'performance'?: Array<ModelPerformanceOut>;
    /**
     * System ID of target of the model.
     * @type {string}
     * @memberof ModelOut
     */
    'target_feature_id'?: string;
    /**
     * Model\'s deployment information.
     * @type {Deployment}
     * @memberof ModelOut
     */
    'deployment'?: Deployment;
    /**
     * Model\'s module and class
     * @type {string}
     * @memberof ModelOut
     */
    'library'?: string;
    /**
     * Collection of links to related resources.
     * @type {ModelLinks}
     * @memberof ModelOut
     */
    '_links'?: ModelLinks;
    /**
     * The experiment/project id containing the model.
     * @type {string}
     * @memberof ModelOut
     */
    'experiment_id'?: string;
}
/**
 * Model pagination out.
 * @export
 * @interface ModelPaginationOut
 */
export interface ModelPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof ModelPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<ModelOut>}
     * @memberof ModelPaginationOut
     */
    'items'?: Array<ModelOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof ModelPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof ModelPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof ModelPaginationOut
     */
    '_sorts'?: Array<string>;
    /**
     * Collection of filter values that can be applied.
     * @type {ModelFilters}
     * @memberof ModelPaginationOut
     */
    '_filters'?: ModelFilters;
}
/**
 * Model params model.
 * @export
 * @interface ModelParams
 */
export interface ModelParams {
    /**
     * Model\'s hyper parameters. E.g. for a linear regression, `normalize`, `fit_intercept`, etc.
     * @type {object}
     * @memberof ModelParams
     */
    'params'?: object;
}
/**
 * Base model performance input class.
 * @export
 * @interface ModelPerformanceBaseIn
 */
export interface ModelPerformanceBaseIn {
    /**
     * Who generated this model performance.
     * @type {ValidValueSource}
     * @memberof ModelPerformanceBaseIn
     */
    'generated_by'?: ValidValueSource;
    /**
     * Standard error of the Performance Value.
     * @type {number}
     * @memberof ModelPerformanceBaseIn
     */
    'standard_error'?: number;
    /**
     * The test dataset of this performance.
     * @type {TestDataset}
     * @memberof ModelPerformanceBaseIn
     */
    'test_dataset'?: TestDataset;
    /**
     * 
     * @type {ModelScoreEnum}
     * @memberof ModelPerformanceBaseIn
     */
    'score_type'?: ModelScoreEnum;
    /**
     * Model performance value.
     * @type {number}
     * @memberof ModelPerformanceBaseIn
     */
    'value'?: number;
    /**
     * Complex model performance value.
     * @type {Array<any>}
     * @memberof ModelPerformanceBaseIn
     */
    'complex_value'?: Array<any>;
}
/**
 * Model performance input.
 * @export
 * @interface ModelPerformanceOut
 */
export interface ModelPerformanceOut {
    /**
     * Who generated this model performance.
     * @type {ValidValueSource}
     * @memberof ModelPerformanceOut
     */
    'generated_by'?: ValidValueSource;
    /**
     * Standard error of the Performance Value.
     * @type {number}
     * @memberof ModelPerformanceOut
     */
    'standard_error'?: number;
    /**
     * The test dataset of this performance.
     * @type {TestDataset}
     * @memberof ModelPerformanceOut
     */
    'test_dataset'?: TestDataset;
    /**
     * Model performance score type.
     * @type {ValidModelScoreEnum}
     * @memberof ModelPerformanceOut
     */
    'score_type': ValidModelScoreEnum;
    /**
     * Model performance value.
     * @type {number}
     * @memberof ModelPerformanceOut
     */
    'value'?: number;
    /**
     * Complex model performance value.
     * @type {Array<any>}
     * @memberof ModelPerformanceOut
     */
    'complex_value'?: Array<any>;
    /**
     * History of this model performance value.
     * @type {{ [key: string]: ModelPerformanceBaseIn; }}
     * @memberof ModelPerformanceOut
     */
    'history'?: { [key: string]: ModelPerformanceBaseIn; };
    /**
     * 
     * @type {boolean}
     * @memberof ModelPerformanceOut
     */
    'primary_performance'?: boolean;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum ModelScoreEnum {
    AccuracyScore = 'accuracy_score',
    AveragePrecisionScore = 'average_precision_score',
    BalancedAccuracyScore = 'balanced_accuracy_score',
    BrierScoreLoss = 'brier_score_loss',
    CohenKappaScore = 'cohen_kappa_score',
    F1Score = 'f1_score',
    HammingLoss = 'hamming_loss',
    HingeLoss = 'hinge_loss',
    JaccardScore = 'jaccard_score',
    LogLoss = 'log_loss',
    MatthewsCorrCoef = 'matthews_corr_coef',
    PrecisionScore = 'precision_score',
    RecallScore = 'recall_score',
    RocAucScore = 'roc_auc_score',
    ZeroOneLoss = 'zero_one_loss',
    ExplainedVarianceScore = 'explained_variance_score',
    MaxError = 'max_error',
    MeanAbsoluteError = 'mean_absolute_error',
    MeanAbsolutePercentageError = 'mean_absolute_percentage_error',
    MeanSquaredError = 'mean_squared_error',
    MeanSquaredLogError = 'mean_squared_log_error',
    MedianAbsoluteError = 'median_absolute_error',
    R2Score = 'r2_score',
    CoverageError = 'coverage_error',
    LabelRankingAveragePrecisionScore = 'label_ranking_average_precision_score',
    LabelRankingLoss = 'label_ranking_loss',
    AdjustedR2Score = 'adjusted_r2_score',
    MutualInformationScore = 'mutual_information_score',
    AdjMutualInformationScore = 'adj_mutual_information_score',
    NormalizedMutualInformationScore = 'normalized_mutual_information_score',
    AdjRandScore = 'adj_rand_score',
    CompletenessScore = 'completeness_score',
    FowlkesMallowsScore = 'fowlkes_mallows_score',
    HomogeneityScore = 'homogeneity_score',
    VMeasureScore = 'v_measure_score',
    NegMeanAbsoluteError = 'neg_mean_absolute_error',
    NegMeanSquaredError = 'neg_mean_squared_error',
    RootMeanSquaredError = 'root_mean_squared_error',
    NegRootMeanSquaredError = 'neg_root_mean_squared_error',
    RootMeanSquaredLogError = 'root_mean_squared_log_error',
    NegMedianAbsoluteError = 'neg_median_absolute_error',
    CosineProximity = 'cosine_proximity',
    KullbackLeiblerDivergence = 'kullback_leibler_divergence',
    PoissonMetric = 'poisson_metric',
    MulticlassLogLoss = 'multiclass_log_loss',
    NormalizedDiscountedCumulativeGain = 'normalized_discounted_cumulative_gain',
    GammaDeviance = 'gamma_deviance',
    HuberMetric = 'huber_metric',
    FBetaScore = 'f_beta_score',
    EuclideanDistance = 'euclidean_distance',
    HaversineDistance = 'haversine_distance',
    MeanSquaredPredictioneRror = 'mean_squared_predictione_rror',
    PseudoR2Mcfadden = 'pseudo_r2_mcfadden',
    AdjustedPseudoR2Mcfadden = 'adjusted_pseudo_r2_mcfadden',
    PseudoR2Nagelkerke = 'pseudo_r2_nagelkerke',
    PseudoR2CoxSnell = 'pseudo_r2_cox_snell',
    PseudoR2Effron = 'pseudo_r2_effron',
    Bic = 'bic',
    Aic = 'aic',
    CorrelationActualForecast = 'correlation_actual_forecast',
    ForecastVsActual = 'forecast_vs_actual',
    MeanSquaredPercentageError = 'mean_squared_percentage_error',
    ConfusionMatrix = 'confusion_matrix',
    MulticlassConfusionMatrix = 'multiclass_confusion_matrix',
    RocCurve = 'roc_curve',
    Invalid = 'invalid'
}

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum ModelSortEnum {
    TargetName = 'target_name',
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at'
}

/**
 * Field options for monitoring a metric.
 * @export
 * @enum {string}
 */

export enum MonitoringField {
    Value = 'VALUE',
    Change = 'CHANGE',
    PctChange = 'PCT_CHANGE',
    AbsPctChange = 'ABS_PCT_CHANGE',
    AbsChange = 'ABS_CHANGE'
}

/**
 * Monitoring comparison operators.
 * @export
 * @enum {string}
 */

export enum MonitoringOperation {
    Gt = 'GT',
    Ge = 'GE',
    Lt = 'LT',
    Le = 'LE',
    Eq = 'EQ',
    Ne = 'NE'
}

/**
 * A ruleset for metric modeling comparisons.
 * @export
 * @interface MonitoringRuleSet
 */
export interface MonitoringRuleSet {
    /**
     * The field to compare
     * @type {MonitoringField}
     * @memberof MonitoringRuleSet
     */
    'field': MonitoringField;
    /**
     * The operator to compare with
     * @type {MonitoringOperation}
     * @memberof MonitoringRuleSet
     */
    'operator': MonitoringOperation;
    /**
     * The value to compare with
     * @type {number}
     * @memberof MonitoringRuleSet
     */
    'value': number;
}
/**
 * Node group model.  # noqa: E501
 * @export
 * @interface NodeGroup
 */
export interface NodeGroup {
    /**
     * 
     * @type {Array<NodeGroupItem>}
     * @memberof NodeGroup
     */
    'items': Array<NodeGroupItem>;
    /**
     * 
     * @type {number}
     * @memberof NodeGroup
     */
    'total': number;
}
/**
 * Supported Node Object model.  # noqa: E501
 * @export
 * @interface NodeGroupItem
 */
export interface NodeGroupItem {
    /**
     * 
     * @type {Array<SystemGraphApiClientModelsExtendedLinkObjectExtendedLinkObject>}
     * @memberof NodeGroupItem
     */
    'links': Array<SystemGraphApiClientModelsExtendedLinkObjectExtendedLinkObject>;
    /**
     * 
     * @type {SystemGraphApiClientModelsExtendedNodeObjectExtendedNodeObject}
     * @memberof NodeGroupItem
     */
    'node': SystemGraphApiClientModelsExtendedNodeObjectExtendedNodeObject;
}
/**
 * Null hypothesis input model.
 * @export
 * @interface NullHypothesisIn
 */
export interface NullHypothesisIn {
    /**
     * Statistical test type.
     * @type {ValidStatisticalTestType}
     * @memberof NullHypothesisIn
     */
    'test_type'?: ValidStatisticalTestType;
    /**
     * Significance level used for the test
     * @type {ValidSignificanceLevel}
     * @memberof NullHypothesisIn
     */
    'level'?: ValidSignificanceLevel;
    /**
     * Null hypothesis value.
     * @type {number}
     * @memberof NullHypothesisIn
     */
    'h0_value'?: number;
    /**
     * p-value of the test, used with significance_level to determine significance.
     * @type {number}
     * @memberof NullHypothesisIn
     */
    'p'?: number;
    /**
     * Manual flag to directly indicate test is significant without using p-value.
     * @type {boolean}
     * @memberof NullHypothesisIn
     */
    'is_significant'?: boolean;
}
/**
 * Null hypothesis output model.
 * @export
 * @interface NullHypothesisOut
 */
export interface NullHypothesisOut {
    /**
     * Statistical test type.
     * @type {StatisticalTestType}
     * @memberof NullHypothesisOut
     */
    'test_type'?: StatisticalTestType;
    /**
     * Significance level used for the test
     * @type {SignificanceLevel}
     * @memberof NullHypothesisOut
     */
    'level'?: SignificanceLevel;
    /**
     * Null hypothesis value.
     * @type {number}
     * @memberof NullHypothesisOut
     */
    'h0_value'?: number;
    /**
     * p-value of the test, used with significance_level to determine significance.
     * @type {number}
     * @memberof NullHypothesisOut
     */
    'p'?: number;
    /**
     * Manual flag to directly indicate test is significant without using p-value.
     * @type {boolean}
     * @memberof NullHypothesisOut
     */
    'is_significant'?: boolean;
}
/**
 * Represent a structured statistics for a numerical feature type.
 * @export
 * @interface NumericalFeatureStatistics
 */
export interface NumericalFeatureStatistics {
    /**
     * The value below which a given percentage of observations in a group of observations falls.
     * @type {{ [key: string]: number; }}
     * @memberof NumericalFeatureStatistics
     */
    'percentiles'?: { [key: string]: number; };
    /**
     * Minimum value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'min'?: number;
    /**
     * Maximum value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'max'?: number;
    /**
     * Median value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'median'?: number;
    /**
     * Mean value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'mean'?: number;
    /**
     * Standard deviation of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'std'?: number;
    /**
     * Interquartile range of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'iqr'?: number;
    /**
     * Kurtosis of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'kurtosis'?: number;
    /**
     * Skewness of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'skewness'?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatistics
     */
    'percent_missing'?: number;
    /**
     * Histogram of the feature
     * @type {Histogram}
     * @memberof NumericalFeatureStatistics
     */
    'histogram'?: Histogram;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: NumericalFeatureStatisticsSimpleBase; }}
     * @memberof NumericalFeatureStatistics
     */
    'history'?: { [key: string]: NumericalFeatureStatisticsSimpleBase; };
}
/**
 * Represent a structured statistics for a numerical feature type.  These fields will be included in the stats history.
 * @export
 * @interface NumericalFeatureStatisticsSimpleBase
 */
export interface NumericalFeatureStatisticsSimpleBase {
    /**
     * The value below which a given percentage of observations in a group of observations falls.
     * @type {{ [key: string]: number; }}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'percentiles'?: { [key: string]: number; };
    /**
     * Minimum value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'min'?: number;
    /**
     * Maximum value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'max'?: number;
    /**
     * Median value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'median'?: number;
    /**
     * Mean value of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'mean'?: number;
    /**
     * Standard deviation of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'std'?: number;
    /**
     * Interquartile range of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'iqr'?: number;
    /**
     * Kurtosis of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'kurtosis'?: number;
    /**
     * Skewness of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'skewness'?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof NumericalFeatureStatisticsSimpleBase
     */
    'percent_missing'?: number;
}
/**
 * Ordering direction enum.
 * @export
 * @enum {string}
 */

export enum Ordering {
    Asc = 'asc',
    Desc = 'desc'
}

/**
 * Partial dependence plot input.
 * @export
 * @interface PartialDependencePlotIn
 */
export interface PartialDependencePlotIn {
    /**
     * The partial dependence values or x-axis of PDP.
     * @type {Array<number>}
     * @memberof PartialDependencePlotIn
     */
    'pdp_value': Array<number>;
    /**
     * The partial dependence effect or y-axis of PDP.
     * @type {Array<number>}
     * @memberof PartialDependencePlotIn
     */
    'pdp_effect': Array<number>;
    /**
     * Who generated this object.
     * @type {ValidValueSource}
     * @memberof PartialDependencePlotIn
     */
    'generated_by'?: ValidValueSource;
}
/**
 * Polling status enum.
 * @export
 * @enum {string}
 */

export enum PollingStatus {
    NotExists = 'not_exists',
    Submitted = 'submitted',
    Running = 'running',
    Success = 'success',
    Failed = 'failed',
    FailedNoCitations = 'failed_no_citations'
}

/**
 * Publication author.
 * @export
 * @interface PublicationAuthor
 */
export interface PublicationAuthor {
    /**
     * Name of author.
     * @type {string}
     * @memberof PublicationAuthor
     */
    'name': string;
    /**
     * ORCID of author.
     * @type {string}
     * @memberof PublicationAuthor
     */
    'orcid'?: string;
}
/**
 * Publication info model.
 * @export
 * @interface PublicationInfo
 */
export interface PublicationInfo {
    /**
     * Date of publication.
     * @type {string}
     * @memberof PublicationInfo
     */
    'date_published'?: string;
    /**
     * Publication name (journal, etc).
     * @type {string}
     * @memberof PublicationInfo
     */
    'publication'?: string;
    /**
     * Ordered authors of publication.
     * @type {Array<PublicationAuthor>}
     * @memberof PublicationInfo
     */
    'ordered_authors'?: Array<PublicationAuthor>;
}
/**
 * 
 * @export
 * @interface QueryParserApiModelsPydanticGrounding
 */
export interface QueryParserApiModelsPydanticGrounding {
    /**
     * 
     * @type {string}
     * @memberof QueryParserApiModelsPydanticGrounding
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof QueryParserApiModelsPydanticGrounding
     */
    'namespace': string;
    /**
     * 
     * @type {string}
     * @memberof QueryParserApiModelsPydanticGrounding
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof QueryParserApiModelsPydanticGrounding
     */
    'score': number;
}
/**
 * Statistical finding.
 * @export
 * @interface RawFinding
 */
export interface RawFinding {
    /**
     * 
     * @type {string}
     * @memberof RawFinding
     */
    'association_id': string;
    /**
     * 
     * @type {string}
     * @memberof RawFinding
     */
    'variable_1': string;
    /**
     * 
     * @type {string}
     * @memberof RawFinding
     */
    'variable_2': string;
    /**
     * 
     * @type {boolean}
     * @memberof RawFinding
     */
    'bidirectional': boolean;
    /**
     * 
     * @type {FeatureContributionMethod}
     * @memberof RawFinding
     */
    'feature_contribution_method': FeatureContributionMethod;
    /**
     * 
     * @type {boolean}
     * @memberof RawFinding
     */
    'is_ratio': boolean;
    /**
     * 
     * @type {number}
     * @memberof RawFinding
     */
    'value': number;
    /**
     * 
     * @type {ConfidenceIntervalOut}
     * @memberof RawFinding
     */
    'ci'?: ConfidenceIntervalOut;
    /**
     * 
     * @type {number}
     * @memberof RawFinding
     */
    'p_value'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof RawFinding
     */
    'flags'?: Array<string>;
}
/**
 * Credentials for a Redshift integration without password.
 * @export
 * @interface RedshiftCredentials
 */
export interface RedshiftCredentials {
    /**
     * Integration database name.
     * @type {string}
     * @memberof RedshiftCredentials
     */
    'db_name': string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof RedshiftCredentials
     */
    'db_user': string;
    /**
     * Integration host (Required for Redshift).
     * @type {string}
     * @memberof RedshiftCredentials
     */
    'db_host': string;
    /**
     * Integration port (Required for Redshift).
     * @type {number}
     * @memberof RedshiftCredentials
     */
    'db_port': number;
}
/**
 * Input credentials for a Redshift integration.
 * @export
 * @interface RedshiftCredentialsIn
 */
export interface RedshiftCredentialsIn {
    /**
     * Integration database name.
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    'db_name': string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    'db_user': string;
    /**
     * Integration host (Required for Redshift).
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    'db_host': string;
    /**
     * Integration port (Required for Redshift).
     * @type {number}
     * @memberof RedshiftCredentialsIn
     */
    'db_port': number;
    /**
     * Integration password.
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    'db_password': string;
}
/**
 * A related filter value object model.
 * @export
 * @interface RelatedFilterValue
 */
export interface RelatedFilterValue {
    /**
     * Retrieval status.
     * @type {FilterValueType}
     * @memberof RelatedFilterValue
     */
    'filter_type'?: FilterValueType;
    /**
     * Filter value.
     * @type {string}
     * @memberof RelatedFilterValue
     */
    'value'?: string;
    /**
     * User who filtered by this value.
     * @type {string}
     * @memberof RelatedFilterValue
     */
    'added_by'?: string;
    /**
     * Time this value was added.
     * @type {string}
     * @memberof RelatedFilterValue
     */
    'added_on'?: string;
    /**
     * Feature.
     * @type {string}
     * @memberof RelatedFilterValue
     */
    'feature_id'?: string;
}
/**
 * Model to represent directionality of an Association.
 * @export
 * @interface RelationshipDirection
 */
export interface RelationshipDirection {
    /**
     * Relationship value.
     * @type {number}
     * @memberof RelationshipDirection
     */
    'relationship_value': number;
    /**
     * Direction of the association.
     * @type {ValidRelationshipDirectionEnum}
     * @memberof RelationshipDirection
     */
    'level': ValidRelationshipDirectionEnum;
    /**
     * Type of relationship.
     * @type {ValidCalibratedRelationshipType}
     * @memberof RelationshipDirection
     */
    'relationship_type': ValidCalibratedRelationshipType;
}
/**
 * Relationship resource links.
 * @export
 * @interface RelationshipLinks
 */
export interface RelationshipLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof RelationshipLinks
     */
    'self': string;
    /**
     * Link to Relationships\'s variables.
     * @type {string}
     * @memberof RelationshipLinks
     */
    'variables'?: string;
    /**
     * Link to Relationships\'s concepts.
     * @type {string}
     * @memberof RelationshipLinks
     */
    'topics'?: string;
}
/**
 * Relationship output model.
 * @export
 * @interface RelationshipOut
 */
export interface RelationshipOut {
    /**
     * The concepts in this relationship
     * @type {Array<string>}
     * @memberof RelationshipOut
     */
    'concept_ids'?: Array<string>;
    /**
     * Collection of links to related resources.
     * @type {RelationshipLinks}
     * @memberof RelationshipOut
     */
    '_links'?: RelationshipLinks;
}
/**
 * Relationship pagination out.
 * @export
 * @interface RelationshipPaginationOut
 */
export interface RelationshipPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof RelationshipPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<RelationshipOut>}
     * @memberof RelationshipPaginationOut
     */
    'items'?: Array<RelationshipOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof RelationshipPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof RelationshipPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof RelationshipPaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * Model to represent reproducibility of an Association.
 * @export
 * @interface RelationshipReproducibility
 */
export interface RelationshipReproducibility {
    /**
     * Type of study.
     * @type {StudyTypeEnum}
     * @memberof RelationshipReproducibility
     */
    'study_type': StudyTypeEnum;
    /**
     * Reproducibility of the association.
     * @type {ValidReproducibilityEnum}
     * @memberof RelationshipReproducibility
     */
    'level': ValidReproducibilityEnum;
    /**
     * Has experiment description.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_experiment_description': boolean;
    /**
     * Has experiment source.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_experiment_source': boolean;
    /**
     * Has experiment doi.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_experiment_doi': boolean;
    /**
     * Has experiment control.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_experiment_control': boolean;
    /**
     * Has model hyperparams.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_model_hyperparams': boolean;
    /**
     * Has training dataset url.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_training_ds_url': boolean;
    /**
     * Has training dataset description url.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_training_ds_desc_url': boolean;
    /**
     * Has source dataset.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_source_ds': boolean;
    /**
     * Has pdp.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_pdp': boolean;
    /**
     * Has significance.
     * @type {boolean}
     * @memberof RelationshipReproducibility
     */
    'has_significance': boolean;
}
/**
 * API resource action enum.
 * @export
 * @enum {string}
 */

export enum ResourceAction {
    Create = 'create',
    View = 'view',
    Edit = 'edit',
    Delete = 'delete'
}

/**
 * A System Resource Flag Output Object.
 * @export
 * @interface ResourceFlag
 */
export interface ResourceFlag {
    /**
     * Given reasons for the flag.
     * @type {Array<string>}
     * @memberof ResourceFlag
     */
    'reasons': Array<string>;
    /**
     * Additional metadata for the flag.
     * @type {object}
     * @memberof ResourceFlag
     */
    'meta'?: object;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof ResourceFlag
     */
    'added_on': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof ResourceFlag
     */
    'added_by': string;
}
/**
 * A System Resource Flag Input Object.
 * @export
 * @interface ResourceFlagIn
 */
export interface ResourceFlagIn {
    /**
     * Given reasons for the flag.
     * @type {Array<string>}
     * @memberof ResourceFlagIn
     */
    'reasons': Array<string>;
    /**
     * Additional metadata for the flag.
     * @type {object}
     * @memberof ResourceFlagIn
     */
    'meta'?: object;
}
/**
 * Table retrieval status.
 * @export
 * @enum {string}
 */

export enum RetrievalStatus {
    Pending = 'pending',
    Success = 'success',
    Failure = 'failure'
}

/**
 * Schema for scored cluster.
 * @export
 * @interface ScoredCluster
 */
export interface ScoredCluster {
    /**
     * 
     * @type {number}
     * @memberof ScoredCluster
     */
    'sort_id': number;
    /**
     * 
     * @type {string}
     * @memberof ScoredCluster
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ScoredCluster
     */
    'display_summary': string;
    /**
     * 
     * @type {string}
     * @memberof ScoredCluster
     */
    'prompt_summary': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScoredCluster
     */
    'cluster_labels': Array<string>;
    /**
     * 
     * @type {Array<Array<AppSchemaGroundingsGrounding>>}
     * @memberof ScoredCluster
     */
    'label_groundings'?: Array<Array<AppSchemaGroundingsGrounding>>;
    /**
     * 
     * @type {string}
     * @memberof ScoredCluster
     */
    'stat_descriptor'?: string;
    /**
     * 
     * @type {number}
     * @memberof ScoredCluster
     */
    'score': number;
    /**
     * 
     * @type {number}
     * @memberof ScoredCluster
     */
    'original_score'?: number;
    /**
     * 
     * @type {number}
     * @memberof ScoredCluster
     */
    'sort_bucket'?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ScoredCluster
     */
    'search_term_grounding_namespaces'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof ScoredCluster
     */
    'reference_agent_position'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScoredCluster
     */
    'other_agent_category'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScoredCluster
     */
    'modification_type'?: string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum SemanticSearchType {
    RiskFactorOf = 'risk_factor_of',
    Outcome = 'outcome',
    Relationship = 'relationship',
    Relationship2d = 'relationship_2d',
    SingleVariable2d = 'single_variable_2d'
}

/**
 * Single topic graph payload.
 * @export
 * @interface SemanticTopicGraphIn
 */
export interface SemanticTopicGraphIn {
    /**
     * Topic
     * @type {string}
     * @memberof SemanticTopicGraphIn
     */
    'topic'?: string;
    /**
     * List of topic relationship pairs. Two topic system ids ordered by direction.
     * @type {Array<Array<string>>}
     * @memberof SemanticTopicGraphIn
     */
    'topic_relationship_ids'?: Array<Array<string>>;
    /**
     * Direction of graph in relation to topic.
     * @type {GraphSearchDirection}
     * @memberof SemanticTopicGraphIn
     */
    'direction'?: GraphSearchDirection;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum SignificanceLevel {
    NinetyFive = 'ninety_five',
    NinetyNine = 'ninety_nine',
    NinetyNinePointNine = 'ninety_nine_point_nine',
    Invalid = 'invalid'
}

/**
 * Statistical significance input information.
 * @export
 * @interface SignificanceValueIn
 */
export interface SignificanceValueIn {
    /**
     * Confidence interval data.
     * @type {ConfidenceIntervalIn}
     * @memberof SignificanceValueIn
     */
    'confidence_interval'?: ConfidenceIntervalIn;
    /**
     * Statistical test null hypothesis data.
     * @type {NullHypothesisIn}
     * @memberof SignificanceValueIn
     */
    'null_hypothesis'?: NullHypothesisIn;
    /**
     * Who generated this object.
     * @type {ValidValueSource}
     * @memberof SignificanceValueIn
     */
    'generated_by'?: ValidValueSource;
}
/**
 * Statistical significance input information.
 * @export
 * @interface SignificanceValueOut
 */
export interface SignificanceValueOut {
    /**
     * Confidence interval data.
     * @type {ConfidenceIntervalOut}
     * @memberof SignificanceValueOut
     */
    'confidence_interval'?: ConfidenceIntervalOut;
    /**
     * Statistical test null hypothesis data.
     * @type {NullHypothesisOut}
     * @memberof SignificanceValueOut
     */
    'null_hypothesis'?: NullHypothesisOut;
    /**
     * Who generated this object.
     * @type {ValueSourceEnum}
     * @memberof SignificanceValueOut
     */
    'generated_by'?: ValueSourceEnum;
}
/**
 * Credentials for a Snowflake integration without password.
 * @export
 * @interface SnowflakeCredentials
 */
export interface SnowflakeCredentials {
    /**
     * Integration database name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    'db_name': string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    'db_user': string;
    /**
     * Integration account name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    'db_account': string;
    /**
     * Integration warehouse name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    'db_warehouse': string;
}
/**
 * Input credentials for a Snowflake integration.
 * @export
 * @interface SnowflakeCredentialsIn
 */
export interface SnowflakeCredentialsIn {
    /**
     * Integration database name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_name': string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_user': string;
    /**
     * Integration account name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_account': string;
    /**
     * Integration warehouse name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_warehouse': string;
    /**
     * Integration password.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_password': string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum StatisticalTestType {
    Ttest = 'ttest',
    Ztest = 'ztest',
    Anova = 'anova',
    Chisquared = 'chisquared',
    Htest = 'htest',
    Invalid = 'invalid'
}

/**
 * Represent statistics for a string feature.
 * @export
 * @interface StringFeatureStatistics
 */
export interface StringFeatureStatistics {
    /**
     * Percentage of column values that are missing or zero-length.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    'percent_missing_or_empty'?: number;
    /**
     * Minimum of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    'min_string_length'?: number;
    /**
     * Maximum of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    'max_string_length'?: number;
    /**
     * Mean of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    'mean_string_length'?: number;
    /**
     * Number of distinct non-missing values of the column.
     * @type {number}
     * @memberof StringFeatureStatistics
     */
    'distinct_values'?: number;
    /**
     * Histogram depicting the distribution of string length in the feature.
     * @type {Histogram}
     * @memberof StringFeatureStatistics
     */
    'character_length_distribution'?: Histogram;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: StringFeatureStatisticsSimpleBase; }}
     * @memberof StringFeatureStatistics
     */
    'history'?: { [key: string]: StringFeatureStatisticsSimpleBase; };
}
/**
 * Represent statistics for string feature.  These fields will be included in the stats history.
 * @export
 * @interface StringFeatureStatisticsSimpleBase
 */
export interface StringFeatureStatisticsSimpleBase {
    /**
     * Percentage of column values that are missing or zero-length.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    'percent_missing_or_empty'?: number;
    /**
     * Minimum of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    'min_string_length'?: number;
    /**
     * Maximum of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    'max_string_length'?: number;
    /**
     * Mean of the lengths of non-missing values.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    'mean_string_length'?: number;
    /**
     * Number of distinct non-missing values of the column.
     * @type {number}
     * @memberof StringFeatureStatisticsSimpleBase
     */
    'distinct_values'?: number;
}
/**
 * Stripe account status enum.
 * @export
 * @enum {string}
 */

export enum StripeAccountStatus {
    Trial = 'trial',
    Subscribed = 'subscribed',
    Expired = 'expired',
    GroupSubscribed = 'group_subscribed',
    Unsubscribed = 'unsubscribed'
}

/**
 * Stripe object.
 * @export
 * @interface StripeOut
 */
export interface StripeOut {
    /**
     * Subscription start date.
     * @type {string}
     * @memberof StripeOut
     */
    'start_date'?: string;
    /**
     * Subscription end date.
     * @type {string}
     * @memberof StripeOut
     */
    'end_date'?: string;
    /**
     * Subscription status.
     * @type {StripeAccountStatus}
     * @memberof StripeOut
     */
    'status'?: StripeAccountStatus;
    /**
     * Monthly or yearly.
     * @type {string}
     * @memberof StripeOut
     */
    'interval'?: string;
    /**
     * Autonew subscription
     * @type {boolean}
     * @memberof StripeOut
     */
    'cancel_at_period_end'?: boolean;
    /**
     * Subscription id.
     * @type {string}
     * @memberof StripeOut
     */
    'subscription_id'?: string;
    /**
     * Is group admin.
     * @type {boolean}
     * @memberof StripeOut
     */
    'is_group_admin'?: boolean;
    /**
     * Is group member.
     * @type {boolean}
     * @memberof StripeOut
     */
    'is_group_member'?: boolean;
    /**
     * Coupon code.
     * @type {string}
     * @memberof StripeOut
     */
    'coupon_id'?: string;
}
/**
 * Stripe session object.
 * @export
 * @interface StripeSessionOut
 */
export interface StripeSessionOut {
    /**
     * Session url link.
     * @type {string}
     * @memberof StripeSessionOut
     */
    'session_url'?: string;
}
/**
 * Interface for an author on a study.
 * @export
 * @interface StudyAuthor
 */
export interface StudyAuthor {
    /**
     * 
     * @type {string}
     * @memberof StudyAuthor
     */
    'oa_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyAuthor
     */
    'name': string;
}
/**
 * Interface for a single study and its finding sentences, populations, sample size, and id.
 * @export
 * @interface StudyFindings
 */
export interface StudyFindings {
    /**
     * 
     * @type {Array<Finding>}
     * @memberof StudyFindings
     */
    'findings': Array<Finding>;
    /**
     * 
     * @type {Array<string>}
     * @memberof StudyFindings
     */
    'populations'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof StudyFindings
     */
    'sample_size'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudyFindings
     */
    'doi': string;
}
/**
 * Interface for /findings input.
 * @export
 * @interface StudyFindingsIn
 */
export interface StudyFindingsIn {
    /**
     * 
     * @type {Array<string>}
     * @memberof StudyFindingsIn
     */
    'association_ids'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof StudyFindingsIn
     */
    'dois'?: Array<string>;
}
/**
 * Interface for /findings response type.
 * @export
 * @interface StudyFindingsOut
 */
export interface StudyFindingsOut {
    /**
     * 
     * @type {Array<StudyFindings>}
     * @memberof StudyFindingsOut
     */
    'studies': Array<StudyFindings>;
}
/**
 * Study resource links.
 * @export
 * @interface StudyLinks
 */
export interface StudyLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof StudyLinks
     */
    'self': string;
    /**
     * Link to study\'s authors.
     * @type {string}
     * @memberof StudyLinks
     */
    'authors': string;
    /**
     * Link to study\'s models.
     * @type {string}
     * @memberof StudyLinks
     */
    'models': string;
}
/**
 * Interface for Study Metadata retrieved from DynamoDB and OpenAlex.
 * @export
 * @interface StudyMetadata
 */
export interface StudyMetadata {
    /**
     * 
     * @type {string}
     * @memberof StudyMetadata
     */
    'pmid'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyMetadata
     */
    'doi'?: string;
    /**
     * 
     * @type {number}
     * @memberof StudyMetadata
     */
    'cited_by'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudyMetadata
     */
    'journal'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyMetadata
     */
    'journal_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyMetadata
     */
    'publish_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyMetadata
     */
    'link'?: string;
    /**
     * 
     * @type {Array<StudyAuthor>}
     * @memberof StudyMetadata
     */
    'authors'?: Array<StudyAuthor>;
    /**
     * 
     * @type {string}
     * @memberof StudyMetadata
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyMetadata
     */
    'summary'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StudyMetadata
     */
    'retracted'?: boolean;
}
/**
 * Interface for input to /study-metadata.
 * @export
 * @interface StudyMetadataIn
 */
export interface StudyMetadataIn {
    /**
     * 
     * @type {Array<string>}
     * @memberof StudyMetadataIn
     */
    'pmids': Array<string>;
}
/**
 * Interface for /study-metadata response type.
 * @export
 * @interface StudyMetadataOut
 */
export interface StudyMetadataOut {
    /**
     * 
     * @type {Array<StudyMetadata>}
     * @memberof StudyMetadataOut
     */
    'study_metadata': Array<StudyMetadata>;
}
/**
 * A real world study.
 * @export
 * @interface StudyOut
 */
export interface StudyOut {
    /**
     * 
     * @type {string}
     * @memberof StudyOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof StudyOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof StudyOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof StudyOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof StudyOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof StudyOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof StudyOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof StudyOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof StudyOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof StudyOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof StudyOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof StudyOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Study\'s name.
     * @type {string}
     * @memberof StudyOut
     */
    'name'?: string;
    /**
     * Study\'s description.
     * @type {string}
     * @memberof StudyOut
     */
    'description'?: string;
    /**
     * The source (e.g. github link) of the study.
     * @type {string}
     * @memberof StudyOut
     */
    'source'?: string;
    /**
     * The type of study.
     * @type {StudyTypeEnum}
     * @memberof StudyOut
     */
    'study_type'?: StudyTypeEnum;
    /**
     * The DOI of the study.
     * @type {string}
     * @memberof StudyOut
     */
    'doi'?: string;
    /**
     * The lede of the study.
     * @type {string}
     * @memberof StudyOut
     */
    'lede'?: string;
    /**
     * External assets data.
     * @type {Array<ExternalAsset>}
     * @memberof StudyOut
     */
    'external_assets'?: Array<ExternalAsset>;
    /**
     * Optional add flow context flag.
     * @type {AddFlowContext}
     * @memberof StudyOut
     */
    'add_context'?: AddFlowContext;
    /**
     * Insights generated by this study.
     * @type {Array<string>}
     * @memberof StudyOut
     */
    'insights'?: Array<string>;
    /**
     * Publication info of study.
     * @type {PublicationInfo}
     * @memberof StudyOut
     */
    'publication_info'?: PublicationInfo;
    /**
     * Publication type string field.
     * @type {string}
     * @memberof StudyOut
     */
    'publication_type'?: string;
    /**
     * Collection of links to related resources.
     * @type {StudyLinks}
     * @memberof StudyOut
     */
    '_links'?: StudyLinks;
    /**
     * Deprecated: The subgraph id of the resource.
     * @type {string}
     * @memberof StudyOut
     */
    'subgraph_id'?: string;
    /**
     * Object\'s tagged to this study.
     * @type {AppSchemaStudiesObjectTags}
     * @memberof StudyOut
     */
    'object_tags'?: AppSchemaStudiesObjectTags;
    /**
     * Authors of the study.
     * @type {Array<AuthorOut>}
     * @memberof StudyOut
     */
    'authors'?: Array<AuthorOut>;
}
/**
 * Study pagination out.
 * @export
 * @interface StudyPaginationOut
 */
export interface StudyPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof StudyPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<StudyOut>}
     * @memberof StudyPaginationOut
     */
    'items'?: Array<StudyOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof StudyPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof StudyPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof StudyPaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum StudySortEnum {
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Enum for study types.
 * @export
 * @enum {string}
 */

export enum StudyTypeEnum {
    Invalid = 'invalid',
    SupervisedMl = 'supervised_ml',
    UnsupervisedMl = 'unsupervised_ml',
    StatisticalInference = 'statistical_inference',
    RandomizedControlTrial = 'randomized_control_trial'
}

/**
 * Subscription seats.
 * @export
 * @interface SubscriptionSeats
 */
export interface SubscriptionSeats {
    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionSeats
     */
    'used_seats': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionSeats
     */
    'available_seats': number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionSeats
     */
    'total_seats': number;
}
/**
 * Schema for a System Pubmed Search.  # noqa: E501
 * @export
 * @interface SuggestedQueriesIn
 */
export interface SuggestedQueriesIn {
    /**
     * User query
     * @type {string}
     * @memberof SuggestedQueriesIn
     */
    'query': string;
    /**
     * Number of pubmed results.
     * @type {number}
     * @memberof SuggestedQueriesIn
     */
    'num_pubmed_results': number;
}
/**
 * Schema for query suggestions.  # noqa: E501
 * @export
 * @interface SuggestedQueriesOut
 */
export interface SuggestedQueriesOut {
    /**
     * 
     * @type {Array<SuggestedQuery>}
     * @memberof SuggestedQueriesOut
     */
    'queries': Array<SuggestedQuery>;
}
/**
 * Suggested query.  # noqa: E501
 * @export
 * @interface SuggestedQuery
 */
export interface SuggestedQuery {
    /**
     * User query
     * @type {string}
     * @memberof SuggestedQuery
     */
    'query': string;
    /**
     * Number of pubmed results.
     * @type {number}
     * @memberof SuggestedQuery
     */
    'num_pubmed_results': number;
    /**
     * Enum for query suggestion types.
     * @type {string}
     * @memberof SuggestedQuery
     */
    'suggestion_type': string;
}
/**
 * Synthesis output schema.  # noqa: E501
 * @export
 * @interface Synthesis
 */
export interface Synthesis {
    /**
     * 
     * @type {string}
     * @memberof Synthesis
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof Synthesis
     */
    'cache_key': string;
}
/**
 * Information related to a thumbs down feedback.
 * @export
 * @interface SynthesisFeedback
 */
export interface SynthesisFeedback {
    /**
     * 
     * @type {Array<string>}
     * @memberof SynthesisFeedback
     */
    'choice'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SynthesisFeedback
     */
    'text': string;
}
/**
 * Input of feedback on synthesis from client.
 * @export
 * @interface SynthesisFeedbackIn
 */
export interface SynthesisFeedbackIn {
    /**
     * 
     * @type {string}
     * @memberof SynthesisFeedbackIn
     */
    'question': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SynthesisFeedbackIn
     */
    'prompt_summaries': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof SynthesisFeedbackIn
     */
    'is_positive': boolean;
    /**
     * 
     * @type {SynthesisFeedback}
     * @memberof SynthesisFeedbackIn
     */
    'feedback_value'?: SynthesisFeedback;
    /**
     * 
     * @type {string}
     * @memberof SynthesisFeedbackIn
     */
    'cache_key'?: string;
}
/**
 * Synthesis fetching output schema.  # noqa: E501
 * @export
 * @interface SynthesisOut
 */
export interface SynthesisOut {
    /**
     * 
     * @type {PollingStatus}
     * @memberof SynthesisOut
     */
    'status': PollingStatus;
    /**
     * 
     * @type {Synthesis}
     * @memberof SynthesisOut
     */
    'synthesis': Synthesis;
}
/**
 * Edge Typed Link model.  # noqa: E501
 * @export
 * @interface SystemGraphApiClientModelsExtendedLinkObjectExtendedLinkObject
 */
export interface SystemGraphApiClientModelsExtendedLinkObjectExtendedLinkObject {
    /**
     * 
     * @type {string}
     * @memberof SystemGraphApiClientModelsExtendedLinkObjectExtendedLinkObject
     */
    'source': string;
    /**
     * 
     * @type {string}
     * @memberof SystemGraphApiClientModelsExtendedLinkObjectExtendedLinkObject
     */
    'target': string;
    /**
     * 
     * @type {SystemGraphApiClientModelsGraphLinkTypeGraphLinkType}
     * @memberof SystemGraphApiClientModelsExtendedLinkObjectExtendedLinkObject
     */
    'edge_type'?: SystemGraphApiClientModelsGraphLinkTypeGraphLinkType;
    /**
     * 
     * @type {Array<string>}
     * @memberof SystemGraphApiClientModelsExtendedLinkObjectExtendedLinkObject
     */
    'association_ids'?: Array<string>;
}
/**
 * Object Typed Node model.  # noqa: E501
 * @export
 * @interface SystemGraphApiClientModelsExtendedNodeObjectExtendedNodeObject
 */
export interface SystemGraphApiClientModelsExtendedNodeObjectExtendedNodeObject {
    /**
     * 
     * @type {string}
     * @memberof SystemGraphApiClientModelsExtendedNodeObjectExtendedNodeObject
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SystemGraphApiClientModelsExtendedNodeObjectExtendedNodeObject
     */
    'name': string;
    /**
     * 
     * @type {SystemGraphApiClientModelsGraphNodeTypeGraphNodeType}
     * @memberof SystemGraphApiClientModelsExtendedNodeObjectExtendedNodeObject
     */
    'object_type'?: SystemGraphApiClientModelsGraphNodeTypeGraphNodeType;
    /**
     * 
     * @type {Array<string>}
     * @memberof SystemGraphApiClientModelsExtendedNodeObjectExtendedNodeObject
     */
    'system_ids'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SystemGraphApiClientModelsExtendedNodeObjectExtendedNodeObject
     */
    'tags'?: Array<string>;
}
/**
 * Graph Data model.  # noqa: E501
 * @export
 * @interface SystemGraphApiClientModelsGraphDataGraphData
 */
export interface SystemGraphApiClientModelsGraphDataGraphData {
    /**
     * Nodes of graph data.
     * @type {Array<SystemGraphApiClientModelsExtendedNodeObjectExtendedNodeObject>}
     * @memberof SystemGraphApiClientModelsGraphDataGraphData
     */
    'nodes': Array<SystemGraphApiClientModelsExtendedNodeObjectExtendedNodeObject>;
    /**
     * Links of graph data.
     * @type {Array<SystemGraphApiClientModelsExtendedLinkObjectExtendedLinkObject>}
     * @memberof SystemGraphApiClientModelsGraphDataGraphData
     */
    'links': Array<SystemGraphApiClientModelsExtendedLinkObjectExtendedLinkObject>;
}
/**
 * Graph Link Type enum.
 * @export
 * @enum {string}
 */

export enum SystemGraphApiClientModelsGraphLinkTypeGraphLinkType {
    DatasetRelationship = 'dataset_relationship',
    ConceptRelationship = 'concept_relationship',
    VariableRelationship = 'variable_relationship',
    FeatureRelationship = 'feature_relationship',
    FeatureVariable = 'feature_variable',
    Measures = 'measures'
}

/**
 * Graph Node Type enum.
 * @export
 * @enum {string}
 */

export enum SystemGraphApiClientModelsGraphNodeTypeGraphNodeType {
    Dataset = 'dataset',
    Concept = 'concept',
    Variable = 'variable',
    Feature = 'feature'
}

/**
 * 
 * @export
 * @interface SystemGraphApiClientModelsPydanticExtendedLinkObject
 */
export interface SystemGraphApiClientModelsPydanticExtendedLinkObject {
    /**
     * 
     * @type {string}
     * @memberof SystemGraphApiClientModelsPydanticExtendedLinkObject
     */
    'source': string;
    /**
     * 
     * @type {string}
     * @memberof SystemGraphApiClientModelsPydanticExtendedLinkObject
     */
    'target': string;
    /**
     * Type of link.
     * @type {SystemGraphApiClientModelsPydanticGraphLinkType}
     * @memberof SystemGraphApiClientModelsPydanticExtendedLinkObject
     */
    'edge_type'?: SystemGraphApiClientModelsPydanticGraphLinkType;
    /**
     * 
     * @type {Array<string>}
     * @memberof SystemGraphApiClientModelsPydanticExtendedLinkObject
     */
    'association_ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SystemGraphApiClientModelsPydanticExtendedNodeObject
 */
export interface SystemGraphApiClientModelsPydanticExtendedNodeObject {
    /**
     * 
     * @type {string}
     * @memberof SystemGraphApiClientModelsPydanticExtendedNodeObject
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SystemGraphApiClientModelsPydanticExtendedNodeObject
     */
    'name': string;
    /**
     * Type of node.
     * @type {SystemGraphApiClientModelsPydanticGraphNodeType}
     * @memberof SystemGraphApiClientModelsPydanticExtendedNodeObject
     */
    'object_type'?: SystemGraphApiClientModelsPydanticGraphNodeType;
    /**
     * 
     * @type {Array<string>}
     * @memberof SystemGraphApiClientModelsPydanticExtendedNodeObject
     */
    'system_ids'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SystemGraphApiClientModelsPydanticExtendedNodeObject
     */
    'tags'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SystemGraphApiClientModelsPydanticGraphData
 */
export interface SystemGraphApiClientModelsPydanticGraphData {
    /**
     * Nodes of graph data.
     * @type {Array<SystemGraphApiClientModelsPydanticExtendedNodeObject>}
     * @memberof SystemGraphApiClientModelsPydanticGraphData
     */
    'nodes': Array<SystemGraphApiClientModelsPydanticExtendedNodeObject>;
    /**
     * Links of graph data.
     * @type {Array<SystemGraphApiClientModelsPydanticExtendedLinkObject>}
     * @memberof SystemGraphApiClientModelsPydanticGraphData
     */
    'links': Array<SystemGraphApiClientModelsPydanticExtendedLinkObject>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum SystemGraphApiClientModelsPydanticGraphLinkType {
    DatasetRelationship = 'dataset_relationship',
    ConceptRelationship = 'concept_relationship',
    VariableRelationship = 'variable_relationship',
    FeatureRelationship = 'feature_relationship',
    FeatureVariable = 'feature_variable',
    Measures = 'measures'
}

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum SystemGraphApiClientModelsPydanticGraphNodeType {
    Dataset = 'dataset',
    Concept = 'concept',
    Variable = 'variable',
    Feature = 'feature'
}

/**
 * System search underlying data.
 * @export
 * @interface SystemSearchData
 */
export interface SystemSearchData {
    /**
     * 
     * @type {Array<ClusteredRelationship>}
     * @memberof SystemSearchData
     */
    'relationships': Array<ClusteredRelationship>;
}
/**
 * System Search Fields.
 * @export
 * @interface SystemSearchIn
 */
export interface SystemSearchIn {
    /**
     * Search Field type
     * @type {SemanticSearchType}
     * @memberof SystemSearchIn
     */
    'question_type'?: SemanticSearchType;
    /**
     * Question to search for.
     * @type {string}
     * @memberof SystemSearchIn
     */
    'question'?: string;
    /**
     * First term part of the question.
     * @type {GroundedEntity}
     * @memberof SystemSearchIn
     */
    'term1': GroundedEntity;
    /**
     * Optional second term part of the question.
     * @type {GroundedEntity}
     * @memberof SystemSearchIn
     */
    'term2'?: GroundedEntity;
    /**
     * Optional Field to filter studies which have populations matching Field.
     * @type {string}
     * @memberof SystemSearchIn
     */
    'population'?: string;
    /**
     * To use cache or not. Default True.
     * @type {boolean}
     * @memberof SystemSearchIn
     */
    'use_cache'?: boolean;
    /**
     * Clustering thresholds as json stringified list of pairs of floats.
     * @type {Array<Array<number>>}
     * @memberof SystemSearchIn
     */
    'clustering_thresholds'?: Array<Array<number>>;
    /**
     * Clustering method to use.
     * @type {ClusteringMethods}
     * @memberof SystemSearchIn
     */
    'clustering_method'?: ClusteringMethods;
    /**
     * OpenAI model name
     * @type {string}
     * @memberof SystemSearchIn
     */
    'model_name'?: string;
    /**
     * Length of synthesis paragraph, in sentences.
     * @type {string}
     * @memberof SystemSearchIn
     */
    'length'?: string;
    /**
     * Temperature of summary
     * @type {number}
     * @memberof SystemSearchIn
     */
    'temperature'?: number;
    /**
     * Maximum token size
     * @type {number}
     * @memberof SystemSearchIn
     */
    'max_tokens'?: number;
    /**
     * Number of choices for OpenAI to produce.
     * @type {number}
     * @memberof SystemSearchIn
     */
    'choices'?: number;
}
/**
 * A table object.
 * @export
 * @interface Table
 */
export interface Table {
    /**
     * 
     * @type {number}
     * @memberof Table
     */
    'id'?: number;
    /**
     * Table name.
     * @type {string}
     * @memberof Table
     */
    'name'?: string;
    /**
     * Active status.
     * @type {boolean}
     * @memberof Table
     */
    'active'?: boolean;
    /**
     * Schema name.
     * @type {string}
     * @memberof Table
     */
    'schema_name'?: string;
    /**
     * System ID of dataset this table corresponds to.
     * @type {string}
     * @memberof Table
     */
    'dataset_id'?: string;
    /**
     * Retrieval status.
     * @type {RetrievalStatus}
     * @memberof Table
     */
    'status'?: RetrievalStatus;
    /**
     * Time when table was last retrieved.
     * @type {string}
     * @memberof Table
     */
    'last_retrieval'?: string;
    /**
     * Time when interactions were last computed.
     * @type {string}
     * @memberof Table
     */
    'last_interactions_on'?: string;
    /**
     * Integration link.
     * @type {string}
     * @memberof Table
     */
    'integration': string;
}
/**
 * Team resource links.
 * @export
 * @interface TeamLinks
 */
export interface TeamLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof TeamLinks
     */
    'self': string;
}
/**
 * Team output model.
 * @export
 * @interface TeamOut
 */
export interface TeamOut {
    /**
     * 
     * @type {string}
     * @memberof TeamOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof TeamOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof TeamOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof TeamOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof TeamOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof TeamOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof TeamOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Team\'s name.
     * @type {string}
     * @memberof TeamOut
     */
    'name': string;
    /**
     * Identifier of the team.
     * @type {string}
     * @memberof TeamOut
     */
    'slug': string;
    /**
     * Team\'s logo
     * @type {string}
     * @memberof TeamOut
     */
    'logo'?: string;
    /**
     * The list of integrations to retrieve
     * @type {Array<Integration>}
     * @memberof TeamOut
     */
    'integrations'?: Array<Integration>;
    /**
     * The team messages
     * @type {Array<MessageOut>}
     * @memberof TeamOut
     */
    'messages'?: Array<MessageOut>;
    /**
     * Collection of links to related resources.
     * @type {TeamLinks}
     * @memberof TeamOut
     */
    '_links'?: TeamLinks;
    /**
     * Public status
     * @type {boolean}
     * @memberof TeamOut
     */
    'public'?: boolean;
}
/**
 * Represent a test dataset.
 * @export
 * @interface TestDataset
 */
export interface TestDataset {
    /**
     * Source dataset transformation was applied to.
     * @type {string}
     * @memberof TestDataset
     */
    'dataset_id': string;
    /**
     * 
     * @type {ValidTransformationTypeEnum}
     * @memberof TestDataset
     */
    'transformation_type'?: ValidTransformationTypeEnum;
    /**
     * Details of transformation.
     * @type {object}
     * @memberof TestDataset
     */
    'details'?: object;
}
/**
 * Represent time series statistics for a time series feature type.
 * @export
 * @interface TimeSeriesFeatureStatistics
 */
export interface TimeSeriesFeatureStatistics {
    /**
     * Number of (time) periods for which the feature exists.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'length'?: number;
    /**
     * Minimum value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'min'?: number;
    /**
     * Maximum value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'max'?: number;
    /**
     * Median value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'median'?: number;
    /**
     * Mean value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'mean'?: number;
    /**
     * Standard deviation of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'std'?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatistics
     */
    'percent_missing'?: number;
    /**
     * Time frequency for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatistics
     */
    'time_frequency'?: string;
    /**
     * First time period (string, ISO format) for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatistics
     */
    'time_start'?: string;
    /**
     * Last time period (string, ISO format) for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatistics
     */
    'time_end'?: string;
    /**
     * Line plot of the time series feature.
     * @type {LinePlot}
     * @memberof TimeSeriesFeatureStatistics
     */
    'lineplot'?: LinePlot;
    /**
     * Historical stats in form timestamp to value.
     * @type {{ [key: string]: TimeSeriesFeatureStatisticsSimpleBase; }}
     * @memberof TimeSeriesFeatureStatistics
     */
    'history'?: { [key: string]: TimeSeriesFeatureStatisticsSimpleBase; };
}
/**
 * Represent time series statistics for a time series feature type.  These fields will be included in the stats history.
 * @export
 * @interface TimeSeriesFeatureStatisticsSimpleBase
 */
export interface TimeSeriesFeatureStatisticsSimpleBase {
    /**
     * Number of (time) periods for which the feature exists.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'length'?: number;
    /**
     * Minimum value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'min'?: number;
    /**
     * Maximum value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'max'?: number;
    /**
     * Median value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'median'?: number;
    /**
     * Mean value of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'mean'?: number;
    /**
     * Standard deviation of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'std'?: number;
    /**
     * Percentage of missing values of the feature.
     * @type {number}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'percent_missing'?: number;
    /**
     * Time frequency for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'time_frequency'?: string;
    /**
     * First time period (string, ISO format) for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'time_start'?: string;
    /**
     * Last time period (string, ISO format) for which the feature exists.
     * @type {string}
     * @memberof TimeSeriesFeatureStatisticsSimpleBase
     */
    'time_end'?: string;
}
/**
 * Concept relationships model.  # noqa: E501
 * @export
 * @interface TopicCategories
 */
export interface TopicCategories {
    /**
     * 
     * @type {SystemGraphApiClientModelsExtendedNodeObjectExtendedNodeObject}
     * @memberof TopicCategories
     */
    'topic': SystemGraphApiClientModelsExtendedNodeObjectExtendedNodeObject;
    /**
     * 
     * @type {NodeGroupItem}
     * @memberof TopicCategories
     */
    'relationship'?: NodeGroupItem;
    /**
     * 
     * @type {NodeGroup}
     * @memberof TopicCategories
     */
    'upstream'?: NodeGroup;
    /**
     * 
     * @type {NodeGroup}
     * @memberof TopicCategories
     */
    'downstream'?: NodeGroup;
    /**
     * 
     * @type {NodeGroup}
     * @memberof TopicCategories
     */
    'confounders'?: NodeGroup;
    /**
     * 
     * @type {NodeGroup}
     * @memberof TopicCategories
     */
    'mediators'?: NodeGroup;
}
/**
 * Return type for topic relationship syntheses.
 * @export
 * @interface TopicRelationshipSynthesisOut
 */
export interface TopicRelationshipSynthesisOut {
    /**
     * ID of topic relationship
     * @type {string}
     * @memberof TopicRelationshipSynthesisOut
     */
    'relationship_id'?: string;
    /**
     * Direction Enum for Relationship
     * @type {string}
     * @memberof TopicRelationshipSynthesisOut
     */
    'directed_at'?: string;
    /**
     * Topic ID 1
     * @type {string}
     * @memberof TopicRelationshipSynthesisOut
     */
    'topic_id_1'?: string;
    /**
     * Topic ID 2
     * @type {string}
     * @memberof TopicRelationshipSynthesisOut
     */
    'topic_id_2'?: string;
    /**
     * Relationship Synthesis Summary
     * @type {string}
     * @memberof TopicRelationshipSynthesisOut
     */
    'synthesis'?: string;
    /**
     * Last updated time stamp
     * @type {string}
     * @memberof TopicRelationshipSynthesisOut
     */
    'last_updated'?: string;
}
/**
 * User profile data input.
 * @export
 * @interface UpdateProfileIn
 */
export interface UpdateProfileIn {
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'display_name'?: string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'last_name'?: string;
    /**
     * User\'s organizations.
     * @type {Array<string>}
     * @memberof UpdateProfileIn
     */
    'organizations'?: Array<string>;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'field_of_work'?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'email'?: string;
    /**
     * User roles.
     * @type {Array<string>}
     * @memberof UpdateProfileIn
     */
    'roles'?: Array<string>;
}
/**
 * User metric usage result.
 * @export
 * @interface UserMetricUsageOut
 */
export interface UserMetricUsageOut {
    /**
     * Usage Metric
     * @type {Metrics}
     * @memberof UserMetricUsageOut
     */
    'metric': Metrics;
    /**
     * Metric usage count
     * @type {number}
     * @memberof UserMetricUsageOut
     */
    'count': number;
    /**
     * Metric usage from date
     * @type {string}
     * @memberof UserMetricUsageOut
     */
    'date_from': string;
}
/**
 * Private user profile out.
 * @export
 * @interface UserPrivateProfileOut
 */
export interface UserPrivateProfileOut {
    /**
     * The user\'s System ID.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'id': string;
    /**
     * Time when the user\'s profile was created.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'created_at': string;
    /**
     * The Author ID corresponding to this user.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'author_id'?: string;
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'display_name': string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'last_name'?: string;
    /**
     * User\'s organizations.
     * @type {Array<string>}
     * @memberof UserPrivateProfileOut
     */
    'organizations'?: Array<string>;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'field_of_work'?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'email': string;
    /**
     * User roles.
     * @type {Array<string>}
     * @memberof UserPrivateProfileOut
     */
    'roles'?: Array<string>;
    /**
     * Stripe object
     * @type {StripeOut}
     * @memberof UserPrivateProfileOut
     */
    'stripe'?: StripeOut;
}
/**
 * User profile data input.
 * @export
 * @interface UserProfileIn
 */
export interface UserProfileIn {
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserProfileIn
     */
    'display_name': string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserProfileIn
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserProfileIn
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UserProfileIn
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UserProfileIn
     */
    'last_name'?: string;
    /**
     * User\'s organizations.
     * @type {Array<string>}
     * @memberof UserProfileIn
     */
    'organizations'?: Array<string>;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UserProfileIn
     */
    'field_of_work'?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UserProfileIn
     */
    'email': string;
    /**
     * User roles.
     * @type {Array<string>}
     * @memberof UserProfileIn
     */
    'roles'?: Array<string>;
}
/**
 * Public user profile out.
 * @export
 * @interface UserPublicProfileOut
 */
export interface UserPublicProfileOut {
    /**
     * The user\'s System ID.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'id': string;
    /**
     * Time when the user\'s profile was created.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'created_at': string;
    /**
     * The Author ID corresponding to this user.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'author_id'?: string;
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'display_name': string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'last_name'?: string;
    /**
     * User\'s organizations.
     * @type {Array<string>}
     * @memberof UserPublicProfileOut
     */
    'organizations'?: Array<string>;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'field_of_work'?: string;
}
/**
 * Enum for valid calibrated relationship type.
 * @export
 * @enum {string}
 */

export enum ValidCalibratedRelationshipType {
    Invalid = 'invalid',
    SiPearsonR = 'si_pearson_r',
    SiKendallTau = 'si_kendall_tau',
    SiCramerV = 'si_cramer_v',
    MlPermutationF1 = 'ml_permutation_f1',
    MlPermutationR2 = 'ml_permutation_r2',
    SiEffectSizeR = 'si_effect_size_r',
    SiEffectSizeD = 'si_effect_size_d',
    SiEffectSizeW = 'si_effect_size_w'
}

/**
 * Valid feature contribution method enums.
 * @export
 * @enum {string}
 */

export enum ValidFeatureContributionMethod {
    Gini = 'gini',
    Gain = 'gain',
    Shap = 'shap',
    Coefficient = 'coefficient',
    Lime = 'lime',
    Permutation = 'permutation',
    PearsonR = 'pearson_r',
    KendallTau = 'kendall_tau',
    CramerV = 'cramer_v',
    KruskalWallisHTest = 'kruskal_wallis_h_test',
    ControlVariable = 'control_variable',
    ProductMomentR = 'product_moment_r',
    FrequencyScore = 'frequency_score',
    OddsRatio = 'odds_ratio',
    RelativeRiskRatio = 'relative_risk_ratio',
    HazardRatio = 'hazard_ratio',
    MeanGainUnstandardized = 'mean_gain_unstandardized',
    MeanGainStandardized = 'mean_gain_standardized',
    MeanDifferenceUnstandardized = 'mean_difference_unstandardized',
    MeanDifferenceStandardized = 'mean_difference_standardized',
    ProportionDifference = 'proportion_difference',
    LogOddsRatio = 'log_odds_ratio',
    PearsonChiSquaredTest = 'pearson_chi_squared_test',
    Forecast = 'forecast',
    PercentChangeDifference = 'percent_change_difference',
    AdjustedOddsRatio = 'adjusted_odds_ratio',
    AdjustedHazardRatio = 'adjusted_hazard_ratio',
    IncidentRateRatio = 'incident_rate_ratio',
    RiskDifference = 'risk_difference',
    InformationFlow = 'information_flow',
    StandardizedCoefficient = 'standardized_coefficient',
    CohensD = 'cohens_d',
    HedgesG = 'hedges_g',
    GlassSDelta = 'glass_s_delta',
    RootMeanSquareDifferencePsi = 'root_mean_square_difference_psi',
    MahalanobisDistance = 'mahalanobis_distance',
    CohensW = 'cohens_w',
    CohensH = 'cohens_h',
    CliffsDelta = 'cliffs_delta',
    RankBiserialCorrelation = 'rank_biserial_correlation',
    SpearmanCorrelation = 'spearman_correlation',
    Elasticity = 'elasticity',
    PrevalenceRatio = 'prevalence_ratio'
}

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum ValidModelScoreEnum {
    AccuracyScore = 'accuracy_score',
    AveragePrecisionScore = 'average_precision_score',
    BalancedAccuracyScore = 'balanced_accuracy_score',
    BrierScoreLoss = 'brier_score_loss',
    CohenKappaScore = 'cohen_kappa_score',
    F1Score = 'f1_score',
    HammingLoss = 'hamming_loss',
    HingeLoss = 'hinge_loss',
    JaccardScore = 'jaccard_score',
    LogLoss = 'log_loss',
    MatthewsCorrCoef = 'matthews_corr_coef',
    PrecisionScore = 'precision_score',
    RecallScore = 'recall_score',
    RocAucScore = 'roc_auc_score',
    ZeroOneLoss = 'zero_one_loss',
    ExplainedVarianceScore = 'explained_variance_score',
    MaxError = 'max_error',
    MeanAbsoluteError = 'mean_absolute_error',
    MeanAbsolutePercentageError = 'mean_absolute_percentage_error',
    MeanSquaredError = 'mean_squared_error',
    MeanSquaredLogError = 'mean_squared_log_error',
    MedianAbsoluteError = 'median_absolute_error',
    R2Score = 'r2_score',
    CoverageError = 'coverage_error',
    LabelRankingAveragePrecisionScore = 'label_ranking_average_precision_score',
    LabelRankingLoss = 'label_ranking_loss',
    AdjustedR2Score = 'adjusted_r2_score',
    MutualInformationScore = 'mutual_information_score',
    AdjMutualInformationScore = 'adj_mutual_information_score',
    NormalizedMutualInformationScore = 'normalized_mutual_information_score',
    AdjRandScore = 'adj_rand_score',
    CompletenessScore = 'completeness_score',
    FowlkesMallowsScore = 'fowlkes_mallows_score',
    HomogeneityScore = 'homogeneity_score',
    VMeasureScore = 'v_measure_score',
    NegMeanAbsoluteError = 'neg_mean_absolute_error',
    NegMeanSquaredError = 'neg_mean_squared_error',
    RootMeanSquaredError = 'root_mean_squared_error',
    NegRootMeanSquaredError = 'neg_root_mean_squared_error',
    RootMeanSquaredLogError = 'root_mean_squared_log_error',
    NegMedianAbsoluteError = 'neg_median_absolute_error',
    CosineProximity = 'cosine_proximity',
    KullbackLeiblerDivergence = 'kullback_leibler_divergence',
    PoissonMetric = 'poisson_metric',
    MulticlassLogLoss = 'multiclass_log_loss',
    NormalizedDiscountedCumulativeGain = 'normalized_discounted_cumulative_gain',
    GammaDeviance = 'gamma_deviance',
    HuberMetric = 'huber_metric',
    FBetaScore = 'f_beta_score',
    EuclideanDistance = 'euclidean_distance',
    HaversineDistance = 'haversine_distance',
    MeanSquaredPredictioneRror = 'mean_squared_predictione_rror',
    PseudoR2Mcfadden = 'pseudo_r2_mcfadden',
    AdjustedPseudoR2Mcfadden = 'adjusted_pseudo_r2_mcfadden',
    PseudoR2Nagelkerke = 'pseudo_r2_nagelkerke',
    PseudoR2CoxSnell = 'pseudo_r2_cox_snell',
    PseudoR2Effron = 'pseudo_r2_effron',
    Bic = 'bic',
    Aic = 'aic',
    CorrelationActualForecast = 'correlation_actual_forecast',
    ForecastVsActual = 'forecast_vs_actual',
    MeanSquaredPercentageError = 'mean_squared_percentage_error',
    ConfusionMatrix = 'confusion_matrix',
    MulticlassConfusionMatrix = 'multiclass_confusion_matrix',
    RocCurve = 'roc_curve'
}

/**
 * Enum for valid relationship direction.
 * @export
 * @enum {string}
 */

export enum ValidRelationshipDirectionEnum {
    Positive = 'positive',
    Negative = 'negative',
    Zero = 'zero',
    Invalid = 'invalid'
}

/**
 * Enum for valid reproducibility level.
 * @export
 * @enum {string}
 */

export enum ValidReproducibilityEnum {
    Invalid = 'invalid',
    Low = 'low',
    Medium = 'medium',
    High = 'high'
}

/**
 * Valid significance level enums.
 * @export
 * @enum {string}
 */

export enum ValidSignificanceLevel {
    Five = 'ninety_five',
    Nine = 'ninety_nine',
    NinePointNine = 'ninety_nine_point_nine'
}

/**
 * Valid statistical test type enums.
 * @export
 * @enum {string}
 */

export enum ValidStatisticalTestType {
    Ttest = 'ttest',
    Ztest = 'ztest',
    Anova = 'anova',
    Chisquared = 'chisquared',
    Htest = 'htest'
}

/**
 * Valid transformation type enums.
 * @export
 * @enum {string}
 */

export enum ValidTransformationTypeEnum {
    NoTransformation = 'no_transformation',
    Kfold = 'kfold',
    LeavePOut = 'leave_p_out',
    Holdout = 'holdout',
    Independent = 'independent'
}

/**
 * Valid value source enum.
 * @export
 * @enum {string}
 */

export enum ValidValueSource {
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user'
}

/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    'loc': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum ValueSourceEnum {
    LocalEvaluator = 'local_evaluator',
    RemoteEvaluator = 'remote_evaluator',
    User = 'user',
    Invalid = 'invalid'
}

/**
 * Variable resource links.
 * @export
 * @interface VariableLinks
 */
export interface VariableLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof VariableLinks
     */
    'self': string;
    /**
     * Link to Variable\'s Concept.
     * @type {string}
     * @memberof VariableLinks
     */
    'concept'?: string;
}
/**
 * Variable output model.
 * @export
 * @interface VariableOut
 */
export interface VariableOut {
    /**
     * 
     * @type {string}
     * @memberof VariableOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof VariableOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof VariableOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof VariableOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof VariableOut
     */
    'last_updated_at'?: string;
    /**
     * 
     * @type {Array<ResourceAction>}
     * @memberof VariableOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof VariableOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof VariableOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof VariableOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof VariableOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof VariableOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof VariableOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * Variable\'s name.
     * @type {string}
     * @memberof VariableOut
     */
    'name': string;
    /**
     * A short description of the variable.
     * @type {string}
     * @memberof VariableOut
     */
    'description'?: string;
    /**
     * Other names for the variable.
     * @type {Array<string>}
     * @memberof VariableOut
     */
    'aliases'?: Array<string>;
    /**
     * External identifier mapping from source to id.
     * @type {{ [key: string]: string; }}
     * @memberof VariableOut
     */
    'xid'?: { [key: string]: string; };
    /**
     * Type of the variable.
     * @type {VariableType}
     * @memberof VariableOut
     */
    'variable_type'?: VariableType;
    /**
     * The id of the Variable\'s Concept.
     * @type {string}
     * @memberof VariableOut
     */
    'concept_id'?: string;
    /**
     * The monitoring rules for the metric.
     * @type {MetricMonitoring}
     * @memberof VariableOut
     */
    'monitoring'?: MetricMonitoring;
    /**
     * The uuid of the metric cluster.
     * @type {string}
     * @memberof VariableOut
     */
    'cluster_id'?: string;
    /**
     * The name of the metric cluster.
     * @type {string}
     * @memberof VariableOut
     */
    'cluster_name'?: string;
    /**
     * Collection of links to related resources.
     * @type {VariableLinks}
     * @memberof VariableOut
     */
    '_links'?: VariableLinks;
    /**
     * Number of models using this variable.
     * @type {number}
     * @memberof VariableOut
     */
    'model_count'?: number;
    /**
     * Number of models predicting this variable.
     * @type {number}
     * @memberof VariableOut
     */
    'model_predict_count'?: number;
    /**
     * Number of datasets using this variable.
     * @type {number}
     * @memberof VariableOut
     */
    'dataset_count'?: number;
    /**
     * Number of associations using this variable.
     * @type {number}
     * @memberof VariableOut
     */
    'association_count'?: number;
    /**
     * Number of features operationalizing this variable.
     * @type {number}
     * @memberof VariableOut
     */
    'feature_count'?: number;
}
/**
 * Variable pagination out.
 * @export
 * @interface VariablePaginationOut
 */
export interface VariablePaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof VariablePaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<VariableOut>}
     * @memberof VariablePaginationOut
     */
    'items'?: Array<VariableOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof VariablePaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof VariablePaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof VariablePaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum VariableSortEnum {
    ModelCount = 'model_count',
    CreatedAt = 'created_at',
    LastUpdatedAt = 'last_updated_at',
    Name = 'name'
}

/**
 * Variable type model.
 * @export
 * @interface VariableType
 */
export interface VariableType {
    /**
     * 
     * @type {VariableTypeEnum}
     * @memberof VariableType
     */
    'type'?: VariableTypeEnum;
    /**
     * Optional description only when valid when type=unknown
     * @type {string}
     * @memberof VariableType
     */
    'description'?: string;
}
/**
 * Enum for variable types.
 * @export
 * @enum {string}
 */

export enum VariableTypeEnum {
    Unknown = 'unknown',
    CategoricalNominal = 'categorical_nominal',
    CategoricalOrdinal = 'categorical_ordinal',
    CategoricalBinary = 'categorical_binary',
    NumericalDiscrete = 'numerical_discrete',
    NumericalContinuous = 'numerical_continuous'
}


/**
 * AssociationsApi - axios parameter creator
 * @export
 */
export const AssociationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost: async (associationId: string, resourceFlagIn: ResourceFlagIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('flagAssociationV1AssociationsAssociationIdFlagsPost', 'associationId', associationId)
            // verify required parameter 'resourceFlagIn' is not null or undefined
            assertParamExists('flagAssociationV1AssociationsAssociationIdFlagsPost', 'resourceFlagIn', resourceFlagIn)
            const localVarPath = `/v1/associations/{association_id}/flags`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceFlagIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost_1: async (associationId: string, resourceFlagIn: ResourceFlagIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('flagAssociationV1AssociationsAssociationIdFlagsPost_1', 'associationId', associationId)
            // verify required parameter 'resourceFlagIn' is not null or undefined
            assertParamExists('flagAssociationV1AssociationsAssociationIdFlagsPost_1', 'resourceFlagIn', resourceFlagIn)
            const localVarPath = `/v1/associations/{association_id}/flags`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceFlagIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: async (associationId: string, modelId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet: async (associationId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getRelationshipDirectionV1AssociationsAssociationIdDirectionGet', 'associationId', associationId)
            const localVarPath = `/v1/associations/{association_id}/direction`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet: async (associationId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet', 'associationId', associationId)
            const localVarPath = `/v1/associations/{association_id}/reproducibility`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet: async (studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/user/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/associations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }

            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet: async (datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listAssociationsV1DatasetsDatasetIdAssociationsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: async (modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listAssociationsV1ModelsModelIdAssociationsGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet: async (studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsV1StudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: async (variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listAssociationsV1VariablesVariableIdAssociationsGet', 'variableId', variableId)
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Associations.
         * @summary List Free Metadata
         * @param {Array<string>} [ids] List of association IDs to fetch free metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFreeMetadataV1AssociationsFreeMetadataGet: async (ids?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/associations/free_metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssociationsApi - functional programming interface
 * @export
 */
export const AssociationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssociationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flagAssociationV1AssociationsAssociationIdFlagsPost(associationId: string, resourceFlagIn: ResourceFlagIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flagAssociationV1AssociationsAssociationIdFlagsPost(associationId, resourceFlagIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId: string, resourceFlagIn: ResourceFlagIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId, resourceFlagIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId: string, modelId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipDirection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipReproducibility>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1AssociationsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1ModelsModelIdAssociationsGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1StudiesStudyIdAssociationsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1VariablesVariableIdAssociationsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Associations.
         * @summary List Free Metadata
         * @param {Array<string>} [ids] List of association IDs to fetch free metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFreeMetadataV1AssociationsFreeMetadataGet(ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFreeMetadataV1AssociationsFreeMetadataGet(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssociationsApi - factory interface
 * @export
 */
export const AssociationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssociationsApiFp(configuration)
    return {
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost(associationId: string, resourceFlagIn: ResourceFlagIn, options?: any): AxiosPromise<any> {
            return localVarFp.flagAssociationV1AssociationsAssociationIdFlagsPost(associationId, resourceFlagIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId 
         * @param {ResourceFlagIn} resourceFlagIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId: string, resourceFlagIn: ResourceFlagIn, options?: any): AxiosPromise<any> {
            return localVarFp.flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId, resourceFlagIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId: string, modelId: string, teamId?: string, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId: string, teamId?: string, options?: any): AxiosPromise<RelationshipDirection> {
            return localVarFp.getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId: string, teamId?: string, options?: any): AxiosPromise<RelationshipReproducibility> {
            return localVarFp.getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, teamId?: string, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, variableRelationship?: string, featureRelationship?: string, conceptRelationship?: string, teamId?: string, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Free Metadata
         * @param {Array<string>} [ids] List of association IDs to fetch free metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFreeMetadataV1AssociationsFreeMetadataGet(ids?: Array<string>, options?: any): AxiosPromise<Array<any>> {
            return localVarFp.listFreeMetadataV1AssociationsFreeMetadataGet(ids, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for flagAssociationV1AssociationsAssociationIdFlagsPost operation in AssociationsApi.
 * @export
 * @interface AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPostRequest
 */
export interface AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost
     */
    readonly associationId: string

    /**
     * 
     * @type {ResourceFlagIn}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost
     */
    readonly resourceFlagIn: ResourceFlagIn
}

/**
 * Request parameters for flagAssociationV1AssociationsAssociationIdFlagsPost_1 operation in AssociationsApi.
 * @export
 * @interface AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0Request
 */
export interface AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0Request {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0
     */
    readonly associationId: string

    /**
     * 
     * @type {ResourceFlagIn}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0
     */
    readonly resourceFlagIn: ResourceFlagIn
}

/**
 * Request parameters for getAssociationV1ModelsModelIdAssociationsAssociationIdGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest
 */
export interface AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getRelationshipDirectionV1AssociationsAssociationIdDirectionGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest
 */
export interface AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest
 */
export interface AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAssociationsV1AssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1AssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1AssociationsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly isVariableAssociation?: boolean

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly featureRelationship?: string

    /**
     * Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly conceptRelationship?: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1AssociationsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAssociationsV1DatasetsDatasetIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1ModelsModelIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1StudiesStudyIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAssociationsV1VariablesVariableIdAssociationsGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest
 */
export interface AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly variableId: string

    /**
     * 
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listFreeMetadataV1AssociationsFreeMetadataGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListFreeMetadataV1AssociationsFreeMetadataGetRequest
 */
export interface AssociationsApiListFreeMetadataV1AssociationsFreeMetadataGetRequest {
    /**
     * List of association IDs to fetch free metadata for.
     * @type {Array<string>}
     * @memberof AssociationsApiListFreeMetadataV1AssociationsFreeMetadataGet
     */
    readonly ids?: Array<string>
}

/**
 * AssociationsApi - object-oriented interface
 * @export
 * @class AssociationsApi
 * @extends {BaseAPI}
 */
export class AssociationsApi extends BaseAPI {
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public flagAssociationV1AssociationsAssociationIdFlagsPost(requestParameters: AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPostRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).flagAssociationV1AssociationsAssociationIdFlagsPost(requestParameters.associationId, requestParameters.resourceFlagIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public flagAssociationV1AssociationsAssociationIdFlagsPost_1(requestParameters: AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0Request, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).flagAssociationV1AssociationsAssociationIdFlagsPost_1(requestParameters.associationId, requestParameters.resourceFlagIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Association.
     * @summary Get Association
     * @param {AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters: AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(requestParameters: AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(requestParameters.associationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(requestParameters: AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(requestParameters.associationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters: AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Associations.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1AssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1AssociationsGet(requestParameters: AssociationsApiListAssociationsV1AssociationsGetRequest = {}, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1AssociationsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in model.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1ModelsModelIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters: AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Associations.
     * @summary List Free Metadata
     * @param {AssociationsApiListFreeMetadataV1AssociationsFreeMetadataGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    public listFreeMetadataV1AssociationsFreeMetadataGet(requestParameters: AssociationsApiListFreeMetadataV1AssociationsFreeMetadataGetRequest = {}, options?: AxiosRequestConfig) {
        return AssociationsApiFp(this.configuration).listFreeMetadataV1AssociationsFreeMetadataGet(requestParameters.ids, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthorsApi - axios parameter creator
 * @export
 */
export const AuthorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet: async (authorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('getAuthorV1AuthorsAuthorIdGet', 'authorId', authorId)
            const localVarPath = `/v1/authors/{author_id}`
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet: async (teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorsApi - functional programming interface
 * @export
 */
export const AuthorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorV1AuthorsAuthorIdGet(authorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorV1AuthorsAuthorIdGet(authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthorsV1AuthorsGet(teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthorsV1AuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorsApi - factory interface
 * @export
 */
export const AuthorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorsApiFp(configuration)
    return {
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet(authorId: string, options?: any): AxiosPromise<AuthorOut> {
            return localVarFp.getAuthorV1AuthorsAuthorIdGet(authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet(teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<AuthorPaginationOut> {
            return localVarFp.listAuthorsV1AuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAuthorV1AuthorsAuthorIdGet operation in AuthorsApi.
 * @export
 * @interface AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest
 */
export interface AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiGetAuthorV1AuthorsAuthorIdGet
     */
    readonly authorId: string
}

/**
 * Request parameters for listAuthorsV1AuthorsGet operation in AuthorsApi.
 * @export
 * @interface AuthorsApiListAuthorsV1AuthorsGetRequest
 */
export interface AuthorsApiListAuthorsV1AuthorsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AuthorSortEnum}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly orderBy?: AuthorSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof AuthorsApiListAuthorsV1AuthorsGet
     */
    readonly sortBy?: string
}

/**
 * AuthorsApi - object-oriented interface
 * @export
 * @class AuthorsApi
 * @extends {BaseAPI}
 */
export class AuthorsApi extends BaseAPI {
    /**
     * Get Author.
     * @summary Get Author
     * @param {AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public getAuthorV1AuthorsAuthorIdGet(requestParameters: AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).getAuthorV1AuthorsAuthorIdGet(requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {AuthorsApiListAuthorsV1AuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public listAuthorsV1AuthorsGet(requestParameters: AuthorsApiListAuthorsV1AuthorsGetRequest = {}, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).listAuthorsV1AuthorsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConceptsApi - axios parameter creator
 * @export
 */
export const ConceptsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch concept relationships.
         * @summary Get Concept Relationships
         * @param {string} conceptId 
         * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet: async (conceptId: string, topPercentileLimit?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet', 'conceptId', conceptId)
            const localVarPath = `/v1/concepts/{concept_id}/relationships`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (topPercentileLimit !== undefined) {
                localVarQueryParameter['top_percentile_limit'] = topPercentileLimit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet: async (conceptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('getConceptV1ConceptsConceptIdGet', 'conceptId', conceptId)
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [teamId] 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet: async (teamId?: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserConceptsV1UsersUserIdConceptsGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Concepts.
         * @summary Semantic Search Concepts
         * @param {string} query Query for the search.
         * @param {number} [alpha] Alpha for the search.
         * @param {number} [autocut] Autocut for the search.
         * @param {number} [limit] Limit for the search.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        semanticSearchConceptsV1ConceptsSemanticGet: async (query: string, alpha?: number, autocut?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('semanticSearchConceptsV1ConceptsSemanticGet', 'query', query)
            const localVarPath = `/v1/concepts/semantic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (alpha !== undefined) {
                localVarQueryParameter['alpha'] = alpha;
            }

            if (autocut !== undefined) {
                localVarQueryParameter['autocut'] = autocut;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConceptsApi - functional programming interface
 * @export
 */
export const ConceptsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConceptsApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch concept relationships.
         * @summary Get Concept Relationships
         * @param {string} conceptId 
         * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(conceptId: string, topPercentileLimit?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptRelationshipsOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(conceptId, topPercentileLimit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConceptV1ConceptsConceptIdGet(conceptId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConceptV1ConceptsConceptIdGet(conceptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserConceptsV1UserConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [teamId] 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConceptsV1ConceptsGet(teamId?: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConceptsV1ConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserConceptsV1UsersUserIdConceptsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Concepts.
         * @summary Semantic Search Concepts
         * @param {string} query Query for the search.
         * @param {number} [alpha] Alpha for the search.
         * @param {number} [autocut] Autocut for the search.
         * @param {number} [limit] Limit for the search.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async semanticSearchConceptsV1ConceptsSemanticGet(query: string, alpha?: number, autocut?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConceptOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.semanticSearchConceptsV1ConceptsSemanticGet(query, alpha, autocut, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConceptsApi - factory interface
 * @export
 */
export const ConceptsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConceptsApiFp(configuration)
    return {
        /**
         * Fetch concept relationships.
         * @summary Get Concept Relationships
         * @param {string} conceptId 
         * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(conceptId: string, topPercentileLimit?: boolean, options?: any): AxiosPromise<ConceptRelationshipsOut> {
            return localVarFp.getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(conceptId, topPercentileLimit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet(conceptId: string, options?: any): AxiosPromise<ConceptOut> {
            return localVarFp.getConceptV1ConceptsConceptIdGet(conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [teamId] 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet(teamId?: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listConceptsV1ConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary Semantic Search Concepts
         * @param {string} query Query for the search.
         * @param {number} [alpha] Alpha for the search.
         * @param {number} [autocut] Autocut for the search.
         * @param {number} [limit] Limit for the search.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        semanticSearchConceptsV1ConceptsSemanticGet(query: string, alpha?: number, autocut?: number, limit?: number, options?: any): AxiosPromise<Array<ConceptOut>> {
            return localVarFp.semanticSearchConceptsV1ConceptsSemanticGet(query, alpha, autocut, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiGetConceptRelationshipsV1ConceptsConceptIdRelationshipsGetRequest
 */
export interface ConceptsApiGetConceptRelationshipsV1ConceptsConceptIdRelationshipsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiGetConceptRelationshipsV1ConceptsConceptIdRelationshipsGet
     */
    readonly conceptId: string

    /**
     * Flag for limiting to top percentile.
     * @type {boolean}
     * @memberof ConceptsApiGetConceptRelationshipsV1ConceptsConceptIdRelationshipsGet
     */
    readonly topPercentileLimit?: boolean
}

/**
 * Request parameters for getConceptV1ConceptsConceptIdGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiGetConceptV1ConceptsConceptIdGetRequest
 */
export interface ConceptsApiGetConceptV1ConceptsConceptIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiGetConceptV1ConceptsConceptIdGet
     */
    readonly conceptId: string
}

/**
 * Request parameters for listAuthenticatedUserConceptsV1UserConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest
 */
export interface ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly inConceptGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listConceptsV1ConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListConceptsV1ConceptsGetRequest
 */
export interface ConceptsApiListConceptsV1ConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly teamId?: string

    /**
     * Min strength
     * @type {number}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly minRelationshipStrength?: number

    /**
     * Search query.
     * @type {string}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly inConceptGraph?: boolean
}

/**
 * Request parameters for listUserConceptsV1UsersUserIdConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest
 */
export interface ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly inConceptGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof ConceptsApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for semanticSearchConceptsV1ConceptsSemanticGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGetRequest
 */
export interface ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGetRequest {
    /**
     * Query for the search.
     * @type {string}
     * @memberof ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGet
     */
    readonly query: string

    /**
     * Alpha for the search.
     * @type {number}
     * @memberof ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGet
     */
    readonly alpha?: number

    /**
     * Autocut for the search.
     * @type {number}
     * @memberof ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGet
     */
    readonly autocut?: number

    /**
     * Limit for the search.
     * @type {number}
     * @memberof ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGet
     */
    readonly limit?: number
}

/**
 * ConceptsApi - object-oriented interface
 * @export
 * @class ConceptsApi
 * @extends {BaseAPI}
 */
export class ConceptsApi extends BaseAPI {
    /**
     * Fetch concept relationships.
     * @summary Get Concept Relationships
     * @param {ConceptsApiGetConceptRelationshipsV1ConceptsConceptIdRelationshipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(requestParameters: ConceptsApiGetConceptRelationshipsV1ConceptsConceptIdRelationshipsGetRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(requestParameters.conceptId, requestParameters.topPercentileLimit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Concept.
     * @summary Get Concept
     * @param {ConceptsApiGetConceptV1ConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public getConceptV1ConceptsConceptIdGet(requestParameters: ConceptsApiGetConceptV1ConceptsConceptIdGetRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).getConceptV1ConceptsConceptIdGet(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters: ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest = {}, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Concepts.
     * @summary List Concepts
     * @param {ConceptsApiListConceptsV1ConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public listConceptsV1ConceptsGet(requestParameters: ConceptsApiListConceptsV1ConceptsGetRequest = {}, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).listConceptsV1ConceptsGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public listUserConceptsV1UsersUserIdConceptsGet(requestParameters: ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Concepts.
     * @summary Semantic Search Concepts
     * @param {ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    public semanticSearchConceptsV1ConceptsSemanticGet(requestParameters: ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGetRequest, options?: AxiosRequestConfig) {
        return ConceptsApiFp(this.configuration).semanticSearchConceptsV1ConceptsSemanticGet(requestParameters.query, requestParameters.alpha, requestParameters.autocut, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DashboardsApi - axios parameter creator
 * @export
 */
export const DashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut: async (dashboardId: string, featureId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut', 'dashboardId', dashboardId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut', 'featureId', featureId)
            const localVarPath = `/v1/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {DashboardIn} dashboardIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1DashboardsPost: async (dashboardIn: DashboardIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardIn' is not null or undefined
            assertParamExists('createDashboardPostV1DashboardsPost', 'dashboardIn', dashboardIn)
            const localVarPath = `/v1/dashboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dashboardIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1DashboardsDashboardIdDelete: async (dashboardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('deleteDashboardV1DashboardsDashboardIdDelete', 'dashboardId', dashboardId)
            const localVarPath = `/v1/dashboards/{dashboard_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1DashboardsDashboardIdGet: async (dashboardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('getDashboardV1DashboardsDashboardIdGet', 'dashboardId', dashboardId)
            const localVarPath = `/v1/dashboards/{dashboard_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet: async (dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet', 'dashboardId', dashboardId)
            const localVarPath = `/v1/dashboards/{dashboard_id}/features`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1DashboardsGet: async (teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/dashboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet: async (variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listDashboardsV1VariablesVariableIdDashboardsGet', 'variableId', variableId)
            const localVarPath = `/v1/variables/{variable_id}/dashboards`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardsApi - functional programming interface
 * @export
 */
export const DashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId: string, featureId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {DashboardIn} dashboardIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDashboardPostV1DashboardsPost(dashboardIn: DashboardIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDashboardPostV1DashboardsPost(dashboardIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDashboardV1DashboardsDashboardIdDelete(dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDashboardV1DashboardsDashboardIdDelete(dashboardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDashboardV1DashboardsDashboardIdGet(dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDashboardV1DashboardsDashboardIdGet(dashboardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardsV1DashboardsGet(teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardsV1DashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardsV1VariablesVariableIdDashboardsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DashboardsApi - factory interface
 * @export
 */
export const DashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardsApiFp(configuration)
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId: string, featureId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {DashboardIn} dashboardIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1DashboardsPost(dashboardIn: DashboardIn, teamId?: string, options?: any): AxiosPromise<DashboardOut> {
            return localVarFp.createDashboardPostV1DashboardsPost(dashboardIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1DashboardsDashboardIdDelete(dashboardId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDashboardV1DashboardsDashboardIdDelete(dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} dashboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1DashboardsDashboardIdGet(dashboardId: string, options?: any): AxiosPromise<DashboardOut> {
            return localVarFp.getDashboardV1DashboardsDashboardIdGet(dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1DashboardsGet(teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<DashboardPaginationOut> {
            return localVarFp.listDashboardsV1DashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<DashboardPaginationOut> {
            return localVarFp.listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut operation in DashboardsApi.
 * @export
 * @interface DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest
 */
export interface DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly dashboardId: string

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for createDashboardPostV1DashboardsPost operation in DashboardsApi.
 * @export
 * @interface DashboardsApiCreateDashboardPostV1DashboardsPostRequest
 */
export interface DashboardsApiCreateDashboardPostV1DashboardsPostRequest {
    /**
     * 
     * @type {DashboardIn}
     * @memberof DashboardsApiCreateDashboardPostV1DashboardsPost
     */
    readonly dashboardIn: DashboardIn

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiCreateDashboardPostV1DashboardsPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for deleteDashboardV1DashboardsDashboardIdDelete operation in DashboardsApi.
 * @export
 * @interface DashboardsApiDeleteDashboardV1DashboardsDashboardIdDeleteRequest
 */
export interface DashboardsApiDeleteDashboardV1DashboardsDashboardIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiDeleteDashboardV1DashboardsDashboardIdDelete
     */
    readonly dashboardId: string
}

/**
 * Request parameters for getDashboardV1DashboardsDashboardIdGet operation in DashboardsApi.
 * @export
 * @interface DashboardsApiGetDashboardV1DashboardsDashboardIdGetRequest
 */
export interface DashboardsApiGetDashboardV1DashboardsDashboardIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiGetDashboardV1DashboardsDashboardIdGet
     */
    readonly dashboardId: string
}

/**
 * Request parameters for listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet operation in DashboardsApi.
 * @export
 * @interface DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest
 */
export interface DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly dashboardId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listDashboardsV1DashboardsGet operation in DashboardsApi.
 * @export
 * @interface DashboardsApiListDashboardsV1DashboardsGetRequest
 */
export interface DashboardsApiListDashboardsV1DashboardsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DashboardSortEnum}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly orderBy?: DashboardSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1DashboardsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listDashboardsV1VariablesVariableIdDashboardsGet operation in DashboardsApi.
 * @export
 * @interface DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGetRequest
 */
export interface DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly variableId: string

    /**
     * 
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DashboardSortEnum}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly orderBy?: DashboardSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly sortBy?: string
}

/**
 * DashboardsApi - object-oriented interface
 * @export
 * @class DashboardsApi
 * @extends {BaseAPI}
 */
export class DashboardsApi extends BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters: DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.dashboardId, requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Dashboard.
     * @summary Create Dashboard Post
     * @param {DashboardsApiCreateDashboardPostV1DashboardsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public createDashboardPostV1DashboardsPost(requestParameters: DashboardsApiCreateDashboardPostV1DashboardsPostRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).createDashboardPostV1DashboardsPost(requestParameters.dashboardIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dashboard
     * @param {DashboardsApiDeleteDashboardV1DashboardsDashboardIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public deleteDashboardV1DashboardsDashboardIdDelete(requestParameters: DashboardsApiDeleteDashboardV1DashboardsDashboardIdDeleteRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).deleteDashboardV1DashboardsDashboardIdDelete(requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Dashboard.
     * @summary Get Dashboard
     * @param {DashboardsApiGetDashboardV1DashboardsDashboardIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public getDashboardV1DashboardsDashboardIdGet(requestParameters: DashboardsApiGetDashboardV1DashboardsDashboardIdGetRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).getDashboardV1DashboardsDashboardIdGet(requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters: DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Dashboards.  Paginated list of all Dashboards.
     * @summary List Dashboards
     * @param {DashboardsApiListDashboardsV1DashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public listDashboardsV1DashboardsGet(requestParameters: DashboardsApiListDashboardsV1DashboardsGetRequest = {}, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).listDashboardsV1DashboardsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get dashboards connected to the Variable.
     * @summary List Dashboards
     * @param {DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public listDashboardsV1VariablesVariableIdDashboardsGet(requestParameters: DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGetRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).listDashboardsV1VariablesVariableIdDashboardsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DatasetsApi - axios parameter creator
 * @export
 */
export const DatasetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet: async (datasetId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('getDatasetV1DatasetsDatasetIdGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet: async (datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listAssociationsV1DatasetsDatasetIdAssociationsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: async (datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet: async (datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listDatasetParentsV1DatasetsDatasetIdParentsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/parents`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet: async (datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listModelsUsingDatasetV1DatasetsDatasetIdModelsGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/models`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserDatasetsV1UsersUserIdDatasetsGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatasetsApi - functional programming interface
 * @export
 */
export const DatasetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatasetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetV1DatasetsDatasetIdGet(datasetId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatasetV1DatasetsDatasetIdGet(datasetId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserDatasetsV1UserDatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetsV1DatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserDatasetsV1UsersUserIdDatasetsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DatasetsApi - factory interface
 * @export
 */
export const DatasetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatasetsApiFp(configuration)
    return {
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet(datasetId: string, teamId?: string, options?: any): AxiosPromise<DatasetOut> {
            return localVarFp.getDatasetV1DatasetsDatasetIdGet(datasetId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, teamId?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDatasetV1DatasetsDatasetIdGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest
 */
export interface DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiGetDatasetV1DatasetsDatasetIdGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiGetDatasetV1DatasetsDatasetIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAssociationsV1DatasetsDatasetIdAssociationsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest
 */
export interface DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserDatasetsV1UserDatasetsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest
 */
export interface DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest
 */
export interface DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listDatasetParentsV1DatasetsDatasetIdParentsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest
 */
export interface DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGet
     */
    readonly conceptTag?: string
}

/**
 * Request parameters for listDatasetsV1DatasetsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListDatasetsV1DatasetsGetRequest
 */
export interface DatasetsApiListDatasetsV1DatasetsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly conceptTag?: string

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly featureRelationship?: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListDatasetsV1DatasetsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listModelsUsingDatasetV1DatasetsDatasetIdModelsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest
 */
export interface DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listUserDatasetsV1UsersUserIdDatasetsGet operation in DatasetsApi.
 * @export
 * @interface DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest
 */
export interface DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly teamId?: string
}

/**
 * DatasetsApi - object-oriented interface
 * @export
 * @class DatasetsApi
 * @extends {BaseAPI}
 */
export class DatasetsApi extends BaseAPI {
    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public getDatasetV1DatasetsDatasetIdGet(requestParameters: DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).getDatasetV1DatasetsDatasetIdGet(requestParameters.datasetId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters: DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters: DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest = {}, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters: DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listDatasetParentsV1DatasetsDatasetIdParentsGet(requestParameters: DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listDatasetParentsV1DatasetsDatasetIdParentsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {DatasetsApiListDatasetsV1DatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listDatasetsV1DatasetsGet(requestParameters: DatasetsApiListDatasetsV1DatasetsGetRequest = {}, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listDatasetsV1DatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters: DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    public listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters: DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest, options?: AxiosRequestConfig) {
        return DatasetsApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnterpriseApi - axios parameter creator
 * @export
 */
export const EnterpriseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationIn} integrationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost: async (integrationIn: IntegrationIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationIn' is not null or undefined
            assertParamExists('createIntegrationV1EnterpriseIntegrationsPost', 'integrationIn', integrationIn)
            const localVarPath = `/v1/enterprise/integrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(integrationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost: async (messageIn: MessageIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageIn' is not null or undefined
            assertParamExists('createMessageV1EnterpriseMessagesPost', 'messageIn', messageIn)
            const localVarPath = `/v1/enterprise/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/enterprise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet: async (integrationId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            assertParamExists('getIntegrationV1EnterpriseIntegrationsIntegrationIdGet', 'integrationId', integrationId)
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1EnterpriseIntegrationsGet: async (teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/enterprise/integrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet: async (messageId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('getMessageV1EnterpriseMessagesMessageIdGet', 'messageId', messageId)
            const localVarPath = `/v1/enterprise/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Enterprise.
         * @summary Update Enterprise
         * @param {EnterpriseIn} enterpriseIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnterpriseV1EnterprisePatch: async (enterpriseIn: EnterpriseIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enterpriseIn' is not null or undefined
            assertParamExists('updateEnterpriseV1EnterprisePatch', 'enterpriseIn', enterpriseIn)
            const localVarPath = `/v1/enterprise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enterpriseIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} integrationId 
         * @param {IntegrationIn} integrationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch: async (integrationId: string, integrationIn: IntegrationIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            assertParamExists('updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch', 'integrationId', integrationId)
            // verify required parameter 'integrationIn' is not null or undefined
            assertParamExists('updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch', 'integrationIn', integrationIn)
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(integrationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId 
         * @param {MessageIn} messageIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch: async (messageId: string, messageIn: MessageIn, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('updateMessageV1EnterpriseMessagesMessageIdPatch', 'messageId', messageId)
            // verify required parameter 'messageIn' is not null or undefined
            assertParamExists('updateMessageV1EnterpriseMessagesMessageIdPatch', 'messageIn', messageIn)
            const localVarPath = `/v1/enterprise/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnterpriseApi - functional programming interface
 * @export
 */
export const EnterpriseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnterpriseApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationIn} integrationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIntegrationV1EnterpriseIntegrationsPost(integrationIn: IntegrationIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIntegrationV1EnterpriseIntegrationsPost(integrationIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMessageV1EnterpriseMessagesPost(messageIn: MessageIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMessageV1EnterpriseMessagesPost(messageIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnterpriseV1EnterpriseGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Enterprise>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnterpriseV1EnterpriseGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrationsV1EnterpriseIntegrationsGet(teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Integration>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrationsV1EnterpriseIntegrationsGet(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageV1EnterpriseMessagesMessageIdGet(messageId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageV1EnterpriseMessagesMessageIdGet(messageId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Enterprise.
         * @summary Update Enterprise
         * @param {EnterpriseIn} enterpriseIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnterpriseV1EnterprisePatch(enterpriseIn: EnterpriseIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Enterprise>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnterpriseV1EnterprisePatch(enterpriseIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} integrationId 
         * @param {IntegrationIn} integrationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId: string, integrationIn: IntegrationIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId 
         * @param {MessageIn} messageIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMessageV1EnterpriseMessagesMessageIdPatch(messageId: string, messageIn: MessageIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnterpriseApi - factory interface
 * @export
 */
export const EnterpriseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnterpriseApiFp(configuration)
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationIn} integrationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost(integrationIn: IntegrationIn, teamId?: string, options?: any): AxiosPromise<Integration> {
            return localVarFp.createIntegrationV1EnterpriseIntegrationsPost(integrationIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost(messageIn: MessageIn, teamId?: string, options?: any): AxiosPromise<MessageOut> {
            return localVarFp.createMessageV1EnterpriseMessagesPost(messageIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet(options?: any): AxiosPromise<Enterprise> {
            return localVarFp.getEnterpriseV1EnterpriseGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId: string, teamId?: string, options?: any): AxiosPromise<Integration> {
            return localVarFp.getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1EnterpriseIntegrationsGet(teamId?: string, options?: any): AxiosPromise<Array<Integration>> {
            return localVarFp.getIntegrationsV1EnterpriseIntegrationsGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet(messageId: string, teamId?: string, options?: any): AxiosPromise<MessageOut> {
            return localVarFp.getMessageV1EnterpriseMessagesMessageIdGet(messageId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Enterprise.
         * @summary Update Enterprise
         * @param {EnterpriseIn} enterpriseIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnterpriseV1EnterprisePatch(enterpriseIn: EnterpriseIn, options?: any): AxiosPromise<Enterprise> {
            return localVarFp.updateEnterpriseV1EnterprisePatch(enterpriseIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} integrationId 
         * @param {IntegrationIn} integrationIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId: string, integrationIn: IntegrationIn, teamId?: string, options?: any): AxiosPromise<Integration> {
            return localVarFp.updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId 
         * @param {MessageIn} messageIn 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch(messageId: string, messageIn: MessageIn, teamId?: string, options?: any): AxiosPromise<MessageOut> {
            return localVarFp.updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, teamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createIntegrationV1EnterpriseIntegrationsPost operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest
 */
export interface EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest {
    /**
     * 
     * @type {IntegrationIn}
     * @memberof EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPost
     */
    readonly integrationIn: IntegrationIn

    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for createMessageV1EnterpriseMessagesPost operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest
 */
export interface EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest {
    /**
     * 
     * @type {MessageIn}
     * @memberof EnterpriseApiCreateMessageV1EnterpriseMessagesPost
     */
    readonly messageIn: MessageIn

    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiCreateMessageV1EnterpriseMessagesPost
     */
    readonly teamId?: string
}

/**
 * Request parameters for getIntegrationV1EnterpriseIntegrationsIntegrationIdGet operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest
 */
export interface EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGet
     */
    readonly integrationId: string

    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getIntegrationsV1EnterpriseIntegrationsGet operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest
 */
export interface EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getMessageV1EnterpriseMessagesMessageIdGet operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest
 */
export interface EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGet
     */
    readonly messageId: string

    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for updateEnterpriseV1EnterprisePatch operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiUpdateEnterpriseV1EnterprisePatchRequest
 */
export interface EnterpriseApiUpdateEnterpriseV1EnterprisePatchRequest {
    /**
     * 
     * @type {EnterpriseIn}
     * @memberof EnterpriseApiUpdateEnterpriseV1EnterprisePatch
     */
    readonly enterpriseIn: EnterpriseIn
}

/**
 * Request parameters for updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest
 */
export interface EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch
     */
    readonly integrationId: string

    /**
     * 
     * @type {IntegrationIn}
     * @memberof EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch
     */
    readonly integrationIn: IntegrationIn

    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch
     */
    readonly teamId?: string
}

/**
 * Request parameters for updateMessageV1EnterpriseMessagesMessageIdPatch operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest
 */
export interface EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatch
     */
    readonly messageId: string

    /**
     * 
     * @type {MessageIn}
     * @memberof EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatch
     */
    readonly messageIn: MessageIn

    /**
     * 
     * @type {string}
     * @memberof EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatch
     */
    readonly teamId?: string
}

/**
 * EnterpriseApi - object-oriented interface
 * @export
 * @class EnterpriseApi
 * @extends {BaseAPI}
 */
export class EnterpriseApi extends BaseAPI {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public createIntegrationV1EnterpriseIntegrationsPost(requestParameters: EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).createIntegrationV1EnterpriseIntegrationsPost(requestParameters.integrationIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new message.
     * @summary Create Message
     * @param {EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public createMessageV1EnterpriseMessagesPost(requestParameters: EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).createMessageV1EnterpriseMessagesPost(requestParameters.messageIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the Enterprise.
     * @summary Get Enterprise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getEnterpriseV1EnterpriseGet(options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).getEnterpriseV1EnterpriseGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters: EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters.integrationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get team integrations.
     * @summary Get Integrations
     * @param {EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getIntegrationsV1EnterpriseIntegrationsGet(requestParameters: EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest = {}, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).getIntegrationsV1EnterpriseIntegrationsGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Message.
     * @summary Get Message
     * @param {EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getMessageV1EnterpriseMessagesMessageIdGet(requestParameters: EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).getMessageV1EnterpriseMessagesMessageIdGet(requestParameters.messageId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Enterprise.
     * @summary Update Enterprise
     * @param {EnterpriseApiUpdateEnterpriseV1EnterprisePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public updateEnterpriseV1EnterprisePatch(requestParameters: EnterpriseApiUpdateEnterpriseV1EnterprisePatchRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).updateEnterpriseV1EnterprisePatch(requestParameters.enterpriseIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Integration.
     * @summary Update Integration
     * @param {EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters: EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters.integrationId, requestParameters.integrationIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Message.
     * @summary Update Message
     * @param {EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public updateMessageV1EnterpriseMessagesMessageIdPatch(requestParameters: EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).updateMessageV1EnterpriseMessagesMessageIdPatch(requestParameters.messageId, requestParameters.messageIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FeaturesApi - axios parameter creator
 * @export
 */
export const FeaturesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut: async (dashboardId: string, featureId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut', 'dashboardId', dashboardId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut', 'featureId', featureId)
            const localVarPath = `/v1/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet: async (featureId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('getFeatureV1FeaturesFeatureIdGet', 'featureId', featureId)
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet: async (dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet', 'dashboardId', dashboardId)
            const localVarPath = `/v1/dashboards/{dashboard_id}/features`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: async (datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet', 'datasetId', datasetId)
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet: async (modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listModelFeaturesV1ModelsModelIdFeaturesGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/features`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserFeaturesV1UsersUserIdFeaturesGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeaturesApi - functional programming interface
 * @export
 */
export const FeaturesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeaturesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId: string, featureId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatureV1FeaturesFeatureIdGet(featureId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatureV1FeaturesFeatureIdGet(featureId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserFeaturesV1UserFeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeaturesV1FeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelFeaturesV1ModelsModelIdFeaturesGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserFeaturesV1UsersUserIdFeaturesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeaturesApi - factory interface
 * @export
 */
export const FeaturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeaturesApiFp(configuration)
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId 
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId: string, featureId: string, teamId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet(featureId: string, teamId?: string, options?: any): AxiosPromise<FeatureOut> {
            return localVarFp.getFeatureV1FeaturesFeatureIdGet(featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut operation in FeaturesApi.
 * @export
 * @interface FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest
 */
export interface FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly dashboardId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly featureId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut
     */
    readonly teamId?: string
}

/**
 * Request parameters for getFeatureV1FeaturesFeatureIdGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest
 */
export interface FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiGetFeatureV1FeaturesFeatureIdGet
     */
    readonly featureId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiGetFeatureV1FeaturesFeatureIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthenticatedUserFeaturesV1UserFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest
 */
export interface FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest
 */
export interface FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly dashboardId: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest
 */
export interface FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly datasetId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listFeaturesV1FeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListFeaturesV1FeaturesGetRequest
 */
export interface FeaturesApiListFeaturesV1FeaturesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListFeaturesV1FeaturesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listModelFeaturesV1ModelsModelIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest
 */
export interface FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listUserFeaturesV1UsersUserIdFeaturesGet operation in FeaturesApi.
 * @export
 * @interface FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest
 */
export interface FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly teamId?: string
}

/**
 * FeaturesApi - object-oriented interface
 * @export
 * @class FeaturesApi
 * @extends {BaseAPI}
 */
export class FeaturesApi extends BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters: FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.dashboardId, requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get feature.
     * @summary Get Feature
     * @param {FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public getFeatureV1FeaturesFeatureIdGet(requestParameters: FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).getFeatureV1FeaturesFeatureIdGet(requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters: FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest = {}, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters: FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters: FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Features.
     * @summary List Features
     * @param {FeaturesApiListFeaturesV1FeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listFeaturesV1FeaturesGet(requestParameters: FeaturesApiListFeaturesV1FeaturesGetRequest = {}, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listFeaturesV1FeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get features in model.
     * @summary List Model Features
     * @param {FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listModelFeaturesV1ModelsModelIdFeaturesGet(requestParameters: FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listModelFeaturesV1ModelsModelIdFeaturesGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters: FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FeedbackApi - axios parameter creator
 * @export
 */
export const FeedbackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Post user feedback on AI-generated relationship synthesis to s3.
         * @summary Post Synthesis Feedback
         * @param {SynthesisFeedbackIn} synthesisFeedbackIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSynthesisFeedbackV1FeedbackPost: async (synthesisFeedbackIn: SynthesisFeedbackIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'synthesisFeedbackIn' is not null or undefined
            assertParamExists('postSynthesisFeedbackV1FeedbackPost', 'synthesisFeedbackIn', synthesisFeedbackIn)
            const localVarPath = `/v1/feedback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(synthesisFeedbackIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedbackApi - functional programming interface
 * @export
 */
export const FeedbackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedbackApiAxiosParamCreator(configuration)
    return {
        /**
         * Post user feedback on AI-generated relationship synthesis to s3.
         * @summary Post Synthesis Feedback
         * @param {SynthesisFeedbackIn} synthesisFeedbackIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSynthesisFeedbackV1FeedbackPost(synthesisFeedbackIn: SynthesisFeedbackIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSynthesisFeedbackV1FeedbackPost(synthesisFeedbackIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeedbackApi - factory interface
 * @export
 */
export const FeedbackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedbackApiFp(configuration)
    return {
        /**
         * Post user feedback on AI-generated relationship synthesis to s3.
         * @summary Post Synthesis Feedback
         * @param {SynthesisFeedbackIn} synthesisFeedbackIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSynthesisFeedbackV1FeedbackPost(synthesisFeedbackIn: SynthesisFeedbackIn, options?: any): AxiosPromise<any> {
            return localVarFp.postSynthesisFeedbackV1FeedbackPost(synthesisFeedbackIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for postSynthesisFeedbackV1FeedbackPost operation in FeedbackApi.
 * @export
 * @interface FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest
 */
export interface FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest {
    /**
     * 
     * @type {SynthesisFeedbackIn}
     * @memberof FeedbackApiPostSynthesisFeedbackV1FeedbackPost
     */
    readonly synthesisFeedbackIn: SynthesisFeedbackIn
}

/**
 * FeedbackApi - object-oriented interface
 * @export
 * @class FeedbackApi
 * @extends {BaseAPI}
 */
export class FeedbackApi extends BaseAPI {
    /**
     * Post user feedback on AI-generated relationship synthesis to s3.
     * @summary Post Synthesis Feedback
     * @param {FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    public postSynthesisFeedbackV1FeedbackPost(requestParameters: FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest, options?: AxiosRequestConfig) {
        return FeedbackApiFp(this.configuration).postSynthesisFeedbackV1FeedbackPost(requestParameters.synthesisFeedbackIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FindingsApi - axios parameter creator
 * @export
 */
export const FindingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get study findings via association ids or dois.
         * @summary Get Study Findings From Association Ids Or Dois
         * @param {StudyFindingsIn} studyFindingsIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost: async (studyFindingsIn: StudyFindingsIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyFindingsIn' is not null or undefined
            assertParamExists('getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost', 'studyFindingsIn', studyFindingsIn)
            const localVarPath = `/v1/findings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyFindingsIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FindingsApi - functional programming interface
 * @export
 */
export const FindingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FindingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get study findings via association ids or dois.
         * @summary Get Study Findings From Association Ids Or Dois
         * @param {StudyFindingsIn} studyFindingsIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(studyFindingsIn: StudyFindingsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyFindingsOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(studyFindingsIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FindingsApi - factory interface
 * @export
 */
export const FindingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FindingsApiFp(configuration)
    return {
        /**
         * Get study findings via association ids or dois.
         * @summary Get Study Findings From Association Ids Or Dois
         * @param {StudyFindingsIn} studyFindingsIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(studyFindingsIn: StudyFindingsIn, options?: any): AxiosPromise<StudyFindingsOut> {
            return localVarFp.getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(studyFindingsIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost operation in FindingsApi.
 * @export
 * @interface FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest
 */
export interface FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest {
    /**
     * 
     * @type {StudyFindingsIn}
     * @memberof FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost
     */
    readonly studyFindingsIn: StudyFindingsIn
}

/**
 * FindingsApi - object-oriented interface
 * @export
 * @class FindingsApi
 * @extends {BaseAPI}
 */
export class FindingsApi extends BaseAPI {
    /**
     * Get study findings via association ids or dois.
     * @summary Get Study Findings From Association Ids Or Dois
     * @param {FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FindingsApi
     */
    public getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(requestParameters: FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest, options?: AxiosRequestConfig) {
        return FindingsApiFp(this.configuration).getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(requestParameters.studyFindingsIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GraphApi - axios parameter creator
 * @export
 */
export const GraphApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet: async (teamId: string, minRelationshipStrength?: number, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getConceptGraphV1GraphConceptGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/graph/concept_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getDatasetGraphV1GraphDatasetGraphGet', 'teamId', teamId)
            const localVarPath = `/v1/graph/dataset_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1GraphMetricsMetricIdGet: async (metricId: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metricId' is not null or undefined
            assertParamExists('getMetricNodeGraphV1GraphMetricsMetricIdGet', 'metricId', metricId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getMetricNodeGraphV1GraphMetricsMetricIdGet', 'teamId', teamId)
            const localVarPath = `/v1/graph/metrics/{metric_id}`
                .replace(`{${"metric_id"}}`, encodeURIComponent(String(metricId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1 
         * @param {string} metricId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get: async (metricId1: string, metricId2: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metricId1' is not null or undefined
            assertParamExists('getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get', 'metricId1', metricId1)
            // verify required parameter 'metricId2' is not null or undefined
            assertParamExists('getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get', 'metricId2', metricId2)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get', 'teamId', teamId)
            const localVarPath = `/v1/graph/metrics/{metric_id_1}/relationship/{metric_id_2}`
                .replace(`{${"metric_id_1"}}`, encodeURIComponent(String(metricId1)))
                .replace(`{${"metric_id_2"}}`, encodeURIComponent(String(metricId2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1GraphSemanticGraphGet: async (topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, minStrength?: number, minCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/graph/semantic_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (topic1 !== undefined) {
                localVarQueryParameter['topic_1'] = topic1;
            }

            if (topic2 !== undefined) {
                localVarQueryParameter['topic_2'] = topic2;
            }

            if (ids1) {
                localVarQueryParameter['ids_1'] = ids1;
            }

            if (ids2) {
                localVarQueryParameter['ids_2'] = ids2;
            }

            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }

            if (minCount !== undefined) {
                localVarQueryParameter['min_count'] = minCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph
         * @param {SemanticTopicGraphIn} semanticTopicGraphIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphV1GraphSemanticTopicGraphPost: async (semanticTopicGraphIn: SemanticTopicGraphIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'semanticTopicGraphIn' is not null or undefined
            assertParamExists('getSemanticTopicGraphV1GraphSemanticTopicGraphPost', 'semanticTopicGraphIn', semanticTopicGraphIn)
            const localVarPath = `/v1/graph/semantic_topic_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(semanticTopicGraphIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch topic graph.
         * @summary Get Topic Graph
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1GraphTopicGraphGet: async (numRelationships?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/graph/topic_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (numRelationships !== undefined) {
                localVarQueryParameter['num_relationships'] = numRelationships;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch topic node graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1GraphTopicsTopicIdGet: async (topicId: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicId' is not null or undefined
            assertParamExists('getTopicNodeGraphV1GraphTopicsTopicIdGet', 'topicId', topicId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTopicNodeGraphV1GraphTopicsTopicIdGet', 'teamId', teamId)
            const localVarPath = `/v1/graph/topics/{topic_id}`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1 
         * @param {string} topicId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get: async (topicId1: string, topicId2: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicId1' is not null or undefined
            assertParamExists('getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get', 'topicId1', topicId1)
            // verify required parameter 'topicId2' is not null or undefined
            assertParamExists('getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get', 'topicId2', topicId2)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get', 'teamId', teamId)
            const localVarPath = `/v1/graph/topics/{topic_id_1}/relationship/{topic_id_2}`
                .replace(`{${"topic_id_1"}}`, encodeURIComponent(String(topicId1)))
                .replace(`{${"topic_id_2"}}`, encodeURIComponent(String(topicId2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GraphApi - functional programming interface
 * @export
 */
export const GraphApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GraphApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConceptGraphV1GraphConceptGraphGet(teamId: string, minRelationshipStrength?: number, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGraphApiClientModelsPydanticGraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConceptGraphV1GraphConceptGraphGet(teamId, minRelationshipStrength, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetGraphV1GraphDatasetGraphGet(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGraphApiClientModelsPydanticGraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatasetGraphV1GraphDatasetGraphGet(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetricNodeGraphV1GraphMetricsMetricIdGet(metricId: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGraphApiClientModelsPydanticGraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricNodeGraphV1GraphMetricsMetricIdGet(metricId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1 
         * @param {string} metricId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(metricId1: string, metricId2: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGraphApiClientModelsPydanticGraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSemanticGraphV1GraphSemanticGraphGet(topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, minStrength?: number, minCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGraphApiClientModelsPydanticGraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSemanticGraphV1GraphSemanticGraphGet(topic1, topic2, ids1, ids2, minStrength, minCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph
         * @param {SemanticTopicGraphIn} semanticTopicGraphIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSemanticTopicGraphV1GraphSemanticTopicGraphPost(semanticTopicGraphIn: SemanticTopicGraphIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGraphApiClientModelsPydanticGraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSemanticTopicGraphV1GraphSemanticTopicGraphPost(semanticTopicGraphIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch topic graph.
         * @summary Get Topic Graph
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicGraphV1GraphTopicGraphGet(numRelationships?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGraphApiClientModelsPydanticGraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopicGraphV1GraphTopicGraphGet(numRelationships, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch topic node graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicNodeGraphV1GraphTopicsTopicIdGet(topicId: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGraphApiClientModelsPydanticGraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopicNodeGraphV1GraphTopicsTopicIdGet(topicId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1 
         * @param {string} topicId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(topicId1: string, topicId2: string, teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGraphApiClientModelsPydanticGraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GraphApi - factory interface
 * @export
 */
export const GraphApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GraphApiFp(configuration)
    return {
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId 
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet(teamId: string, minRelationshipStrength?: number, tags?: Array<string>, options?: any): AxiosPromise<SystemGraphApiClientModelsPydanticGraphData> {
            return localVarFp.getConceptGraphV1GraphConceptGraphGet(teamId, minRelationshipStrength, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet(teamId: string, options?: any): AxiosPromise<SystemGraphApiClientModelsPydanticGraphData> {
            return localVarFp.getDatasetGraphV1GraphDatasetGraphGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1GraphMetricsMetricIdGet(metricId: string, teamId: string, options?: any): AxiosPromise<SystemGraphApiClientModelsPydanticGraphData> {
            return localVarFp.getMetricNodeGraphV1GraphMetricsMetricIdGet(metricId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1 
         * @param {string} metricId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(metricId1: string, metricId2: string, teamId: string, options?: any): AxiosPromise<SystemGraphApiClientModelsPydanticGraphData> {
            return localVarFp.getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1GraphSemanticGraphGet(topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, minStrength?: number, minCount?: number, options?: any): AxiosPromise<SystemGraphApiClientModelsPydanticGraphData> {
            return localVarFp.getSemanticGraphV1GraphSemanticGraphGet(topic1, topic2, ids1, ids2, minStrength, minCount, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph
         * @param {SemanticTopicGraphIn} semanticTopicGraphIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphV1GraphSemanticTopicGraphPost(semanticTopicGraphIn: SemanticTopicGraphIn, options?: any): AxiosPromise<SystemGraphApiClientModelsPydanticGraphData> {
            return localVarFp.getSemanticTopicGraphV1GraphSemanticTopicGraphPost(semanticTopicGraphIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch topic graph.
         * @summary Get Topic Graph
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1GraphTopicGraphGet(numRelationships?: number, options?: any): AxiosPromise<SystemGraphApiClientModelsPydanticGraphData> {
            return localVarFp.getTopicGraphV1GraphTopicGraphGet(numRelationships, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch topic node graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1GraphTopicsTopicIdGet(topicId: string, teamId: string, options?: any): AxiosPromise<SystemGraphApiClientModelsPydanticGraphData> {
            return localVarFp.getTopicNodeGraphV1GraphTopicsTopicIdGet(topicId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1 
         * @param {string} topicId2 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(topicId1: string, topicId2: string, teamId: string, options?: any): AxiosPromise<SystemGraphApiClientModelsPydanticGraphData> {
            return localVarFp.getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getConceptGraphV1GraphConceptGraphGet operation in GraphApi.
 * @export
 * @interface GraphApiGetConceptGraphV1GraphConceptGraphGetRequest
 */
export interface GraphApiGetConceptGraphV1GraphConceptGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetConceptGraphV1GraphConceptGraphGet
     */
    readonly teamId: string

    /**
     * Min strength
     * @type {number}
     * @memberof GraphApiGetConceptGraphV1GraphConceptGraphGet
     */
    readonly minRelationshipStrength?: number

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof GraphApiGetConceptGraphV1GraphConceptGraphGet
     */
    readonly tags?: Array<string>
}

/**
 * Request parameters for getDatasetGraphV1GraphDatasetGraphGet operation in GraphApi.
 * @export
 * @interface GraphApiGetDatasetGraphV1GraphDatasetGraphGetRequest
 */
export interface GraphApiGetDatasetGraphV1GraphDatasetGraphGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetDatasetGraphV1GraphDatasetGraphGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getMetricNodeGraphV1GraphMetricsMetricIdGet operation in GraphApi.
 * @export
 * @interface GraphApiGetMetricNodeGraphV1GraphMetricsMetricIdGetRequest
 */
export interface GraphApiGetMetricNodeGraphV1GraphMetricsMetricIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricNodeGraphV1GraphMetricsMetricIdGet
     */
    readonly metricId: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricNodeGraphV1GraphMetricsMetricIdGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get operation in GraphApi.
 * @export
 * @interface GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2GetRequest
 */
export interface GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2GetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get
     */
    readonly metricId1: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get
     */
    readonly metricId2: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get
     */
    readonly teamId: string
}

/**
 * Request parameters for getSemanticGraphV1GraphSemanticGraphGet operation in GraphApi.
 * @export
 * @interface GraphApiGetSemanticGraphV1GraphSemanticGraphGetRequest
 */
export interface GraphApiGetSemanticGraphV1GraphSemanticGraphGetRequest {
    /**
     * Topic 1
     * @type {string}
     * @memberof GraphApiGetSemanticGraphV1GraphSemanticGraphGet
     */
    readonly topic1?: string

    /**
     * Topic 2
     * @type {string}
     * @memberof GraphApiGetSemanticGraphV1GraphSemanticGraphGet
     */
    readonly topic2?: string

    /**
     * Topic 1 ids
     * @type {Array<string>}
     * @memberof GraphApiGetSemanticGraphV1GraphSemanticGraphGet
     */
    readonly ids1?: Array<string>

    /**
     * Topic 2 ids
     * @type {Array<string>}
     * @memberof GraphApiGetSemanticGraphV1GraphSemanticGraphGet
     */
    readonly ids2?: Array<string>

    /**
     * Min strength
     * @type {number}
     * @memberof GraphApiGetSemanticGraphV1GraphSemanticGraphGet
     */
    readonly minStrength?: number

    /**
     * Min count
     * @type {number}
     * @memberof GraphApiGetSemanticGraphV1GraphSemanticGraphGet
     */
    readonly minCount?: number
}

/**
 * Request parameters for getSemanticTopicGraphV1GraphSemanticTopicGraphPost operation in GraphApi.
 * @export
 * @interface GraphApiGetSemanticTopicGraphV1GraphSemanticTopicGraphPostRequest
 */
export interface GraphApiGetSemanticTopicGraphV1GraphSemanticTopicGraphPostRequest {
    /**
     * 
     * @type {SemanticTopicGraphIn}
     * @memberof GraphApiGetSemanticTopicGraphV1GraphSemanticTopicGraphPost
     */
    readonly semanticTopicGraphIn: SemanticTopicGraphIn
}

/**
 * Request parameters for getTopicGraphV1GraphTopicGraphGet operation in GraphApi.
 * @export
 * @interface GraphApiGetTopicGraphV1GraphTopicGraphGetRequest
 */
export interface GraphApiGetTopicGraphV1GraphTopicGraphGetRequest {
    /**
     * Number of relationships to return.
     * @type {number}
     * @memberof GraphApiGetTopicGraphV1GraphTopicGraphGet
     */
    readonly numRelationships?: number
}

/**
 * Request parameters for getTopicNodeGraphV1GraphTopicsTopicIdGet operation in GraphApi.
 * @export
 * @interface GraphApiGetTopicNodeGraphV1GraphTopicsTopicIdGetRequest
 */
export interface GraphApiGetTopicNodeGraphV1GraphTopicsTopicIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicNodeGraphV1GraphTopicsTopicIdGet
     */
    readonly topicId: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicNodeGraphV1GraphTopicsTopicIdGet
     */
    readonly teamId: string
}

/**
 * Request parameters for getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get operation in GraphApi.
 * @export
 * @interface GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2GetRequest
 */
export interface GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2GetRequest {
    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get
     */
    readonly topicId1: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get
     */
    readonly topicId2: string

    /**
     * 
     * @type {string}
     * @memberof GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get
     */
    readonly teamId: string
}

/**
 * GraphApi - object-oriented interface
 * @export
 * @class GraphApi
 * @extends {BaseAPI}
 */
export class GraphApi extends BaseAPI {
    /**
     * Fetch concept graph.
     * @summary Get Concept Graph
     * @param {GraphApiGetConceptGraphV1GraphConceptGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getConceptGraphV1GraphConceptGraphGet(requestParameters: GraphApiGetConceptGraphV1GraphConceptGraphGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getConceptGraphV1GraphConceptGraphGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Dataset Graph
     * @param {GraphApiGetDatasetGraphV1GraphDatasetGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getDatasetGraphV1GraphDatasetGraphGet(requestParameters: GraphApiGetDatasetGraphV1GraphDatasetGraphGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getDatasetGraphV1GraphDatasetGraphGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Metric Node Graph
     * @param {GraphApiGetMetricNodeGraphV1GraphMetricsMetricIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getMetricNodeGraphV1GraphMetricsMetricIdGet(requestParameters: GraphApiGetMetricNodeGraphV1GraphMetricsMetricIdGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getMetricNodeGraphV1GraphMetricsMetricIdGet(requestParameters.metricId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Metric Relationship Graph
     * @param {GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(requestParameters: GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2GetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(requestParameters.metricId1, requestParameters.metricId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph
     * @param {GraphApiGetSemanticGraphV1GraphSemanticGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getSemanticGraphV1GraphSemanticGraphGet(requestParameters: GraphApiGetSemanticGraphV1GraphSemanticGraphGetRequest = {}, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getSemanticGraphV1GraphSemanticGraphGet(requestParameters.topic1, requestParameters.topic2, requestParameters.ids1, requestParameters.ids2, requestParameters.minStrength, requestParameters.minCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph
     * @param {GraphApiGetSemanticTopicGraphV1GraphSemanticTopicGraphPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getSemanticTopicGraphV1GraphSemanticTopicGraphPost(requestParameters: GraphApiGetSemanticTopicGraphV1GraphSemanticTopicGraphPostRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getSemanticTopicGraphV1GraphSemanticTopicGraphPost(requestParameters.semanticTopicGraphIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch topic graph.
     * @summary Get Topic Graph
     * @param {GraphApiGetTopicGraphV1GraphTopicGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getTopicGraphV1GraphTopicGraphGet(requestParameters: GraphApiGetTopicGraphV1GraphTopicGraphGetRequest = {}, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getTopicGraphV1GraphTopicGraphGet(requestParameters.numRelationships, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch topic node graph.
     * @summary Get Topic Node Graph
     * @param {GraphApiGetTopicNodeGraphV1GraphTopicsTopicIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getTopicNodeGraphV1GraphTopicsTopicIdGet(requestParameters: GraphApiGetTopicNodeGraphV1GraphTopicsTopicIdGetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getTopicNodeGraphV1GraphTopicsTopicIdGet(requestParameters.topicId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch dataset graph.
     * @summary Get Topic Relationship Graph
     * @param {GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(requestParameters: GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2GetRequest, options?: AxiosRequestConfig) {
        return GraphApiFp(this.configuration).getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(requestParameters.topicId1, requestParameters.topicId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MetricsApi - axios parameter creator
 * @export
 */
export const MetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1MetricsGraphGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/metrics/graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetricsApi - functional programming interface
 * @export
 */
export const MetricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetricsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGraphMetricsV1MetricsGraphGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphMetrics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGraphMetricsV1MetricsGraphGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetricsApi - factory interface
 * @export
 */
export const MetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetricsApiFp(configuration)
    return {
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1MetricsGraphGet(options?: any): AxiosPromise<GraphMetrics> {
            return localVarFp.getGraphMetricsV1MetricsGraphGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export class MetricsApi extends BaseAPI {
    /**
     * Get metrics on the graph.
     * @summary Get Graph Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public getGraphMetricsV1MetricsGraphGet(options?: AxiosRequestConfig) {
        return MetricsApiFp(this.configuration).getGraphMetricsV1MetricsGraphGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ModeldbApi - axios parameter creator
 * @export
 */
export const ModeldbApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet: async (algorithmId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algorithmId' is not null or undefined
            assertParamExists('getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet', 'algorithmId', algorithmId)
            const localVarPath = `/v1/modeldb/algorithms/{algorithm_id}`
                .replace(`{${"algorithm_id"}}`, encodeURIComponent(String(algorithmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet: async (algorithmClass?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/modeldb/algorithms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (algorithmClass !== undefined) {
                localVarQueryParameter['algorithm_class'] = algorithmClass;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModeldbApi - functional programming interface
 * @export
 */
export const ModeldbApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModeldbApiAxiosParamCreator(configuration)
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgorithmOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgorithmListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModeldbApi - factory interface
 * @export
 */
export const ModeldbApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModeldbApiFp(configuration)
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId: string, options?: any): AxiosPromise<AlgorithmOut> {
            return localVarFp.getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options).then((request) => request(axios, basePath));
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass?: string, options?: any): AxiosPromise<AlgorithmListResult> {
            return localVarFp.listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet operation in ModeldbApi.
 * @export
 * @interface ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest
 */
export interface ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet
     */
    readonly algorithmId: string
}

/**
 * Request parameters for listAlgorithmsV1ModeldbAlgorithmsGet operation in ModeldbApi.
 * @export
 * @interface ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest
 */
export interface ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGet
     */
    readonly algorithmClass?: string
}

/**
 * ModeldbApi - object-oriented interface
 * @export
 * @class ModeldbApi
 * @extends {BaseAPI}
 */
export class ModeldbApi extends BaseAPI {
    /**
     * Get algorithms by id.
     * @summary Get Algorithm
     * @param {ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    public getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(requestParameters: ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest, options?: AxiosRequestConfig) {
        return ModeldbApiFp(this.configuration).getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(requestParameters.algorithmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List available algorithms in ModelDB. Search with algorithm class if passed.
     * @summary List Algorithms
     * @param {ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    public listAlgorithmsV1ModeldbAlgorithmsGet(requestParameters: ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest = {}, options?: AxiosRequestConfig) {
        return ModeldbApiFp(this.configuration).listAlgorithmsV1ModeldbAlgorithmsGet(requestParameters.algorithmClass, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ModelsApi - axios parameter creator
 * @export
 */
export const ModelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: async (associationId: string, modelId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'associationId' is not null or undefined
            assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet: async (modelId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getModelV1ModelsModelIdGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: async (modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listAssociationsV1ModelsModelIdAssociationsGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet: async (modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('listModelFeaturesV1ModelsModelIdFeaturesGet', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/features`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet: async (studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listModelsInStudyV1StudiesStudyIdModelsGet', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserModelsV1UsersUserIdModelsGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelsApi - functional programming interface
 * @export
 */
export const ModelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId: string, modelId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelV1ModelsModelIdGet(modelId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModelV1ModelsModelIdGet(modelId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1ModelsModelIdAssociationsGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserModelsV1UserModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelFeaturesV1ModelsModelIdFeaturesGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsInStudyV1StudiesStudyIdModelsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsV1ModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserModelsV1UsersUserIdModelsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModelsApi - factory interface
 * @export
 */
export const ModelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelsApiFp(configuration)
    return {
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId 
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId: string, modelId: string, teamId?: string, options?: any): AxiosPromise<AssociationOut> {
            return localVarFp.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet(modelId: string, teamId?: string, options?: any): AxiosPromise<ModelOut> {
            return localVarFp.getModelV1ModelsModelIdGet(modelId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet(modelId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAssociationV1ModelsModelIdAssociationsAssociationIdGet operation in ModelsApi.
 * @export
 * @interface ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest
 */
export interface ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly associationId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for getModelV1ModelsModelIdGet operation in ModelsApi.
 * @export
 * @interface ModelsApiGetModelV1ModelsModelIdGetRequest
 */
export interface ModelsApiGetModelV1ModelsModelIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetModelV1ModelsModelIdGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiGetModelV1ModelsModelIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAssociationsV1ModelsModelIdAssociationsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest
 */
export interface ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof ModelsApiListAssociationsV1ModelsModelIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserModelsV1UserModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest
 */
export interface ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly containsVariableId?: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listModelFeaturesV1ModelsModelIdFeaturesGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest
 */
export interface ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly modelId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean
}

/**
 * Request parameters for listModelsInStudyV1StudiesStudyIdModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest
 */
export interface ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listModelsV1ModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListModelsV1ModelsGetRequest
 */
export interface ModelsApiListModelsV1ModelsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly containsVariableId?: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListModelsV1ModelsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserModelsV1UsersUserIdModelsGet operation in ModelsApi.
 * @export
 * @interface ModelsApiListUserModelsV1UsersUserIdModelsGetRequest
 */
export interface ModelsApiListUserModelsV1UsersUserIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly containsVariableId?: string

    /**
     * 
     * @type {string}
     * @memberof ModelsApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly teamId?: string
}

/**
 * ModelsApi - object-oriented interface
 * @export
 * @class ModelsApi
 * @extends {BaseAPI}
 */
export class ModelsApi extends BaseAPI {
    /**
     * Get an Association.
     * @summary Get Association
     * @param {ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters: ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Model.
     * @summary Get Model
     * @param {ModelsApiGetModelV1ModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public getModelV1ModelsModelIdGet(requestParameters: ModelsApiGetModelV1ModelsModelIdGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).getModelV1ModelsModelIdGet(requestParameters.modelId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in model.
     * @summary List Associations
     * @param {ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listAssociationsV1ModelsModelIdAssociationsGet(requestParameters: ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listAuthenticatedUserModelsV1UserModelsGet(requestParameters: ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest = {}, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get features in model.
     * @summary List Model Features
     * @param {ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listModelFeaturesV1ModelsModelIdFeaturesGet(requestParameters: ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listModelFeaturesV1ModelsModelIdFeaturesGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters: ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Models.
     * @summary List Models
     * @param {ModelsApiListModelsV1ModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listModelsV1ModelsGet(requestParameters: ModelsApiListModelsV1ModelsGetRequest = {}, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listModelsV1ModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {ModelsApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listUserModelsV1UsersUserIdModelsGet(requestParameters: ModelsApiListUserModelsV1UsersUserIdModelsGetRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PassthroughApi - axios parameter creator
 * @export
 */
export const PassthroughApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Forward request to crossref.
         * @summary Get Crossref
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCrossrefV1CrossrefRestOfPathGet: async (restOfPath: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restOfPath' is not null or undefined
            assertParamExists('getCrossrefV1CrossrefRestOfPathGet', 'restOfPath', restOfPath)
            const localVarPath = `/v1/crossref/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Forward request to ORCID.
         * @summary Get Orcid
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrcidV1OrcidRestOfPathGet: async (restOfPath: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restOfPath' is not null or undefined
            assertParamExists('getOrcidV1OrcidRestOfPathGet', 'restOfPath', restOfPath)
            const localVarPath = `/v1/orcid/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Forward request to SearchGraph.
         * @summary Get Semantic Graph
         * @param {string} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1SemanticGraphRestOfPathGet: async (restOfPath: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restOfPath' is not null or undefined
            assertParamExists('getSemanticGraphV1SemanticGraphRestOfPathGet', 'restOfPath', restOfPath)
            const localVarPath = `/v1/semantic_graph/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Forward request to UMLS.
         * @summary Get Umls Concepts
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUmlsConceptsV1UmlsRestOfPathGet: async (restOfPath: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restOfPath' is not null or undefined
            assertParamExists('getUmlsConceptsV1UmlsRestOfPathGet', 'restOfPath', restOfPath)
            const localVarPath = `/v1/umls/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Forward request to SearchGraph.
         * @summary Get Variable Concepts
         * @param {string} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableConceptsV1VariableConceptsRestOfPathGet: async (restOfPath: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restOfPath' is not null or undefined
            assertParamExists('getVariableConceptsV1VariableConceptsRestOfPathGet', 'restOfPath', restOfPath)
            const localVarPath = `/v1/variable_concepts/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost: async (graphQLQuery: GraphQLQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphQLQuery' is not null or undefined
            assertParamExists('postGraphqlV1GraphqlPost', 'graphQLQuery', graphQLQuery)
            const localVarPath = `/v1/graphql`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(graphQLQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PassthroughApi - functional programming interface
 * @export
 */
export const PassthroughApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PassthroughApiAxiosParamCreator(configuration)
    return {
        /**
         * Forward request to crossref.
         * @summary Get Crossref
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCrossrefV1CrossrefRestOfPathGet(restOfPath: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCrossrefV1CrossrefRestOfPathGet(restOfPath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Forward request to ORCID.
         * @summary Get Orcid
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrcidV1OrcidRestOfPathGet(restOfPath: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrcidV1OrcidRestOfPathGet(restOfPath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Forward request to SearchGraph.
         * @summary Get Semantic Graph
         * @param {string} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSemanticGraphV1SemanticGraphRestOfPathGet(restOfPath: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSemanticGraphV1SemanticGraphRestOfPathGet(restOfPath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Forward request to UMLS.
         * @summary Get Umls Concepts
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUmlsConceptsV1UmlsRestOfPathGet(restOfPath: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUmlsConceptsV1UmlsRestOfPathGet(restOfPath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Forward request to SearchGraph.
         * @summary Get Variable Concepts
         * @param {string} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableConceptsV1VariableConceptsRestOfPathGet(restOfPath: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVariableConceptsV1VariableConceptsRestOfPathGet(restOfPath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGraphqlV1GraphqlPost(graphQLQuery: GraphQLQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGraphqlV1GraphqlPost(graphQLQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PassthroughApi - factory interface
 * @export
 */
export const PassthroughApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PassthroughApiFp(configuration)
    return {
        /**
         * Forward request to crossref.
         * @summary Get Crossref
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCrossrefV1CrossrefRestOfPathGet(restOfPath: any, options?: any): AxiosPromise<any> {
            return localVarFp.getCrossrefV1CrossrefRestOfPathGet(restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward request to ORCID.
         * @summary Get Orcid
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrcidV1OrcidRestOfPathGet(restOfPath: any, options?: any): AxiosPromise<any> {
            return localVarFp.getOrcidV1OrcidRestOfPathGet(restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward request to SearchGraph.
         * @summary Get Semantic Graph
         * @param {string} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1SemanticGraphRestOfPathGet(restOfPath: string, options?: any): AxiosPromise<any> {
            return localVarFp.getSemanticGraphV1SemanticGraphRestOfPathGet(restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward request to UMLS.
         * @summary Get Umls Concepts
         * @param {any} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUmlsConceptsV1UmlsRestOfPathGet(restOfPath: any, options?: any): AxiosPromise<any> {
            return localVarFp.getUmlsConceptsV1UmlsRestOfPathGet(restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward request to SearchGraph.
         * @summary Get Variable Concepts
         * @param {string} restOfPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableConceptsV1VariableConceptsRestOfPathGet(restOfPath: string, options?: any): AxiosPromise<any> {
            return localVarFp.getVariableConceptsV1VariableConceptsRestOfPathGet(restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost(graphQLQuery: GraphQLQuery, options?: any): AxiosPromise<any> {
            return localVarFp.postGraphqlV1GraphqlPost(graphQLQuery, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCrossrefV1CrossrefRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest
 */
export interface PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest {
    /**
     * 
     * @type {any}
     * @memberof PassthroughApiGetCrossrefV1CrossrefRestOfPathGet
     */
    readonly restOfPath: any
}

/**
 * Request parameters for getOrcidV1OrcidRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest
 */
export interface PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest {
    /**
     * 
     * @type {any}
     * @memberof PassthroughApiGetOrcidV1OrcidRestOfPathGet
     */
    readonly restOfPath: any
}

/**
 * Request parameters for getSemanticGraphV1SemanticGraphRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest
 */
export interface PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGet
     */
    readonly restOfPath: string
}

/**
 * Request parameters for getUmlsConceptsV1UmlsRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest
 */
export interface PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest {
    /**
     * 
     * @type {any}
     * @memberof PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGet
     */
    readonly restOfPath: any
}

/**
 * Request parameters for getVariableConceptsV1VariableConceptsRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest
 */
export interface PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGet
     */
    readonly restOfPath: string
}

/**
 * Request parameters for postGraphqlV1GraphqlPost operation in PassthroughApi.
 * @export
 * @interface PassthroughApiPostGraphqlV1GraphqlPostRequest
 */
export interface PassthroughApiPostGraphqlV1GraphqlPostRequest {
    /**
     * 
     * @type {GraphQLQuery}
     * @memberof PassthroughApiPostGraphqlV1GraphqlPost
     */
    readonly graphQLQuery: GraphQLQuery
}

/**
 * PassthroughApi - object-oriented interface
 * @export
 * @class PassthroughApi
 * @extends {BaseAPI}
 */
export class PassthroughApi extends BaseAPI {
    /**
     * Forward request to crossref.
     * @summary Get Crossref
     * @param {PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    public getCrossrefV1CrossrefRestOfPathGet(requestParameters: PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest, options?: AxiosRequestConfig) {
        return PassthroughApiFp(this.configuration).getCrossrefV1CrossrefRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Forward request to ORCID.
     * @summary Get Orcid
     * @param {PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    public getOrcidV1OrcidRestOfPathGet(requestParameters: PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest, options?: AxiosRequestConfig) {
        return PassthroughApiFp(this.configuration).getOrcidV1OrcidRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Forward request to SearchGraph.
     * @summary Get Semantic Graph
     * @param {PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    public getSemanticGraphV1SemanticGraphRestOfPathGet(requestParameters: PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest, options?: AxiosRequestConfig) {
        return PassthroughApiFp(this.configuration).getSemanticGraphV1SemanticGraphRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Forward request to UMLS.
     * @summary Get Umls Concepts
     * @param {PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    public getUmlsConceptsV1UmlsRestOfPathGet(requestParameters: PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest, options?: AxiosRequestConfig) {
        return PassthroughApiFp(this.configuration).getUmlsConceptsV1UmlsRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Forward request to SearchGraph.
     * @summary Get Variable Concepts
     * @param {PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    public getVariableConceptsV1VariableConceptsRestOfPathGet(requestParameters: PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest, options?: AxiosRequestConfig) {
        return PassthroughApiFp(this.configuration).getVariableConceptsV1VariableConceptsRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Forward GraphQL request to SystemDB.
     * @summary Post Graphql
     * @param {PassthroughApiPostGraphqlV1GraphqlPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    public postGraphqlV1GraphqlPost(requestParameters: PassthroughApiPostGraphqlV1GraphqlPostRequest, options?: AxiosRequestConfig) {
        return PassthroughApiFp(this.configuration).postGraphqlV1GraphqlPost(requestParameters.graphQLQuery, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QuerySuggestionsApi - axios parameter creator
 * @export
 */
export const QuerySuggestionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get query suggestions.
         * @summary Get Query Suggestions.
         * @param {SuggestedQueriesIn} suggestedQueriesIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySuggestionsV1QuerySuggestionsPost: async (suggestedQueriesIn: SuggestedQueriesIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'suggestedQueriesIn' is not null or undefined
            assertParamExists('getQuerySuggestionsV1QuerySuggestionsPost', 'suggestedQueriesIn', suggestedQueriesIn)
            const localVarPath = `/v1/query_suggestions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(suggestedQueriesIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuerySuggestionsApi - functional programming interface
 * @export
 */
export const QuerySuggestionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuerySuggestionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get query suggestions.
         * @summary Get Query Suggestions.
         * @param {SuggestedQueriesIn} suggestedQueriesIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuerySuggestionsV1QuerySuggestionsPost(suggestedQueriesIn: SuggestedQueriesIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestedQueriesOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuerySuggestionsV1QuerySuggestionsPost(suggestedQueriesIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuerySuggestionsApi - factory interface
 * @export
 */
export const QuerySuggestionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuerySuggestionsApiFp(configuration)
    return {
        /**
         * Get query suggestions.
         * @summary Get Query Suggestions.
         * @param {SuggestedQueriesIn} suggestedQueriesIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySuggestionsV1QuerySuggestionsPost(suggestedQueriesIn: SuggestedQueriesIn, options?: any): AxiosPromise<SuggestedQueriesOut> {
            return localVarFp.getQuerySuggestionsV1QuerySuggestionsPost(suggestedQueriesIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getQuerySuggestionsV1QuerySuggestionsPost operation in QuerySuggestionsApi.
 * @export
 * @interface QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest
 */
export interface QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest {
    /**
     * 
     * @type {SuggestedQueriesIn}
     * @memberof QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPost
     */
    readonly suggestedQueriesIn: SuggestedQueriesIn
}

/**
 * QuerySuggestionsApi - object-oriented interface
 * @export
 * @class QuerySuggestionsApi
 * @extends {BaseAPI}
 */
export class QuerySuggestionsApi extends BaseAPI {
    /**
     * Get query suggestions.
     * @summary Get Query Suggestions.
     * @param {QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuerySuggestionsApi
     */
    public getQuerySuggestionsV1QuerySuggestionsPost(requestParameters: QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest, options?: AxiosRequestConfig) {
        return QuerySuggestionsApiFp(this.configuration).getQuerySuggestionsV1QuerySuggestionsPost(requestParameters.suggestedQueriesIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RelationshipsApi - axios parameter creator
 * @export
 */
export const RelationshipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId 
         * @param {string} [directedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1RelationshipsRelationshipIdSynthesisGet: async (relationshipId: any, directedAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relationshipId' is not null or undefined
            assertParamExists('getSynthesisV1RelationshipsRelationshipIdSynthesisGet', 'relationshipId', relationshipId)
            const localVarPath = `/v1/relationships/{relationship_id}/synthesis`
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (directedAt !== undefined) {
                localVarQueryParameter['directed_at'] = directedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {GraphSearchDirection} [direction] Optional directionality.
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1RelationshipsGet: async (direction?: GraphSearchDirection, query?: string, includeHidden?: boolean, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, sortBy?: string, directionality?: number, originQuery?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/relationships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (directionality !== undefined) {
                localVarQueryParameter['directionality'] = directionality;
            }

            if (originQuery !== undefined) {
                localVarQueryParameter['origin_query'] = originQuery;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RelationshipsApi - functional programming interface
 * @export
 */
export const RelationshipsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RelationshipsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId 
         * @param {string} [directedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSynthesisV1RelationshipsRelationshipIdSynthesisGet(relationshipId: any, directedAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicRelationshipSynthesisOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSynthesisV1RelationshipsRelationshipIdSynthesisGet(relationshipId, directedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {GraphSearchDirection} [direction] Optional directionality.
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRelationshipsV1RelationshipsGet(direction?: GraphSearchDirection, query?: string, includeHidden?: boolean, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, sortBy?: string, directionality?: number, originQuery?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRelationshipsV1RelationshipsGet(direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RelationshipsApi - factory interface
 * @export
 */
export const RelationshipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RelationshipsApiFp(configuration)
    return {
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId 
         * @param {string} [directedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1RelationshipsRelationshipIdSynthesisGet(relationshipId: any, directedAt?: string, options?: any): AxiosPromise<TopicRelationshipSynthesisOut> {
            return localVarFp.getSynthesisV1RelationshipsRelationshipIdSynthesisGet(relationshipId, directedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {GraphSearchDirection} [direction] Optional directionality.
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1RelationshipsGet(direction?: GraphSearchDirection, query?: string, includeHidden?: boolean, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, sortBy?: string, directionality?: number, originQuery?: string, teamId?: string, options?: any): AxiosPromise<RelationshipPaginationOut> {
            return localVarFp.listRelationshipsV1RelationshipsGet(direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, teamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSynthesisV1RelationshipsRelationshipIdSynthesisGet operation in RelationshipsApi.
 * @export
 * @interface RelationshipsApiGetSynthesisV1RelationshipsRelationshipIdSynthesisGetRequest
 */
export interface RelationshipsApiGetSynthesisV1RelationshipsRelationshipIdSynthesisGetRequest {
    /**
     * 
     * @type {any}
     * @memberof RelationshipsApiGetSynthesisV1RelationshipsRelationshipIdSynthesisGet
     */
    readonly relationshipId: any

    /**
     * 
     * @type {string}
     * @memberof RelationshipsApiGetSynthesisV1RelationshipsRelationshipIdSynthesisGet
     */
    readonly directedAt?: string
}

/**
 * Request parameters for listRelationshipsV1RelationshipsGet operation in RelationshipsApi.
 * @export
 * @interface RelationshipsApiListRelationshipsV1RelationshipsGetRequest
 */
export interface RelationshipsApiListRelationshipsV1RelationshipsGetRequest {
    /**
     * Optional directionality.
     * @type {GraphSearchDirection}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly direction?: GraphSearchDirection

    /**
     * Search query.
     * @type {string}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly includeHidden?: boolean

    /**
     * 
     * @type {number}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly idsOnly?: boolean

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly sortBy?: string

    /**
     * Filter by directionality
     * @type {number}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly directionality?: number

    /**
     * Search query for the origin node.
     * @type {string}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly originQuery?: string

    /**
     * 
     * @type {string}
     * @memberof RelationshipsApiListRelationshipsV1RelationshipsGet
     */
    readonly teamId?: string
}

/**
 * RelationshipsApi - object-oriented interface
 * @export
 * @class RelationshipsApi
 * @extends {BaseAPI}
 */
export class RelationshipsApi extends BaseAPI {
    /**
     * Get Topic Relationship Synthesis.
     * @summary Get Synthesis
     * @param {RelationshipsApiGetSynthesisV1RelationshipsRelationshipIdSynthesisGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipsApi
     */
    public getSynthesisV1RelationshipsRelationshipIdSynthesisGet(requestParameters: RelationshipsApiGetSynthesisV1RelationshipsRelationshipIdSynthesisGetRequest, options?: AxiosRequestConfig) {
        return RelationshipsApiFp(this.configuration).getSynthesisV1RelationshipsRelationshipIdSynthesisGet(requestParameters.relationshipId, requestParameters.directedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List relationships.
     * @summary List Relationships
     * @param {RelationshipsApiListRelationshipsV1RelationshipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipsApi
     */
    public listRelationshipsV1RelationshipsGet(requestParameters: RelationshipsApiListRelationshipsV1RelationshipsGetRequest = {}, options?: AxiosRequestConfig) {
        return RelationshipsApiFp(this.configuration).listRelationshipsV1RelationshipsGet(requestParameters.direction, requestParameters.query, requestParameters.includeHidden, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.sortBy, requestParameters.directionality, requestParameters.originQuery, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SemanticSearchApi - axios parameter creator
 * @export
 */
export const SemanticSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Async Cluster Relationships
         * @param {SystemSearchIn} systemSearchIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost: async (systemSearchIn: SystemSearchIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSearchIn' is not null or undefined
            assertParamExists('asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost', 'systemSearchIn', systemSearchIn)
            const localVarPath = `/v1/semantic-search/cluster_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemSearchIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Async Semantic Search
         * @param {SystemSearchIn} systemSearchIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asyncSemanticSearchV1SemanticSearchClusterPost: async (systemSearchIn: SystemSearchIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSearchIn' is not null or undefined
            assertParamExists('asyncSemanticSearchV1SemanticSearchClusterPost', 'systemSearchIn', systemSearchIn)
            const localVarPath = `/v1/semantic-search/cluster`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemSearchIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Fetch Cluster Response
         * @param {string} runId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet: async (runId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet', 'runId', runId)
            const localVarPath = `/v1/semantic-search/cluster_async/{run_id}`
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get semantic search.  Values from semantic search. Logs freemium usage on success
         * @summary Fetch Synthesis
         * @param {string} cacheKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSynthesisV1SemanticSearchFetchGet: async (cacheKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cacheKey' is not null or undefined
            assertParamExists('fetchSynthesisV1SemanticSearchFetchGet', 'cacheKey', cacheKey)
            const localVarPath = `/v1/semantic-search/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (cacheKey !== undefined) {
                localVarQueryParameter['cache_key'] = cacheKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
         * @summary Get Semantic Search Usage
         * @param {string} [dateFrom] 
         * @param {Metrics} [metric] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticSearchUsageV1SemanticSearchUsageGet: async (dateFrom?: string, metric?: Metrics, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/semantic-search/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString().substr(0,10) :
                    dateFrom;
            }

            if (metric !== undefined) {
                localVarQueryParameter['metric'] = metric;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get semantic search findings.  Values from semantic search.
         * @summary Get System Search Findings Data
         * @param {SystemSearchIn} systemSearchIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSearchFindingsDataV1SemanticSearchDataPost: async (systemSearchIn: SystemSearchIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSearchIn' is not null or undefined
            assertParamExists('getSystemSearchFindingsDataV1SemanticSearchDataPost', 'systemSearchIn', systemSearchIn)
            const localVarPath = `/v1/semantic-search/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemSearchIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Regenerate Synthesis
         * @param {string} cacheKey 
         * @param {boolean} [forceRerun] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regenerateSynthesisV1SemanticSearchRegeneratePost: async (cacheKey: string, forceRerun?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cacheKey' is not null or undefined
            assertParamExists('regenerateSynthesisV1SemanticSearchRegeneratePost', 'cacheKey', cacheKey)
            const localVarPath = `/v1/semantic-search/regenerate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (cacheKey !== undefined) {
                localVarQueryParameter['cache_key'] = cacheKey;
            }

            if (forceRerun !== undefined) {
                localVarQueryParameter['force_rerun'] = forceRerun;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SemanticSearchApi - functional programming interface
 * @export
 */
export const SemanticSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SemanticSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Async Cluster Relationships
         * @param {SystemSearchIn} systemSearchIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(systemSearchIn: SystemSearchIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(systemSearchIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Async Semantic Search
         * @param {SystemSearchIn} systemSearchIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async asyncSemanticSearchV1SemanticSearchClusterPost(systemSearchIn: SystemSearchIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.asyncSemanticSearchV1SemanticSearchClusterPost(systemSearchIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Fetch Cluster Response
         * @param {string} runId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(runId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterOutStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(runId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get semantic search.  Values from semantic search. Logs freemium usage on success
         * @summary Fetch Synthesis
         * @param {string} cacheKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSynthesisV1SemanticSearchFetchGet(cacheKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SynthesisOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSynthesisV1SemanticSearchFetchGet(cacheKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
         * @summary Get Semantic Search Usage
         * @param {string} [dateFrom] 
         * @param {Metrics} [metric] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSemanticSearchUsageV1SemanticSearchUsageGet(dateFrom?: string, metric?: Metrics, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMetricUsageOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSemanticSearchUsageV1SemanticSearchUsageGet(dateFrom, metric, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get semantic search findings.  Values from semantic search.
         * @summary Get System Search Findings Data
         * @param {SystemSearchIn} systemSearchIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemSearchFindingsDataV1SemanticSearchDataPost(systemSearchIn: SystemSearchIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSearchData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemSearchFindingsDataV1SemanticSearchDataPost(systemSearchIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Regenerate Synthesis
         * @param {string} cacheKey 
         * @param {boolean} [forceRerun] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regenerateSynthesisV1SemanticSearchRegeneratePost(cacheKey: string, forceRerun?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regenerateSynthesisV1SemanticSearchRegeneratePost(cacheKey, forceRerun, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SemanticSearchApi - factory interface
 * @export
 */
export const SemanticSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SemanticSearchApiFp(configuration)
    return {
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Async Cluster Relationships
         * @param {SystemSearchIn} systemSearchIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(systemSearchIn: SystemSearchIn, options?: any): AxiosPromise<any> {
            return localVarFp.asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(systemSearchIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Async Semantic Search
         * @param {SystemSearchIn} systemSearchIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asyncSemanticSearchV1SemanticSearchClusterPost(systemSearchIn: SystemSearchIn, options?: any): AxiosPromise<ClusterOut> {
            return localVarFp.asyncSemanticSearchV1SemanticSearchClusterPost(systemSearchIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Fetch Cluster Response
         * @param {string} runId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(runId: string, options?: any): AxiosPromise<ClusterOutStatus> {
            return localVarFp.fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(runId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search.  Values from semantic search. Logs freemium usage on success
         * @summary Fetch Synthesis
         * @param {string} cacheKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSynthesisV1SemanticSearchFetchGet(cacheKey: string, options?: any): AxiosPromise<SynthesisOut> {
            return localVarFp.fetchSynthesisV1SemanticSearchFetchGet(cacheKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
         * @summary Get Semantic Search Usage
         * @param {string} [dateFrom] 
         * @param {Metrics} [metric] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticSearchUsageV1SemanticSearchUsageGet(dateFrom?: string, metric?: Metrics, options?: any): AxiosPromise<UserMetricUsageOut> {
            return localVarFp.getSemanticSearchUsageV1SemanticSearchUsageGet(dateFrom, metric, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search findings.  Values from semantic search.
         * @summary Get System Search Findings Data
         * @param {SystemSearchIn} systemSearchIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSearchFindingsDataV1SemanticSearchDataPost(systemSearchIn: SystemSearchIn, options?: any): AxiosPromise<SystemSearchData> {
            return localVarFp.getSystemSearchFindingsDataV1SemanticSearchDataPost(systemSearchIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Regenerate Synthesis
         * @param {string} cacheKey 
         * @param {boolean} [forceRerun] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regenerateSynthesisV1SemanticSearchRegeneratePost(cacheKey: string, forceRerun?: boolean, options?: any): AxiosPromise<any> {
            return localVarFp.regenerateSynthesisV1SemanticSearchRegeneratePost(cacheKey, forceRerun, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest
 */
export interface SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest {
    /**
     * 
     * @type {SystemSearchIn}
     * @memberof SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPost
     */
    readonly systemSearchIn: SystemSearchIn
}

/**
 * Request parameters for asyncSemanticSearchV1SemanticSearchClusterPost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest
 */
export interface SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest {
    /**
     * 
     * @type {SystemSearchIn}
     * @memberof SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPost
     */
    readonly systemSearchIn: SystemSearchIn
}

/**
 * Request parameters for fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest
 */
export interface SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet
     */
    readonly runId: string
}

/**
 * Request parameters for fetchSynthesisV1SemanticSearchFetchGet operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest
 */
export interface SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGet
     */
    readonly cacheKey: string
}

/**
 * Request parameters for getSemanticSearchUsageV1SemanticSearchUsageGet operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest
 */
export interface SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGet
     */
    readonly dateFrom?: string

    /**
     * 
     * @type {Metrics}
     * @memberof SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGet
     */
    readonly metric?: Metrics
}

/**
 * Request parameters for getSystemSearchFindingsDataV1SemanticSearchDataPost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest
 */
export interface SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest {
    /**
     * 
     * @type {SystemSearchIn}
     * @memberof SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPost
     */
    readonly systemSearchIn: SystemSearchIn
}

/**
 * Request parameters for regenerateSynthesisV1SemanticSearchRegeneratePost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest
 */
export interface SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest {
    /**
     * 
     * @type {string}
     * @memberof SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePost
     */
    readonly cacheKey: string

    /**
     * 
     * @type {boolean}
     * @memberof SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePost
     */
    readonly forceRerun?: boolean
}

/**
 * SemanticSearchApi - object-oriented interface
 * @export
 * @class SemanticSearchApi
 * @extends {BaseAPI}
 */
export class SemanticSearchApi extends BaseAPI {
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Cluster Relationships
     * @param {SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    public asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(requestParameters: SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest, options?: AxiosRequestConfig) {
        return SemanticSearchApiFp(this.configuration).asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(requestParameters.systemSearchIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Semantic Search
     * @param {SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    public asyncSemanticSearchV1SemanticSearchClusterPost(requestParameters: SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest, options?: AxiosRequestConfig) {
        return SemanticSearchApiFp(this.configuration).asyncSemanticSearchV1SemanticSearchClusterPost(requestParameters.systemSearchIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get semantic search.  Values from semantic search.
     * @summary Fetch Cluster Response
     * @param {SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    public fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(requestParameters: SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest, options?: AxiosRequestConfig) {
        return SemanticSearchApiFp(this.configuration).fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(requestParameters.runId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get semantic search.  Values from semantic search. Logs freemium usage on success
     * @summary Fetch Synthesis
     * @param {SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    public fetchSynthesisV1SemanticSearchFetchGet(requestParameters: SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest, options?: AxiosRequestConfig) {
        return SemanticSearchApiFp(this.configuration).fetchSynthesisV1SemanticSearchFetchGet(requestParameters.cacheKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
     * @summary Get Semantic Search Usage
     * @param {SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    public getSemanticSearchUsageV1SemanticSearchUsageGet(requestParameters: SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest = {}, options?: AxiosRequestConfig) {
        return SemanticSearchApiFp(this.configuration).getSemanticSearchUsageV1SemanticSearchUsageGet(requestParameters.dateFrom, requestParameters.metric, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get semantic search findings.  Values from semantic search.
     * @summary Get System Search Findings Data
     * @param {SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    public getSystemSearchFindingsDataV1SemanticSearchDataPost(requestParameters: SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest, options?: AxiosRequestConfig) {
        return SemanticSearchApiFp(this.configuration).getSystemSearchFindingsDataV1SemanticSearchDataPost(requestParameters.systemSearchIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get semantic search.  Values from semantic search.
     * @summary Regenerate Synthesis
     * @param {SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    public regenerateSynthesisV1SemanticSearchRegeneratePost(requestParameters: SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest, options?: AxiosRequestConfig) {
        return SemanticSearchApiFp(this.configuration).regenerateSynthesisV1SemanticSearchRegeneratePost(requestParameters.cacheKey, requestParameters.forceRerun, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SsoApi - axios parameter creator
 * @export
 */
export const SsoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Identity Provider name for given email domain.
         * @summary Get Identity Provider Name
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProviderNameV1IdpNameEmailGet: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getIdentityProviderNameV1IdpNameEmailGet', 'email', email)
            const localVarPath = `/v1/idp_name/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SsoApi - functional programming interface
 * @export
 */
export const SsoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SsoApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Identity Provider name for given email domain.
         * @summary Get Identity Provider Name
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdentityProviderNameV1IdpNameEmailGet(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityProviderNameOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdentityProviderNameV1IdpNameEmailGet(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SsoApi - factory interface
 * @export
 */
export const SsoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SsoApiFp(configuration)
    return {
        /**
         * Get Identity Provider name for given email domain.
         * @summary Get Identity Provider Name
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProviderNameV1IdpNameEmailGet(email: string, options?: any): AxiosPromise<IdentityProviderNameOut> {
            return localVarFp.getIdentityProviderNameV1IdpNameEmailGet(email, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getIdentityProviderNameV1IdpNameEmailGet operation in SsoApi.
 * @export
 * @interface SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest
 */
export interface SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SsoApiGetIdentityProviderNameV1IdpNameEmailGet
     */
    readonly email: string
}

/**
 * SsoApi - object-oriented interface
 * @export
 * @class SsoApi
 * @extends {BaseAPI}
 */
export class SsoApi extends BaseAPI {
    /**
     * Get Identity Provider name for given email domain.
     * @summary Get Identity Provider Name
     * @param {SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsoApi
     */
    public getIdentityProviderNameV1IdpNameEmailGet(requestParameters: SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest, options?: AxiosRequestConfig) {
        return SsoApiFp(this.configuration).getIdentityProviderNameV1IdpNameEmailGet(requestParameters.email, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StripeApi - axios parameter creator
 * @export
 */
export const StripeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add subscription seats.
         * @summary Add Subscription Seats
         * @param {string} subscriptionId 
         * @param {AddSubscriptionSeatIn} addSubscriptionSeatIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost: async (subscriptionId: string, addSubscriptionSeatIn: AddSubscriptionSeatIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost', 'subscriptionId', subscriptionId)
            // verify required parameter 'addSubscriptionSeatIn' is not null or undefined
            assertParamExists('addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost', 'addSubscriptionSeatIn', addSubscriptionSeatIn)
            const localVarPath = `/v1/stripe/subscriptions/{subscription_id}/seats`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addSubscriptionSeatIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get subscription seats.
         * @summary Get Subscription Seats
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet: async (subscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet', 'subscriptionId', subscriptionId)
            const localVarPath = `/v1/stripe/subscriptions/{subscription_id}/seats`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start stripe checkout session.
         * @summary Manage Subscription
         * @param {string} [domainCallback] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageSubscriptionV1StripeSubscriptionManagePost: async (domainCallback?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/stripe/subscription-manage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (domainCallback !== undefined) {
                localVarQueryParameter['domain_callback'] = domainCallback;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove subscription seat.
         * @summary Remove Subscription Seat
         * @param {string} email 
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete: async (email: string, subscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete', 'email', email)
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete', 'subscriptionId', subscriptionId)
            const localVarPath = `/v1/stripe/subscriptions/{subscription_id}/seats/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)))
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StripeApi - functional programming interface
 * @export
 */
export const StripeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StripeApiAxiosParamCreator(configuration)
    return {
        /**
         * Add subscription seats.
         * @summary Add Subscription Seats
         * @param {string} subscriptionId 
         * @param {AddSubscriptionSeatIn} addSubscriptionSeatIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(subscriptionId: string, addSubscriptionSeatIn: AddSubscriptionSeatIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(subscriptionId, addSubscriptionSeatIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get subscription seats.
         * @summary Get Subscription Seats
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(subscriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionSeats>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Start stripe checkout session.
         * @summary Manage Subscription
         * @param {string} [domainCallback] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageSubscriptionV1StripeSubscriptionManagePost(domainCallback?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeSessionOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageSubscriptionV1StripeSubscriptionManagePost(domainCallback, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove subscription seat.
         * @summary Remove Subscription Seat
         * @param {string} email 
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(email: string, subscriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(email, subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StripeApi - factory interface
 * @export
 */
export const StripeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StripeApiFp(configuration)
    return {
        /**
         * Add subscription seats.
         * @summary Add Subscription Seats
         * @param {string} subscriptionId 
         * @param {AddSubscriptionSeatIn} addSubscriptionSeatIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(subscriptionId: string, addSubscriptionSeatIn: AddSubscriptionSeatIn, options?: any): AxiosPromise<boolean> {
            return localVarFp.addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(subscriptionId, addSubscriptionSeatIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get subscription seats.
         * @summary Get Subscription Seats
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(subscriptionId: string, options?: any): AxiosPromise<SubscriptionSeats> {
            return localVarFp.getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Start stripe checkout session.
         * @summary Manage Subscription
         * @param {string} [domainCallback] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageSubscriptionV1StripeSubscriptionManagePost(domainCallback?: string, options?: any): AxiosPromise<StripeSessionOut> {
            return localVarFp.manageSubscriptionV1StripeSubscriptionManagePost(domainCallback, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove subscription seat.
         * @summary Remove Subscription Seat
         * @param {string} email 
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(email: string, subscriptionId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(email, subscriptionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost operation in StripeApi.
 * @export
 * @interface StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest
 */
export interface StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost
     */
    readonly subscriptionId: string

    /**
     * 
     * @type {AddSubscriptionSeatIn}
     * @memberof StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost
     */
    readonly addSubscriptionSeatIn: AddSubscriptionSeatIn
}

/**
 * Request parameters for getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet operation in StripeApi.
 * @export
 * @interface StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest
 */
export interface StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet
     */
    readonly subscriptionId: string
}

/**
 * Request parameters for manageSubscriptionV1StripeSubscriptionManagePost operation in StripeApi.
 * @export
 * @interface StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest
 */
export interface StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest {
    /**
     * 
     * @type {string}
     * @memberof StripeApiManageSubscriptionV1StripeSubscriptionManagePost
     */
    readonly domainCallback?: string
}

/**
 * Request parameters for removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete operation in StripeApi.
 * @export
 * @interface StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest
 */
export interface StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete
     */
    readonly email: string

    /**
     * 
     * @type {string}
     * @memberof StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete
     */
    readonly subscriptionId: string
}

/**
 * StripeApi - object-oriented interface
 * @export
 * @class StripeApi
 * @extends {BaseAPI}
 */
export class StripeApi extends BaseAPI {
    /**
     * Add subscription seats.
     * @summary Add Subscription Seats
     * @param {StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(requestParameters: StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest, options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(requestParameters.subscriptionId, requestParameters.addSubscriptionSeatIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get subscription seats.
     * @summary Get Subscription Seats
     * @param {StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(requestParameters: StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest, options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start stripe checkout session.
     * @summary Manage Subscription
     * @param {StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public manageSubscriptionV1StripeSubscriptionManagePost(requestParameters: StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest = {}, options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).manageSubscriptionV1StripeSubscriptionManagePost(requestParameters.domainCallback, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove subscription seat.
     * @summary Remove Subscription Seat
     * @param {StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(requestParameters: StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest, options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(requestParameters.email, requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudiesApi - axios parameter creator
 * @export
 */
export const StudiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet: async (studyId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('getStudyV1StudiesStudyIdGet', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet: async (studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsV1StudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet: async (studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAuthorsV1StudiesStudyIdAuthorsGet', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}/authors`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet: async (studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listModelsInStudyV1StudiesStudyIdModelsGet', 'studyId', studyId)
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }

            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserStudiesV1UsersUserIdStudiesGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudiesApi - functional programming interface
 * @export
 */
export const StudiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudyV1StudiesStudyIdGet(studyId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudyV1StudiesStudyIdGet(studyId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1StudiesStudyIdAssociationsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserStudiesV1UserStudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthorsV1StudiesStudyIdAuthorsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsInStudyV1StudiesStudyIdModelsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStudiesV1StudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserStudiesV1UsersUserIdStudiesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudiesApi - factory interface
 * @export
 */
export const StudiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudiesApiFp(configuration)
    return {
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet(studyId: string, teamId?: string, options?: any): AxiosPromise<StudyOut> {
            return localVarFp.getStudyV1StudiesStudyIdGet(studyId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AuthorSortEnum, ordering?: Ordering, sortBy?: string, teamId?: string, options?: any): AxiosPromise<AuthorPaginationOut> {
            return localVarFp.listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, variableRelationship?: string, featureRelationship?: string, teamId?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getStudyV1StudiesStudyIdGet operation in StudiesApi.
 * @export
 * @interface StudiesApiGetStudyV1StudiesStudyIdGetRequest
 */
export interface StudiesApiGetStudyV1StudiesStudyIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiGetStudyV1StudiesStudyIdGet
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiGetStudyV1StudiesStudyIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAssociationsV1StudiesStudyIdAssociationsGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest
 */
export interface StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof StudiesApiListAssociationsV1StudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserStudiesV1UserStudiesGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest
 */
export interface StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthorsV1StudiesStudyIdAuthorsGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest
 */
export interface StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AuthorSortEnum}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly orderBy?: AuthorSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly sortBy?: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListAuthorsV1StudiesStudyIdAuthorsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listModelsInStudyV1StudiesStudyIdModelsGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest
 */
export interface StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly studyId: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof StudiesApiListModelsInStudyV1StudiesStudyIdModelsGet
     */
    readonly containsVariableId?: string
}

/**
 * Request parameters for listStudiesV1StudiesGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListStudiesV1StudiesGetRequest
 */
export interface StudiesApiListStudiesV1StudiesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly conceptTag?: string

    /**
     * Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly variableRelationship?: string

    /**
     * Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly featureRelationship?: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListStudiesV1StudiesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserStudiesV1UsersUserIdStudiesGet operation in StudiesApi.
 * @export
 * @interface StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest
 */
export interface StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof StudiesApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly teamId?: string
}

/**
 * StudiesApi - object-oriented interface
 * @export
 * @class StudiesApi
 * @extends {BaseAPI}
 */
export class StudiesApi extends BaseAPI {
    /**
     * Get Study.
     * @summary Get Study
     * @param {StudiesApiGetStudyV1StudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public getStudyV1StudiesStudyIdGet(requestParameters: StudiesApiGetStudyV1StudiesStudyIdGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).getStudyV1StudiesStudyIdGet(requestParameters.studyId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters: StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters: StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest = {}, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listAuthorsV1StudiesStudyIdAuthorsGet(requestParameters: StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listAuthorsV1StudiesStudyIdAuthorsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters: StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Studies.
     * @summary List Studies
     * @param {StudiesApiListStudiesV1StudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listStudiesV1StudiesGet(requestParameters: StudiesApiListStudiesV1StudiesGetRequest = {}, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listStudiesV1StudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    public listUserStudiesV1UsersUserIdStudiesGet(requestParameters: StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest, options?: AxiosRequestConfig) {
        return StudiesApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudyMetadataApi - axios parameter creator
 * @export
 */
export const StudyMetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get study metadata from OpenAlex and DynamoDB via pmids.
         * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
         * @param {StudyMetadataIn} studyMetadataIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost: async (studyMetadataIn: StudyMetadataIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyMetadataIn' is not null or undefined
            assertParamExists('getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost', 'studyMetadataIn', studyMetadataIn)
            const localVarPath = `/v1/study-metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyMetadataIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudyMetadataApi - functional programming interface
 * @export
 */
export const StudyMetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudyMetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * Get study metadata from OpenAlex and DynamoDB via pmids.
         * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
         * @param {StudyMetadataIn} studyMetadataIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(studyMetadataIn: StudyMetadataIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyMetadataOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(studyMetadataIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudyMetadataApi - factory interface
 * @export
 */
export const StudyMetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudyMetadataApiFp(configuration)
    return {
        /**
         * Get study metadata from OpenAlex and DynamoDB via pmids.
         * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
         * @param {StudyMetadataIn} studyMetadataIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(studyMetadataIn: StudyMetadataIn, options?: any): AxiosPromise<StudyMetadataOut> {
            return localVarFp.getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(studyMetadataIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost operation in StudyMetadataApi.
 * @export
 * @interface StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest
 */
export interface StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest {
    /**
     * 
     * @type {StudyMetadataIn}
     * @memberof StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost
     */
    readonly studyMetadataIn: StudyMetadataIn
}

/**
 * StudyMetadataApi - object-oriented interface
 * @export
 * @class StudyMetadataApi
 * @extends {BaseAPI}
 */
export class StudyMetadataApi extends BaseAPI {
    /**
     * Get study metadata from OpenAlex and DynamoDB via pmids.
     * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
     * @param {StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyMetadataApi
     */
    public getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(requestParameters: StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest, options?: AxiosRequestConfig) {
        return StudyMetadataApiFp(this.configuration).getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(requestParameters.studyMetadataIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SystemGraphApi - axios parameter creator
 * @export
 */
export const SystemGraphApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system graph from the database.
         * @summary Get One Degree From Topic
         * @param {string} topicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet: async (topicId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicId' is not null or undefined
            assertParamExists('getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet', 'topicId', topicId)
            const localVarPath = `/v1/system_graph/topic/{topic_id}/one_degree`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph Endpoint
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphEndpointV1SystemGraphSemanticGraphGet: async (topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/system_graph/semantic_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (topic1 !== undefined) {
                localVarQueryParameter['topic_1'] = topic1;
            }

            if (topic2 !== undefined) {
                localVarQueryParameter['topic_2'] = topic2;
            }

            if (ids1) {
                localVarQueryParameter['ids_1'] = ids1;
            }

            if (ids2) {
                localVarQueryParameter['ids_2'] = ids2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph Endpoint
         * @param {string} [topicName] Topic name
         * @param {Array<string>} [topicIds] Topic ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet: async (topicName?: string, topicIds?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/system_graph/semantic_topic_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (topicName !== undefined) {
                localVarQueryParameter['topic_name'] = topicName;
            }

            if (topicIds) {
                localVarQueryParameter['topic_ids'] = topicIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system graph from the database.
         * @summary Get System Graph Endpoint
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemGraphEndpointV1SystemGraphSystemGraphGet: async (numRelationships?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/system_graph/system_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (numRelationships !== undefined) {
                localVarQueryParameter['num_relationships'] = numRelationships;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch semantic graph.
         * @summary Get Topological Categories Endpoint
         * @param {string} topic1 Topic 1
         * @param {Array<string>} ids1 Topic 1 ids
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [pageSize] Page size
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet: async (topic1: string, ids1: Array<string>, topic2?: string, ids2?: Array<string>, pageSize?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topic1' is not null or undefined
            assertParamExists('getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet', 'topic1', topic1)
            // verify required parameter 'ids1' is not null or undefined
            assertParamExists('getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet', 'ids1', ids1)
            const localVarPath = `/v1/system_graph/topological_categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (topic1 !== undefined) {
                localVarQueryParameter['topic_1'] = topic1;
            }

            if (topic2 !== undefined) {
                localVarQueryParameter['topic_2'] = topic2;
            }

            if (ids1) {
                localVarQueryParameter['ids_1'] = ids1;
            }

            if (ids2) {
                localVarQueryParameter['ids_2'] = ids2;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemGraphApi - functional programming interface
 * @export
 */
export const SystemGraphApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemGraphApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system graph from the database.
         * @summary Get One Degree From Topic
         * @param {string} topicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(topicId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptRelationshipsOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(topicId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph Endpoint
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGraphApiClientModelsGraphDataGraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(topic1, topic2, ids1, ids2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph Endpoint
         * @param {string} [topicName] Topic name
         * @param {Array<string>} [topicIds] Topic ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(topicName?: string, topicIds?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGraphApiClientModelsGraphDataGraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(topicName, topicIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get system graph from the database.
         * @summary Get System Graph Endpoint
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemGraphEndpointV1SystemGraphSystemGraphGet(numRelationships?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGraphApiClientModelsGraphDataGraphData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemGraphEndpointV1SystemGraphSystemGraphGet(numRelationships, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch semantic graph.
         * @summary Get Topological Categories Endpoint
         * @param {string} topic1 Topic 1
         * @param {Array<string>} ids1 Topic 1 ids
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [pageSize] Page size
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(topic1: string, ids1: Array<string>, topic2?: string, ids2?: Array<string>, pageSize?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicCategories>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(topic1, ids1, topic2, ids2, pageSize, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemGraphApi - factory interface
 * @export
 */
export const SystemGraphApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemGraphApiFp(configuration)
    return {
        /**
         * Get system graph from the database.
         * @summary Get One Degree From Topic
         * @param {string} topicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(topicId: string, options?: any): AxiosPromise<ConceptRelationshipsOut> {
            return localVarFp.getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(topicId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph Endpoint
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, options?: any): AxiosPromise<SystemGraphApiClientModelsGraphDataGraphData> {
            return localVarFp.getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(topic1, topic2, ids1, ids2, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph Endpoint
         * @param {string} [topicName] Topic name
         * @param {Array<string>} [topicIds] Topic ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(topicName?: string, topicIds?: Array<string>, options?: any): AxiosPromise<SystemGraphApiClientModelsGraphDataGraphData> {
            return localVarFp.getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(topicName, topicIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system graph from the database.
         * @summary Get System Graph Endpoint
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemGraphEndpointV1SystemGraphSystemGraphGet(numRelationships?: number, options?: any): AxiosPromise<SystemGraphApiClientModelsGraphDataGraphData> {
            return localVarFp.getSystemGraphEndpointV1SystemGraphSystemGraphGet(numRelationships, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch semantic graph.
         * @summary Get Topological Categories Endpoint
         * @param {string} topic1 Topic 1
         * @param {Array<string>} ids1 Topic 1 ids
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [pageSize] Page size
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(topic1: string, ids1: Array<string>, topic2?: string, ids2?: Array<string>, pageSize?: number, offset?: number, options?: any): AxiosPromise<TopicCategories> {
            return localVarFp.getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(topic1, ids1, topic2, ids2, pageSize, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest
 */
export interface SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet
     */
    readonly topicId: string
}

/**
 * Request parameters for getSemanticGraphEndpointV1SystemGraphSemanticGraphGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest
 */
export interface SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest {
    /**
     * Topic 1
     * @type {string}
     * @memberof SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGet
     */
    readonly topic1?: string

    /**
     * Topic 2
     * @type {string}
     * @memberof SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGet
     */
    readonly topic2?: string

    /**
     * Topic 1 ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGet
     */
    readonly ids1?: Array<string>

    /**
     * Topic 2 ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGet
     */
    readonly ids2?: Array<string>
}

/**
 * Request parameters for getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest
 */
export interface SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest {
    /**
     * Topic name
     * @type {string}
     * @memberof SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet
     */
    readonly topicName?: string

    /**
     * Topic ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet
     */
    readonly topicIds?: Array<string>
}

/**
 * Request parameters for getSystemGraphEndpointV1SystemGraphSystemGraphGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest
 */
export interface SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest {
    /**
     * Number of relationships to return.
     * @type {number}
     * @memberof SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGet
     */
    readonly numRelationships?: number
}

/**
 * Request parameters for getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest
 */
export interface SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest {
    /**
     * Topic 1
     * @type {string}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly topic1: string

    /**
     * Topic 1 ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly ids1: Array<string>

    /**
     * Topic 2
     * @type {string}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly topic2?: string

    /**
     * Topic 2 ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly ids2?: Array<string>

    /**
     * Page size
     * @type {number}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly pageSize?: number

    /**
     * Offset
     * @type {number}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly offset?: number
}

/**
 * SystemGraphApi - object-oriented interface
 * @export
 * @class SystemGraphApi
 * @extends {BaseAPI}
 */
export class SystemGraphApi extends BaseAPI {
    /**
     * Get system graph from the database.
     * @summary Get One Degree From Topic
     * @param {SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    public getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(requestParameters: SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest, options?: AxiosRequestConfig) {
        return SystemGraphApiFp(this.configuration).getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(requestParameters.topicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph Endpoint
     * @param {SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    public getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(requestParameters: SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest = {}, options?: AxiosRequestConfig) {
        return SystemGraphApiFp(this.configuration).getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(requestParameters.topic1, requestParameters.topic2, requestParameters.ids1, requestParameters.ids2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph Endpoint
     * @param {SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    public getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(requestParameters: SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest = {}, options?: AxiosRequestConfig) {
        return SystemGraphApiFp(this.configuration).getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(requestParameters.topicName, requestParameters.topicIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system graph from the database.
     * @summary Get System Graph Endpoint
     * @param {SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    public getSystemGraphEndpointV1SystemGraphSystemGraphGet(requestParameters: SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest = {}, options?: AxiosRequestConfig) {
        return SystemGraphApiFp(this.configuration).getSystemGraphEndpointV1SystemGraphSystemGraphGet(requestParameters.numRelationships, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch semantic graph.
     * @summary Get Topological Categories Endpoint
     * @param {SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    public getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(requestParameters: SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest, options?: AxiosRequestConfig) {
        return SystemGraphApiFp(this.configuration).getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(requestParameters.topic1, requestParameters.ids1, requestParameters.topic2, requestParameters.ids2, requestParameters.pageSize, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1UsersPost: async (userId: string, updateProfileIn: UpdateProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createAUserByCognitoIdV1UsersPost', 'userId', userId)
            // verify required parameter 'updateProfileIn' is not null or undefined
            assertParamExists('createAUserByCognitoIdV1UsersPost', 'updateProfileIn', updateProfileIn)
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1UserPost: async (userProfileIn: UserProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userProfileIn' is not null or undefined
            assertParamExists('createAUserFromCredentialsV1UserPost', 'userProfileIn', userProfileIn)
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet: async (includeAvatar?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet: async (userId: string, includeAvatar?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserV1UsersUserIdGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId] 
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UsersGet: async (teamId?: string, email?: string, includeAvatar?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet: async (studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet', 'studyId', studyId)
            const localVarPath = `/v1/user/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserConceptsV1UsersUserIdConceptsGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserDatasetsV1UsersUserIdDatasetsGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserFeaturesV1UsersUserIdFeaturesGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserModelsV1UsersUserIdModelsGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserStudiesV1UsersUserIdStudiesGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }

            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserVariablesV1UsersUserIdVariablesGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1UsersUserIdPatch: async (userId: string, updateProfileIn: UpdateProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateAUserByIdV1UsersUserIdPatch', 'userId', userId)
            // verify required parameter 'updateProfileIn' is not null or undefined
            assertParamExists('updateAUserByIdV1UsersUserIdPatch', 'updateProfileIn', updateProfileIn)
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut: async (userProfileIn: UserProfileIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userProfileIn' is not null or undefined
            assertParamExists('updateAuthenticatedUserProfileV1UserPut', 'userProfileIn', userProfileIn)
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAUserByCognitoIdV1UsersPost(userId: string, updateProfileIn: UpdateProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAUserByCognitoIdV1UsersPost(userId, updateProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAUserFromCredentialsV1UserPost(userProfileIn: UserProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAUserFromCredentialsV1UserPost(userProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatedUserV1UserGet(includeAvatar?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedUserV1UserGet(includeAvatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserV1UsersUserIdGet(userId: string, includeAvatar?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPublicProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserV1UsersUserIdGet(userId, includeAvatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId] 
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersV1UsersGet(teamId?: string, email?: string, includeAvatar?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserPublicProfileOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersV1UsersGet(teamId, email, includeAvatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserConceptsV1UserConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserDatasetsV1UserDatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserFeaturesV1UserFeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserModelsV1UserModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserStudiesV1UserStudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserVariablesV1UserVariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserConceptsV1UsersUserIdConceptsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserDatasetsV1UsersUserIdDatasetsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserFeaturesV1UsersUserIdFeaturesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserModelsV1UsersUserIdModelsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserStudiesV1UsersUserIdStudiesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserVariablesV1UsersUserIdVariablesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAUserByIdV1UsersUserIdPatch(userId: string, updateProfileIn: UpdateProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAUserByIdV1UsersUserIdPatch(userId, updateProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthenticatedUserProfileV1UserPut(userProfileIn: UserProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthenticatedUserProfileV1UserPut(userProfileIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1UsersPost(userId: string, updateProfileIn: UpdateProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.createAUserByCognitoIdV1UsersPost(userId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1UserPost(userProfileIn: UserProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.createAUserFromCredentialsV1UserPost(userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet(includeAvatar?: boolean, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.getAuthenticatedUserV1UserGet(includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId 
         * @param {boolean} [includeAvatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet(userId: string, includeAvatar?: boolean, options?: any): AxiosPromise<UserPublicProfileOut> {
            return localVarFp.getUserV1UsersUserIdGet(userId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId] 
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UsersGet(teamId?: string, email?: string, includeAvatar?: boolean, options?: any): AxiosPromise<Array<UserPublicProfileOut>> {
            return localVarFp.getUsersV1UsersGet(teamId, email, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, teamId?: string, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, teamId?: string, options?: any): AxiosPromise<ConceptPaginationOut> {
            return localVarFp.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DatasetSortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<DatasetPaginationOut> {
            return localVarFp.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: FeatureSortEnum, ordering?: Ordering, sortBy?: string, inFeatureGraph?: boolean, teamId?: string, options?: any): AxiosPromise<FeaturePaginationOut> {
            return localVarFp.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ModelSortEnum, ordering?: Ordering, sortBy?: string, containsVariableId?: string, teamId?: string, options?: any): AxiosPromise<ModelPaginationOut> {
            return localVarFp.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: StudySortEnum, ordering?: Ordering, sortBy?: string, variableTag?: string, conceptTag?: string, teamId?: string, options?: any): AxiosPromise<StudyPaginationOut> {
            return localVarFp.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId 
         * @param {UpdateProfileIn} updateProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1UsersUserIdPatch(userId: string, updateProfileIn: UpdateProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.updateAUserByIdV1UsersUserIdPatch(userId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut(userProfileIn: UserProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut> {
            return localVarFp.updateAuthenticatedUserProfileV1UserPut(userProfileIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAUserByCognitoIdV1UsersPost operation in UsersApi.
 * @export
 * @interface UsersApiCreateAUserByCognitoIdV1UsersPostRequest
 */
export interface UsersApiCreateAUserByCognitoIdV1UsersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiCreateAUserByCognitoIdV1UsersPost
     */
    readonly userId: string

    /**
     * 
     * @type {UpdateProfileIn}
     * @memberof UsersApiCreateAUserByCognitoIdV1UsersPost
     */
    readonly updateProfileIn: UpdateProfileIn
}

/**
 * Request parameters for createAUserFromCredentialsV1UserPost operation in UsersApi.
 * @export
 * @interface UsersApiCreateAUserFromCredentialsV1UserPostRequest
 */
export interface UsersApiCreateAUserFromCredentialsV1UserPostRequest {
    /**
     * 
     * @type {UserProfileIn}
     * @memberof UsersApiCreateAUserFromCredentialsV1UserPost
     */
    readonly userProfileIn: UserProfileIn
}

/**
 * Request parameters for getAuthenticatedUserV1UserGet operation in UsersApi.
 * @export
 * @interface UsersApiGetAuthenticatedUserV1UserGetRequest
 */
export interface UsersApiGetAuthenticatedUserV1UserGetRequest {
    /**
     * Include the user\&#39;s avatar.
     * @type {boolean}
     * @memberof UsersApiGetAuthenticatedUserV1UserGet
     */
    readonly includeAvatar?: boolean
}

/**
 * Request parameters for getUserV1UsersUserIdGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUserV1UsersUserIdGetRequest
 */
export interface UsersApiGetUserV1UsersUserIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUserV1UsersUserIdGet
     */
    readonly userId: string

    /**
     * 
     * @type {boolean}
     * @memberof UsersApiGetUserV1UsersUserIdGet
     */
    readonly includeAvatar?: boolean
}

/**
 * Request parameters for getUsersV1UsersGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUsersV1UsersGetRequest
 */
export interface UsersApiGetUsersV1UsersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUsersV1UsersGet
     */
    readonly teamId?: string

    /**
     * Email address
     * @type {string}
     * @memberof UsersApiGetUsersV1UsersGet
     */
    readonly email?: string

    /**
     * Include avatar
     * @type {boolean}
     * @memberof UsersApiGetUsersV1UsersGet
     */
    readonly includeAvatar?: boolean
}

/**
 * Request parameters for listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest
 */
export interface UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly studyId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthenticatedUserConceptsV1UserConceptsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest
 */
export interface UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly inConceptGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserConceptsV1UserConceptsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthenticatedUserDatasetsV1UserDatasetsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest
 */
export interface UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthenticatedUserFeaturesV1UserFeaturesGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest
 */
export interface UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthenticatedUserModelsV1UserModelsGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest
 */
export interface UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly containsVariableId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserModelsV1UserModelsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthenticatedUserStudiesV1UserStudiesGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest
 */
export interface UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserStudiesV1UserStudiesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAuthenticatedUserVariablesV1UserVariablesGet operation in UsersApi.
 * @export
 * @interface UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest
 */
export interface UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly tags?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof UsersApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserConceptsV1UsersUserIdConceptsGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest
 */
export interface UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly orderBy?: ConceptSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly sortBy?: string

    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly inConceptGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserConceptsV1UsersUserIdConceptsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserDatasetsV1UsersUserIdDatasetsGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest
 */
export interface UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DatasetSortEnum}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly orderBy?: DatasetSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly sortBy?: string

    /**
     * Filter datasets with variable tag
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly variableTag?: string

    /**
     * Filter datasets with concept tag
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserDatasetsV1UsersUserIdDatasetsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserFeaturesV1UsersUserIdFeaturesGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest
 */
export interface UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {FeatureSortEnum}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly orderBy?: FeatureSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly sortBy?: string

    /**
     * Is Feature in the Feature Graph?
     * @type {boolean}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly inFeatureGraph?: boolean

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserFeaturesV1UsersUserIdFeaturesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserModelsV1UsersUserIdModelsGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserModelsV1UsersUserIdModelsGetRequest
 */
export interface UsersApiListUserModelsV1UsersUserIdModelsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {ModelSortEnum}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly orderBy?: ModelSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly sortBy?: string

    /**
     * Filter models containing a variable via an association
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly containsVariableId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserModelsV1UsersUserIdModelsGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserStudiesV1UsersUserIdStudiesGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest
 */
export interface UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {StudySortEnum}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly orderBy?: StudySortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly sortBy?: string

    /**
     * Filter studies with variable tag
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly variableTag?: string

    /**
     * Filter studies with concept tag
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly conceptTag?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserStudiesV1UsersUserIdStudiesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listUserVariablesV1UsersUserIdVariablesGet operation in UsersApi.
 * @export
 * @interface UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest
 */
export interface UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly tags?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for updateAUserByIdV1UsersUserIdPatch operation in UsersApi.
 * @export
 * @interface UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest
 */
export interface UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUpdateAUserByIdV1UsersUserIdPatch
     */
    readonly userId: string

    /**
     * 
     * @type {UpdateProfileIn}
     * @memberof UsersApiUpdateAUserByIdV1UsersUserIdPatch
     */
    readonly updateProfileIn: UpdateProfileIn
}

/**
 * Request parameters for updateAuthenticatedUserProfileV1UserPut operation in UsersApi.
 * @export
 * @interface UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest
 */
export interface UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest {
    /**
     * 
     * @type {UserProfileIn}
     * @memberof UsersApiUpdateAuthenticatedUserProfileV1UserPut
     */
    readonly userProfileIn: UserProfileIn
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {UsersApiCreateAUserByCognitoIdV1UsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createAUserByCognitoIdV1UsersPost(requestParameters: UsersApiCreateAUserByCognitoIdV1UsersPostRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createAUserByCognitoIdV1UsersPost(requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UsersApiCreateAUserFromCredentialsV1UserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createAUserFromCredentialsV1UserPost(requestParameters: UsersApiCreateAUserFromCredentialsV1UserPostRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createAUserFromCredentialsV1UserPost(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getAuthenticatedUserV1UserGet(requestParameters: UsersApiGetAuthenticatedUserV1UserGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getAuthenticatedUserV1UserGet(requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1UsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserV1UsersUserIdGet(requestParameters: UsersApiGetUserV1UsersUserIdGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserV1UsersUserIdGet(requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List public profiles.
     * @summary Get Users
     * @param {UsersApiGetUsersV1UsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersV1UsersGet(requestParameters: UsersApiGetUsersV1UsersGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersV1UsersGet(requestParameters.teamId, requestParameters.email, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters: UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters: UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters: UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters: UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserModelsV1UserModelsGet(requestParameters: UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters: UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters: UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserConceptsV1UsersUserIdConceptsGet(requestParameters: UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters: UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters: UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {UsersApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserModelsV1UsersUserIdModelsGet(requestParameters: UsersApiListUserModelsV1UsersUserIdModelsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserStudiesV1UsersUserIdStudiesGet(requestParameters: UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserVariablesV1UsersUserIdVariablesGet(requestParameters: UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateAUserByIdV1UsersUserIdPatch(requestParameters: UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateAUserByIdV1UsersUserIdPatch(requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateAuthenticatedUserProfileV1UserPut(requestParameters: UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateAuthenticatedUserProfileV1UserPut(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VariablesApi - axios parameter creator
 * @export
 */
export const VariablesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet: async (variableId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('getVariableV1VariablesVariableIdGet', 'variableId', variableId)
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: async (variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listAssociationsV1VariablesVariableIdAssociationsGet', 'variableId', variableId)
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }

            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet: async (variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('listDashboardsV1VariablesVariableIdDashboardsGet', 'variableId', variableId)
            const localVarPath = `/v1/variables/{variable_id}/dashboards`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: async (userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserVariablesV1UsersUserIdVariablesGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet: async (query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VariablesApi - functional programming interface
 * @export
 */
export const VariablesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VariablesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariableV1VariablesVariableIdGet(variableId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVariableV1VariablesVariableIdGet(variableId, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociationsV1VariablesVariableIdAssociationsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthenticatedUserVariablesV1UserVariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardsV1VariablesVariableIdDashboardsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardPaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserVariablesV1UsersUserIdVariablesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVariablesV1VariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariablePaginationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VariablesApi - factory interface
 * @export
 */
export const VariablesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VariablesApiFp(configuration)
    return {
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet(variableId: string, teamId?: string, options?: any): AxiosPromise<VariableOut> {
            return localVarFp.getVariableV1VariablesVariableIdGet(variableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: AssociationSortEnum, ordering?: Ordering, sortBy?: string, isInteraction?: boolean, isVariableAssociation?: boolean, options?: any): AxiosPromise<AssociationPaginationOut> {
            return localVarFp.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId 
         * @param {string} [teamId] 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet(variableId: string, teamId?: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: DashboardSortEnum, ordering?: Ordering, sortBy?: string, options?: any): AxiosPromise<DashboardPaginationOut> {
            return localVarFp.listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId 
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId: string, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet(query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: VariableSortEnum, ordering?: Ordering, sortBy?: string, inVariableGraph?: boolean, tags?: Array<string>, teamId?: string, options?: any): AxiosPromise<VariablePaginationOut> {
            return localVarFp.listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getVariableV1VariablesVariableIdGet operation in VariablesApi.
 * @export
 * @interface VariablesApiGetVariableV1VariablesVariableIdGetRequest
 */
export interface VariablesApiGetVariableV1VariablesVariableIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiGetVariableV1VariablesVariableIdGet
     */
    readonly variableId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiGetVariableV1VariablesVariableIdGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listAssociationsV1VariablesVariableIdAssociationsGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest
 */
export interface VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly variableId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {AssociationSortEnum}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly orderBy?: AssociationSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly sortBy?: string

    /**
     * Is association from interaction model?
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly isInteraction?: boolean

    /**
     * Include only variable-variable associations.
     * @type {boolean}
     * @memberof VariablesApiListAssociationsV1VariablesVariableIdAssociationsGet
     */
    readonly isVariableAssociation?: boolean
}

/**
 * Request parameters for listAuthenticatedUserVariablesV1UserVariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest
 */
export interface VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly tags?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListAuthenticatedUserVariablesV1UserVariablesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listDashboardsV1VariablesVariableIdDashboardsGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListDashboardsV1VariablesVariableIdDashboardsGetRequest
 */
export interface VariablesApiListDashboardsV1VariablesVariableIdDashboardsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly variableId: string

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly teamId?: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {DashboardSortEnum}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly orderBy?: DashboardSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListDashboardsV1VariablesVariableIdDashboardsGet
     */
    readonly sortBy?: string
}

/**
 * Request parameters for listUserVariablesV1UsersUserIdVariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest
 */
export interface VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly userId: string

    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly tags?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListUserVariablesV1UsersUserIdVariablesGet
     */
    readonly teamId?: string
}

/**
 * Request parameters for listVariablesV1VariablesGet operation in VariablesApi.
 * @export
 * @interface VariablesApiListVariablesV1VariablesGetRequest
 */
export interface VariablesApiListVariablesV1VariablesGetRequest {
    /**
     * Search query.
     * @type {string}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly query?: string

    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly includeHidden?: boolean

    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly id?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly pageSize?: number

    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly total?: boolean

    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly idsOnly?: boolean

    /**
     * Order by this field.
     * @type {VariableSortEnum}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly orderBy?: VariableSortEnum

    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly ordering?: Ordering

    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly sortBy?: string

    /**
     * Is Variable in the Variable Graph?
     * @type {boolean}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly inVariableGraph?: boolean

    /**
     * Custom metric tags
     * @type {Array<string>}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly tags?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof VariablesApiListVariablesV1VariablesGet
     */
    readonly teamId?: string
}

/**
 * VariablesApi - object-oriented interface
 * @export
 * @class VariablesApi
 * @extends {BaseAPI}
 */
export class VariablesApi extends BaseAPI {
    /**
     * Get Variable.
     * @summary Get Variable
     * @param {VariablesApiGetVariableV1VariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public getVariableV1VariablesVariableIdGet(requestParameters: VariablesApiGetVariableV1VariablesVariableIdGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).getVariableV1VariablesVariableIdGet(requestParameters.variableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters: VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters: VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest = {}, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get dashboards connected to the Variable.
     * @summary List Dashboards
     * @param {VariablesApiListDashboardsV1VariablesVariableIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listDashboardsV1VariablesVariableIdDashboardsGet(requestParameters: VariablesApiListDashboardsV1VariablesVariableIdDashboardsGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listDashboardsV1VariablesVariableIdDashboardsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listUserVariablesV1UsersUserIdVariablesGet(requestParameters: VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Variables.
     * @summary List Variables
     * @param {VariablesApiListVariablesV1VariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    public listVariablesV1VariablesGet(requestParameters: VariablesApiListVariablesV1VariablesGetRequest = {}, options?: AxiosRequestConfig) {
        return VariablesApiFp(this.configuration).listVariablesV1VariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}


